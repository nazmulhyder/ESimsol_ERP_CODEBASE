@{
    ViewBag.Title = "DU Requisition List";
}

@model IEnumerable <ESimSol.BusinessObjects.DURequisition>

<div ng-app="DURequisitionModule">
    <div ng-controller="DURequisitionController">
        <div class="ui-grid-top-panel">
            <div class="form-inline">
                <input class="form-control" ng-model="txtOrderNo" placeholder="Type Order & Press Enter" ng-disabled="disabled" ng-keydown="SearchKeyDownOrder($event)" style="width:140px; height:24px;" required />
                <input class="form-control" ng-model="txtReqNo" placeholder="Type Req No & Press Enter" ng-disabled="disabled" ng-keydown="SearchKeyDownReq($event)" style="width:140px; height:24px;" required />
                <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="AdvanceSearch()" ng-hide="btnAdvSearch"> <span class="glyphicon glyphicon-search" aria-hidden="true"> Adv.Search</span></button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="add()" ng-hide="btnAdd"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> New</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="edit()" ng-hide="btnEdit"> <span class="glyphicon glyphicon-edit" aria-hidden="true"></span> Edit</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="delete()" ng-hide="btnDelete"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Delete</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="view()" ng-hide="btnView"> <span class="glyphicon glyphicon-list-alt" aria-hidden="true"></span>View</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Approve()" ng-hide="btnApprove"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span>Forward</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="UndoApprove()" ng-hide="btnUndoApprove"> <span class="glyphicon glyphicon-circle-arrow-down" aria-hidden="true"></span> Undo Forward</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Issue()" ng-hide="btnIssue"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Issue</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="UndoIssue()" ng-hide="btnUndoIssue"> <span class="glyphicon glyphicon-circle-arrow-down" aria-hidden="true"></span>Undo Issue</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Receive()" ng-hide="btnReceive"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Receive</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PrintPreview()"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Preview</button>
                @*<button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Print_DUPS()"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Print DUPS</button>*@
            </div>
        </div>
        <div class="row" style="margin:2px; padding:0;">
            <div style="width:100%" ui-grid="gridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav class="grid ui-grid-selectable"></div>
        </div>
    </div>
</div>

<style type="text/css">

     .form-control{
        height:26px;
        padding:0px 6px;
        font-size:12px;
    }
    .grid {
        height: 450px;
        width: 100%;
    }

    .custom-pagination {
        margin-top: -15px;
        margin-bottom: -15px;
    }

    .spacing {
        padding-bottom: 5px;
    }
</style>
<script src="~/Views/DURequisition/AdvSearchDURequisition.js"></script>

<script type="text/javascript">

    var pager =[];
    var _nBUID=0;
    var oAuthorizationRolesMapping =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.AuthorizationRolesMapping]));
    _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    var oDURequisitions =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    var oRequisitionTypes =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.RequisitionTypes));
    _nBUID =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BUID));
    _nOptType =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.OptType));

    var oIssueStores =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.IssueStores));
    var oReceiveStores =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.ReceivedStores));

    var oCompareOperators = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.CompareOperators));
    var oOrderTypes = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.DUOrderSetups));

    debugger;
    var  DURequisitionModule = angular.module('DURequisitionModule', ['ngAnimate', 'ui.bootstrap', 'ui.grid','ui.grid.selection', 'ui.grid.cellNav','ui.grid.resizeColumns','ms.service','DURequisition.service']);
    DURequisitionModule.controller('DURequisitionController', function ($scope, $http, $uibModal,$interval,$timeout,  $log, uiGridConstants, msModal, userSession,DURequisitionservice) {
        debugger;
        oDURequisitions= (userSession.getData('DURequisitions').length>0)? userSession.getData('DURequisitions'):oDURequisitions;
        $scope.CompareOperators= oCompareOperators;
        $scope.IssueStores=oIssueStores;
        $scope.ReceiveStores=oReceiveStores;
        $scope.RequisitionTypes=oRequisitionTypes;
        $scope.BUID=_nBUID;
        $scope.OptType=_nOptType;   
        $scope.btnAdd = $scope.btnEdit = $scope.btnDelete = $scope.btnApprove= $scope.btnIssue =$scope.btnReceive = $scope.btnUndoApprove =false;

        $scope.gridOptions ={
            enableSorting: true,
            enableFullRowSelection: true,
            //enableRowHeaderSelection: false,
            enableSelectAll: false,
            multiSelect:false,
            enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,
            columnDefs: [
                {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'RequisitionNo', name: 'Req. No', width: '10%' },
                  //{ field: 'OrderNo', name: 'Order No', width: '13%' },
                { field: 'ReqDateST', name: 'Req. Date', width:'10%', enableCellEdit: false },
                { field: 'RequisitionByName', name: 'Req. By', width: '10%' },
                { field: 'ApprovedByName', name: 'Approve By', width: '10%' },
                { field: 'IssuedByName', name: 'Issue By', width: '10%' },
                { field: 'ReceivedByName', name: 'Revceive By', width: '10%' },
                  { field: 'IssueStore', name: 'Issue Store', width: '10%' },
                { field: 'ReceiveStore', name: 'Recevie Store', width: '10%' },
                { field: 'SetupName', name: 'Type', width: '10%' },
            ],

            data:oDURequisitions,

            onRegisterApi:function(gridApi)
            {
                $scope.gridApi = gridApi;
                $scope.gridApi.selection.clearSelectedRows();
                $scope.gridApi.core.refresh();
                debugger;
                if(oDURequisitions.length>0 && userSession.getRowIndex()>=0)
                {
                    $scope.gridApi.grid.modifyRows(oDURequisitions);
                    $scope.gridApi.selection.selectRow(oDURequisitions[userSession.getRowIndex()]);
                    $scope.RowSelect(oDURequisitions[userSession.getRowIndex()]);
                }
                $scope.gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                    $scope.RowSelect(row.entity ); });
                userSession.clear();
            }

        };
        $scope.RowSelect =  function (entity){
            debugger;

            if(entity.ApprovebyID!=0 && entity.IssuebyID==0){
                $scope.btnApprove=false;
                $scope.btnUndoApprove =true;
                $scope.btnIssue=false;
                $scope.btnUndoIssue=true;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                $scope.btnReceive=true;
                CheckControll();
            }
            else if(entity.ApprovebyID!=0 && entity.IssuebyID!=0 && entity.ReceiveByID==0)
            {
                $scope.btnApprove=true;
                $scope.btnUndoApprove =true;
                $scope.btnIssue=true;
                $scope.btnUndoIssue=false;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                $scope.btnReceive=false;
                CheckControll();
            }
            else if(entity.ApprovebyID!=0 && entity.IssuebyID!=0 && entity.ReceiveByID!=0){
                $scope.btnApprove=true;
                $scope.btnUndoApprove =true;
                $scope.btnIssue=true;
                $scope.btnUndoIssue=true;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                $scope.btnReceive=true;
                CheckControll();
            }
            else if(entity.ApprovebyID==0)
            {
                $scope.btnApprove=false;
                $scope.btnUndoApprove =true;
                $scope.btnIssue=true;
                $scope.btnUndoIssue=true;
                $scope.btnEdit=false;
                $scope.btnDelete=false;
                $scope.btnReceive=true;
                CheckControll();
            }
        }

        $scope.singleFilter=function(renderableRows){

            var matcherName = new RegExp(angular.uppercase($scope.Name));
            var matcherOperationTypeST = new RegExp(angular.uppercase($scope.OperationTypeST));
            renderableRows.forEach( function( row ) {
                debugger;
                var match = false;
                if (angular.uppercase(row.entity['Name']).match(matcherName) && angular.uppercase(row.entity['OperationTypeST']).match(matcherOperationTypeST)){
                    match = true;
                }
                if ( !match ){
                    row.visible = false;
                }
            });
            return renderableRows;
        };


        $scope.GetOrder= function (oDUR)
        {
           
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/DURequisition/GetsDURByNo',$.param(oDUR), config).then(
                        function (response)
                        {
                            var results = jQuery.parseJSON(response.data);
                            $scope.gridOptions.data = results;
                        },
                            function (response) { alert(jQuery.parseJSON(response.data).Message);}
                    );
        };
        $scope.SearchKeyDownOrder = function (e){
            //debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) 
            {
                var txtOrder = $.trim($scope.txtOrderNo);
                if(txtOrder=="" || txtOrder==null)
                {
                    alert("Type Order No and Press Enter");
                    return;
                }
                var oDUR= {
                    ErrorMessage:($scope.txtOrderNo == undefined ? "" : $scope.txtOrderNo),
                    BUID:$scope.BUID
                };

                $scope.GetOrder(oDUR);
            }
            //else if (code == 8) //backspace=8
            //{
            //    //debugger;
            //    $scope.txtOrderNo='';
            //}
        };
        $scope.SearchKeyDownReq = function (e){
            //debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) 
            {
                var txtReqNo = $.trim($scope.txtReqNo);
                if(txtReqNo=="" || txtReqNo==null)
                {
                    alert("Type Requisition No and Press Enter.");
                    return;
                }
                var oDUR= {
                    RequisitionNo:($scope.txtReqNo == undefined ? "" : $scope.txtReqNo)
                };

                $scope.GetOrder(oDUR);
            }
            //else if (code == 8) //backspace=8
            //{
            //    //debugger;
            //    $scope.txtReqNo='';
            //}
        };
        $scope.AdvanceSearch = function ()
        {
            debugger;
            $scope.MRNo ="";
            sessionStorage.setItem("BaseAddress", _sBaseAddress);
            var modalObj={
                modalcontroller:'ModalDURequisitionAdvanceSearchCtrl',
                appcontroller:'DURequisitionController',
                CompareOperators:$scope.CompareOperators,
                RequisitionTypes:$scope.RequisitionTypes,
                IssueStores:$scope.IssueStores,
                ReceiveStores: $scope.ReceiveStores,
                OrderTypes:oOrderTypes
            }
            var modalInstance=DURequisitionservice.Instance(modalObj);
            modalInstance.result.then(function (result)
            {
                debugger;
                $scope.gridOptions.data = result;
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.add = function () {
            sessionStorage.setItem("Operation", "New");
            sessionStorage.removeItem("SelectedRowIndex");
            sessionStorage.setItem("SelectedRowIndex",-1);
            sessionStorage.setItem("DURequisitionHeader", "Add DURequisition");
            sessionStorage.setItem("DURequisitions", JSON.stringify($scope.gridOptions.data));
            sessionStorage.setItem("DURequisition", JSON.stringify([]));
            sessionStorage.setItem("BackLink", window.location.href);

            var tsv=((new Date()).getTime())/1000;
            window.location.href = _sBaseAddress+ "/DURequisition/ViewDURequisition_Open?OptType="+$scope.OptType+"&nId=0&buid="+_nBUID+"&ts="+tsv;
        };
        $scope.edit = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0)
            {
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApprovebyID!=0)
            {
                alert("Please Select 'Initiaziled' Requisition");  return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.DURequisitionID==data[0].DURequisitionID){

                    sessionStorage.setItem("Operation", "Edit");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("DURequisitionHeader", "Edit DURequisition");
                    sessionStorage.setItem("DURequisitions", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("DURequisition", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/DURequisition/ViewDURequisition_Open?OptType="+$scope.OptType+"&nId="+value.DURequisitionID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.view = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.DURequisitionID==data[0].DURequisitionID){
                    sessionStorage.setItem("Operation", "View");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("DURequisitionHeader", "View DURequisition");
                    sessionStorage.setItem("DURequisitions", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("DURequisition", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/DURequisition/ViewDURequisition_Open?OptType="+$scope.OptType+"&nId="+value.DURequisitionID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.delete = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'No item found to delete.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }

            if(data[0].ApprovebyID!=0)
            {
                alert("Please Select 'Initiaziled' Requisition");  return;
            }

            if (!confirm("Confirm to Delete?")) return ;

            $http.post(_sBaseAddress+ '/DURequisition/Delete',JSON.stringify(data[0])).then(
                            function (response) {
                                if(jQuery.parseJSON(response.data)=='Deleted'){
                                    angular.forEach($scope.gridOptions.data,function(value,index){
                                        if(value.DURequisitionID==data[0].DURequisitionID){
                                            $scope.gridOptions.data.splice(index,1);
                                        }
                                    },$scope.gridOptions.data);
                                    alert("Delete Successfully.");
                                }
                                else{
                                    alert(jQuery.parseJSON(response.data));
                                }
                            },
                            function (response) {alert(jQuery.parseJSON(response.data));}
                        );

        };

        $scope.Approve = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApprovebyID!=0)
            {
                alert("Please Select 'Initiaziled' Requisition"); return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.DURequisitionID==data[0].DURequisitionID){
                    sessionStorage.setItem("Operation", "Approve");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("DURequisitionHeader", "Approve DURequisition");
                    sessionStorage.setItem("DURequisitions", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("DURequisition", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/DURequisition/ViewDURequisition_Open?OptType="+$scope.OptType+"&nId="+value.DURequisitionID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.UndoApprove = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApprovebyID==0 || data[0].IssuebyID!=0)
            {
                alert("Requisition Yet Not Approved"); return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.DURequisitionID==data[0].DURequisitionID){
                    sessionStorage.setItem("Operation", "UndoApprove");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("DURequisitionHeader", "UndoApprove DURequisition");
                    sessionStorage.setItem("DURequisitions", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("DURequisition", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/DURequisition/ViewDURequisition_Open?OptType="+$scope.OptType+"&nId="+value.DURequisitionID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.Issue = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApprovebyID==0 && data[0].IssueByID!=0)
            {
                alert("Requisition Yet Not Approved");  return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.DURequisitionID==data[0].DURequisitionID){
                    sessionStorage.setItem("Operation", "Issue");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("DURequisitionHeader", "Request DURequisition");
                    sessionStorage.setItem("DURequisitions", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("DURequisition", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/DURequisition/ViewDURequisition_Open?OptType="+$scope.OptType+"&nId="+value.DURequisitionID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
            $scope.Issue = function () {
                debugger;
                var data=$scope.gridApi.selection.getSelectedRows();
                if(data==null || data.length<=0){
                    msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                    return false;
                }
                if(data[0].ApprovebyID==0 && data[0].IssueByID!=0)
                {
                    alert("Requisition Yet Not Approved");  return;
                }
                angular.forEach($scope.gridOptions.data,function(value,index){
                    if(value.DURequisitionID==data[0].DURequisitionID){
                        sessionStorage.setItem("Operation", "Issue");
                        sessionStorage.setItem("SelectedRowIndex", index);
                        sessionStorage.setItem("DURequisitionHeader", "Request DURequisition");
                        sessionStorage.setItem("DURequisitions", JSON.stringify($scope.gridOptions.data));
                        sessionStorage.setItem("DURequisition", JSON.stringify($scope.gridOptions.data[index]));
                        sessionStorage.setItem("BackLink", window.location.href);
                        var tsv=((new Date()).getTime())/1000;
                        window.location.href = _sBaseAddress+ "/DURequisition/ViewDURequisition_Open?OptType="+$scope.OptType+"&nId="+value.DURequisitionID+"&buid="+_nBUID+"&ts="+tsv;
                    }
                },$scope.gridOptions.data);
            };
        };
        
        $scope.UndoIssue = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            
            if(data[0].IssuebyID==0)
            {
                alert("Requisition Yet Not Issued!"); return;
            }
            if(data[0].ReceiveByID!=0)
            {
                alert("Requisition Already Received!"); return;
            }

            if (!confirm("Confirm to Undo Issue Operation?")) return ;

            $http.post(_sBaseAddress+ '/DURequisition/UndoIssueDURequisition',JSON.stringify(data[0])).then(
                            function (response) {
                                var result=jQuery.parseJSON(response.data);
                                if(result.DURequisitionID>0)
                                {
                                    debugger;
                                    alert("Requisition Successfully Updated.");
                                    var nIndex= $scope.gridOptions.data.indexOf(data[0]);
                                    $scope.gridOptions.data[nIndex] = result;
                                }
                                else
                                {
                                    alert(result.ErrorMessage);
                                }
                            },
                            function (response) {alert(jQuery.parseJSON(response.data));}
                        );

        };
        $scope.Receive = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApprovebyID==0 || ( data[0].IssuebyID==0) || data[0].ReceiveByID!=0)
            {
                alert("Requisition Yet Not Approved Issued");  return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.DURequisitionID==data[0].DURequisitionID){
                    sessionStorage.setItem("Operation", "Receive");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("DURequisitionHeader", "Request DURequisition");
                    sessionStorage.setItem("DURequisitions", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("DURequisition", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/DURequisition/ViewDURequisition_Open?OptType="+$scope.OptType+"&nId="+value.DURequisitionID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.PrintPreview = function ()
        {
            var data = $scope.gridApi.selection.getSelectedRows();
            var oDURequisition = data[0];
            if(oDURequisition==null || oDURequisition.DURequisitionID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            window.open(_sBaseAddress + '/DURequisition/DURequisitionPreview?nDURequisitionID='+oDURequisition.DURequisitionID+"&nBUID="+$scope.BUID);
        };

        debugger;
        //button hide
        $scope.btnAdd = $scope.btnEdit = $scope.btnView = $scope.btnDelete = $scope.btnApprove= $scope.btnIssue =$scope.btnUndoIssue =$scope.btnReceive = $scope.btnUndoApprove = $scope.btnAdvSearch = true ;
        //button show
        if(PermissionChecker('Add','DURequisition',oAuthorizationRolesMapping)){$scope.btnAdd = false; }
        if(PermissionChecker('Edit','DURequisition',oAuthorizationRolesMapping)){$scope.btnEdit = false;}
        if(PermissionChecker('View','DURequisition',oAuthorizationRolesMapping)){$scope.btnView = false;}
        if(PermissionChecker('Approved','DURequisition',oAuthorizationRolesMapping)){$scope.btnApprove = false;}
        if(PermissionChecker('Issued','DURequisition',oAuthorizationRolesMapping)){$scope.btnIssue = false;}
        if(PermissionChecker('Issued','DURequisition',oAuthorizationRolesMapping)){$scope.btnUndoIssue = false;}
        if(PermissionChecker('Received','DURequisition',oAuthorizationRolesMapping)){$scope.btnReceive = false;}
        if(PermissionChecker('UnApproved','DURequisition',oAuthorizationRolesMapping)){$scope.btnUndoApprove = false;}
        if(PermissionChecker('AdvSearch','DURequisition',oAuthorizationRolesMapping)){$scope.btnAdvSearch = false;}

        function CheckControll()
        {
            debugger;
            if($scope.btnAdd == false  && !PermissionChecker('Add','DURequisition',oAuthorizationRolesMapping))
            {$scope.btnAdd = true; }
            if($scope.btnEdit == false && !PermissionChecker('Edit','DURequisition',oAuthorizationRolesMapping))
            {$scope.btnEdit = true;}
            if($scope.btnView == false && !PermissionChecker('View','DURequisition',oAuthorizationRolesMapping))
            {$scope.btnView = true;}
            if($scope.btnApprove == false && !PermissionChecker('Approved','DURequisition',oAuthorizationRolesMapping))
            {$scope.btnApprove = true;}
            if($scope.btnDelete == false && !PermissionChecker('Delete','DURequisition',oAuthorizationRolesMapping))
            {$scope.btnDelete = true;}
            if($scope.btnIssue == false && !PermissionChecker('Issued','DURequisition',oAuthorizationRolesMapping))
            {$scope.btnIssue = true;}
            if($scope.btnUndoIssue == false && !PermissionChecker('Issued','DURequisition',oAuthorizationRolesMapping))
            {$scope.btnUndoIssue = true;}
            if($scope.btnReceive == false && !PermissionChecker('Received','DURequisition',oAuthorizationRolesMapping))
            {$scope.btnReceive = true;}
            if(PermissionChecker('UnApproved','DURequisition',oAuthorizationRolesMapping)){$scope.btnUndoApprove = false;}
            if($scope.btnAdvSearch == false && !PermissionChecker('AdvSearch','DURequisition',oAuthorizationRolesMapping))
            {$scope.btnAdvSearch = true;}
            //if($scope.btnUndoApprove == true && PermissionChecker('AdvSearch','DURequisition',oAuthorizationRolesMapping))
            //{$scope.btnUndoApprove = true;}
        }
    });
</script>
                       


              
