<html>
<head>
    @{ViewBag.Title = "Production Sheet";} 
</head>
<body>
    @model ESimSol.BusinessObjects.ProductionSheet
    <div id="progressbarParent" style="width:100%;height:100%;margin:0 auto;text-align:center; margin-left: auto;margin-right: auto;left: 0;right: 0;z-index: 1;">
        <div style="margin: 0px auto;margin-top: 251px;text-align:center;width:390px;">
            <label style="font-size:18px;">Please wait</label>
            <div id="progressbar" style="width:100%;height:37px;"></div>
        </div>
    </div>
     <div class="menuMainCollectionTable" id="divPS">
            <div class="easyui-panel" title="Production Sheet(Hanger)" style="font-family:Tahoma; text-align:center; height:88%;">
                <div style="width:100%;">
                    <fieldset>
                        <legend style="font-weight:bold">Production Sheet info: </legend>
                        <table style="width:100%" cellpadding="1" cellspacing="1">
                            <tr>
                                <td style="width: 10%; text-align: right">
                                    Sheet No:
                                </td>
                                <td style="width: 25%; text-align: left">
                                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                                        <tr>
                                            <td style="width:30%">@Html.TextBoxFor(model => model.SheetNo, new { style = "width: 100%;", id = "txtSheetNo", disabled = "disabled" })</td>
                                            <td style="width:30%; text-align:right;">Issue Date:</td>
                                            <td style="width:40%">@Html.TextBoxFor(model => model.IssueDateInString, new { style = "width: 100%;", id = "txtSheetNo", disabled = "disabled" })</td>
                                        </tr>
                                    </table>

                                </td>
                                <td style="width: 10%; text-align:right;">
                                    Customer :
                                </td>
                                <td style="width:20%; text-align:left;">
                                    @Html.TextBoxFor(model => model.ContractorName, new { style = "width: 100%;", id = "txtContractorName", disabled = "disabled" })</td>
                               
                                <td style="width:10%; text-align: right">
                                    PI No:
                                </td>
                                <td style="width: 25%; text-align: right">
                                    @Html.TextBoxFor(model => model.ExportPINo, new { style = "width:100%;", id = "txtExportPINo", disabled = "disabled" })
                                </td>         
                            </tr>

                            <tr>
                                <td style="width: 10%; text-align: right">
                                    Model Ref:
                                </td>
                                <td style="width: 25%; text-align: left">
                                    @Html.TextBoxFor(model => model.ModelReferencenName, new { style = "width: 100%;", id = "txtModelReferencenName", disabled = "disabled" })
                                </td>
                                           
                                <td style="width: 10%; text-align: right">
                                    Product:
                                </td>
                                <td style="width: 20%; text-align: left">
                                    @Html.TextBoxFor(model => model.ProductName, new { style = "width: 100%;", id = "txtProductName", disabled = "disabled" })
                                </td>
                                            
                                <td style="width:10%; text-align: right">
                                    Order Qty:
                                </td>
                                <td style="width: 25%; text-align: right">
                                    @Html.TextBoxFor(model => model.ProdOrderQty, new { style = "width: 100%;text-align:right", id = "txtProdOrderQty", disabled = "disabled" })
                                </td>

                            </tr>

                            <tr>
                                <td style="width: 10%; text-align: right">
                                    F.G Weight:
                                </td>
                                <td style="width: 25%; text-align: left">
                                    <table border="0" cellpadding="0" cellspacing="0" width="100%" style="font-size:11px;">
                                        <tr>
                                            <td style="width:20%;">@Html.TextBoxFor(model => model.FGWeight, new { style = "width:95%;text-align:right", id = "txtFGWeight", disabled = "disabled" })</td>
                                            <td style="width:12%; text-align:right;">@Html.TextBoxFor(model => model.FGWeightUnitSymbol, new { style = "width:90%;text-align:right", id = "txtFGWeightUnitSymbol", disabled = "disabled" })</td>
                                            <td style="width:32%; text-align:right;">Runner Weight</td>
                                            <td style="width:22%;">@Html.TextBoxFor(model => model.NaliWeight, new { style = "width:95%;text-align:right", id = "txtNaliWeight", disabled = "disabled" })</td>
                                            <td style="width:12%; text-align:right;">@Html.TextBoxFor(model => model.FGWeightUnitSymbol, new { style = "width:90%;text-align:right", id = "txtNaliFGWeightUnitSymbol", disabled = "disabled" })</td>
                                        </tr>
                                    </table>
                                </td>
                                <td style="width: 10%; text-align: right">
                                    Total Weight:
                                </td>
                                <td style="width: 20%; text-align: left">
                                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                                        <tr>
                                            <td style="width:25%">
                                                @Html.TextBoxFor(model => model.TotalWeight, new { style = "width:90%;text-align:right", id = "txtTotalWeight", disabled = "disabled" })
                                            </td>
                                            <td style="width:10%; text-align:right;">
                                                @Html.TextBoxFor(model => model.FGWeightUnitSymbol, new { style = "width: 95%;text-align:right", id = "txtTotalFGWeightUnitSymbol", disabled = "disabled" })
                                            </td>
                                            <td style="width:45%; text-align:right">
                                                Weight For(Pcs):
                                            </td>
                                            <td style="width:20%">
                                                @Html.TextBoxFor(model => model.WeightFor, new { style = "width:93%;text-align:right", id = "txtWeightFor", disabled = "disabled" })
                                            </td>
                                        </tr>
                                    </table>

                                </td>
                                <td style="width: 10%; text-align: right">
                                    Remaining Qty:
                                </td>
                                <td style="width: 25%; text-align: right">@Html.TextBoxFor(model => model.YetToSheetQty, new { style = "width:99%;text-align:right", id = "txtYetToSheetQty", disabled = "disabled" })</td>


                            </tr>
                            <tr>
                                <td style="width: 10%; text-align: right">
                                    Recipe Name:
                                </td>
                                <td style="width: 25%; text-align: left">
                                  @Html.TextBoxFor(model => model.RecipeName, new { style = "width: 100%;", id = "txtRecipeName", disabled = "disabled" })
                                </td>
                                <td style="width: 10%; text-align: right">
                                    Color Name:
                                </td>
                                <td style="width: 20%; text-align: left">
                                    @Html.TextBoxFor(model => model.ColorName, new { style = "width: 100%;", id = "txtColorName", disabled = "disabled" })
                                </td>
                                <td style="width: 10%; text-align: right">
                                    Sheet Qty:
                                </td>
                                <td style="width: 25%; text-align: right">@Html.TextBoxFor(model => model.Quantity, new { style = "width:99%;text-align:right", id = "txtQuantity", disabled = "disabled" })</td>
                            </tr>
                            <tr>
                                <td style="width: 10%; text-align: right">
                                    Machine:
                                </td>
                                <td style="width:25%; text-align: left">
                                   @Html.TextBoxFor(model => model.MachineName, new { style = "width: 100%;", id = "txtMachineName", disabled = "disabled" })
                                </td>
                                <td style="width: 10%; text-align: right">
                                    Qty Per Carton :
                                </td>
                                <td style="width:25%; text-align: left">
                                    @Html.TextBoxFor(model => model.PerCartonFGQty, new { style = "width: 100%;", id = "txtPerCartonFGQty", disabled = "disabled" })
                                </td>
                                <td style="width: 10%; text-align: right">
                                    Note:
                                </td>
                                <td style="width: 25%; text-align: right">@Html.TextBoxFor(model => model.Note, new { style = "width:99%;", id = "txtNote", disabled = "disabled" })</td>
                            </tr>
                        </table>
                    </fieldset>
                </div>
                <table id="tblProductionRecipe" title="Production Recipe Details" class="easyui-datagrid" style="height:295px; width:100%;" fitcolumns="false" rownumbers="true" pagination="false" singleselect="true" autorowheight="false" toolbar="#toolbar" data-options="onClickRow: onClickRow">
                    <thead>
                        <tr>                            
                            <th field="ProductCode" width="10%" align="left">Code</th>
                            <th field="ProductName" width="25%" align="left">Raw Material Name</th>
                            <th width="10%" align="left" field="QtyTypeSt">Qty Type</th>
                            <th width="10%" align="left" field="MUName">Unit Name</th>
                            <th width="10%" align="left" data-options="field:'QtyInPercent',editor:{type:'numberbox',options:{precision:4}}">Qty(%)</th>
                            <th width="20%" align="right" field="RequiredQty" formatter="formatPrice4digit">Required Qty</th>
                        </tr>
                    </thead>
                </table>
                <div id="toolbar">
                    <a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-reload" plain="true" onclick="RefreshGrid()">Refresh</a>
                    <select id="cboQtyType" style="width:150px"><option value="0">--Select Qty Type--</option><option value="1">Percent</option><option value="2">Count</option></select>
                    <input type="text" id="txtRawMaterialName" placeholder="Type Raw Material Name & Press Enter" style="width:180px" />
                    <a id="btnPickRawMaterial" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-search" plain="true">Pick</a>
                    <a id="btnRemoveRawmaterial" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-remove" plain="true" onclick="RemoveRawMaterial()">Remove</a>
                </div>
            </div>
            <fieldset style="height:7.5%">
                <legend style="font-weight: bold">Action : </legend>
                <table border="0" cellspacing="2" cellpadding="2" style="font-size: 11px; font-weight: bold; width:100%">
                    <tr>
                        <td style="width:83%; text-align:right"></td>
                        <td style="width:17%;text-align:right;">
                            <a id="btnSave" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="true">Save</a>
                            <a id="btnClose" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" onclick="Close()" plain="true">Close</a>
                        </td>
                    </tr>
                </table>
            </fieldset>
        </div>
</body>
</html>
<script type="text/javascript">
    var _sBaseAddress = "";
    var _oPaymentTypes=[];
    var _oPriorityLevels=[];
    var _oMktPersons = [];
    var _oProduct = null;
    var _oColorCategory = null;
    var _oSizeCategory =  null;
    var _bIsBuyer= true;
    var _oCurrencyList = [];
    $(document).ready(function () {
        _sBaseAddress =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
        var oProductionSheet =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
        var oUnitConversions = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.UnitConversions));
        debugger;
        $('#divPS').data('ProductionSheet',oProductionSheet);
        $('#divPS').data('UnitConversions', oUnitConversions);
        $("#progressbar").progressbar({ value: 0 });
        $("#progressbarParent").hide();
        $('txtTotalWeight,#txtFGWeight,#txtNaliWeight,#txtPerCartonFGQty,#txtWeightFor,#txtQuantity,#txtYetToSheetQty').icsCurrencyBox(null,null,2);
        if(parseInt(oProductionSheet.ProductionSheetID)>0)
        {
            RefreshControl(oProductionSheet);
        }
        if(parseInt(oProductionSheet.PTUUnit2ID)>0)
        {
            $("#txtExportPINo,#txtContractorName,#txtProductName,#txtModelReferencenName").addClass("fontColorOfPickItem");
        }
        $('#tblRecipes').datagrid({onSelect: function(rowIndex, rowData){ RowSelect(rowData);}});
    });
    function updateProgress() {
        var value =$('#progressbar').progressbar('getValue');
        if (value < 96){
            value += Math.floor(Math.random() * 10);
            $('#progressbar').progressbar('setValue', value);
        }
    }
    function hideShow(miliseconds) {
        $("#progressbarParent").hide();
    }

    function RowSelect(oRecipe)
    {
        DynamicRefreshList(oRecipe.RecipeDetails, "tblRecipeDetails");
        
    }

    function GetUnitConversion(nProductID, nFromUnitID, nToUnitID)
    {
        var nConversionValue = 0;
        var oUnitConversions = $('#divPS').data('UnitConversions');
        for(var i=0; i<oUnitConversions.length; i++)
        {
            if(parseInt(oUnitConversions[i].ProductID)===parseInt(nProductID) &&  parseInt(oUnitConversions[i].MeasurementUnitID)===parseInt(nFromUnitID) && parseInt(oUnitConversions[i].ConvertedUnitID)===parseInt(nToUnitID))
            {
                return parseFloat(oUnitConversions[i].ConvertedUnitValue);
            }
        }
        return nConversionValue;
    }

    function CalculateRequiredQty()
    {

        var nTotalWeight = parseFloat(icsRemoveComma($('#txtTotalWeight').val()));
        var nWeightFor = parseFloat(icsRemoveComma($('#txtWeightFor').val()));
        var nFGMUnitID = parseInt($('#divPS').data('ProductionSheet').FGWeightUnitID);
        var nFGQty = parseFloat(icsRemoveComma($('#txtQuantity').val()));
        if(nTotalWeight<=0 || nWeightFor<=0)
        {
            alert("Invalid Hanger Weight!");
            return;
        }
        if(parseInt(nFGMUnitID)<=0)
        {
            alert("Invalid Hanger Measurement Unit!");
            return;
        }
        var nPerHangerWeight = (nTotalWeight/nWeightFor);
        var oProductionRecipes = $('#tblProductionRecipe').datagrid('getRows');
        for(var i = 0;i<oProductionRecipes.length;i++)
        {
            if(parseInt(oProductionRecipes[i].QtyTypeInt)==1)
            {
                var nConvertedValue=1;
                var nPerHangerReqQty = (nPerHangerWeight * parseFloat(parseFloat(oProductionRecipes[i].QtyInPercent))/100);
                if(parseInt(oProductionRecipes[i].MUnitID)!=nFGMUnitID)
                {
                    nConvertedValue=GetUnitConversion(oProductionRecipes[i].ProductID, nFGMUnitID, oProductionRecipes[i].MUnitID);
                }
                if(nConvertedValue<=0)
                {
                    alert("Unit conversion required for "+ oProductionRecipes[i].ProductName +"!");
                    return;
                }
                nPerHangerReqQty= (nPerHangerReqQty * nConvertedValue);
                oProductionRecipes[i].RequiredQty =parseFloat((nPerHangerReqQty*nFGQty));
            }
            else
            {
                oProductionRecipes[i].RequiredQty = parseFloat(oProductionRecipes[i].QtyInPercent * nFGQty);
            }
        }
        RefreshProductionRecipeList(oProductionRecipes);
    }

    function RefreshControl(oProductionSheet){
        if(parseInt(oProductionSheet.ProductionSheetID)>0)
        {
            $("#txtExportPINo,#txtRecipeName,#txtContractorName,#txtMachineName").addClass("fontColorOfPickItem");
            RefreshProductionRecipeList(oProductionSheet.ProductionRecipes);
        }
        if(sessionStorage.getItem("ProductionSheetHeader")=="View Production Sheet")
        {
            $('#btnSave').hide();
            $("#btnPickContractor,#btnProductPiker,#txtProductName,#txtColorName").prop('disabled', true);
        }
        if(sessionStorage.getItem("ProductionSheetHeader")=="Approve Production Sheet")
        {
            $('#btnApprove').show();
            $('#btnSave').hide();
        }
    }

    function RefreshProductionRecipeList(oOrderDetailList)
    {
        var data=oOrderDetailList;
        data={"total":""+data.length+"","rows":data};
        $('#tblProductionRecipe').datagrid('loadData',data);
    }

    function Validation(){

        if(parseInt($('#divPS').data('ProductionSheet').ProductionSheetID)<=0)
        {
            alert('Sorry there is no Production Sheet.');
            return false;
        }
        return true;
    }

    function RefreshObject()
    {
        var oTempProductionSheet = $('#divPS').data('ProductionSheet');
        var oProductionSheet={
            ProductionSheetID: oTempProductionSheet.ProductionSheetID,
            ProductionRecipes:$('#tblProductionRecipe').datagrid('getRows')
        };
        return oProductionSheet;
    }

    $("#btnSave").click(function (){
        debugger;
        endEditing();
        if(!Validation()) return false;
        var oProductionSheet=RefreshObject();
        $.ajax({
            type: "POST",
            dataType: "json",
            url : _sBaseAddress+"/ProductionSheet/ChangeRawMaterial",
            traditional: true,
            data:  JSON.stringify(oProductionSheet),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                //debugger;
                oProductionSheet = jQuery.parseJSON(data);
                if (oProductionSheet.ErrorMessage==null || oProductionSheet.ErrorMessage=="")
                {
                    alert("Successfully Changed Rawmaterial. You Can Change it Until Out Raw Material From Store.");
                    var oProductionSheets = sessionStorage.getItem("ProductionSheets");
                    var nIndex = parseInt(sessionStorage.getItem("SelectedRowIndex"));
                    if (oProductionSheets != null) {
                        oProductionSheets = jQuery.parseJSON(oProductionSheets);
                    }
                    else {
                        oProductionSheets = [];
                    }
                    if (nIndex != -1) {
                        oProductionSheets[nIndex] = oProductionSheet;
                    }
                    else {
                        sessionStorage.setItem("SelectedRowIndex", oProductionSheets.length);
                        oProductionSheets.push(oProductionSheet);
                    }
                    sessionStorage.setItem("ProductionSheets", JSON.stringify(oProductionSheets));
                    window.location.href = sessionStorage.getItem("BackLink");
                }
                else {
                    alert(oProductionSheet.ErrorMessage);
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }

        });
    });

        //Raw Material
    //Product Pick
    $("#btnPickRawMaterial").click(function ()
    {
        if(parseFloat(icsRemoveComma($('#txtQuantity').val()))<=0)
        {
            alert('Sheet Quantity Should be Greater than 0.');
            return false;
        }
        if(parseInt($('#cboQtyType').val())<=0)
        {
            alert("Please select Qty Type!");
            $('#cboQtyType').focus();
            return;
        }
        GetRawMaterials("");
    });

    $("#txtRawMaterialName").keydown(function (e) {
        debugger;
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) // Enter Press
        {
            if(parseFloat(icsRemoveComma($('#txtQuantity').val()))<=0)
            {
                alert('Sheet Quantity Should be Greater than 0.');
                return false;
            }

            if($.trim($('#txtRawMaterialName').val())==null || $.trim($('#txtRawMaterialName').val())=="")
            {
                alert("Type Raw Material Name and Press Enter.");
                $('#txtRawMaterialName').focus();
                return;
            }
            if(parseInt($('#cboQtyType').val())<=0)
            {
                alert("Please select Qty Type!");
                $('#cboQtyType').focus();
                return;
            }
            var sProductName = $.trim($('#txtRawMaterialName').val());
            GetRawMaterials(sProductName);
        }else if (code == 8) //backspace=8
        {
            //debugger;
            $("#txtRawMaterialName").removeClass("fontColorOfPickItem");
        }
    });
    function GetRawMaterials(sProductName)
    {
        var oProduct = {ProductName:sProductName, BUID:sessionStorage.getItem("BUID")};
        var obj = {
            BaseAddress: _sBaseAddress,
            Object: oProduct,
            ControllerName: "Recipe",
            ActionName: "SearchByProductBUModuleWise",
            IsWinClose: false
        };
        $.icsDataGets(obj, function (response) {
            debugger;
            if (response.status && response.objs.length > 0) {
                if (response.objs[0].ProductID > 0) {
                    var tblColums = []; var oColumn = { field: "ProductCode", title: "Code", width: 100, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "ProductName", title: "Product Name", width: 200, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "ShortName", title: "Short Name", width: 130, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "ProductCategoryName", title: "Category Name", width: 120, align: "left" }; tblColums.push(oColumn);
                    var oPickerParam = {
                        winid: 'winRawMaterialPicker',
                        winclass: 'clsRawMaterialPicker',
                        winwidth: 640,
                        winheight: 460,
                        tableid: 'tblRawMaterialPicker',
                        tablecolumns: tblColums,
                        datalist: response.objs,
                        multiplereturn: false,
                        searchingbyfieldName: 'NameCode',
                        windowTittle: 'RawMaterial List'
                    };
                    $.icsPicker(oPickerParam);
                    IntializePickerbutton(oPickerParam);
                }
                else {
                    alert(response.objs[0].ErrorMessage);
                }

            }else{
                alert("Data Not Found.");
            }
        });
    }

     $("#btnRefreshDetail").click(function (){
        endEditing();
    });

    function IntializePickerbutton(oPickerobj) {
        $("#" + oPickerobj.winid).find("#btnOk").click(function () {
            //for Single Select
            SetPickerValueAssign(oPickerobj);
        });
        $(document).find('.' + oPickerobj.winclass).keydown(function (e) {
            if (e.which == 13)//enter=13
            {
                SetPickerValueAssign(oPickerobj);

            }
        });
    }

    function SetPickerValueAssign(oPickerobj) {
        debugger;
        var oreturnObj = null, oreturnobjs = [];
        if (oPickerobj.multiplereturn) {
            oreturnobjs = $('#' + oPickerobj.tableid).datagrid('getChecked');
        } else {
            oreturnObj = $('#' + oPickerobj.tableid).datagrid('getSelected');
        }
        $("#" + oPickerobj.winid).icsWindow("close");
        $("#" + oPickerobj.winid).remove();
        if(oPickerobj.winid == 'winRawMaterialPicker')
        {
            if(oreturnObj!=null)
            {
                var oProductionRecipes=$('#tblProductionRecipe').datagrid('getRows');
                if(!ICS_IsExist(oProductionRecipes,"ProductID",oreturnObj.ProductID))
                {
                    var nQtyType = parseInt($('#cboQtyType').val())
                    var oProductionRecipe = {
                        ProductionRecipeID:0,
                        ProductionSheetID:$('#divPS').data('ProductionSheet').ProductionSheetID,
                        ProductID : oreturnObj.ProductID,
                        QtyInPercent:0,
                        RequiredQty : 0,
                        QtyType :nQtyType,
                        QtyTypeInt : nQtyType,
                        QtyTypeSt:$('#cboQtyType option:selected').text(),
                        Remarks :"",
                        ProductCode  :oreturnObj.ProductCode,
                        ProductName: oreturnObj.ProductName,
                        MUnitID : oreturnObj.MeasurementUnitID,
                        MUName :  oreturnObj.MUnit
                    };
                    $('#tblProductionRecipe').datagrid('appendRow',oProductionRecipe);
                    GetsUnitConversionByProduct(oProductionRecipe.ProductID);
                }
            }
        }
    }

    function RemoveRawMaterial()
    {
        var oRawMaterialDetail = $('#tblProductionRecipe').datagrid('getSelected');
        if(oRawMaterialDetail==null)
        {
            alert("Please select a item from list!");
            return;
        }
        var conf = confirm("Confirm to delete?");
        if(conf==false)return;

        var SelectedRowIndex=$('#tblProductionRecipe').datagrid('getRowIndex',oRawMaterialDetail);
        $('#tblProductionRecipe').datagrid('deleteRow',SelectedRowIndex);
        RefreshGrid();
    }

    function RefreshGrid()
    {
        endEditing();
        data=$('#tblProductionRecipe').datagrid('getRows');
        data={"total":""+data.length+"","rows":data};
        $('#tblProductionRecipe').datagrid('loadData',data);
        $('#tblProductionRecipe').datagrid({selectOnCheck:false, checkOnSelect:false})
    }
    
    function GetsUnitConversionByProduct(nProductID)
    {
        var oProduct ={
            ProductID : nProductID
        };
        $.ajax ({
            type: "POST",
            dataType: "json",
            url : _sBaseAddress+"/MeasurementUnit/GetsUCByProduct",
            data:  JSON.stringify(oProduct),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                var  oTempUnitConversions = jQuery.parseJSON(data);
                if(oTempUnitConversions.length>0)
                {
                    var oUnitConversions = $('#divPS').data('UnitConversions');
                    for(var i=0; i<oTempUnitConversions.length;i++)
                    {
                        oUnitConversions.push(oTempUnitConversions[i]);
                    }
                    $('#divPS').data('UnitConversions', oUnitConversions);
                }
            },
            error: function (xhr, status, error)
            {
                alert(error);
            }
        });
    }

    function ValidateInputDetail()
    {
        if(_oProduct==null || $('#txtProductName').val()=="")
        {
            $('#txtProductName').focus();
            $('#txtProductName').addClass("errorFieldBorder");
            alert('Select Product');
            return false;
        }
        if(_oProduct.IsApplyColor)
        {
            if(parseInt(_oColorCategory.ColorCategoryID)<=0)
            {
                $('#txtColorName').focus();
                $('#txtColorName').addClass("errorFieldBorder");
                alert('Select Color');
                return false;
            }
        }

        if($('#cboUnit').val()<=0)
        {
            $('#cboUnit').focus();
            alert('Select Unit.');
            return false;
        }
        if(_oProduct.IsApplyMeasurement)
        {
            if( $('#txtMeasurement').val()==""|| $('#txtMeasurement').val()==null)
            {
                $('#txtMeasurement').focus();
                $('#txtMeasurement').addClass("errorFieldBorder");
                alert('Select Measurement');
                return false;
            }
        }
        if(parseInt(icsRemoveComma($('#txtQty').val()))<=0)
        {
            $('#txtQty').focus();
            $('#txtQty').addClass("errorFieldBorder");
            alert('Qty Should be Greater than 0');
            return false;
        }
        if(parseFloat(icsRemoveComma($('#txtRate').val()))<=0)
        {
            $('#txtRate').focus();
            $('#txtRate').addClass("errorFieldBorder");
            alert('Rate Should be Greater than 0');
            return false;
        }
        return true;
    }

    function ResetDetail(){
        _oProduct = null;_oColorCategory = null;_oSizeCategory = null;
        $('#txtQty,#txtRate').val('');
        $('#txtColorQty').val(0);
        $('#txtProductName,#txtColorName,#txtProductDescription,#txtMeasurement,#txtStyleDescription,#txtBuyerRef').removeClass("fontColorOfPickItem");
        $('#txtProductName,#txtColorName,#txtProductDescription,#txtMeasurement,#txtStyleDescription,#txtBuyerRef').val("");

        var oUnits = [];
        $("#cboUnit").icsLoadCombo({List: oUnits,OptionValue: "MeasurementUnitID",DisplayText: "Symbol"});
        $('#txtProductName').focus();
    }

    $('#btnClose').click(function(e){
        window.location.href = sessionStorage.getItem("BackLink");
    });

    $("#btnRemoveDetail").click(function () {

        var oProductionRecipe = $("#tblProductionRecipe").datagrid("getSelected");
        if (oProductionRecipe == null || parseInt(oProductionRecipe.ProductID) <= 0) { alert("Please select an item from list!"); return false; }
        if (!confirm("Confirm to Delete?")) return false;
        var SelectedRowIndex=$('#tblProductionRecipe').datagrid('getRowIndex',oProductionRecipe);
        alert("Data Delete Successfully.");
        $('#tblProductionRecipe').datagrid('deleteRow',SelectedRowIndex);
        SetTotal();
    });

    var editIndex = undefined;
    function endEditing(){
        if (editIndex == undefined){return true}
        if ($('#tblProductionRecipe').datagrid('validateRow', editIndex)){
            $('#tblProductionRecipe').datagrid('endEdit', editIndex);
            $('#tblProductionRecipe').datagrid('selectRow',editIndex);
            var oProductionRecipe=$('#tblProductionRecipe').datagrid('getSelected');
            if(oProductionRecipe!=null)
            {
                $('#tblProductionRecipe').datagrid('updateRow',{index: editIndex,	row: oProductionRecipe});
            }
            var oDetails = $('#tblProductionRecipe').datagrid('getRows');
            CalculateRequiredQty();
            editIndex = undefined;
            return true;
        }
        else
        {
            return false;
        }
    }
    function onClickRow(index){
        if (editIndex != index){
            if (endEditing())
            {
                $('#tblProductionRecipe').datagrid('selectRow', index).datagrid('beginEdit', index);
                editIndex = index;
            }
            else
            {
                $('#tblProductionRecipe').datagrid('selectRow', editIndex);
            }
        }
    }



</script>