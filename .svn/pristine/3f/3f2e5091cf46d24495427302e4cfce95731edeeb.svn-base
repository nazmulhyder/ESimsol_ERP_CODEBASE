<html>
@{
    if (ViewBag.OperationType == 1)
    {
        ViewBag.Title = "Cost Sheet";
    }
    else
    {
        ViewBag.Title = "Budget";
    }
}
<body>
    @model ESimSol.BusinessObjects.CostSheet
    <div class="menuMainCollectionTable" ng-app="CostSheetApp" ng-controller="CostSheetController as CS" id="divCS">
        <div style="font-family:Tahoma;text-align:center;height:90%;" class="regionCS">
            <section>
                <ul class="nav nav-tabs" style="background:#d6dbdf; color:white;">
                    <li ng-class="{active:CS.IsSet(1)}">
                        <a href="" ng-click="CS.SetTab(1)" style="color:black;"><label ng-bind="CSCAption">Cost</label> Information</a>
                    </li>
                    <li ng-class="{active:CS.IsSet(2)}">
                        <a href="" ng-click="CS.SetTab(2)" style="color:black;">Style Image</a>
                    </li>
                </ul>
                <div ng-show="CS.IsSet(1)">
                    <fieldset style="width:100%">
                        <legend>Sheet Info :</legend>
                        <div class="  col-md-12">
                            <div class="col-md-2 text-right">
                            <div class="input-group">
                                    <span class="input-group-btn">
                                        <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PickStyle()"> <span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-3 text-left">
                                <input ng-model="CostSheet.StyleNo" class="form-control" placeholder="Type Style No & Press Enter" ng-keydown="SearchKeyStyle($event)" />
                            </div>
                            <div class="col-md-2 text-right"><label class="control-label">File No:</label></div>
                            <div class="col-md-3 text-left">
                                <input ng-model="CostSheet.FileNo" class="form-control" disabled  />
                            </div>
                            <div class="col-md-2 text-right"><label class="control-label">Costing Date:</label></div>
                            <div class="col-md-3 text-left">
                                <div class="input-group date date-container">
                                    <input type="text" class="form-control" ng-model="CostSheet.CostingDateInString"><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                                </div>
                            </div>
                        </div>

                        <div class="  col-md-12">
                            <div class="col-md-2 text-right"><label class="control-label"> Buyer Name:</label></div>
                            <div class="col-md-3 text-left">
                                <input ng-model="CostSheet.BuyerName" class="form-control" disabled />
                            </div>
                            <div class="col-md-2 text-right"><label class="control-label">Qty(Approx):</label></div>
                            <div class="col-md-3 text-left">
                            <div class="col-md-7 text-right">
                                <input ng-model="CostSheet.ApproxQty" class="form-control" ng-disabled="disabled" />
                            </div>
                            <div class="col-md-5 text-right">
                                <select class="form-control" ng-model="CostSheet.MeasurementUnitID" ng-options="item.MeasurementUnitID as item.Symbol for item in CountUnits"></select>
                            </div>
        
                            </div>
                            <div class="col-md-2 text-right"><label class="control-label">Shipment Date:</label></div>
                            <div class="col-md-3 text-left">
                                <div class="input-group date date-container">
                                    <input type="text" class="form-control" ng-model="CostSheet.ShipmentDateInString"><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                                </div>
                            </div>
                        </div>

                        <div class="  col-md-12">
                            <div class="col-md-2 text-right"><label class="control-label">Knitting:</label></div>
                            <div class="col-md-3 text-left">
                                <input ng-model="CostSheet.KnittingPatternName" class="form-control" disabled />
                            </div>
                            <div class="col-md-2 text-right"><label class="control-label" id="lblWeightCaption">Weight Lbs/Dzn:</label></div>
                            <div class="col-md-3 text-left">
                     
                                <div class="col-md-7 text-left">
                                    <input ng-model="CostSheet.WeightPerDozen" class="form-control" ng-disabled="disabled" ng-change="SetTotal()" />
                                </div>
                                <div class="col-md-5 text-left">
                                    <select class="form-control" ng-change="ChangeUnit()" ng-model="CostSheet.WeightUnitID" ng-options="item.MeasurementUnitID as item.Symbol for item in WeightUnits"></select>
                                </div>
                         
                            </div>
                            <div class="col-md-2 text-right"><label class="control-label">Wastage(%):</label></div>
                            <div class="col-md-3 text-left">
 
                                    <div class="col-md-7 text-right">
                                        <input ng-model="CostSheet.WastageInPercent" class="form-control" ng-change="SetTotal()" />
                                    </div>
                                    <div class="col-md-1 text-right"><label class="control-label">GG:</label></div>
                                    <div class="col-md-4 text-right">
                                        <input ng-model="CostSheet.GG" class="form-control" />
                                    </div>
                            </div>
                        </div>

                        <div class="  col-md-12">
                            <div class="col-md-2 text-right"><label class="control-label">Size Range:</label></div>
                            <div class="col-md-3 text-left">
                                <input type="text" class="form-control" ng-model="CostSheet.SizeRange" disabled>
                            </div>
                            <div class="col-md-2 text-right"><label class="control-label">Color Range:</label></div>
                            <div class="col-md-3 text-right">
                                <input type="text" class="form-control" ng-model="CostSheet.ColorRange" disabled>

                            </div>
                            <div class="col-md-2 text-right"><label class="control-label">Style Description:</label></div>
                            <div class="col-md-3 text-left">
                                <input type="text" class="form-control" ng-model="CostSheet.StyleDescription" >
                            </div>
                        </div>

                        <div class="  col-md-12">
                            <div class="col-md-2 text-right"><label class="control-label">Merchandiser:</label></div>
                            <div class="col-md-3 text-left">
                                <input type="text" class="form-control" ng-model="CostSheet.MerchandiserName" ng-keydown="SearchKeyMerchandiser($event)" placeholder="Type Merchandiser Name & Press Enter">
                            </div>
                            <div class="col-md-2 text-right"><label class="control-label">Fabric Description:</label></div>
                            <div class="col-md-3 text-right">
                                <input type="text" class="form-control" ng-model="CostSheet.FabricDescription" >

                            </div>
                            <div class="col-md-2 text-right"><label class="control-label">Cost Currency:</label></div>
                            <div class="col-md-3 text-left">
                                <select class="form-control" ng-change="SetTotal()" ng-model="CostSheet.CurrencyID" ng-options="item.CurrencyID as item.Symbol for item in Currencies"></select>
                            </div>
                        </div>
                        
                    </fieldset>
                    <div class="col-md-12">
                        <div class="regionCSYarn">
                            <div class="regionCSYarnGrid">
                                <div class="ui-grid-top-panel" style="text-align:center;">
                                    Yarn:<input type="text" ng-model="txtYarnName" style="width:180px;" ng-keydown="SearchKeyYarn($event)" placeholder="Type Yarn Name & press Enter" />
                                    <button type="button" id="btnAddYarn" class="btn btn-default btn-sm" aria-label="right Align" ng-click="AddYarn()"><span class="glyphicon glyphicon-plus" aria-hidden="true"> Add</span></button>
                                    <button type="button" id="btnRemoveYarn" class="btn btn-default btn-sm" aria-label="right Align" ng-click="RemoveYarn()"><span class="glyphicon glyphicon-remove" aria-hidden="true"> Remove</span></button>
                                    <button type="button" id="btnYarnUp" class="btn btn-default btn-sm" aria-label="right Align" ng-click="YarnUP()"><span class="glyphicon glyphicon-arrow-up" aria-hidden="true"> Up</span></button>
                                    <button type="button" id="btnYarnDown" class="btn btn-default btn-sm" aria-label="right Align" ng-click="YarnDown()"><span class="glyphicon glyphicon-arrow-down" aria-hidden="true"> Down</span></button>
                                    <button type="button" id="btnRefreshYarnDetail" class="btn btn-default btn-sm" aria-label="right Align" ng-click="RefreshPIDetail()"><span class="glyphicon glyphicon-refresh" aria-hidden="true"> Refresh</span></button>
                                </div>
                                <div style="width: 100%; height:125px;" ui-grid="gridOptionsYarn" ui-grid-selection ui-grid-edit ui-grid-resize-columns ui-grid-key-nav class="ui-grid-selectable"></div>
                            </div>
                            <div class="regionCSYarnPanel">
                                <fieldset>
                                    <div class="col-sm-12">
                                        <div class="col-sm-7 text-right"><label class="control-label">Garment Weight Lbs:</label></div>
                                        <div class="col-sm-4 text-left">
                                            <input ng-model="txtGarmentsLbs" class="form-control" disabled />
                                        </div>
                                        <div class="col-sm-1 text-left"><label class="control-label">/Dozen</label></div>
                                    </div>
                                    <div class="col-md-12">
                                        <div class="col-sm-7 text-right"><label class="control-label">Process Loss:</label></div>
                                        <div class="col-sm-4 text-left">
                                            <input ng-model="CostSheet.ProcessLoss" class="form-control" disabled />
                                        </div>
                                        <div class="col-sm-1 text-left"><label class="control-label">/Dozen</label></div>
                                    </div>
                                    <div class="col-md-12">
                                        <div class="col-sm-7 text-right"><label class="control-label">Fabric Lbs/Dzn (Inc Loss):</label></div>
                                        <div class="col-sm-4 text-left">
                                            <input ng-model="CostSheet.FabricWeightPerDozen" class="form-control" disabled />
                                        </div>
                                        <div class="col-sm-1 text-left"><label class="control-label">/Dozen</label></div>
                                    </div>
                                </fieldset>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="regionCSACC">
                            <div class="regionCSAccGrid">
                                <div class="ui-grid-top-panel" style="text-align:center;">
                                    Accessories:<input type="text" ng-model="txtAccessoriesName" ng-keydown="SearchKeyAccessories($event)" style="width:200px;" placeholder="Type Accessories Name & press Enter" />
                                    <button type="button" id="btnProduct" class="btn btn-default btn-sm" aria-label="right Align" ng-click="PickProduct()"><span class="glyphicon glyphicon-plus" aria-hidden="true"> Pick</span></button>
                                    <button type="button" id="btnAddAccssories" class="btn btn-default btn-sm" aria-label="right Align" ng-click="AddAccessories()"><span class="glyphicon glyphicon-plus" aria-hidden="true"> Add</span></button>
                                    <button type="button" id="btnRemoveAccssories" class="btn btn-default btn-sm" aria-label="right Align" ng-click="DeleteAccssories()"><span class="glyphicon glyphicon-remove" aria-hidden="true"> Delete</span></button>
                                    <button type="button" id="btnAccessoriesUp" class="btn btn-default btn-sm" aria-label="right Align" ng-click="AccessoriesUP()"><span class="glyphicon glyphicon-arrow-up" aria-hidden="true"> Up</span></button>
                                    <button type="button" id="btnAccessoriesDown" class="btn btn-default btn-sm" aria-label="right Align" ng-click="AccessoriesDown()"><span class="glyphicon glyphicon-arrow-down" aria-hidden="true"> Down</span></button>
                                    <button type="button" id="btnRefreshAccssories" class="btn btn-default btn-sm" aria-label="right Align" ng-click="RefreshAccessories()"><span class="glyphicon glyphicon-refresh" aria-hidden="true"> Refresh</span></button>
                                </div>
                                <div style="width: 100%; height:110px;" ui-grid="gridOptionsAccessories" ui-grid-selection ui-grid-edit ui-grid-resize-columns ui-grid-key-nav class="ui-grid-selectable"></div>
                            </div>
                            <div class="regionCSAccPanel">
                                <fieldset>
                                    <div class="col-sm-12">
                                        <div class="col-sm-7 text-right"><label class="control-label">Total Fabric Cost =</label></div>
                                        <div class="col-sm-4 text-left">
                                            <label id="lblFabricCostCurrency">$</label><input ng-model="CostSheet.FabricCostPerDozen" class="form-textField" disabled />
                                        </div>
                                        <div class="col-sm-1 text-left"><label class="control-label">/Dozen</label></div>
                                    </div>
                                    <div class="col-sm-12">
                                        <div class="col-sm-7 text-right"><label class="control-label">Total Accessories Cost =</label></div>
                                        <div class="col-sm-4 text-left">
                                            <label id="lblAcessoriesCostCurrency">$</label><input ng-model="CostSheet.AccessoriesCostPerDozen" class="form-textField" disabled />
                                        </div>
                                        <div class="col-sm-1 text-left"><label class="control-label">/Dozen</label></div>
                                    </div>
                                    <div class="col-sm-12">
                                        <div class="col-sm-7 text-right"><label class="control-label">CM Cost=</label></div>
                                        <div class="col-sm-4 text-left">
                                            <label id="lblCMCurrency">$</label><input ng-model="CostSheet.ProductionCostPerDozen" class="form-textField" ng-change="SetTotal()" />
                                        </div>
                                        <div class="col-sm-1 text-left"><label class="control-label">/Dozen</label></div>
                                    </div>
                                    <div class="col-sm-12">
                                        <div class="col-sm-7 text-right"><label class="control-label">Buyeing Commission(%)=</label></div>
                                        <div class="col-sm-4 text-left">
                                            <label>&nbsp;</label> <input ng-model="CostSheet.BuyingCommission" class="form-textField" ng-change="SetTotal()" />
                                        </div>
                                        <div class="col-sm-1 text-left"></div>
                                    </div>
                                    <div class="col-sm-12">
                                        <div class="col-sm-7 text-right"><label class="control-label">FOB Price=</label></div>
                                        <div class="col-sm-4 text-left">
                                            <label id="lblFOBCurrency">$</label><input ng-model="CostSheet.FOBPricePerPcs" class="form-textField" disabled />
                                        </div>
                                        <div class="col-sm-1 text-left"><label class="control-label">/Pcs</label></div>

                                    </div>
                                </fieldset>
                            </div>
                         </div>
                   </div>
                 </div>
                <div ng-show="CS.IsSet(2)">
                        <div class="col-md-12">
                            <div class="col-md-6 align-left">
                                <fieldset>
                                    <legend>Style Front Image</legend>
                                    <div class="col-md-12">
                                        <img id="imgFrontImage" src="" alt="Photo" style="width:100%; height:350px" />
                                    </div>
                                 </fieldset>
                            </div>
                            <div class="col-md-6">
                                <fieldset>
                                    <legend>Style Back Image</legend>
                                    <div class="col-md-12">
                                        <img id="imgBackImage" src="" alt="Photo" style="width:100%; height:350px" />
                                    </div>
                                </fieldset>
                            </div>
                        </div>
                </div>
            </section>
        </div>
        <fieldset style="height:10%;">
            <legend>Action</legend>
            <div class="col-md-12 text-right">
                <button type="button" ng-hide="btnApprove" class="btn btn-sm" aria-label="Left Align" ng-click="Approve()"> <span class="glyphicon glyphicon-ok" aria-hidden="true"> Approve</span> </button>
                <button type="button" ng-hide="btnSave" class="btn btn-sm" aria-label="Left Align" ng-click="Save()"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"> Save</span> </button>
                <button type="button" id="btnclose" class="btn btn-sm" aria-label="Left Align" ng-click="Close()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"> Close</span> </button>
            </div>
        </fieldset>
    </div>
</body>
</html>
<style type="text/css">
    .regionCS .form-horizontal .control-label {
        padding-top: 1px;
    }

    .regionCS .form-control {
        height:23px;
        padding: 0px 4px;
        font-size: 12px;
    }

    .regionCS .col-md-12 {
        width: 100%;
        padding-right: 5px;
        padding-left: 5px;
        margin-bottom: 5px;
    }

     .regionCS .col-md-1 {
        width:10%;
        padding-right: 5px;
        padding-left: 5px;
    }
    .regionCS .col-md-2 {
        width: 13%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionCS .col-md-3 {
        width: 20%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionCS .col-md-4 {
        width:25%;
        padding-right: 5px;
        padding-left: 5px;
    }

  
    .regionCS .col-md-6 {
        width:50%;
        padding-right: 5px;
        padding-left: 5px;
    }

     .regionCS .col-md-7 {
        width:65%;
        padding-right:5px;
        padding-left:0px;
    }
      .regionCS .col-md-5 {
        width:35%;
        padding-right:5px;
        padding-left:0px;
    }
     
    .regionCS .col-md-8 {
        width: 66.66%;
        padding-right:0px;
        padding-left:5px;
    }

    .regionCS .btn-sm {
        padding: 2px 7px;
    }

    .regionCS .input-group-addon {
        padding:3px 6px;
    }


   .regionCSAcc .regionCSYarn{
        width: 100%;
        height:142px;
    }
    .regionCSYarnGrid{
        width:70%;
        height:142px;
        float:left;
    }
   
 .regionCSYarnPanel{
        width:29%;
        height:130px;
        float:right;
    }

 
  .regionCSAccGrid{
        width:70%;
        height:130px;
        float:left;
    }
  .regionCSAccPanel{
        width:29%;
        height:130px;
        float:right;
    }

 .regionCSYarnPanel .form-control {
        width:50px;  
        height:22px;
        padding: 0px 2px;
        font-size: 12px;
    }

 .regionCSYarnPanel .col-sm-7 {
        width:60%;
        padding-right: 5px;
        padding-left: 5px;
    }
 .regionCSYarnPanel .col-sm-4 {
        width:25%;
        padding-right: 5px;
        padding-left: 5px;
        bottom:2px;
    }
 .regionCSYarnPanel .col-sm-1 {
        width:15%;
        padding-right: 5px;
        padding-left: 5px;
    }

    
    .regionCSAccPanel .form-textField{
        width:42px;  
        height:22px;
        padding: 0px 2px;
        font-size: 12px;
    }

      .regionCSAccPanel .col-sm-7 {
        width:61%;
        padding-right:1px;
        padding-left:0px;
    }
     .regionCSAccPanel .col-sm-5 {
        width:37%;
        padding-right:2px;
        padding-left:2px;
    }
     .regionCSAccPanel .col-sm-4 {
        width:27%;
        padding-right:2px;
        padding-left:2px;
    }
     .regionCSAccPanel .col-sm-1 {
        width:12%;
        padding-right:2px;
        padding-left:2px;
    }
       .ui-grid-cell.ui-grid-disable-selection.ui-grid-row-header-cell {
    pointer-events: auto;
}

</style>
<script type="text/javascript">

    var oCostSheet =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    var oCurrencies =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.Currencies));
    var oWeightUnits =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.WeightUnits));
    var oCountUnits =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.CountUnits));
    var nOperationType = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.OperationType));
    var oCostSheetYarnDetails = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.CostSheetYarnDetails));
    var oCostSheetAccessoriesDetails = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.CostSheetAccessoriesDetails));
    var oAuthorizationRolesMapping =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.AuthorizationRolesMapping]));

    var CostSheetApp = angular.module('CostSheetApp', ['ngAnimate', 'ui.bootstrap','ui.grid','ui.grid.selection','ui.grid.edit', 'ui.grid.rowEdit', 'ui.grid.resizeColumns','ui.grid.cellNav','ms.service','uiKeyUpDown']);
    CostSheetApp.controller('CostSheetController', function ($scope,uiGridConstants, $http,$uibModal,$log,msModal,userSession,msGridControl) {
        debugger;
        $('.date-container').datepicker({
            format: "dd M yyyy",
            calendarWeeks: true,
            autoclose: true,
            todayHighlight: true
        });
        if(nOperationType==1)//Cost sheet
        {
            $scope.CSCAption = 'Cost'
        }else{
            $scope.CSCAption = 'Budget'
        }
        $scope.OperationType = nOperationType;

        $scope.CostSheet=oCostSheet;
        $scope.CostSheet.BUID = sessionStorage.getItem('BUID');
        $scope.Currencies=oCurrencies;
        $scope.CostSheetYarnDetails=oCostSheetYarnDetails;
        $scope.CostSheetAccessoriesDetails=oCostSheetAccessoriesDetails;
        $scope.WeightUnits=oWeightUnits;
        $scope.CountUnits=oCountUnits;


        ////Cost SheetDetail
        $scope.gridOptionsYarn = {
            enableFullRowSelection: true,
            enableHighlighting : true,
            showColumnFooter: true,
            multiSelect: false,
            enableRowSelection: true,
            enableSelectAll: false,
            columnDefs: [
              { field: 'ProductCode', name:'Code', width:'10%',enableCellEdit:false },
              { field: 'ProductName', name:'Yarn Name', width:'10%',enableCellEdit:false },
              { field: 'Sequence', name: 'Sequence', width: '10%',align:'left', enableSorting: false,enableCellEdit:false },
              { field: 'Ply', name: 'Ply', width: '10%', enableSorting: false,enableCellEdit:true },
              { field: 'MaterialMarketPrice', name: 'Yarn Price/LBS',aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, cellFilter: 'number: 2', cellClass: 'text-right',  footerCellClass: 'text-right',width: '15%',align:'right',enableCellEdit:true },
              { field: 'UsePercentage', name: 'Use(%)',aggregationType: uiGridConstants.aggregationTypes.sum,aggregationHideLabel: true,cellFilter: 'number: 2', cellClass: 'text-right', footerCellClass: 'text-right',  width: '15%', enableSorting: false,enableCellEdit:true },
              { field: 'EstimatedCost', name: 'Estimated Cost', width: '10%', cellClass: 'text-right', aggregationType: uiGridConstants.aggregationTypes.sum,aggregationHideLabel: true,cellFilter: 'number: 2', cellClass: 'text-right', footerCellClass: 'text-right',  width: '15%', enableSorting: false,enableCellEdit:false },
              { field: 'WastagePercentPerMaterial', name: 'Westage(%)', width: '15%', enableSorting: false,enableCellEdit:true }
            ],
            data:oCostSheetYarnDetails,
            onRegisterApi: function (gridApi) {
                $scope.gridApiYarnDetails = gridApi;
                gridApi.edit.on.afterCellEdit($scope,
                 function (rowEntity, colDef, newValue, oldValue)
                 {
                     debugger;
                     rowEntity.EstimatedCost=parseFloat(parseFloat(rowEntity.MaterialMarketPrice) * parseFloat(rowEntity.UsePercentage)/100);
                     $scope.SetTotal();
                     return rowEntity;
                 });
            }
        };

        //Cost Sheet Accessorie details
        $scope.gridOptionsAccessories = {
            enableFullRowSelection: true,
            enableHighlighting : true,
            showColumnFooter: false,
            multiSelect: false,
            enableRowSelection: true,
            enableSelectAll: false,
            columnDefs: [
              { field: 'ProductCode', name:'Code', width:'15%',enableCellEdit:false },
              { field: 'ProductName', name:'Accssories Name', width:'15%',enableCellEdit:false },
              { field: 'Sequence', name: 'Sequence', width: '20%',align:'left', enableSorting: false,enableCellEdit:false },
              { field: 'EstimatedCost', name: 'Estimated Cost', width: '20%',align:'left',  cellFilter: 'number: 2', cellClass: 'text-right',  enableSorting: false,enableCellEdit:true }
            ],
            data:oCostSheetAccessoriesDetails,
            onRegisterApi: function (gridApi) {
                $scope.gridApiAccessoriesDetails = gridApi;
                gridApi.edit.on.afterCellEdit($scope,
                function (rowEntity, colDef, newValue, oldValue)
                {
                    debugger;
                    rowEntity.EstimatedCost=parseFloat(rowEntity.EstimatedCost);
                    $scope.SetTotal();
                    return rowEntity;
                });
            }
        };


        //Yarn add , edit & Delete start
        $scope.AddYarn = function()
        {
            var oCostSheetDetail = $('#divCS').data('CostSheetDetail');
            if(oCostSheetDetail==null || parseInt(oCostSheetDetail.MaterialID)<=0 )
            {
                alert("Please Pick Yarn ");
                return;
            }
            if($scope.IsExists(oCostSheetDetail.MaterialID,true))
            {
                alert("Already Exist");
                return;
            }

            $scope.gridOptionsYarn.data.push(oCostSheetDetail);
            $scope.txtYarnName = "";
            $('#divCS').data('CostSheetDetail',null);
            $scope.SetTotal();

        }
        $scope.DeleteYarn =function ()
        {
            var oYarnDetail = $scope.gridApiYarnDetails.selection.getSelectedRows()[0];
            if(oYarnDetail==null)
            {
                alert("Select At least One item !");
                return;
            }

            if (!confirm("Confirm to Delete?")) return ;
            angular.forEach($scope.gridOptionsYarn.data, function (value, index)
            {
                if (value.MaterialID == oYarnDetail.MaterialID)
                {
                    alert("Successfully Deleted.");
                    $scope.gridOptionsYarn.data.splice(index, 1);
                }
            }, $scope.gridOptionsYarn.data);

            $scope.SetTotal();

        }
        $scope.RefreshYarn = function ()
        {
            //endEditingYarn();
            var oYarnDetails = $scope.gridOptionsYarn.data;
            if(oYarnDetails !=null)
            {
                $scope.gridOptionsYarn.data = oYarnDetails;
            }
        }

        //Accessories  Add, Edit & Delete Start
        $scope.AddAccessories = function ()
        {
            var oAccessoriesDetail = $('#divCS').data('AccessoriesDetail');
            if(oAccessoriesDetail==null || parseInt(oAccessoriesDetail.MaterialID)<=0 )
            {
                alert("Please Pick Accessories ");
                return;
            }
            if($scope.IsExists(oAccessoriesDetail.MaterialID,true))
                alert("Already Exist");
            $scope.gridOptionsAccessories.data.push(oAccessoriesDetail);
            $scope.txtAccessoriesName = '';
            $('#divCS').data('AccessoriesDetail',null);
            $scope.SetTotal();
        }
        $scope.DeleteAccssories = function ()
        {
            var oAccessoriesDetail = $scope.gridApiAccessoriesDetails.selection.getSelectedRows()[0];
            if(oAccessoriesDetail==null)
            {
                alert("Select At least One item !");
                return;
            }
            if (!confirm("Confirm to Delete?")) return ;
            angular.forEach($scope.gridOptionsAccessories.data, function (value, index)
            {
                if (value.MaterialID == oAccessoriesDetail.MaterialID)
                {
                    alert("Successfully Deleted.");
                    $scope.gridOptionsAccessories.data.splice(index, 1);
                }
            }, $scope.gridOptionsAccessories.data);
            $scope.SetTotal();
        }
        $scope.RefreshAccessories = function ()
        {
            //endEditingAccessories();
            var oAccessoriesDetails =  $scope.gridOptionsAccessories.data;
            if(oAccessoriesDetails !=null)
            {
                $scope.gridOptionsAccessories.data = oAccessoriesDetails;
            }
        }

        //Accessoreis End
        $scope.IsExists= function (nProductID, bIsYarn)
        {
            if(bIsYarn==true)
            {
                var oYarnDetails = $scope.gridApiYarnDetails.selection.getSelectedRows(); // $('#tblYarn').datagrid('getRows');
                for(var i =0;i<oYarnDetails.length;i++)
                {
                    if( parseInt(oYarnDetails[i].MaterialID)==parseInt(nProductID) )
                    {
                        return true;
                    }
                }
                return false;
            }else{

                var oAccessorieDetails = $scope.gridApiAccessoriesDetails.selection.getSelectedRows();   //$('#tblAccssories').datagrid('getRows');
                for(var i =0;i<oAccessorieDetails.length;i++)
                {
                    if( parseInt(oAccessorieDetails[i].MaterialID) == parseInt(nProductID))
                    {
                        return true;
                    }
                }
                return false;


            }
            return false;

        }
        $scope.SetTotal =function ()
        {
            debugger;
            //Yarn Part Start
            $scope.txtGarmentsLbs = formatPrice($scope.CostSheet.WeightPerDozen,0);
            $scope.CostSheet.ProcessLoss = formatPrice(($scope.CostSheet.WeightPerDozen * $scope.CostSheet.WastageInPercent)/100 ,0);
            $scope.CostSheet.FabricWeightPerDozen = formatPrice((parseFloat($scope.CostSheet.WeightPerDozen) + parseFloat( $scope.CostSheet.ProcessLoss)) ,0);
            var oYarnDetails = $scope.gridOptionsYarn.data;

            $scope.TotalPercantage =0;
            $scope.TotalYarnEstimatedCost = 0;
            $scope.TotalWestagePercent = 0;
            if(oYarnDetails.length>0)
            {
                for(var i =0;i<oYarnDetails.length;i++)
                {
                    $scope.TotalPercantage+=parseFloat(oYarnDetails[i].UsePercentage);
                    $scope.TotalYarnEstimatedCost+= parseFloat(oYarnDetails[i].EstimatedCost);
                    $scope.TotalWestagePercent += parseFloat(parseFloat(oYarnDetails[i].WastagePercentPerMaterial * parseFloat(0.01)) * parseFloat(oYarnDetails[i].UsePercentage * parseFloat(0.01)) *  $scope.CostSheet.WeightPerDozen);
                    parseFloat($scope.TotalPercantage);
                    parseFloat($scope.TotalYarnEstimatedCost);
                }
            }


            $scope.CostSheet.FabricCostPerDozen = formatPrice(parseFloat($scope.TotalYarnEstimatedCost) * parseFloat($scope.CostSheet.FabricWeightPerDozen),0);
            $scope.TotalWestagePercent = parseFloat(parseFloat($scope.TotalWestagePercent) / parseFloat( $scope.CostSheet.WeightPerDozen) * 100);
            $scope.CostSheet.WastageInPercent = $scope.TotalWestagePercent.toFixed(2);//
            // Yarn Part End

            //Accessories Part start
            var oAccessoriesDetails = $scope.gridOptionsAccessories.data;
            $scope.CostSheet.AccessoriesCostPerDozen = 0;
            if(oAccessoriesDetails.length>0)
            {
                for(var i =0;i<oAccessoriesDetails.length;i++)
                {
                    $scope.CostSheet.AccessoriesCostPerDozen+= parseFloat(oAccessoriesDetails[i].EstimatedCost);
                }
            }
            if(parseFloat($scope.CostSheet.BuyingCommission)>100)
            {
                alert("Buyeing Commission Should be Less than 100 %");
            }
            var nTotalCostPerPcs = formatPrice( parseFloat(parseFloat($scope.CostSheet.FabricCostPerDozen)+parseFloat( $scope.CostSheet.ProductionCostPerDozen )+parseFloat($scope.CostSheet.AccessoriesCostPerDozen))/12,0);
            var ntxtByiengCommissionPercentValue = parseFloat(parseFloat(nTotalCostPerPcs) * parseFloat($scope.CostSheet.BuyingCommission/parseFloat(100)));
            $scope.CostSheet.FOBPricePerPcs = formatPrice(parseFloat(parseFloat(nTotalCostPerPcs)  + parseFloat(ntxtByiengCommissionPercentValue)),0);

            //Currency Symbol Change
            var sSymbol = $scope.GetCurrency();
            document.getElementById('lblFabricCostCurrency').innerHTML= sSymbol+" ";
            document.getElementById('lblAcessoriesCostCurrency').innerHTML= sSymbol+" ";
            document.getElementById('lblCMCurrency').innerHTML= sSymbol;
            document.getElementById('lblFOBCurrency').innerHTML= sSymbol+" ";
            // Accessoreis Part End

        }
        $scope.GetCurrency = function ()
        {
            debugger;
            for(var i = 0;i<$scope.Currencies.length;i++)
            {
                if(parseInt($scope.Currencies[i].CurrencyID)== parseInt($scope.CostSheet.CurrencyID))
                {
                    return $scope.Currencies[i].Symbol;
                }
            }
            return "";
        };
        $scope.StyleImage = function (nTSID,bIsFronImage)
        {
            debugger;
            var oTechnicalSheet = {TechnicalSheetID:nTSID, IsFronImage:bIsFronImage};
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/CostSheet/GetStyleImageInBase64',$.param(oTechnicalSheet), config).then(
                                function (response)
                                {
                                    if(bIsFronImage == true)
                                    {
                                        $('#imgFrontImage').attr('src', "data:image/jpg;base64," + response.data.base64imgage );
                                    }else
                                    {
                                        $('#imgBackImage').attr('src', "data:image/jpg;base64," + response.data.base64imgage );
                                    }
                                },
                                  function (response) { alert(jQuery.parseJSON(response.data).Message);}
                            );



        };

        $scope.PickStyle = function()
        {
            var oTechnicalSheet = {
                StyleNo:$.trim($scope.CostSheet.StyleNo),
                BUID:sessionStorage.getItem('BUID')
            };
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/TechnicalSheet/StyleSearch',$.param(oTechnicalSheet), config).then(
                                function (response)
                                {
                                    var oColumns = [];
                                    var oColumn = { field: 'StyleNo', name: 'Style No',width: '20%'  };oColumns.push(oColumn);
                                    oColumn = { field: 'BuyerName', name: 'Buyer',width: '50%', enableSorting: false  };oColumns.push(oColumn);
                                    var results=response.data;
                                    var modalObj={
                                        size:'md',
                                        modalcontroller:'ModalCommonListCtrl',
                                        appcontroller:'CostSheetController',
                                        objs:results,
                                        multiSelect:false,
                                        pickertitle:'Style List',
                                        searchingbyfieldName:'StyleNo',
                                        columns:oColumns
                                    }
                                    var modalInstance=msModal.Instance(modalObj);
                                    modalInstance.result.then(function (result)
                                    {
                                        debugger;
                                        if(parseInt(result.TechnicalSheetID)>0)
                                        {
                                            $scope.CostSheet.StyleNo = result.StyleNo;
                                            $scope.CostSheet.TechnicalSheetID=  result.TechnicalSheetID;
                                            $scope.CostSheet.BuyerName= result.BuyerName;
                                            $scope.CostSheet.KnittingPatternName=  result.KnittingPatternName;
                                            $scope.CostSheet.GG= result.GG;
                                            $scope.CostSheet.SizeRange=  result.SizeRange;
                                            $scope.CostSheet.ColorRange =  result.ColorRange;
                                            $scope.CostSheet.StyleDescription =  result.StyleDescription;
                                            $scope.CostSheet.MeasurementUnitID = result.MeasurementUnitID;
                                            if($scope.OperationType==2)//Budget
                                            {
                                                $scope.LoadExistCostingInfo($scope.CostSheet.TechnicalSheetID);
                                            }
                                            $scope.StyleImage($scope.CostSheet.TechnicalSheetID,true);
                                            $$scope.StyleImage($scope.CostSheet.TechnicalSheetID,false);
                                        }
                                    }, function () {
                                        $log.info('Modal dismissed at: ' + new Date());
                                    });
                                },
                                  function (response) { alert(response.data.Message);}
                            );
        }
        $scope.SearchKeyStyle =  function(e)
        {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {
                if($scope.CostSheet.StyleNo!="")
                {
                    $scope.PickStyle();
                }
            }else if (code == 8) //backspace=8
            {
                //debugger;
                $scope.StyleNo = "";
                $scope.CostSheet.TechnicalSheetID=  0;
                $scope.CostSheet.BuyerName = "";
                $scope.CostSheet.KnittingPatternName = "";
                $scope.CostSheet.GG = "";
                $scope.CostSheet.SizeRange = "";
                $scope.CostSheet.ColorRange = "";
                $scope.CostSheet.StyleDescription = "";
                $scope.CostSheet.MeasurementUnitID = 0;
                $scope.StyleImage(0,true);
                $scope.StyleImage(0,false);
            }
        };
        $scope.LoadExistCostingInfo = function(nTechnicalSheetID)
        {
            var oTechnicalSheet = {TechnicalSheetID:nTechnicalSheetID};
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/CostSheet/LoadCostingInfo',$.param(oTechnicalSheet), config).then(
                                function (response)
                                {
                                    var oCostSheet=jQuery.parseJSON(response.data);
                                    if(oCostSheet!=null && oCostSheet.TechnicalSheetID>0)
                                    {

                                        $scope.CostSheet = oCostSheet;
                                        $scope.CostSheetYarnDetails=oCostSheet.CostSheetYarnDetails;
                                        $scope.CostSheetAccessoriesDetails=oCostSheet.CostSheetAccessoriesDetails;
                                        $scope.gridOptionsYarn.data =  $scope.CostSheetYarnDetails
                                        $scope.gridOptionsAccessories.data =  $scope.CostSheetAccessoriesDetails
                                    }
                                },
                                  function (response) { alert(jQuery.parseJSON(response.data).Message);}
                            );
        }
        $scope.SearchKeyMerchandiser =  function(e)
        {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {

                if($scope.CostSheet.MerchandiserName!="")
                {
                    var oEmployee = {Name:$scope.CostSheet.MerchandiserName};
                    //debugger;
                    var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
                    $http.post(sessionStorage.getItem('BaseAddress')+'/CostSheet/GetEmployees',$.param(oEmployee), config).then(
                                        function (response)
                                        {
                                            var oColumns = [];
                                            var oColumn = { field: 'Code', name: 'Code',width: '20%'  };oColumns.push(oColumn);
                                            oColumn = { field: 'Name', name: 'Employee',width: '50%', enableSorting: false  };oColumns.push(oColumn);
                                            var results=jQuery.parseJSON(response.data);
                                            var modalObj={
                                                size:'md',
                                                modalcontroller:'ModalCommonListCtrl',
                                                appcontroller:'CostSheetController',
                                                objs:results,
                                                multiSelect:false,
                                                pickertitle:'Merchandiser List',
                                                searchingbyfieldName:'Name',
                                                columns:oColumns
                                            }
                                            var modalInstance=msModal.Instance(modalObj);
                                            modalInstance.result.then(function (result)
                                            {
                                                debugger;
                                                if(parseInt(result.EmployeeID)>0)
                                                {
                                                    $scope.CostSheet.MerchandiserID = result.EmployeeID;
                                                    $scope.CostSheet.MerchandiserName = result.Name;

                                                }
                                            }, function () {
                                                $log.info('Modal dismissed at: ' + new Date());
                                            });
                                        },
                                          function (response) { alert(jQuery.parseJSON(response.data).Message);}
                                    );
                }
            }else if (code == 8) //backspace=8
            {
                //debugger;
                $scope.CostSheet.MerchandiserName = "";
                $scope.CostSheet.MerchandiserID = 0;
            }
        };
        $scope.SearchKeyYarn =  function(e)
        {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {
                if($scope.txtYarnName!="")
                {
                    var oProduct = {
                        ProductName:$.trim($scope.txtYarnName),
                        ModuleNameInInt:108,//EnumModuleName : CostSheet =108
                        ProductUsagesInInt:5,//EnumProductUsages : Yarn/fabric = 5
                        BUID:sessionStorage.getItem('BUID')
                    };
                    var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
                    $http.post(sessionStorage.getItem('BaseAddress')+'/Product/GetProductsByBUModuleWithProductUse',$.param(oProduct), config).then(
                                        function (response)
                                        {
                                            var oColumns = [];
                                            var oColumn = { field: 'ProductCode', name: 'Code',width: '20%'  };oColumns.push(oColumn);
                                            oColumn = { field: 'ProductName', name: 'Product',width: '50%', enableSorting: false  };oColumns.push(oColumn);
                                            var results=jQuery.parseJSON(response.data);
                                            var modalObj={
                                                size:'md',
                                                modalcontroller:'ModalCommonListCtrl',
                                                appcontroller:'CostSheetController',
                                                objs:results,
                                                multiSelect:false,
                                                pickertitle:'Yarn List',
                                                searchingbyfieldName:'ProductName',
                                                columns:oColumns
                                            }
                                            var modalInstance=msModal.Instance(modalObj);
                                            modalInstance.result.then(function (result)
                                            {
                                                debugger;
                                                if(parseInt(result.ProductID)>0)
                                                {

                                                    $scope.txtYarnName = result.ProductName;
                                                    var oCostSheetDetail = {
                                                        CostSheetDetailID:0,
                                                        CostSheetID:$scope.CostSheet.CostSheetID,
                                                        MaterialTypeInInt: 1, // 1 = yarn : 2 = Accessories
                                                        MaterialID:result.ProductID,
                                                        ProductCode :result.ProductCode,
                                                        ProductName :result.ProductName,
                                                        Sequence:parseInt($scope.gridOptionsYarn.data.length)+1,
                                                        Ply : "",
                                                        MaterialMarketPrice : 0,
                                                        UsePercentage: parseFloat(parseFloat(100) - parseFloat($scope.TotalPercantage)),
                                                        EstimatedCost :0,
                                                        WastagePercentPerMaterial:0
                                                    };
                                                    $('#divCS').data('CostSheetDetail',oCostSheetDetail);
                                                }
                                            }, function () {
                                                $log.info('Modal dismissed at: ' + new Date());
                                            });
                                        },
                                          function (response) { alert(jQuery.parseJSON(response.data).Message);}
                                    );
                }
            }else if (code == 8) //backspace=8
            {
                //debugger;
                $scope.txtYarnName = "";
                $('#divCS').data('CostSheetDetail',null);
            }
        };
        $scope.SearchKeyAccessories =  function(e)
        {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {
                if($scope.txtAccessoriesName!="")
                {
                    $scope.PickProduct();
                }
            }else if (code == 8) //backspace=8
            {
                //debugger;
                $scope.txtAccessoriesName = "";
                $('#divCS').data('AccessoriesDetail',null);
            }
        };
        $scope.PickProduct =  function()
        {
            var oProduct = {
                ProductName:$.trim($scope.txtAccessoriesName),
                ModuleNameInInt:108,//EnumModuleName : CostSheet =108
                ProductUsagesInInt:6,//EnumProductUsages : Accessoreis = 5
                BUID:sessionStorage.getItem('BUID')
            };
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/Product/GetProductsByBUModuleWithProductUse',$.param(oProduct), config).then(
                                function (response)
                                {
                                    var oColumns = [];
                                    var oColumn = { field: 'ProductCode', name: 'Code',width: '20%'  };oColumns.push(oColumn);
                                    oColumn = { field: 'ProductName', name: 'Product',width: '50%', enableSorting: false  };oColumns.push(oColumn);
                                    var results=jQuery.parseJSON(response.data);
                                    var modalObj={
                                        size:'md',
                                        modalcontroller:'ModalCommonListCtrl',
                                        appcontroller:'CostSheetController',
                                        objs:results,
                                        multiSelect:false,
                                        pickertitle:'Accessories List',
                                        searchingbyfieldName:'ProductName',
                                        columns:oColumns
                                    }
                                    var modalInstance=msModal.Instance(modalObj);
                                    modalInstance.result.then(function (result)
                                    {
                                        debugger;
                                        if(parseInt(result.ProductID)>0)
                                        {

                                            $scope.txtAccessoriesName = result.ProductName;
                                            var oAccessoriesDetail = {
                                                CostSheetDetailID:0,
                                                CostSheetID:$scope.CostSheet.CostSheetID,
                                                MaterialTypeInInt: 2, // 1 = yarn : 2 = Accessories
                                                MaterialID:result.ProductID,
                                                ProductCode :result.ProductCode,
                                                ProductName :result.ProductName,
                                                Sequence: parseInt($scope.gridOptionsAccessories.data.length)+1,
                                                EstimatedCost :0,
                                                EstimatedCostInString:'0.0/Dozen'
                                            };
                                            $('#divCS').data('AccessoriesDetail',oAccessoriesDetail);
                                        }
                                    }, function () {
                                        $log.info('Modal dismissed at: ' + new Date());
                                    });
                                },
                                  function (response) { alert(jQuery.parseJSON(response.data).Message);}
                            );
        };

        $scope.YarnUP = function ()
        {
            debugger;
            $scope.CostSheetYarnDetails = $scope.gridOptionsYarn.data;
            var oCostSheetDetail = $scope.gridApiYarnDetails.selection.getSelectedRows()[0];
            if(oCostSheetDetail==null || parseInt(oCostSheetDetail.MaterialID)<=0)
            {
                alert("Please select Cost Sheet");
                return;
            }
            var SelectedRowIndex=0;
            angular.forEach($scope.gridOptionsYarn.data, function (value, index)
            {
                if (value.MaterialID == oCostSheetDetail.MaterialID)
                {
                    SelectedRowIndex = index;
                }
            }, $scope.gridOptionsYarn.data);

            if(SelectedRowIndex==0)return;
            var oCostSheetYarnDetails=[];
            oCostSheetYarnDetails= $scope.CostSheetYarnDetails;
            $scope.CostSheetYarnDetails=[];
            for(var i=0; i<oCostSheetYarnDetails.length; i++)
            {
                if(i==(SelectedRowIndex-1))
                {
                    $scope.CostSheetYarnDetails[i]=oCostSheetYarnDetails[i+1];
                }
                else if(i==SelectedRowIndex)
                {
                    $scope.CostSheetYarnDetails[i]=oCostSheetYarnDetails[i-1];
                }
                else
                {
                    $scope.CostSheetYarnDetails[i]=oCostSheetYarnDetails[i];
                }
                $scope.CostSheetYarnDetails[i].Sequence=i+1;
            }
            $scope.gridOptionsYarn.data =  $scope.CostSheetYarnDetails;
            var newSelectedRowIndex=SelectedRowIndex-1;
            $scope.gridApiYarnDetails.selection.selectRow(newSelectedRowIndex);

        }
        $scope.YarnDown =  function ()
        {
            debugger;
            $scope.CostSheetYarnDetails = $scope.gridOptionsYarn.data;
            var oCostSheetDetail = $scope.gridApiYarnDetails.selection.getSelectedRows()[0];
            if(oCostSheetDetail==null || parseInt(oCostSheetDetail.MaterialID)<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            var SelectedRowIndex=0;
            angular.forEach($scope.gridOptionsYarn.data, function (value, index)
            {
                if (value.MaterialID == oCostSheetDetail.MaterialID)
                {
                    SelectedRowIndex = index;
                }
            }, $scope.gridOptionsYarn.data);
            if(SelectedRowIndex==($scope.CostSheetYarnDetails.length-1))return;
            var oCostSheetYarnDetails=[];
            oCostSheetYarnDetails=$scope.CostSheetYarnDetails;
            $scope.CostSheetYarnDetails=[];
            for(var i=0; i<oCostSheetYarnDetails.length; i++)
            {
                if(i==(SelectedRowIndex+1))
                {
                    $scope.CostSheetYarnDetails[i]=oCostSheetYarnDetails[i-1];
                }
                else if(i==SelectedRowIndex)
                {
                    $scope.CostSheetYarnDetails[i]=oCostSheetYarnDetails[i+1];
                }
                else
                {
                    $scope.CostSheetYarnDetails[i]=oCostSheetYarnDetails[i];
                }
                $scope.CostSheetYarnDetails[i].Sequence=i+1;
            }

            $scope.gridOptionsYarn.data =$scope.CostSheetYarnDetails
            var newSelectedRowIndex=SelectedRowIndex+1;
            $scope.gridApiYarnDetails.selection.selectRow(newSelectedRowIndex);

        }
        $scope.AccessoriesUP = function ()
        {
            debugger;
            $scope.CostSheetAccessoriesDetails= $scope.gridOptionsAccessories.data;
            var oCostSheetDetail = $scope.gridApiAccessoriesDetails.selection.getSelectedRows()[0];
            if(oCostSheetDetail==null || parseInt(oCostSheetDetail.MaterialID)<=0)
            {
                alert("Please select Cost Sheet");
                return;
            }
            var SelectedRowIndex=0;
            angular.forEach($scope.gridOptionsAccessories.data, function (value, index)
            {
                if (value.MaterialID == oCostSheetDetail.MaterialID)
                {
                    SelectedRowIndex = index;
                }
            }, $scope.gridOptionsAccessories.data);

            if(SelectedRowIndex==0)return;
            var oCostSheetAccessoriesDetails=[];
            oCostSheetAccessoriesDetails= $scope.CostSheetAccessoriesDetails;
            $scope.CostSheetAccessoriesDetails=[];
            for(var i=0; i<oCostSheetAccessoriesDetails.length; i++)
            {
                if(i==(SelectedRowIndex-1))
                {
                    $scope.CostSheetAccessoriesDetails[i]=oCostSheetAccessoriesDetails[i+1];
                }
                else if(i==SelectedRowIndex)
                {
                    $scope.CostSheetAccessoriesDetails[i]=oCostSheetAccessoriesDetails[i-1];
                }
                else
                {
                    $scope.CostSheetAccessoriesDetails[i]=oCostSheetAccessoriesDetails[i];
                }
                $scope.CostSheetAccessoriesDetails[i].Sequence=i+1;
            }

            $scope.gridOptionsAccessories.data = $scope.CostSheetAccessoriesDetails;
            var newSelectedRowIndex=SelectedRowIndex-1;
            $scope.gridApiAccessoriesDetails.selection.selectRow(newSelectedRowIndex);
        }
        $scope.AccessoriesDown =  function ()
        {
            debugger;
            $scope.CostSheetAccessoriesDetails= $scope.gridOptionsAccessories.data;
            var oCostSheetDetail = $scope.gridApiAccessoriesDetails.selection.getSelectedRows()[0];
            if(oCostSheetDetail==null || parseInt(oCostSheetDetail.MaterialID)<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            var SelectedRowIndex=0;
            angular.forEach($scope.gridOptionsAccessories.data, function (value, index)
            {
                if (value.MaterialID == oCostSheetDetail.MaterialID)
                {
                    SelectedRowIndex = index;
                }
            }, $scope.gridOptionsAccessories.data);

            if(SelectedRowIndex==($scope.CostSheetAccessoriesDetails.length-1))return;
            var oCostSheetAccessoriesDetails=[];
            oCostSheetAccessoriesDetails=$scope.CostSheetAccessoriesDetails;
            $scope.CostSheetAccessoriesDetails=[];
            for(var i=0; i<oCostSheetAccessoriesDetails.length; i++)
            {
                if(i==(SelectedRowIndex+1))
                {
                    $scope.CostSheetAccessoriesDetails[i]=oCostSheetAccessoriesDetails[i-1];
                }
                else if(i==SelectedRowIndex)
                {
                    $scope.CostSheetAccessoriesDetails[i]=oCostSheetAccessoriesDetails[i+1];
                }
                else
                {
                    $scope.CostSheetAccessoriesDetails[i]=oCostSheetAccessoriesDetails[i];
                }
                $scope.CostSheetAccessoriesDetails[i].Sequence=i+1;
            }
            $scope.gridOptionsAccessories.data = $scope.CostSheetAccessoriesDetails;
            var newSelectedRowIndex=SelectedRowIndex+1;
            $scope.gridOptionsAccessories.selection.selectRow(newSelectedRowIndex);
        }
        $scope.ChangeUnit = function ()
        {
            debugger
            document.getElementById('lblWeightCaption').innerHTML = 'Weight '+$scope.GetWeightUnit()+"/Dozen:";
            $scope.gridOptionsYarn.columnDefs[4].displayName = 'Unit Price/'+$scope.GetWeightUnit();
            //$scope.gridApiYarnDetails.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);
        };

        $scope.GetWeightUnit = function ()
        {
            for(var i = 0;i<$scope.WeightUnits.length;i++)
            {
                if(parseInt($scope.WeightUnits[i].MeasurementUnitID)==parseInt($scope.CostSheet.WeightUnitID))
                {
                    return $scope.WeightUnits[i].Symbol;
                }
            }
            return "";
        }
        $scope.Save = function ()
        {
            //debugger;
            if(!$scope.ValidateInput()) return;
            var oCostSheet = $scope.CostSheetRefreshObject();
            $.ajax({
                type: "POST",
                dataType: "json",
                url : _sBaseAddress+"/CostSheet/Save",
                traditional: true,
                data:  JSON.stringify(oCostSheet),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    //debugger;
                    var oCostSheet= jQuery.parseJSON(data);
                    if (oCostSheet.ErrorMessage=="" || oCostSheet.ErrorMessage==null)
                    {
                        alert("Data Save Successfully!!");
                        var oCostSheets = sessionStorage.getItem("CostSheets");
                        var nIndex = parseInt(sessionStorage.getItem("SelectedRowIndex"));
                        if (oCostSheets != null) {
                            oCostSheets = jQuery.parseJSON(oCostSheets);
                        }
                        else {
                            oCostSheets = [];
                        }
                        if (nIndex != -1) {
                            oCostSheets[nIndex] = oCostSheet;
                        }
                        else {
                            sessionStorage.setItem("SelectedRowIndex", oCostSheets.length);
                            oCostSheets.push(oCostSheet);
                        }
                        sessionStorage.setItem("CostSheets", JSON.stringify(oCostSheets));
                        window.location.href = sessionStorage.getItem("BackLink");
                    }
                    else
                    {
                        alert(_oCostSheet.ErrorMessage);
                    }
                },
                error: function (xhr, status, error)
                {
                    alert(error);
                }
            });

        }
        $scope.Approve = function ()
        {
            if(!$scope.ValidateInput()) return;
            var oCostSheet=$scope.CostSheetRefreshObject();
            $.ajax({
                type: "POST",
                dataType: "json",
                url : _sBaseAddress+"/CostSheet/Approve",
                traditional: true,
                data:  JSON.stringify(oCostSheet),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    //debugger;
                    var oCostSheet= jQuery.parseJSON(data);
                    if (oCostSheet.ErrorMessage=="" || oCostSheet.ErrorMessage==null)
                    {
                        alert("Successfully Approved ");
                        var oCostSheets = sessionStorage.getItem("CostSheets");
                        var nIndex = parseInt(sessionStorage.getItem("SelectedRowIndex"));
                        if (oCostSheets != null) {
                            oCostSheets = jQuery.parseJSON(oCostSheets);
                        }
                        else {
                            oCostSheets = [];
                        }
                        if (nIndex != -1) {
                            oCostSheets[nIndex] = oCostSheet;
                        }
                        else {
                            sessionStorage.setItem("SelectedRowIndex", oCostSheets.length);
                            oCostSheets.push(oCostSheet);
                        }
                        sessionStorage.setItem("CostSheets", JSON.stringify(oCostSheets));
                        window.location.href = sessionStorage.getItem("BackLink");
                    }
                    else
                    {
                        alert(_oCostSheet.ErrorMessage);
                    }
                },
                error: function (xhr, status, error)
                {
                    alert(error);
                }
            });
        }
        $scope.ValidateInput = function ()
        {
            //debugger;
            if(parseInt($scope.CostSheet.TechnicalSheetID) <=0) { alert("Please Pick Style!"); return false; }
            if($scope.CostSheet.ApproxQty =="" || parseFloat($scope.ApproxQty)<=0) { alert("Approximat Quantity Should be Greater than 0"); return false; }
            if($scope.CostSheet.MeasurementUnitID==0) { alert("Please select Unit of Approximat Qty"); return false; }
            if($scope.CostSheet.WeightPerDozen =="" || parseFloat($scope.CostSheet.WeightPerDozen)<=0) { alert("Weight/Lbs Should be Greater than 0"); return false; }
            if(parseInt($scope.CostSheet.WeightUnit)==0) { alert("Please select Unit  of Weight Lbs"); return false; }
            if(parseInt($scope.CostSheet.CurrencyID)==0) { alert("Please select Currency"); return false; }
            if(parseInt($scope.CostSheet.MerchandiserID)<=0) { alert("Please Pick Merchandiser"); return false; }
            if(parseFloat($scope.CostSheet.ProductionCostPerDozen) <=0) { alert("CM Cost Should be Greater than 0"); return false; }

            var oYarnDetails = $scope.gridOptionsYarn.data;
            if(oYarnDetails.length <=0){alert("Please Add at least single Yarn");  return false;}
            for(var i = 0;i<oYarnDetails.length;i++)
            {
                if(parseFloat(oYarnDetails[i].MaterialMarketPrice)<=0)
                {
                    alert("Product Price Should be Greater than 0 for "+oYarnDetails[i].ProductName);
                    $('#tblYarn').focus();
                    return false;
                }
            }

            var oAccessoriesDetails = $scope.gridOptionsAccessories.data;
            if(oAccessoriesDetails.length <=0){alert("Please Add at least single Accessories");  return false;}
            for(var i = 0;i<oAccessoriesDetails.length;i++)
            {
                if(parseFloat(oAccessoriesDetails[i].EstimatedCost)<=0)
                {
                    alert("Product Estimated Cost Should be Greater than 0 for "+oAccessoriesDetails[i].ProductName);
                    $('#tblAccssories').focus();
                    return false;
                }
            }

            if(parseFloat($scope.TotalPercantage)!=100)
            {
                alert("Yarn Use Percantage Should be equal 100");
                return false;
            }

            return true;
        }
        $scope.CostSheetRefreshObject = function ()
        {
            debugger;
            var oCostSheet = $scope.CostSheet;
            oCostSheet.StatusInInt =1;
            oCostSheet.OperationType=$scope.OperationType;//Cost Sheet/ Budget
            oCostSheet.CostSheetTypeInInt=sessionStorage.getItem("CostSheetType");
            oCostSheet.CostingDate = new Date($scope.CostSheet.CostingDate);
            oCostSheet.ShipmentDate = new Date($scope.CostSheet.ShipmentDate);
            oCostSheet.FabricUnitPrice =$scope.TotalYarnEstimatedCost;
            oCostSheet.CostSheetYarnDetails= $scope.gridOptionsYarn.data;
            oCostSheet.CostSheetAccessoriesDetails= $scope.gridOptionsAccessories.data;
            return oCostSheet;
        }
        if($scope.CostSheet.CostSheetID>0)
        {
            $scope.ChangeUnit();
            $scope.SetTotal();
            $scope.StyleImage($scope.CostSheet.TechnicalSheetID, true);
            $scope.StyleImage($scope.CostSheet.TechnicalSheetID, false);
        }
        $scope.btnApprove =  true;
        if(sessionStorage.getItem("CostSheetHeader")=="Approve Cost Sheet")
        {
            $scope.btnApprove = false;
            $scope.btnSave =  true;
        }

        if(sessionStorage.getItem("CostSheetHeader")=="View Cost Sheet")
        {
            $("#divCS :input").prop('disabled', true);
            $('#btnclose').prop('disabled', false);
        }
        $scope.Close=function ()
        {
            window.location.href = sessionStorage.getItem("BackLink");
        };

        //TAb selection
        this.tab = 1;
        this.SetTab = function (tabId)
        {
            this.tab = tabId;
        }
        this.IsSet = function (tabid)
        {
            return this.tab === tabid;
        }
    });


</script>
