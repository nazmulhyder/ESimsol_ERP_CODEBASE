@model ESimSol.BusinessObjects.BankReconciliationOpenning
@{
    ViewBag.Title = "BankReconciliationOpenning  Creation";
}
@{var MenuID = HttpContext.Current.Session[SessionInfo.MenuID];}
<div class="menuMainCollectionTable" style="font-family:Tahoma; margin-left: 0px; height: 100%; width:100%">
    <div id="p" class="easyui-panel" title="Bank Reconciliation Openning" fit="true" style="width:100%;padding:1px">
        <div id="divBROpening" style="width:100%; height:85%; text-align:center">
            <fieldset style="height:97%">
                <legend style="font-weight: bold;text-align:left;">Openning Informations : </legend>
                <table border="0" cellpadding="2" cellspacing="2" width="100%">
                    <tr>
                        <td style="width:11%; font-size:12px;text-align: right;">
                            Account Head:
                        </td>
                        <td style="width:35%; font-size:12px;">
                            <input type="text" id="txtAccountHead" style="width: 100%;" placeholder="Enter Account head and Press Enter" />
                        </td>
                        <td style="width:10%; font-size:12px; text-align:right">
                            Sub Ledger:
                        </td>
                        <td style="width:20%; font-size:12px;">
                            <input type="text" id="txtSubLedger" style="width: 100%; text-align: left" placeholder="Enter Subledger and Press Enter" />
                        </td>
                        <td style="width:10%; font-size:12px; text-align:right">
                            Openning Date:
                        </td>
                        <td style="width:15%; font-size:12px;">
                            <input id="txtDate" type="text" class="easyui-datebox" required="required" data-options="formatter:icsdateformat,parser:icsdateparser" style="width:100%;" />
                        </td>
                    </tr>
                    <tr>
                        <td style="width:11%; font-size:12px;text-align: right;">
                            Openning Balance:
                        </td>
                        <td style="width:35%; font-size:12px; text-align:justify">
                            <table border="0" style="width:100%">
                                <tr>
                                    <td style="width:15%">
                                        <select id="cboNewOpenningBalanceType" style="width:100%">
                                            <option value="1">Dr</option>
                                            <option value="0">Cr</option>
                                        </select>
                                    </td>
                                    <td style="width:15%">
                                        @Html.DropDownListFor(m => m.CurrencyID, Model.LstCurrency.Select(x => new SelectListItem() { Text = x.Symbol, Value = x.CurrencyID.ToString() }), new { id = "cboCurrency", style = "width: 100%;" })
                                    </td>
                                    <td style="width:25%">
                                        <input type="text" id="txtNewOpenningBalance" style="width: 100%;text-align: right;" />
                                    </td>
                                    <td style="width:15%">
                                        <input type="text" id="txtNewOpenningBalanceCRate" style="width: 100%;text-align: right;" />
                                    </td>
                                    <td style="width:30%">
                                        <input type="text" id="txtAmountInBDT" style="width: 100%;text-align: right;" />
                                    </td>
                                </tr>
                            </table>
                        </td>
                        <td style="width:10%; font-size:12px; text-align:right">
                            Openning Balance:
                        </td>
                        <td style="width:20%; font-size:12px;">
                            <input type="text" id="txtOpenningBalance" style="width: 100%;text-align: center;" disabled />
                        </td>
                        <td style="width:10%; font-size:12px; text-align:right">
                            Business Unit:
                        </td>
                        <td style="width:15%; font-size:12px;">
                            @Html.DropDownListFor(m => m.BusinessUnitID, Model.BusinessUnits.Select(x => new SelectListItem() { Text = x.Name, Value = x.BusinessUnitID.ToString() }), new { id = "cboBusinessUnit", style = "width: 100%;" })
                        </td>
                    </tr>
                </table>
            </fieldset>
        </div>
        <div style="width:100%; height:10%">
            <fieldset>
                <legend style="font-weight: bold">Action : </legend>

                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td colspan="3" style="width:100%;font-size:12px; font-weight:bold; text-align:center"></td>
                    </tr>
                    <tr style="height:40px">
                        <td colspan="3" style="width:100%; text-align:right; font-size:12px; font-weight:bold">
                            <a id="btnSave" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="false">Save</a>
                            <a id="btnClose" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-closed" plain="false">Close</a>
                        </td>
                    </tr>
                </table>
            </fieldset>
        </div>
    </div>
</div>

<script type="text/javascript">        
    $(document).ready(function () {        
        var oBankReconciliationOpenning = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));       

        $('#divBROpening').data('BankReconciliationOpenning', oBankReconciliationOpenning);
        $('#Mainlayout').layout('collapse', 'west');
        
        $('#txtNewOpenningBalanceCRate').icsCurrencyBox(null, null, 4);
        $('#txtNewOpenningBalance,#txtAmountInBDT,#txtOpenningBalance').icsCurrencyBox(null, null, 2);
        RefreshControls();

        $('#txtAccountHead').data('AccountHeadID', 0);
        $('#txtSubLedger').data('SubLedgerID', 0);
        $('#txtAccountHead').focus();
    });

    function RefreshControls()
    {
        var oBankReconciliationOpenning = $('#divBROpening').data('BankReconciliationOpenning');
        $("#txtOpenningBalance").val(0);
        $("#txtNewOpenningBalanceCRate").val(1);
        $("#txtNewOpenningBalanceCRate").prop("disabled",true);
        $("#txtAmountInBDT").prop("disabled",true);
        $("#txtNewOpenningBalance").val(0);
        $("#txtCurrencyAmount").prop("disabled",true);
        $("#txtCurrencySymbol").prop("disabled",true);
        $('#txtDate').datebox({ disabled:true });
        $('#txtDate').datebox('setValue', oBankReconciliationOpenning.OpenningDateSt);              
    }

    function RefreshBankReconcilationOpening()
    {
        var nAccountHeadID = parseInt($('#txtAccountHead').data('AccountHeadID'));
        var nSubLedgerID = parseInt($('#txtSubLedger').data('SubLedgerID'));

        var oBankReconciliationOpenning = {
            SubledgerID : parseInt($('#txtSubLedger').data('SubLedgerID')),
            AccountHeadID : parseInt($('#txtAccountHead').data('AccountHeadID')),            
            BusinessUnitID : parseInt($("#cboBusinessUnit").val())
        }
        $.ajax({
            type: "POST",
            dataType: "json",
            url : sessionStorage.getItem('BaseAddress')+  "/BankReconciliationOpenning/GetSubledgerOpenningBalance",
            traditional: true,
            data:  JSON.stringify(oBankReconciliationOpenning),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                var oBankReconciliationOpenning = jQuery.parseJSON(data);
                if(oBankReconciliationOpenning!=null)
                {
                    $('#divBROpening').data('BankReconciliationOpenning', oBankReconciliationOpenning);
                    if(parseInt(oBankReconciliationOpenning.BankReconciliationOpenningID)>0)
                    {
                        var makeString = "";
                        var cboNewOpenningBalanceTypeVal = 1;
                        if(oBankReconciliationOpenning.IsDebitInString == "Debit")
                        {
                            cboNewOpenningBalanceTypeVal = 1;
                        }
                        else
                        {
                            cboNewOpenningBalanceTypeVal = 0;
                        }

                        if(parseInt(oBankReconciliationOpenning.CurrencyID)==parseInt(oBankReconciliationOpenning.BaseCurrencyId))
                        {
                            makeString = oBankReconciliationOpenning.IsDebitInString + " " + oBankReconciliationOpenning.CurrencySymbol + " " +formatPrice(oBankReconciliationOpenning.AmountInCurrency,null);
                        }
                        else
                        {
                            makeString = oBankReconciliationOpenning.IsDebitInString + " " + oBankReconciliationOpenning.CurrencySymbol + " " + formatPrice(oBankReconciliationOpenning.AmountInCurrency,null)  + "@@" + formatPrice(oBankReconciliationOpenning.OpenningBalance,null);
                        }
                        $("#txtOpenningBalance").val(makeString);
                        $("#cboNewOpenningBalanceType").val(cboNewOpenningBalanceTypeVal);
                        $("#cboCurrency").val(oBankReconciliationOpenning.CurrencyID);
                        $("#txtNewOpenningBalance").val(parseFloat(oBankReconciliationOpenning.AmountInCurrency).toFixed(2));
                        $("#txtNewOpenningBalanceCRate").val(oBankReconciliationOpenning.ConversionRate);
                        $("#txtAmountInBDT").val(parseFloat(oBankReconciliationOpenning.OpenningBalance).toFixed(2));
                        $("#cboCurrency").val(oBankReconciliationOpenning.CurrencyID);

                        if(parseInt(oBankReconciliationOpenning.CurrencyID) == 1)
                        {                            
                            $("#txtNewOpenningBalanceCRate").prop("disabled",true);
                        }
                        else
                        {                         
                            $("#txtNewOpenningBalanceCRate").prop("disabled",false);
                        }
                    }
                    else
                    {
                        $("#txtOpenningBalance").val(0);
                        $("#txtNewOpenningBalanceCRate").val(1);
                        $("#txtNewOpenningBalanceCRate").prop("disabled",true);
                        $("#txtAmountInBDT").prop("disabled",true);
                        $("#txtNewOpenningBalance").val(0);
                        $("#txtCurrencyAmount").prop("disabled",true);
                        $("#txtCurrencySymbol").prop("disabled",true);
                    }
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });       
    }

    function RefreshObject()
    {       
        var oBROpenning = $('#divBROpening').data('BankReconciliationOpenning');
        var oBankReconciliationOpenning =  {
            BankReconciliationOpenningID : parseInt(oBROpenning.BankReconciliationOpenningID),
            AccountHeadID : parseInt($('#txtAccountHead').data('AccountHeadID')),
            SubledgerID : parseInt($('#txtSubLedger').data('SubLedgerID')),
            AccountingSessionID: parseInt(oBROpenning.AccountingSessionID),
            BusinessUnitID : parseInt($('#cboBusinessUnit').val()),
            OpenningDate : $('#txtDate').datebox('getValue'),
            IsDr :  Boolean(parseInt($('#cboNewOpenningBalanceType').val())),   // 0 = Credit and  1 = Debit
            CurrencyID : parseInt($("#cboCurrency").val()),
            AmountInCurrency : icsRemoveComma($('#txtNewOpenningBalance').val()),
            ConversionRate : icsRemoveComma($('#txtNewOpenningBalanceCRate').val()),
            OpenningBalance : icsRemoveComma($('#txtAmountInBDT').val())
        };
        return oBankReconciliationOpenning;
    }

    function ValidateInput()
    {
        if($('#cboBusinessUnit').val() === null || parseInt($('#cboBusinessUnit').val()) <=0 )
        {
            alert("Press Select Business Unit!");
            $('#cboBusinessUnit').focus();
            return false;
        }

        var nAccountHeadID = parseInt($('#txtAccountHead').data('AccountHeadID'));
        if(nAccountHeadID === null || parseInt(nAccountHeadID) <=0 )
        {
            alert("Please Select Account Head!");
            $('#txtAccountHead').focus();
            return false;
        }

        var nSubLedgerID = parseInt($('#txtSubLedger').data('SubLedgerID'));
        if(nSubLedgerID === null || parseInt(nSubLedgerID) <=0 )
        {
            alert("Please Select Subledger!");
            $('#txtSubLedger').focus();
            return false;
        }
                
        if($('#cboCurrency').val() === null || parseInt($('#cboCurrency').val()) <=0 )
        {
            alert("Please Enter Currency Rate!");
            $('#cboCurrency').focus();
            return false;
        }

        var nNewOpenningBalanceCRate = icsRemoveComma($('#txtNewOpenningBalanceCRate').val());
        if(nNewOpenningBalanceCRate === null || parseFloat(nNewOpenningBalanceCRate) <=0 )
        {
            alert("Please Enter Currency Rate!");
            $('#txtNewOpenningBalanceCRate').focus();
            return false;
        }
        return true;
    }

    function ChnageCurrency()
    {
        var nNewOpenningBalance = icsRemoveComma($('#txtNewOpenningBalance').val());
        var nNewOpenningBalanceCRate = icsRemoveComma($('#txtNewOpenningBalanceCRate').val());
        var nAmountInBC = parseFloat((parseFloat(nNewOpenningBalance) *  parseFloat(nNewOpenningBalanceCRate)).toFixed(2));
        $('#txtAmountInBDT').val(icsFormatPrice(parseFloat(nAmountInBC), null,2));   
    }

    $('#btnSave').click(function (e){
        if(!ValidateInput()){ return ;}
        if (!confirm("Confirm to Save Bank Reconciliation Openning ?")) return ;
        var oBankReconciliationOpenning = RefreshObject();
        $.ajax({
            type: "POST",
            dataType: "json",
            url : sessionStorage.getItem('BaseAddress')+  "/BankReconciliationOpenning/SaveBankReconcilatonOpenning",            
            traditional: true,
            data:  JSON.stringify(oBankReconciliationOpenning),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                oBankReconciliationOpenning  = jQuery.parseJSON(data);
                if (oBankReconciliationOpenning.ErrorMessage == '' || oBankReconciliationOpenning.ErrorMessage == null)
                {
                    if(oBankReconciliationOpenning.BankReconciliationOpenningID>0)
                    {
                        alert("Bank Reconcilation Openning  Saved sucessfully");                        
                        var nBusinessUnitID = parseInt($('#cboBusinessUnit').val());
                        window.location.href = sessionStorage.getItem('BaseAddress') +'/BankReconciliationOpenning/ViewBankReconciliationOpenning?buid='+nBusinessUnitID+"&menuid="+sessionStorage.getItem('MenuID');
                    }
                    else
                    {
                        alert("Invalid Operation!");
                    }
                }
                else
                {
                    alert(oBankReconciliationOpenning.ErrorMessage);
                }
            },
            error: function (xhr, status, error)
            {
                alert(error);
            }
        });
    });

    $('#btnClose').click(function (e){        
        var nBusinessUnitID = parseInt($('#cboBusinessUnit').val());
        window.location.href = sessionStorage.getItem('BaseAddress') +'/BankReconciliationOpenning/ViewBankReconciliationOpenning?buid='+nBusinessUnitID+"&menuid="+sessionStorage.getItem('MenuID');
    });
    
    $('#txtNewOpenningBalance').keyup(function(e){        
        ChnageCurrency();    
    });

    $('#txtNewOpenningBalanceCRate').keyup(function(e){
        ChnageCurrency();     
    });

    $('#cboCurrency').change(function(e){
        var currencyVal = $("#cboCurrency").val();
        if(parseInt(currencyVal) == 1)
        {
            $("#txtNewOpenningBalanceCRate").val(1);
            $("#txtNewOpenningBalanceCRate").prop("disabled",true);
        }
        else
        {
            $("#txtNewOpenningBalanceCRate").val(0);
            $("#txtNewOpenningBalanceCRate").prop("disabled",false);
        }
        ChnageCurrency();
    });

    $('#cboBusinessUnit').change(function(e){
        var nBusinessUnitID = parseInt($('#cboBusinessUnit').val());
        window.location.href = sessionStorage.getItem('BaseAddress') +'/BankReconciliationOpenning/ViewBankReconciliationOpenning?buid='+nBusinessUnitID+"&menuid="+sessionStorage.getItem('MenuID');
    });
    
        //start Accounthead picker
    $("#txtAccountHead").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) // Enter Press
        {
            var sAccountHead = $.trim($('#txtAccountHead').val());
            if(sAccountHead === null || sAccountHead === "")
            {
                alert("Press Enter With Account Head Name!");
                $('#txtAccountHead').focus();
                return;
            }

            var oChartsOfAccount = { AccountTypeInInt :5, AccountHeadName : sAccountHead };
            var obj = {
                BaseAddress: sessionStorage.getItem('BaseAddress'),
                Object: oChartsOfAccount,
                ControllerName: "ChartsOfAccount",
                ActionName: "GetsbyAccountTypeOrName",
                IsWinClose: false
            };
            $.icsDataGets(obj, function (response) {
                if (response.status && response.objs.length > 0) {
                    if (response.objs[0].AccountHeadID > 0) {
                        var tblColums = []; var oColumn = { field: "AccountCode", title: "Account Code", width: 100, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "AccountHeadName", title: "Account Head Name", width: 200, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "ParentHeadName", title: "Parent Account Head", width: 100, align: "left" }; tblColums.push(oColumn);

                        var oPickerParam = {
                            winid: 'winAccountHead',
                            winclass: 'clsAccountHead',
                            winwidth: 600,
                            winheight: 460,
                            tableid: 'tblAccountHead',
                            tablecolumns: tblColums,
                            datalist: response.objs,
                            multiplereturn: false,
                            searchingbyfieldName: 'AccountHeadName',
                            windowTittle: 'Account Head List'
                        };
                        $.icsPicker(oPickerParam);
                        IntializePickerbutton(oPickerParam);
                    }
                    else {
                        alert(response.objs[0].ErrorMessage);
                    }

                }else{
                    alert("Data Not Found.");
                }
            });
        }
    });
    
    $('#txtAccountHead').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 8) //backspace=8
        {
            $("#txtAccountHead").removeClass("fontColorOfPickItem");
            $('#txtAccountHead').data('AccountHeadID', 0);
        }
    });
    //end Accounthead picker

    //start Subledger picker
    $("#txtSubLedger").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) // Enter Press
        {
            var sSubLedgerName = $.trim($('#txtSubLedger').val());
            if(sSubLedgerName === null || sSubLedgerName === "")
            {
                alert("Press Enter With Subledger Name!");
                $('#txtSubLedger').focus();
                return;
            }

            var nAccountHeadID = parseInt($('#txtAccountHead').data('AccountHeadID'));
            if(nAccountHeadID === null || parseInt(nAccountHeadID) <=0 )
            {
                alert("Please Select Account Head!");
                $('#txtAccountHead').focus();
                return;
            }

            if($('#cboBusinessUnit').val() === null || parseInt($('#cboBusinessUnit').val()) <=0 )
            {
                alert("Please Select Business Unit!");
                $('#cboBusinessUnit').focus();
                return;
            }

            var oACCostCenter = { BUID : parseInt($('#cboBusinessUnit').val()), NameCode : sSubLedgerName };
            var obj = {
                BaseAddress: sessionStorage.getItem('BaseAddress'),
                Object: oACCostCenter,
                ControllerName: "ACCostCenter",
                ActionName: "GetsByCodeOrName",
                IsWinClose: false
            };
            $.icsDataGets(obj, function (response) {
                if (response.status && response.objs.length > 0) {
                    if (response.objs[0].ACCostCenterID > 0) {
                        var tblColums = []; var oColumn = { field: "Code", title: "Code", width: 100, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "Name", title: "Subledger Name", width: 200, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "CategoryName", title: "Category Name", width: 100, align: "left" }; tblColums.push(oColumn);

                        var oPickerParam = {
                            winid: 'winSubledger',
                            winclass: 'clsSubledger',
                            winwidth: 600,
                            winheight: 460,
                            tableid: 'tblSubledger',
                            tablecolumns: tblColums,
                            datalist: response.objs,
                            multiplereturn: false,
                            searchingbyfieldName: 'Name',
                            windowTittle: 'Subledger List'
                        };
                        $.icsPicker(oPickerParam);
                        IntializePickerbutton(oPickerParam);
                    }
                    else {
                        alert(response.objs[0].ErrorMessage);
                    }

                }else{
                    alert("Data Not Found.");
                }
            });
        }
    });
    
    $('#txtSubLedger').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 8) //backspace=8
        {
            $("#txtSubLedger").removeClass("fontColorOfPickItem");
            $('#txtSubLedger').data('SubLedgerID', 0);
        }
    });
    //end start Subledger picker
    
    function IntializePickerbutton(oPickerobj) {
        $("#" + oPickerobj.winid).find("#btnOk").click(function () {
            //for Single Select
            SetPickerValueAssign(oPickerobj);
        });
        $(document).find('.' + oPickerobj.winclass).keydown(function (e) {
            if (e.which == 13)//enter=13
            {
                SetPickerValueAssign(oPickerobj);
            }
        });
    }

    function SetPickerValueAssign(oPickerobj)
    {
        var oreturnObj = null, oreturnobjs = [];
        if (oPickerobj.multiplereturn) {
            oreturnobjs = $('#' + oPickerobj.tableid).datagrid('getChecked');
        } else {
            oreturnObj = $('#' + oPickerobj.tableid).datagrid('getSelected');
        }
        $("#" + oPickerobj.winid).icsWindow("close");
        $("#" + oPickerobj.winid).remove();

        if (oPickerobj.winid == 'winAccountHead')
        {
            if (oreturnObj != null && parseInt(oreturnObj.AccountHeadID) > 0) {
                $('#txtAccountHead').val(oreturnObj.AccountHeadName);
                $('#txtAccountHead').addClass('fontColorOfPickItem');
                $('#txtAccountHead').data('AccountHeadID', parseInt(oreturnObj.AccountHeadID));                
                $('#txtSubLedger').focus();
            }
        }
        else if (oPickerobj.winid == 'winSubledger')
        {
            if (oreturnObj != null && parseInt(oreturnObj.ACCostCenterID) > 0) {
                $('#txtSubLedger').val(oreturnObj.Name);
                $('#txtSubLedger').addClass('fontColorOfPickItem');
                $('#txtSubLedger').data('SubLedgerID', parseInt(oreturnObj.ACCostCenterID));                
                RefreshBankReconcilationOpening();
                $('#cboNewOpenningBalanceType').focus();
            }
        }
    }
</script>