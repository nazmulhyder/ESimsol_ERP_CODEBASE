@{
    ViewBag.Title = "Log-In : ESimSol";
}
@*@model ICS.Base.Client.BOFoundation.ObjectArryay
    @{
        var oUser =(ESimSol.BusinessObjects.User) Model[0];
        var _oMenu = (ESimSol.BusinessObjects.Menu)Model[1];
        } *@
<style>
    #imgBackground {
        position: absolute;
        z-index: 10;
    }

    #regionLogion {
        position: absolute;
        z-index: 20;
        text-align: center;
        width: 100%;
        padding-bottom: 100px;
        padding-top: 100px;
        font-family: Tahoma;
    }
</style>
@model ESimSol.BusinessObjects.User
@if (Model.UserID == 0)
{
    using (Html.BeginForm())
    {
        @Html.ValidationSummary(true, "Log In was unsuccessful. Please correct the errors and try again.")
        <div style="width:100%; height:100%; background-size: 100%;">
            <img id="imgBackground" src="@Url.Action("GetBackgroundLogo", "Company", new { id = 0 })" style="width:100%; height:100%;" />
            <div id="regionLogion">
                <div style="width: 30%; margin: 0 auto;">
                    <fieldset style="background-color:Window">
                        <legend style="font-size: 18px; font-weight: bolder">ESimSol Log In : </legend>
                        <table border="0" cellpadding="5" cellspacing="5" style="font-weight: bold;">
                            <tr style="height: 35px; vertical-align: bottom;">
                                <td style="text-align: left">
                                    Log-In ID
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align: left">
                                    @Html.TextBoxFor(model => model.LogInID, new { style = "width: 350px; height: 32px; font-weight: bold;font-size: 18px" })
                                    @Html.TextBoxFor(model => model.BrowserName, new { type = "hidden", id = "txtBrowserName" })
                                    @Html.TextBoxFor(model => model.IPAddress, new { type = "hidden", id = "txtIPAddress" })
                                    @Html.TextBoxFor(model => model.LogInLocation, new { type = "hidden", id = "txtLogInLocation" })
                                </td>
                            </tr>
                            <tr style="height: 35px; vertical-align: bottom;">
                                <td style="text-align: left">
                                    Password
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align: left">
                                    @Html.TextBoxFor(model => model.Password, new { type = "password", style = "width: 350px; height: 32px; font-weight: bold;font-size: 18px" })
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align: center">
                                    <input type="submit" value="Log In" id="btnLogIn" style="font-weight: bold; width: 355px; height:30px; text-align:center" />
                                </td>
                            </tr>
                            <tr>
                                <td style="text-align: right">
                                    <div style=" float:right; font-size:11px;">@Html.ActionLink("Forget Password ....", "ForgetPassword", "User")</div>
                                </td>
                            </tr>
                        </table>
                    </fieldset>
                    <table border="0" cellpadding="5" cellspacing="5" style="font-weight: bold;">
                        <tr>
                            <td style="text-align: left">
                                @if (Model.LoginMessage != "")
                                {
                                    <div style="color: red;font-weight:900; margin-top:10px">@TempData["message"]</div>
                                }
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
        @*<script src="@Url.Content("~/Scripts/LocationAPI.js")" type="text/javascript"></script>*@
        <script type="text/javascript">

            $(document).ready(function () {
                debugger;
                //$.getJSON("http://jsonip.com?callback=?", function (data) { $('#txtIPAddress').val(data.ip); });
                $.getJSON("https://api.ipify.org/?format=json", function (e) { $('#txtIPAddress').val(e.ip); });
                $('#txtBrowserName').val(detectBrowser(navigator));



                //var geocoder;
                //if (navigator.geolocation) {
                //    navigator.geolocation.getCurrentPosition(successFunction, errorFunction);
                //}
                ////Get the latitude and the longitude;
                //function successFunction(position) {
                //    var lat = position.coords.latitude;
                //    var lng = position.coords.longitude;
                //    var sLocationPoint = lat.toString() + ', ' + lng.toString();
                //    $('#txtLogInLocation').val(sLocationPoint);
                //   // codeLatLng(lat, lng);
                //}

                //function errorFunction() {
                //    $('#txtLogInLocation').val('');
                //}

                //function initialize() {
                //    geocoder = new google.maps.Geocoder();
                //}

                //function codeLatLng(lat, lng) {
                //    debugger;
                //    var latlng = new google.maps.LatLng(lat, lng);
                //    geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                //        if (status == google.maps.GeocoderStatus.OK) {
                //            console.log(results)
                //            if (results[1]) { alert(results[1].formatted_address) }
                //        }

                //    });
                //}

                function detectBrowser(navigator) {
                    var sAppVersion = navigator.appVersion;
                    var sUserAgent = navigator.userAgent;
                    var sBrowserName = navigator.appName;

                    var nVerOffset, sFullVersion, nFullVerOff;

                    if ((nVerOffset = sUserAgent.indexOf("OPR/")) != -1) // In Opera 15+, the true version is after "OPR/"
                    {
                        sBrowserName = "Opera";
                        sFullVersion = sUserAgent.substring(nVerOffset + 4);
                    }

                    else if ((nVerOffset = sUserAgent.indexOf("Opera")) != -1) // In older Opera, the true version is after "Opera" or after "Version"
                    {
                        sBrowserName = "Opera";
                        sFullVersion = sUserAgent.substring(nVerOffset + 6);
                        if ((nVerOffset = sUserAgent.indexOf("Version")) != -1) { sFullVersion = sUserAgent.substring(nVerOffset + 8); }
                    }

                    else if ((nVerOffset = sUserAgent.indexOf("MSIE")) != -1)// In MSIE, the true version is after "MSIE" in userAgent
                    {
                        sBrowserName = "Microsoft Internet Explorer";
                        sFullVersion = sUserAgent.substring(nVerOffset + 5);
                    }
                    else if ((nVerOffset = sUserAgent.indexOf("Trident")) != -1)// In MSIE 10+, the true version is after "Trident" in userAgent
                    {
                        sBrowserName = "Microsoft Internet Explorer";
                        sFullVersion = sUserAgent.substring(nVerOffset + 7);
                        if ((nVerOffset = sUserAgent.indexOf("rv:")) != -1) { sFullVersion = sUserAgent.substring(nVerOffset + 3); }
                    }

                    else if ((nVerOffset = sUserAgent.indexOf("Chrome")) != -1)// In Chrome, the true version is after "Chrome"
                    {
                        sBrowserName = "Google Chrome";
                        sFullVersion = sUserAgent.substring(nVerOffset + 7);
                    }

                    else if ((nVerOffset = sUserAgent.indexOf("Firefox")) != -1) // In Firefox, the true version is after "Firefox"
                    {
                        sBrowserName = "Firefox";
                        sFullVersion = sUserAgent.substring(nVerOffset + 8);
                    }

                    else if ((nVerOffset = sUserAgent.indexOf("Safari")) != -1) // In Safari, the true version is after "Safari" or after "Version"
                    {
                        sBrowserName = "Safari";
                        sFullVersion = sUserAgent.substring(nVerOffset + 7);
                        if ((nVerOffset = sUserAgent.indexOf("Version")) != -1) { sFullVersion = sUserAgent.substring(nVerOffset + 8) };
                    }


                    // trim the fullVersion string at semicolon/space/ brackets if present
                    if ((nFullVerOff = sFullVersion.indexOf(";")) != -1) { sFullVersion = sFullVersion.substring(0, nFullVerOff); }
                    if ((nFullVerOff = sFullVersion.indexOf(" ")) != -1) { sFullVersion = sFullVersion.substring(0, nFullVerOff); }
                    if ((nFullVerOff = sFullVersion.indexOf(")")) != -1) { sFullVersion = sFullVersion.substring(0, nFullVerOff); }

                    return sBrowserName + '(' + sFullVersion + ')';
                }

            });
        </script>
    }
}














