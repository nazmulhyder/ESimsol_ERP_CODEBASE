@{
    ViewBag.Title = "SalesCommissionPayable";
}

@model IEnumerable <ESimSol.BusinessObjects.SalesCommissionPayable>

<div ng-app="SalesCommissionPayableModule">

    <div ng-controller="SalesCommissionPayableController as MLCC">
        <section>
            <ul class="nav nav-tabs" style="background:#d6dbdf; color:white;">
                <li ng-class="{active:MLCC.IsSet(1)}">
                    <a href="" ng-click="MLCC.SetTab(1)" style="color:black;">Bill View</a>
                </li>
                <li ng-class="{active:MLCC.IsSet(2)}">
                    <a href="" ng-click="MLCC.SetTab(2)" style="color:black;">PI View</a>
                </li>
                <li ng-class="{active:MLCC.IsSet(3)}">
                    <a href="" ng-click="MLCC.SetTab(3)" style="color:black;">Person View</a>
                </li>
            </ul>
            <div ng-if="MLCC.IsSet(1)">
                <div class="col-md-12">
                    <div class="form-inline">
                        <input type="text" ng-model="MLCC.PINo" class="form-control" style="width:200px" placeholder="Search PI No " ng-keyup="MLCC.searchPINoKeyUp($event)" />
                        <input type="text" ng-model="MLCC.LCNo" class="form-control" style="width:200px" placeholder="Search LC No " ng-keyup="MLCC.searchLCNoKeyUp($event)" />
                        <input type="text" ng-model="MLCC.LDBCNo" class="form-control" style="width:200px" placeholder="Search LDBC No " ng-keyup="MLCC.searchLDBCNoKeyUp($event)" />
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="MLCC.AdvanceSearchSCPayable()"> <span class="glyphicon glyphicon-search" aria-hidden="true"> Search</span></button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="MLCC.ReqForApproval()"> <span class="glyphicon glyphicon glyphicon-ok" aria-hidden="true"> Req. For Approval</span></button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="MLCC.Approval()"> <span class="glyphicon glyphicon glyphicon-ok" aria-hidden="true"> Approve</span></button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="MLCC.printPDFView(1)"> <span class="glyphicon glyphicon-print" aria-hidden="true"> Preview</span></button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="MLCC.printPDF(1)"> <span class="glyphicon glyphicon-print" aria-hidden="true">  Report(Preview)</span></button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="MLCC.printExcel(1)"> <span class="glyphicon glyphicon-export" aria-hidden="true"> ExportXL</span></button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="MLCC.voucherEffect(1)"> <span class="glyphicon glyphicon-ok" aria-hidden="true"> Voucher Effect</span></button>

                    </div>
                </div>
                <div class="col-md-12">
                    <div ui-grid="BillWisegridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav ui-grid-edit class="grid ui-grid-selectable"></div>
                </div>

            </div>
            <div ng-if="MLCC.IsSet(2)">
                <div class="col-md-12">
                    <div class="form-inline">
                        <input type="text" ng-model="MLCC.PINo" class="form-control" style="width:200px" placeholder="Search PI No " ng-keyup="MLCC.searchPINoKeyUp($event)" />
                        <input type="text" ng-model="MLCC.LCNo" class="form-control" style="width:200px" placeholder="Search LC No " ng-keyup="MLCC.searchLCNoKeyUp($event)" />
                        <input type="text" ng-model="MLCC.LDBCNo" class="form-control" style="width:200px" placeholder="Search LDBC No " ng-keyup="MLCC.searchLDBCNoKeyUp($event)" />
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="MLCC.AdvanceSearchSCPayable()"> <span class="glyphicon glyphicon-search" aria-hidden="true"> Search</span></button>

                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-show="btnReqForApprovalForPI" ng-click="MLCC.ReqForApprovalForPI()"> <span class="glyphicon glyphicon glyphicon-ok" aria-hidden="true"> Req. For Approval</span></button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-show="btnUndoReqForApprovalForPI" ng-click="MLCC.UndoReqForApprovalForPI()"> <span class="glyphicon glyphicon glyphicon-ok" aria-hidden="true">Undo Req. For Approval</span></button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-show="btnApprovalForPI" ng-click="MLCC.ApprovalForPI()"> <span class="glyphicon glyphicon glyphicon-ok" aria-hidden="true"> Approve</span></button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-show="btnUndoApprovalForPI" ng-click="MLCC.UndoApprovalForPI()"> <span class="glyphicon glyphicon glyphicon-ok" aria-hidden="true">Undo Approve</span></button>

                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="MLCC.printExcel(2)"> <span class="glyphicon glyphicon-export" aria-hidden="true"> ExportXL</span></button>
                    </div>
                </div>
                <div class="col-md-12">
                    <div ui-grid="PIWisegridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav ui-grid-edit class="grid ui-grid-selectable"></div>
                </div>
            </div>
            <div ng-if="MLCC.IsSet(3)">
                <div class="col-md-12">
                    <div class="form-inline">
                        <input type="text" ng-model="MLCC.PINo" class="form-control" style="width:200px" placeholder="Search PI No " ng-keyup="MLCC.searchPINoKeyUp($event)" />
                        <input type="text" ng-model="MLCC.LCNo" class="form-control" style="width:200px" placeholder="Search LC No " ng-keyup="MLCC.searchLCNoKeyUp($event)" />
                        <input type="text" ng-model="MLCC.LDBCNo" class="form-control" style="width:200px" placeholder="Search LDBC No " ng-keyup="MLCC.searchLDBCNoKeyUp($event)" />
                     
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="MLCC.AdvanceSearchSCPayable()"> <span class="glyphicon glyphicon-search" aria-hidden="true"> Search</span></button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="MLCC.printExcel(3)"> <span class="glyphicon glyphicon-export" aria-hidden="true"> ExportXL</span></button>
                    </div>
                </div>
                <div class="col-md-12">
                    <div ui-grid="ContractorWisegridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav ui-grid-edit class="angular-grid ui-grid-selectable"></div>
                </div>
            </div>
        </section>
    </div>
    <script type="text/ng-template" id="SalesComLC.html">
        <div class="modal-header">
            <h4 class="modal-title" id="modal-title">Preview Memo</h4>
        </div>
        <div class="modal-body form-horizontal regionExportUP ms-custom-control" id="modal-body">
            <div class="row">
                <div class="col-md-12 ">
                    <div class="col-md-3 text-right"><label class="control-label"> Type:</label></div>
                    <div class="col-md-7 text-left">
                        <select ng-model="SalesComLC.PrintType" class="form-control" ng-options="oItem.id as oItem.Value for oItem in PrintTypes"></select>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-success btn-sm" aria-label="Left Align" ng-click="PrintMemo()" ng-hide="hide"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span> Print</button>
            <button type="button" class="btn-danger btn-sm" aria-label="Left Align" ng-click="cancel()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Cancel</button>
        </div>
    </script>
</div>

<style type="text/css">

     .form-control{
        height:26px;
        padding:0px 6px;
        font-size:12px;
    }
    .grid {
        height: 465px;
        width: 100%;
    }
    .angular-grid{
        height:480px;
        width:100%;
    }

    .custom-pagination {
        margin-top: -15px;
        margin-bottom: -15px;
    }

    .spacing {
        padding-bottom: 5px;
    }
    
</style>

<script src="~/Views/SalesCommissionPayable/AdvSearchSalesCommissiomPayable.js"></script>

<script type="text/javascript">
    _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    var oSalesCommissionPayables =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    var oPersonWisePayables =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.PersonWise));
    var oBillWisePayables =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BillWise));
    var oCompareOperators = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.CompareOperators));
    var oSalesCommissionStatus = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.SalesCommissionStatus));
    var nBUID = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BUID));
    sessionStorage.setItem('BUID',nBUID);
    var  SalesCommissionPayableModule = angular.module('SalesCommissionPayableModule', ['ngAnimate','ui.bootstrap','ui.grid','ui.grid.selection','ui.grid.resizeColumns','ms.service','SCP.service']);
    SalesCommissionPayableModule.controller('SalesCommissionPayableController', function ($scope,$http,$uibModal,$log,uiGridConstants,msModal,userSession,SCPservice) {
        debugger;
        $scope.CompareOperators= oCompareOperators;
        $scope.SalesCommissionStatus =oSalesCommissionStatus;
        //oSalesCommissionPayables= (userSession.getData('SalesCommissionPayables').length>0)? userSession.getData('SalesCommissionPayables'):oSalesCommissionPayables;

        oBillWisePayables= (userSession.getData('CreateReqForSalesComPayableApproval').length>0)? userSession.getData('CreateReqForSalesComPayableApproval'):oBillWisePayables;
        oBillWisePayables= (userSession.getData('CreateSalesComPayableApproval').length>0)? userSession.getData('CreateSalesComPayableApproval'):oBillWisePayables;

        $scope.PIWisegridOptions ={
            enableRowHeaderSelection: false,
            enableRowSelection: true,
            enableFullRowSelection: true,
            multiSelect: false,
            enableColumnResizing: true,
            noUnselect : true,
            showColumnFooter: true,
            enableGridMenu: true,
            enableVerticalScrollbar : 0,
            columnDefs: [
                {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'CPName', name: 'Person Name', width:'8%', enableCellEdit: false },
                { field: 'ContractorName', name: 'Party Name', width:'8%', enableCellEdit: false },
                { field: 'PINo', name: 'PI No', width:'8%', enableCellEdit: false },
                { field: 'PIDateSt', name: 'PI Date', width: '7%', enableCellEdit: false },
                { field: 'ExportLCNo', name: 'L/C No', width: '8%' },
                { field: 'LCOpeningDateStr', name: 'LC Date', width: '7%', enableCellEdit: false },

                { field: 'LDBCNo', name: 'LDBCNo', width: '8%', enableCellEdit: false },

                { field: 'MaturityReceivedDateSt', name: 'Maturity Received Date', width: '8%', enableCellEdit: false },
                { field: 'MaturityDateSt', name: 'Maturity Date', width: '8%', enableCellEdit: false },
                { field: 'RelizationDateSt', name: 'Relization Date', width: '8%', enableCellEdit: false },
                { field: 'CommissionAmount', name: 'CommissionAmount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'MaturityAmount', name: 'MaturityAmount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'RealizeAmount', name: 'RealizeAmount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'  },
                { field: 'AdjDeduct', name: 'Adj Deduct', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2' , aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'AdjOverdueAmount', name: 'AdjOverdue', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'AdjPayable', name: 'Adj Payable', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2' , aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'PayableAmount', name: 'Payable Amount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'ActualPayableAmount', name: 'ActualPayableAmount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'Amount_Paid', name: 'Paid Amount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'YetToPaid', name: 'Yet To Paid', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'YetToPaidBDT', name: 'Yet To Paid (BDT)', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'Status_PayableSt', name: 'Status', width:'8%'  } ,
                { field: 'Amount_W_Paid', name: 'Paid(Waiting)', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                

            ],
            data:oSalesCommissionPayables,
            onRegisterApi:function(gridApi) {
                $scope.gridApi = gridApi;
                $scope.gridApi.selection.clearSelectedRows();
                if(oSalesCommissionPayables.length>0 && userSession.getRowIndex()>=0){
                    $scope.gridApi.grid.modifyRows(oSalesCommissionPayables);
                    $scope.gridApi.selection.selectRow(oSalesCommissionPayables[userSession.getRowIndex()]);
                    $scope.RowSelect(oSalesCommissionPayables[userSession.getRowIndex()]);
                }
                $scope.gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                    $scope.RowSelect(row.entity ); });
                userSession.clear();

            }
        };

        $scope.RowSelect =  function (entity){
      
            $scope.btnReqForApprovalForPI= $scope.btnUndoReqForApprovalForPI = $scope.btnApprovalForPI = $scope.btnUndoApprovalForPI = false;
            debugger;
            if(entity.Status_Payable==1){ //Initialize
                $scope.btnReqForApprovalForPI = true;
            }
            else if(entity.Status_Payable==2){ //Req For Approve
                $scope.btnApprovalForPI = true;
                $scope.btnUndoReqForApprovalForPI = true;
            }
            else if(entity.Status_Payable==3){ //Approve
                $scope.btnUndoApprovalForPI = true;
            }
        }

        $scope.ContractorWisegridOptions ={
            enableRowHeaderSelection: false,
            enableRowSelection: true,
            enableFullRowSelection: true,
            multiSelect: false,
            enableColumnResizing: true,
            noUnselect : true,
            showColumnFooter: true,
            enableGridMenu: true,
            columnDefs: [
                {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'CPName', name: 'Person Name', width:'12%', enableCellEdit: false },
                { field: 'ContractorName', name: 'Party Name', width:'18%', enableCellEdit: false },
                { field: 'CommissionAmount', name: 'CommissionAmount', width:'13%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'},
                { field: 'MaturityAmount', name: 'MaturityAmount', width:'13%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'},
                { field: 'RealizeAmount', name: 'RealizeAmount', width:'13%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'AdjDeduct', name: 'Adj Deduct', width:'13%',cellClass: 'text-right', cellFilter: 'number: 2' , aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'},
                { field: 'AdjOverdueAmount', name: 'AdjOverdueAmount', width:'13%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'},
                { field: 'AdjPayable', name: 'Adj Payable', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2' , aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'PayableAmount', name: 'Payable Amount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'ActualPayableAmount', name: 'ActualPayableAmount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'Amount_Paid', name: 'Paid Amount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'YetToPaid', name: 'Yet To Paid', width:'10%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' }
                ,{ field: 'YetToPaidBDT', name: 'Yet To Paid (BDT)', width:'10%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' }
                
            ],
            data:oPersonWisePayables,
            onRegisterApi:function(ContractorWisegridApi) {
                $scope.ContractorWisegridApi = ContractorWisegridApi;

            }
        };

        $scope.BillWisegridOptions ={
            enableRowHeaderSelection: false,
            enableRowSelection: true,
            enableFullRowSelection: true,
            multiSelect: false,
            enableColumnResizing: true,
            noUnselect : true,
            showColumnFooter: true,
            enableGridMenu: true,
            columnDefs: [
                 {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'CPName', name: 'Person Name', width:'13%', enableCellEdit: false },
                { field: 'ContractorName', name: 'Party Name', width:'18%', enableCellEdit: false },
                { field: 'ExportLCNo', name: 'L/C No', width:'13%', enableCellEdit: false },
                { field: 'LCOpeningDateStr', name: 'LC DT', width:'8%', enableCellEdit: false },
                { field: 'LDBCNo', name: 'L D B C No', width:'13%', enableCellEdit: false },
                { field: 'MaturityDateSt', name: 'Maturity DT', width:'10%', enableCellEdit: false },
                { field: 'MaturityReceivedDateSt', name: 'Maturity Rcv DT', width:'10%', enableCellEdit: false },
                { field: 'RelizationDateSt', name: 'Realization DT', width:'10%', enableCellEdit: false },
                //{ field: 'LCDateSt', name: 'LC Date', width:'10%', enableCellEdit: false },
                { field: 'CommissionAmount', name: 'CommissionAmount', width:'12%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'},
                { field: 'MaturityAmount', name: 'MaturityAmount', width:'12%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'},
                { field: 'RealizeAmount', name: 'RealizeAmount', width:'12%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'AdjDeduct', name: 'Adj Deduct', width:'12%',cellClass: 'text-right', cellFilter: 'number: 2' , aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'},
                { field: 'AdjOverdueAmount', name: 'AdjOverdueAmount', width:'12%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'},
                { field: 'AdjPayable', name: 'Adj Payable', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2' , aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'PayableAmount', name: 'Actual Payable Amount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                //{ field: 'ActualPayableAmount', name: 'ActualPayableAmount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'Amount_Paid', name: 'Paid Amount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'YetToPaid', name: 'Yet To Paid', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
               ,{ field: 'YetToPaidBDT', name: 'Yet To Paid (BDT)', width:'10%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' }
               ,{ field: 'Status_PayableSt', name: 'Status', width:'8%'  } 
               ,{ field: 'IsWillVoucherEffectStr', name: 'VoucherEffect', width:'10%'  } 
            ],
            data:oBillWisePayables,
            onRegisterApi:function(BillWisegridApi) {
                $scope.BillWisegridApi = BillWisegridApi;
                $scope.BillWisegridApi.selection.clearSelectedRows();
                if(oBillWisePayables.length>0 && userSession.getRowIndex()>=0){
                    $scope.BillWisegridApi.grid.modifyRows(oBillWisePayables);
                    $scope.BillWisegridApi.selection.selectRow(oBillWisePayables[userSession.getRowIndex()]);
                }
                userSession.clear();

            }
        };


        this.AdvanceSearchSCPayable = function ()
        {
            debugger;
            this.PINo="";
            this.LDBCNo ="";
            this.LCNo ="";
            var modalObj={
                modalcontroller:'ModalSCPAdvanceSearchCtrl',
                appcontroller:'SalesCommissionPayableController',
                CompareOperators:$scope.CompareOperators,
                SalesCommissionStatus:$scope.SalesCommissionStatus

            }
            var modalInstance=SCPservice.Instance(modalObj);
            modalInstance.result.then(function (result)
            {

                debugger;
                $scope.PIWisegridOptions.data = result.Item1;
                $scope.ContractorWisegridOptions.data =result.Item2;
                $scope.BillWisegridOptions.data =result.Item3;
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };

        //TAb selection
        this.tab = 1;
        this.SetTab = function (tabId)
        {

            this.tab = tabId;
        }
        this.IsSet = function (tabid)
        {

            return this.tab === tabid;
        }
        this.PINo =this.LCNo =this.LDBCNo = "";
        //$scope.sPINo =  this.PINo;

        this.searchPINoKeyUp=function(keyEvent){
            if(keyEvent.which==13 ||keyEvent.which ==8){
                debugger;
                this.PIsearch();
            }
        };
        this.PIsearch = function () {
            debugger;

            this.LCNo ="";
            this.LDBCNo ="";

            var sTempString= ($scope.cboPIDate == undefined ? 0 : $scope.cboPIDate) + '~' + ($scope.PIDateStart == undefined ? icsdateformat(new Date()): $scope.PIDateStart) + '~' + ($scope.PIDateEnd == undefined ?  icsdateformat(new Date()) : $scope.PIDateEnd) + '~' + ($scope.cboLCOpenDate == undefined ? 0: $scope.cboLCOpenDate) + '~' + ($scope.LCOpenDateStart == undefined ?  icsdateformat(new Date()) : $scope.LCOpenDateStart) + '~' + ($scope.LCOpenDateEnd == undefined ?  icsdateformat(new Date()) : $scope.LCOpenDateEnd)+ '~' + ($scope.cboAmendmentDate == undefined ? 0: $scope.cboAmendmentDate)+ '~' +($scope.AmendmentDateStart == undefined ?  icsdateformat(new Date()): $scope.AmendmentDateStart) + '~' + ($scope.AmendmentDateEnd == undefined ?icsdateformat(new Date()): $scope.AmendmentDateEnd) + '~' +($scope.cboMaturityRcvDate == undefined ? 0 : $scope.cboMaturityRcvDate) + '~'+($scope.MaturityReceivedDateStart == undefined ? icsdateformat(new Date()): $scope.MaturityReceivedDateStart) + '~' +($scope.MaturityReceivedDateEnd == undefined ? icsdateformat(new Date()): $scope.MaturityReceivedDateEnd)  + '~' + ($scope.cboMaturityDate == undefined ? 0 : $scope.cboMaturityDate) + '~' +($scope.MaturityDateStart == undefined ? icsdateformat(new Date()): $scope.MaturityDateStart)   + '~' +($scope.MaturityDateEnd == undefined ? icsdateformat(new Date()): $scope.MaturityDateEnd)  + '~' + ($scope.cboRelizationDate == undefined ? 0 : $scope.cboRelizationDate)  + '~'+($scope.RelizationDateStart == undefined ? icsdateformat(new Date()): $scope.RelizationDateStart) + '~' +($scope.RelizationDateEnd == undefined ? icsdateformat(new Date()): $scope.RelizationDateEnd)  + '~' + (this.PINo == undefined ? "" :this.PINo) + '~' + (this.LCNo == undefined ? "" : this.LCNo) + '~' + ($scope.BuyerIDs == undefined ? "" : $scope.BuyerIDs) + '~' + ($scope.ContractorIDs == undefined ? "" : $scope.ContractorIDs) + '~' + (this.LDBCNo == undefined ? "" : this.LDBCNo)+'~'+sessionStorage.getItem('BUID')+'~'+($scope.StatusID == undefined ? 0 : $scope.StatusID);

            sessionStorage.setItem("sTempString", sTempString);

            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.get(_sBaseAddress + '/SalesCommissionPayable/AdvSearchSCP', { params: { sTemp: sTempString } }, config).then(
                  function (response) {

                      var results = jQuery.parseJSON(response.data);
                      if (results.Item1.length > 0) {
                          $scope.PIWisegridOptions.data = results.Item1;
                          $scope.ContractorWisegridOptions.data =results.Item2;
                          $scope.BillWisegridOptions.data =results.Item3;
                      } else {
                          msModal.Message({ headerTitle: '', bodyText: 'No Data Found !!', sucessText: ' Yes', cancelText: ' Close', feedbackType: false, autoClose: false });
                          // alert("Data Not Found.");
                          return;
                      }

                  },
                  function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage); }
            );
        };

        this.searchLCNoKeyUp=function(keyEvent){
            if(keyEvent.which==13 ||keyEvent.which ==8){
                debugger;
                this.LCsearch();
            }
        };

        this.LCsearch = function () {
            debugger;
            this.PINo ="";
            this.LDBCNo ="";
            var sTempString= ($scope.cboPIDate == undefined ? 0 : $scope.cboPIDate) + '~' + ($scope.PIDateStart == undefined ? icsdateformat(new Date()): $scope.PIDateStart) + '~' + ($scope.PIDateEnd == undefined ?  icsdateformat(new Date()) : $scope.PIDateEnd) + '~' + ($scope.cboLCOpenDate == undefined ? 0: $scope.cboLCOpenDate) + '~' + ($scope.LCOpenDateStart == undefined ?  icsdateformat(new Date()) : $scope.LCOpenDateStart) + '~' + ($scope.LCOpenDateEnd == undefined ?  icsdateformat(new Date()) : $scope.LCOpenDateEnd)+ '~' + ($scope.cboAmendmentDate == undefined ? 0: $scope.cboAmendmentDate)+ '~' +($scope.AmendmentDateStart == undefined ?  icsdateformat(new Date()): $scope.AmendmentDateStart) + '~' + ($scope.AmendmentDateEnd == undefined ?icsdateformat(new Date()): $scope.AmendmentDateEnd) + '~' +($scope.cboMaturityRcvDate == undefined ? 0 : $scope.cboMaturityRcvDate) + '~'+($scope.MaturityReceivedDateStart == undefined ? icsdateformat(new Date()): $scope.MaturityReceivedDateStart) + '~' +($scope.MaturityReceivedDateEnd == undefined ? icsdateformat(new Date()): $scope.MaturityReceivedDateEnd)  + '~' + ($scope.cboMaturityDate == undefined ? 0 : $scope.cboMaturityDate) + '~' +($scope.MaturityDateStart == undefined ? icsdateformat(new Date()): $scope.MaturityDateStart)   + '~' +($scope.MaturityDateEnd == undefined ? icsdateformat(new Date()): $scope.MaturityDateEnd)  + '~' + ($scope.cboRelizationDate == undefined ? 0 : $scope.cboRelizationDate)  + '~'+($scope.RelizationDateStart == undefined ? icsdateformat(new Date()): $scope.RelizationDateStart) + '~' +($scope.RelizationDateEnd == undefined ? icsdateformat(new Date()): $scope.RelizationDateEnd)  + '~' + (this.PINo == undefined ? "" :this.PINo) + '~' + (this.LCNo == undefined ? "" : this.LCNo) + '~' + ($scope.BuyerIDs == undefined ? "" : $scope.BuyerIDs) + '~' + ($scope.ContractorIDs == undefined ? "" : $scope.ContractorIDs) + '~' + (this.LDBCNo == undefined ? "" : this.LDBCNo) +'~'+sessionStorage.getItem('BUID')+'~'+($scope.StatusID == undefined ? 0 : $scope.StatusID);

            sessionStorage.setItem("sTempString", sTempString);

            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.get(_sBaseAddress + '/SalesCommissionPayable/AdvSearchSCP', { params: { sTemp: sTempString } }, config).then(
                  function (response) {

                      var results = jQuery.parseJSON(response.data);
                      if (results.Item1.length > 0) {
                          $scope.PIWisegridOptions.data = results.Item1;
                          $scope.ContractorWisegridOptions.data =results.Item2;
                          $scope.BillWisegridOptions.data =results.Item3;
                      } else {
                          msModal.Message({ headerTitle: '', bodyText: 'No Data Found !!', sucessText: ' Yes', cancelText: ' Close', feedbackType: false, autoClose: false });
                          // alert("Data Not Found.");
                          return;
                      }

                  },
                  function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage); }
            );
        };

        this.searchLDBCNoKeyUp=function(keyEvent){
            if(keyEvent.which==13 ||keyEvent.which ==8){
                debugger;
                this.LDBCsearch();
            }
        };

        this.LDBCsearch = function () {
            debugger;
            this.PINo ="";
            this.LCNo ="";
            var sTempString= ($scope.cboPIDate == undefined ? 0 : $scope.cboPIDate) + '~' + ($scope.PIDateStart == undefined ? icsdateformat(new Date()): $scope.PIDateStart) + '~' + ($scope.PIDateEnd == undefined ?  icsdateformat(new Date()) : $scope.PIDateEnd) + '~' + ($scope.cboLCOpenDate == undefined ? 0: $scope.cboLCOpenDate) + '~' + ($scope.LCOpenDateStart == undefined ?  icsdateformat(new Date()) : $scope.LCOpenDateStart) + '~' + ($scope.LCOpenDateEnd == undefined ?  icsdateformat(new Date()) : $scope.LCOpenDateEnd)+ '~' + ($scope.cboAmendmentDate == undefined ? 0: $scope.cboAmendmentDate)+ '~' +($scope.AmendmentDateStart == undefined ?  icsdateformat(new Date()): $scope.AmendmentDateStart) + '~' + ($scope.AmendmentDateEnd == undefined ?icsdateformat(new Date()): $scope.AmendmentDateEnd) + '~' +($scope.cboMaturityRcvDate == undefined ? 0 : $scope.cboMaturityRcvDate) + '~'+($scope.MaturityReceivedDateStart == undefined ? icsdateformat(new Date()): $scope.MaturityReceivedDateStart) + '~' +($scope.MaturityReceivedDateEnd == undefined ? icsdateformat(new Date()): $scope.MaturityReceivedDateEnd)  + '~' + ($scope.cboMaturityDate == undefined ? 0 : $scope.cboMaturityDate) + '~' +($scope.MaturityDateStart == undefined ? icsdateformat(new Date()): $scope.MaturityDateStart)   + '~' +($scope.MaturityDateEnd == undefined ? icsdateformat(new Date()): $scope.MaturityDateEnd)  + '~' + ($scope.cboRelizationDate == undefined ? 0 : $scope.cboRelizationDate)  + '~'+($scope.RelizationDateStart == undefined ? icsdateformat(new Date()): $scope.RelizationDateStart) + '~' +($scope.RelizationDateEnd == undefined ? icsdateformat(new Date()): $scope.RelizationDateEnd)  + '~' + (this.PINo == undefined ? "" :this.PINo) + '~' + (this.LCNo == undefined ? "" : this.LCNo) + '~' + ($scope.BuyerIDs == undefined ? "" : $scope.BuyerIDs) + '~' + ($scope.ContractorIDs == undefined ? "" : $scope.ContractorIDs) + '~' + (this.LDBCNo == undefined ? "" : this.LDBCNo)+'~'+sessionStorage.getItem('BUID')+'~'+($scope.StatusID == undefined ? 0 : $scope.StatusID);

            sessionStorage.setItem("sTempString", sTempString);

            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.get(_sBaseAddress + '/SalesCommissionPayable/AdvSearchSCP', { params: { sTemp: sTempString } }, config).then(
                  function (response) {

                      var results = jQuery.parseJSON(response.data);
                      if (results.Item1.length > 0) {
                          $scope.PIWisegridOptions.data = results.Item1;
                          $scope.ContractorWisegridOptions.data =results.Item2;
                          $scope.BillWisegridOptions.data =results.Item3;
                      } else {
                          msModal.Message({ headerTitle: '', bodyText: 'No Data Found !!', sucessText: ' Yes', cancelText: ' Close', feedbackType: false, autoClose: false });
                          // alert("Data Not Found.");
                          return;
                      }

                  },
                  function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage); }
            );
        };

        this.voucherEffect=function()
        {
            //var objs = $scope.refreshObjectUndoApproveSalesCommissionPayable();
            var data=$scope.BillWisegridApi.selection.getSelectedRows();
            if(data[0]==undefined || data[0].ExportPIID<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            
            if (!confirm("Confirm Effect Voucher?")) return ;

            var oSalesCommissionPayable =data[0];
            $http.post(_sBaseAddress+'/SalesCommissionPayable/VoucherEffect', JSON.stringify(oSalesCommissionPayable)).then(
                            function (response) {
                                var result=jQuery.parseJSON(response.data);  console.log(result);

                                if(result.ErrorMessage == '' || result.ErrorMessage == null)
                                {
                                    alert("Voucher Effected Successfully.");
                                    var nIndex= $scope.BillWisegridOptions.data.indexOf(data[0]);
                                    data[0].IsWillVoucherEffectStr= result.IsWillVoucherEffectStr;
                                    $scope.BillWisegridOptions.data[nIndex]=data[0];
                                }
                                else
                                {
                                    msModal.Message({headerTitle : '', bodyText:result.ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                }
                            },
                            function (response) {
                                msModal.Message({headerTitle : '', bodyText:(response.data).ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});}

                        );
        };

        this.printExcel = function(tabId){
            debugger;
            //$scope.sParams ="";
            if(sessionStorage.getItem("sTempString")!=null){
                var sParams=sessionStorage.getItem("sTempString");
            }
            else
            {
                var sParams ="";
            }

            window.open(_sBaseAddress + '/SalesCommissionPayable/Print_ReportXL?sTempString=' + sParams+'&BUID='+sessionStorage.getItem("BUID")+'&trackid='+tabId, "_blank");

        }
        this.printPDF = function(tabId){
            if(sessionStorage.getItem("sTempString")!=null){
                var sParams=sessionStorage.getItem("sTempString");
            }
            else
            {
                var sParams ="";
            }
            var nts = ((new Date()).getTime()) / 1000;
            window.open(_sBaseAddress + '/SalesCommissionPayable/PrintCommissionBillReportBillWise?sParams='+sParams+"&nts=" + nts, "_blank");

        }

        this.printPDFView = function(tabId){

            var data=$scope.BillWisegridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            var nts = ((new Date()).getTime()) / 1000;

            if(tabId==1)
                $scope.Modal(data[0], 'Print');
            else
                window.open(_sBaseAddress + '/SalesCommissionPayable/PrintCommissionMemoReportByBill?nExportBillID='+data[0].ExportBillID+"&nPIID="+data[0].ExportPIID+"&nts=" + nts, "_blank");
        }

        $scope.Modal = function (objSQ, operation) {
            debugger;
            var modalInstance = $uibModal.open({
                ariaLabelledBy: 'modal-title',
                ariaDescribedBy: 'modal-body',
                size: 'md',
                templateUrl: 'SalesComLC.html',
                controller: 'ModalInstanceCtrl',
                controllerAs: 'SCLCController',
                resolve: {
                    obj: function () {
                        return { SalesComLC:objSQ, Operation: operation  };
                    }
                }
            });

            modalInstance.result.then(function (result) {
                debugger;
                if(result.SalesComLCID>0)
                {
                    debugger;
                    var index=sessionStorage.getItem('SelectedRowIndex');
                    //alert(index);
                    //alert(result.SalesStatusInString);
                    $scope.gridOptions.data[index]=result;
                    $scope.gridApi.grid.modifyRows($scope.gridOptions.data);
                    $scope.gridApi.selection.selectRow($scope.gridOptions.data[index]);
                }
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };

        this.ReqForApproval = function(){
            var data=$scope.BillWisegridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            sessionStorage.setItem("Operation", "Req.ForApproval");
            sessionStorage.removeItem("SelectedRowIndex");
            sessionStorage.setItem("SelectedRowIndex", $scope.BillWisegridOptions.data.indexOf(data[0]));
            sessionStorage.setItem("SalesComPayableRequestedApproval", "Create Req. For Approval");
            sessionStorage.setItem("CreateReqForSalesComPayableApproval", JSON.stringify($scope.BillWisegridOptions.data));
            sessionStorage.setItem("SalesComPayable", JSON.stringify(data[0]));
            sessionStorage.setItem("BackLink", window.location.href);
            var tsv=((new Date()).getTime())/1000;
           
            window.location.href = _sBaseAddress+ "/SalesCommissionPayable/ViewSalesComPayableReqForApproval?nId="+data[0].ExportBillID+"&nid2="+data[0].ExportPIID+"&nCPId="+data[0].ContactPersonnelID+"&ts="+tsv+"&buid="+sessionStorage.getItem('BUID');
        };

        this.Approval = function(){
            var data=$scope.BillWisegridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            sessionStorage.setItem("Operation", "Approval");
            sessionStorage.removeItem("SelectedRowIndex");
            sessionStorage.setItem("SelectedRowIndex", $scope.BillWisegridOptions.data.indexOf(data[0]));
            sessionStorage.setItem("SalesComPayableApproval", "Create Req. For Approval");
            sessionStorage.setItem("CreateSalesComPayableApproval", JSON.stringify($scope.BillWisegridOptions.data));
            sessionStorage.setItem("BackLink", window.location.href);
            var tsv=((new Date()).getTime())/1000;
            window.location.href = _sBaseAddress+ "/SalesCommissionPayable/ViewSalesComPayableApproval?nId="+data[0].ExportBillID+"&nid2="+data[0].ExportPIID+"&nCPId="+data[0].ContactPersonnelID+"&ts="+tsv+"&buid="+sessionStorage.getItem('BUID');

        };

        this.ReqForApprovalForPI =function()
        {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            var nRowIndex = $scope.PIWisegridOptions.data.indexOf(data[0]);
            data[0].Status_Payable=2;
            //var oRows = $scope.PIWisegridOptions.data;
            $http.post(_sBaseAddress+'/SalesCommissionPayable/RequestedSalesCommisionPayableApprovalForPI', JSON.stringify(data[0])).then(
                            function (response) {
                                debugger;
                                var result=jQuery.parseJSON(response.data);
                                var oSalesComPayable=null;
                                if(result.ErrorMessage == '' || result.ErrorMessage == null)
                                {
                                    //oRows[nRowIndex] = result;
                                    msModal.Message({headerTitle : '', bodyText:'Request For Approve Succesfully!!', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                    $scope.PIWisegridOptions.data[nRowIndex] = result;

                                    //oSalesComPayable=JSON.parse(sessionStorage.getItem("SalesComPayable"));

                                    //oSalesComPayable.CRate=( $scope.SCP.CRate == undefined)? 1:  $scope.SCP.CRate;
                                    //oSalesComPayable.Status_Payable=2;
                                    //oSalesComPayable.CurrencyID_BC = $scope.CurrencyID_BC;
                                    //oSalesComPayable.Status_PayableSt="RequestForApprove";
                                    //oSalesComPayable.AdjOverdueAmount=nAdjOverdueAmount;
                                    
                                    //userSession.setData('CreateReqForSalesComPayableApproval',oSalesComPayable);
                                    //userSession.previousPage();
                                }
                                else{

                                    msModal.Message({headerTitle : '', bodyText:result.ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                }
                            },
                            function (response) {
                                msModal.Message({headerTitle : '', bodyText:(response.data).ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});}

                        );
        };

        this.UndoReqForApprovalForPI = function()
        {
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            var nRowIndex = $scope.PIWisegridOptions.data.indexOf(data[0]);
            data[0].Status_Payable=1;

            $http.post(_sBaseAddress+'/SalesCommissionPayable/RequestedSalesCommisionPayableApprovalForPI', JSON.stringify(data[0])).then(
                            function (response) {
                                debugger;
                                var result=jQuery.parseJSON(response.data);
                                var oSalesComPayable=null;
                                if(result.ErrorMessage == '' || result.ErrorMessage == null)
                                {
                                    //oRows[nRowIndex] = result;
                                    msModal.Message({headerTitle : '', bodyText:'Undo Request For Approve Succesfully!!', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                    $scope.PIWisegridOptions.data[nRowIndex] = result;
                                }
                                else{

                                    msModal.Message({headerTitle : '', bodyText:result.ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                }
                            },
                            function (response) {
                                msModal.Message({headerTitle : '', bodyText:(response.data).ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});}

                        );
        };

        this.ApprovalForPI =function()
        {
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            var nRowIndex = $scope.PIWisegridOptions.data.indexOf(data[0]);
            data[0].Status_Payable=4;

            $http.post(_sBaseAddress+'/SalesCommissionPayable/SalesCommisionPayableApprovalForPI', JSON.stringify(data[0])).then(
                            function (response) {
                                debugger;
                                var result=jQuery.parseJSON(response.data);
                                var oSalesComPayable=null;
                                if(result.ErrorMessage == '' || result.ErrorMessage == null)
                                {
                                    //oRows[nRowIndex] = result;
                                    msModal.Message({headerTitle : '', bodyText:'Approve Succesfully!!', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                    $scope.PIWisegridOptions.data[nRowIndex] = result;
                                }
                                else{

                                    msModal.Message({headerTitle : '', bodyText:result.ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                }
                            },
                            function (response) {
                                msModal.Message({headerTitle : '', bodyText:(response.data).ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});}

                        );
        };

        this.UndoApprovalForPI =function()
        {
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            var nRowIndex = $scope.PIWisegridOptions.data.indexOf(data[0]);
            data[0].Status_Payable=2;

            $http.post(_sBaseAddress+'/SalesCommissionPayable/SalesCommisionPayableApprovalForPI', JSON.stringify(data[0])).then(
                            function (response) {
                                debugger;
                                var result=jQuery.parseJSON(response.data);
                                var oSalesComPayable=null;
                                if(result.ErrorMessage == '' || result.ErrorMessage == null)
                                {
                                    //oRows[nRowIndex] = result;
                                    msModal.Message({headerTitle : '', bodyText:'Undo Approve Succesfully!!', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                    $scope.PIWisegridOptions.data[nRowIndex] = result;
                                }
                                else{

                                    msModal.Message({headerTitle : '', bodyText:result.ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                }
                            },
                            function (response) {
                                msModal.Message({headerTitle : '', bodyText:(response.data).ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});}

                        );
        };

    });
    SalesCommissionPayableModule.controller('ModalInstanceCtrl', function ($scope, $http, $uibModalInstance, uiGridConstants, msModal, obj) {
        $scope.Operation=obj.Operation;
        
        $scope.SalesComLC = obj.SalesComLC;
        $scope.PrintTypes=[{ id:1, Value: 'Preview All'},{ id:2, Value: 'Customer Memo'},{ id:3, Value: 'Buyer Memo'}];
        $scope.SalesComLC.PrintType=1;

        $scope.PrintMemo = function(){
            debugger;
            if($scope.SalesComLC.PrintType==undefined){
                alert("Please Selecr A Report Type !!"); return;
            }
            $scope.cancel();
            var nts = ((new Date()).getTime()) / 1000;
            window.open(_sBaseAddress + '/SalesCommissionPayable/PrintCommissionMemoReportByBill?nExportBillID='+$scope.SalesComLC.ExportBillID+"&nPIID="+$scope.SalesComLC.ExportPIID+"&nPID="+$scope.SalesComLC.ContactPersonnelID+"&nType="+$scope.SalesComLC.PrintType+"&nts=" + nts, "_blank");
        }

        $scope.cancel= function () {
            $uibModalInstance.close($scope.SalesComLC);
        };

    });

</script>
                       


              
