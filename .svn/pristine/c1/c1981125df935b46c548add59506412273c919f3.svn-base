                                                                                                                                @{
    ViewBag.Title = "FabricDeliveryOrder";
}

@model IEnumerable <ESimSol.BusinessObjects.FabricDeliveryOrder>
 <script src="~/Views/FabricDeliveryOrder/AdvanceSearch.js"></script>
<div ng-app="FabricDeliveryOrderModule">
    <div ng-controller="FabricDeliveryOrderController">
        <div class="ui-grid-top-panel">
            <div class="form-inline">
                @*<label class="control-label">Exe No :</label>*@
                <input type="text" class="form-control" style="width:100px" ng-model="DONoSC" ng-keydown="searchByDONo($event)" placeholder="Type DO No & Press Enter">
                <input type="text" class="form-control" style="width:100px" ng-model="SCNo" ng-keydown="searchBySCNo($event)" placeholder="Type PO No & Press Enter">
                <input type="text" class="form-control" style="width:100px" ng-model="ExeNo" ng-keydown="SearchByExeNo($event)" placeholder="Type Dispo No & Press Enter">
                @*<input type="text" ng-model="subjectInfo.SubjectName" class="form-control" style="width:200px" placeholder="Search Invoice" />*@
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="AdvanceSearch()"><span class="glyphicon glyphicon-search" aria-hidden="true"> Search</span></button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-hide="btnAdd"  ng-click="add()"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> New</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-hide="btnEdit" ng-click="edit()"> <span class="glyphicon glyphicon-edit" aria-hidden="true"></span> Edit</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-hide="btnDelete" ng-click="delete()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Delete</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-hide="btnView" ng-click="view()"> <span class="glyphicon glyphicon-list-alt" aria-hidden="true"></span> View</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Attachment()"><span class="glyphicon glyphicon-copy" aria-hidden="true"> Attachment</span></button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-hide="btnApprove" ng-click="approve()"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Approve</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-hide="btnRevise" ng-click="Revise()"> <span class="glyphicon glyphicon-import" aria-hidden="true"></span> Revise</button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-hide="btnCancelFDO" ng-click="cancelFDO()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Cancel</button>
                @*<input type="checkbox" ng-checked="false" ng-model="IsMeter">*@
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="OpenUpdateModal()"><span class="glyphicon glyphicon-save-file" aria-hidden="true"> Format</span></button>
                <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PrintPreview()"><span class="glyphicon glyphicon-print" aria-hidden="true"> Preview</span></button>
            </div>
        </div>
        <div style="width:99%" ui-grid="gridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav ui-grid-edit class="grid"></div>
        @*<div class="custom-pagination">
            <ul uib-pagination boundary-links="true" total-items="totalItems" ng-model="currentPage" items-per-page="itemPerPage" max-size="maxSize" ng-change="pageChanged()" class="pagination-sm" previous-text="&lsaquo;" next-text="&rsaquo;" first-text="&laquo;" last-text="&raquo;"></ul>
        </div>*@
    </div>
    <script type="text/ng-template" id="FDOFormat.html">
        <div class="modal-header">
            <h4 class="modal-title" id="modal-title">Print Format :</h4>
        </div>
        <div class="modal-body form-horizontal regionExportUP ms-custom-control" id="modal-body">
            <div class="row">
                <div class="col-md-12 ">
                    <div class="col-md-3 text-right" style="margin-top:-5px">
                        <label class="control-label">Qty Format:</label>
                    </div>
                    <div class="col-md-2 text-left">
                        <input type="checkbox" ng-change="change(1)" ng-model="FDOFormat.IsMeter"> <span> Meter</span>
                    </div>
                    <div class="col-md-2 text-right">
                        <input type="checkbox" ng-change="change(2)" ng-model="FDOFormat.IsYard"> <span> Yard</span>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 ">
                    <div class="col-md-3 text-right" style="margin-top:-5px"><label class="control-label">Print Format:</label></div>
                    <div class="col-md-3 text-left">
                        <input type="checkbox" ng-checked="true" ng-change="changeFormat(1)" ng-model="FDOFormat.PrintFormat_Normal"> <span> Normal Format</span>
                    </div>
                    @*<div class="col-md-3 text-left">
                        <input type="checkbox" ng-change="changeFormat(2)" ng-model="FDOFormat.PrintFormat_Pad"> <span> Pad Format</span>
                    </div>*@
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-primary btn-sm" aria-label="Left Align" ng-click="UpdateStatus()" ng-hide="hide"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span> Ok</button>
            <button type="button" class="btn-danger btn-sm" aria-label="Left Align" ng-click="cancel()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Cancel</button>
        </div>
    </script>
</div>

<style type="text/css">

     .form-control{
        height:26px;
        padding:0px 6px;
        font-size:12px;
    }
    .grid {
        height: 500px;
        width: 99%;
    }

    .custom-pagination {
        margin-top: -15px;
        margin-bottom: -15px;
    }

    .spacing {
        padding-bottom: 5px;
    }

    .col-md-3 {
        width: 27%;
    }
</style>

<script type="text/javascript">

    var pager =[];
    var _nBUID=0;
    _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    var oAuthorizationRolesMapping =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.AuthorizationRolesMapping]));
    var oFabricDeliveryOrders =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    _nBUID =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BUID));
    var oCompareOperators = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.CompareOperators));
    var oFDOTypes =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.FDOTypes));
    sessionStorage.setItem('BUID', _nBUID);

    debugger;

    //var MLCapp= angular.module('MasterLCApp', ['ngAnimate','ui.bootstrap','ui.grid','ui.grid.selection','ms.service','masterlc.service','CommonHistory.service','ExportDocTnC.service','CommonRequest.service']);
    //MLCapp.controller('MasterLCController',  function ($scope,$http,$uibModal,$log,uiGridConstants,msModal,userSession, lcservice, commonhistoryservice,DocumentSetupService,CommonRequestservice) {


    var  FabricDeliveryOrderModule = angular.module('FabricDeliveryOrderModule', ['ngAnimate', 'ui.bootstrap', 'ui.grid','ui.grid.selection', 'ui.grid.resizeColumns','ms.service','FabricDeliveryOrder.service']);

    FabricDeliveryOrderModule.controller('FabricDeliveryOrderController', function ($scope, $http, $uibModal, $log, uiGridConstants, msModal, userSession,advsearchFdoService) {
        debugger;
        oFabricDeliveryOrders= (userSession.getData('FabricDeliveryOrders').length>0)? userSession.getData('FabricDeliveryOrders'):oFabricDeliveryOrders;
        $scope.CompareOperators= oCompareOperators;
        $scope.IsMeter= false;
        $scope.IsYard= true;
        $scope.PrintFormat= -1;

        $scope.gridOptions ={
            enableRowHeaderSelection: false,
            enableRowSelection: true,
            enableFullRowSelection: true,
            multiSelect: false,
            enableColumnResizing: true,
            noUnselect : true,
            showColumnFooter: true,
            enableGridMenu: true,
            columnDefs: [
                {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'DONo', name: 'DO No', width:'10%', enableCellEdit: false },
                { field: 'DODateSt', name: ' Date', width: '10%', enableCellEdit: false },
                { field: 'DeliveryToName', name: 'Delivery To', width: '16%' },
                { field: 'Qty', name: 'Qty(Y)', width: '10%', cellFilter: 'number:2', cellClass: 'text-right' , aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'PreparedByName', name: 'Prepared By', width: '12%' },
                { field: 'ApproveByName', name: 'approved By', width: '12%' },
                { field: 'FDOTypeInSt', name: 'DO Type', width: '10%' },
                { field: 'DOStatusSt', name: 'Status', width: '10%' }
            ],
            data:oFabricDeliveryOrders,
            onRegisterApi:function(gridApi) {

                $scope.gridApi = gridApi;
                $scope.gridApi.selection.clearSelectedRows();
                $scope.gridApi.core.refresh();
                debugger;
                if(oFabricDeliveryOrders.length>0 && userSession.getRowIndex()>=0)
                {
                    $scope.gridApi.grid.modifyRows($scope.gridOptions.data);
                    $scope.gridApi.selection.selectRow(oFabricDeliveryOrders[userSession.getRowIndex()]);
                    $scope.RowSelect(oFabricDeliveryOrders[userSession.getRowIndex()]);
                }
                $scope.gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                    $scope.RowSelect(row.entity );
                });
                userSession.clear();
            }
        };
        


        $scope.RowSelect =  function (entity){
            debugger;
            if(entity.DOStatus==8)//Cancel
            {
                $scope.btnApprove=true;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                $scope.btnRevise=false;
                $scope.btnCancelFDO=true;
                CheckControll();
            }
            else if(entity.ApproveBy!=0){ //ApproveOnly
                $scope.btnApprove=true;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                $scope.btnRevise=false;
                $scope.btnCancelFDO=false;
                CheckControll();
            }
            else if(entity.ApproveBy==0)//Receive&Approve
            {
                $scope.btnApprove=false;
                $scope.btnEdit=false;
                $scope.btnDelete=false;
                $scope.btnRevise=true;
                $scope.btnCancelFDO=true;
                CheckControll();
            }
            
            //else if(entity.ReceiveBy!=0 && entity.ApproveBy==0)//ReceiveOnly
            //{
            //    $scope.btnApprove=false;
            //    $scope.btnEdit=true;
            //    $scope.btnDelete=true;
            //    $scope.btnReceive=true;
            //    $scope.btnReturn =false;
            //    $scope.btnUpdate=false;
            //    CheckControll();
            //}
            else
            {
                $scope.btnRevise =false;
                $scope.btnApprove=false;
                $scope.btnEdit=false;
                $scope.btnDelete=false;
                $scope.btnUpdate=false;
                $scope.btnReceive=false;
                $scope.btnCancelFDO=false;
                CheckControll();
            }
        }
        $scope.Attachment = function ()
        {
            var data = $scope.gridApi.selection.getSelectedRows()[0];
            if(data==null || data.FDOID<=0)
            {
                alert("Please select a item from list!");
                return;
            }

            window.open(_sBaseAddress + '/AttachDocument/Attachment?id='+data.FDOID+'&RefType=21&OperationInfo= Attachment of Order No : '+data.DONo, '_blank');
        }

        $scope.add = function () {
            debugger
            sessionStorage.setItem("Operation", "New");
            sessionStorage.setItem("SelectedRowIndex", -1);
            sessionStorage.setItem("FabricDeliveryOrderHeader", "Add FabricDeliveryOrder");
            sessionStorage.setItem("FabricDeliveryOrders", JSON.stringify($scope.gridOptions.data));
            sessionStorage.setItem("FabricDeliveryOrder", JSON.stringify([]));
            sessionStorage.setItem("BackLink", window.location.href);
            var tsv=((new Date()).getTime())/1000;
            window.location.href = _sBaseAddress+ "/FabricDeliveryOrder/ViewFabricDeliveryOrder?nId=0&buid="+_nBUID+"&ts="+tsv;
        };
        $scope.edit = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApproveBy!=0){
                alert("Already  Approve");
                //msModal.Message({headerTitle : '', bodyText:'Already approved.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.FDOID==data[0].FDOID){
                    sessionStorage.setItem("Operation", "Edit");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("FabricDeliveryOrderHeader", "Edit FabricDeliveryOrder");
                    sessionStorage.setItem("FabricDeliveryOrders", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("FabricDeliveryOrder", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/FabricDeliveryOrder/ViewFabricDeliveryOrder?nId="+value.FDOID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.delete = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'No item found to delete.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApproveBy!=0){
                alert("Already  Approve");
                //msModal.Message({headerTitle : '', bodyText:'Already approved.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if (!confirm("Confirm to Delete?")) return ;
            $http.post(_sBaseAddress+'/FabricDeliveryOrder/Delete',JSON.stringify(data[0])).then(
                            function (response) {
                                if(jQuery.parseJSON(response.data)=='Deleted'){
                                    angular.forEach($scope.gridOptions.data,function(value,index){
                                        if(value.FDOID==data[0].FDOID){
                                            $scope.gridOptions.data.splice(index,1);
                                        }
                                    },$scope.gridOptions.data);
                                    alert("Delete Successfully.");
                                }
                                else{
                                    alert(jQuery.parseJSON(response.data));
                                }
                            },
                            function (response) {alert(jQuery.parseJSON(response.data));}
                        );

        };

        $scope.view = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.FDOID==data[0].FDOID){
                    sessionStorage.setItem("Operation", "View");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("FabricDeliveryOrderHeader", "View FabricDeliveryOrder");
                    sessionStorage.setItem("FabricDeliveryOrders", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/FabricDeliveryOrder/ViewFabricDeliveryOrder?nId="+value.FDOID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.searchByDONo = function (e) {
            debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {
                var sDO = $.trim($scope.DONoSC);
                if (sDO!="")
                {
                    var oFabricDeliveryOrder = {
                        SCNo:"",
                        DONo:$.trim($scope.DONoSC)
                    };
                    debugger;

                    var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
                    $http.post(_sBaseAddress+'/FabricDeliveryOrder/SearchByDONo',$.param(oFabricDeliveryOrder), config).then(
                                function (response)
                                {
                                    var oResults = jQuery.parseJSON(response.data);
                                    if(oResults.length>0)
                                    {
                                        $scope.gridOptions.data = jQuery.parseJSON(response.data);
                                    }else{
                                        alert("Data Not found.");
                                    }

                                },
                                    function (response) { alert(jQuery.parseJSON(response.data).Message); }
                            );


                }
            }else if (code == 8) //backspace=8
            {
                $scope.DO='';
            }
        };
        $scope.searchBySCNo = function (e) {
            debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {
                var sSCNo = $.trim($scope.SCNo);
                if (sSCNo!="")
                {
                    var oFabricDeliveryOrder = {
                        SCNo:$.trim($scope.SCNo),
                        DONo:""
                    };
                    debugger;

                    var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
                    $http.post(_sBaseAddress+'/FabricDeliveryOrder/SearchByDONo',$.param(oFabricDeliveryOrder), config).then(
                                function (response)
                                {
                                    var oResults = jQuery.parseJSON(response.data);
                                    if(oResults.length>0)
                                    {
                                        $scope.gridOptions.data = jQuery.parseJSON(response.data);
                                    }else{
                                        alert("Data Not found.");
                                    }

                                },
                                    function (response) { alert(jQuery.parseJSON(response.data).Message); }
                            );


                }
            }else if (code == 8) //backspace=8
            {
                $scope.DO='';
            }
        };
        $scope.SearchByExeNo = function (e) {
            debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {
                var sExeNo = $.trim($scope.ExeNo);
                if (sExeNo!="")
                {
                    var oFabricDeliveryOrder = {
                        ExeNo:$.trim($scope.ExeNo),
                        DONo:""
                    };
                    debugger;
                    var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
                    $http.post(_sBaseAddress+'/FabricDeliveryOrder/SearchByExeNo',$.param(oFabricDeliveryOrder), config).then(
                                function (response)
                                {
                                    var oResults = jQuery.parseJSON(response.data);
                                    if(oResults.length>0)
                                    {
                                        $scope.gridOptions.data = jQuery.parseJSON(response.data);
                                    }else{
                                        alert("Data Not found.");
                                    }
                                },
                                    function (response) { alert(jQuery.parseJSON(response.data).Message); }
                            );
                }
            }
        };

        $scope.PrintPreview = function ()
        {
            var data = $scope.gridApi.selection.getSelectedRows();
            var oFabricDeliveryOrder = data[0];
            if(oFabricDeliveryOrder==null || oFabricDeliveryOrder.FDOID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            window.open(_sBaseAddress + '/FabricDeliveryOrder/PrintabricDeliveryOrderPreview?nFDOID='+oFabricDeliveryOrder.FDOID+'&nBUID='+_nBUID+"&bIsMeter="+$scope.IsMeter);
        };

        $scope.approve = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApproveBy!=0){
                alert("Already  Approve");
                //msModal.Message({headerTitle : '', bodyText:'Already approved.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.FDOID==data[0].FDOID){
                    sessionStorage.setItem("Operation", "Approve");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("FabricDeliveryOrderHeader", "View FabricDeliveryOrder");
                    sessionStorage.setItem("FabricDeliveryOrders", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/FabricDeliveryOrder/ViewFabricDeliveryOrder?nId="+value.FDOID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.Revise = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApproveBy==0){
                alert("Yet not Approve");
                //msModal.Message({headerTitle : '', bodyText:'Already approved.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.FDOID==data[0].FDOID){
                    sessionStorage.setItem("Operation", "Revise");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("FabricDeliveryOrderHeader", "Edit FabricDeliveryOrder");
                    sessionStorage.setItem("FabricDeliveryOrders", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/FabricDeliveryOrder/ViewFabricDeliveryOrder?nId="+value.FDOID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.AdvanceSearch = function ()
        {
            debugger;

            var modalObj={
                modalcontroller:'ModalAdvanceSearchCtrl',
                appcontroller:'FabricDeliveryOrderController',
                CompareOperators:$scope.CompareOperators,
                FDOTypes:oFDOTypes
            }
            var modalInstance=advsearchFdoService.Instance(modalObj);
            modalInstance.result.then(function (result)
            {
                debugger;
                $scope.gridOptions.data = result;
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.cancelFDO = function () {

            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApproveBy==0)
            {
                alert("Yet not Approve");
                //msModal.Message({headerTitle : '', bodyText:'Already approved.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            
            if (!confirm("Confirm to Cancel?")) return ;
            var nIndex = $scope.gridOptions.data.indexOf(data[0]);

            $http.post(_sBaseAddress+'/FabricDeliveryOrder/CancelFDO',JSON.stringify(data[0])).then(
                                function (response) {
                                    var result=jQuery.parseJSON(response.data);
                                    console.log(result);
                                    if(result.FDOID>0  && result.ErrorMessage=="")
                                    {
                                        debugger;
                                        $scope.gridOptions.data[nIndex]=result;
                                        $scope.gridApi.grid.modifyRows($scope.gridOptions.data);
                                        $scope.gridApi.selection.selectRow($scope.gridOptions.data[nIndex]);
                                        $scope.RowSelect($scope.gridOptions.data[nIndex]);
                                        msModal.Message({headerTitle : '', bodyText:'Cancel Successfully.', sucessText : 'Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                    }
                                    else
                                    {
                                        alert(result.ErrorMessage);
                                        return;
                                    }
                                },
                                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
                        );
        };


        $scope.OpenUpdateModal=function ()
        {
            debugger;
            //var value = $scope.gridApi.selection.getSelectedRows()[0];
            //if(value==null || value.FDOID<=0)
            //{
            //    alert("Please Select an item from list");
            //    return;
            //}
            //angular.forEach($scope.gridOptions.data, function (data, index) {
            //    if (value.FDOID == data.FDOID)
            //    {
            //        sessionStorage.setItem("SelectedRowIndex", index);
            //    }
            //}, $scope.gridOptions.data);
            $scope.Modal($scope.gridOptions.data[0], 'Edit');
        }

        $scope.Modal = function (objSQ, operation) {
            debugger;
            objSQ.IsMeter=$scope.IsMeter;
            objSQ.IsYard=$scope.IsYard;
            objSQ.PrintFormat = $scope.PrintFormat;

            var modalInstance = $uibModal.open({
                ariaLabelledBy: 'modal-title',
                ariaDescribedBy: 'modal-body',
                size: 'md',
                templateUrl: 'FDOFormat.html',
                controller: 'ModalInstanceCtrl',
                controllerAs: 'FDOFormatController',
                resolve: {
                    obj: function () {
                        return { value:objSQ, Operation: operation  };
                    }
                }
            });

            modalInstance.result.then(function (result) {
                debugger;
                if(result.FDOID>0)
                {
                    debugger;
                    var index=sessionStorage.getItem('SelectedRowIndex');
                    //alert(index);
                    //alert(result.SalesStatusInString);
                    //$scope.gridOptions.data[index]=result;
                    //$scope.gridApi.grid.modifyRows($scope.gridOptions.data);
                    //$scope.gridApi.selection.selectRow($scope.gridOptions.data[index]);
                    $scope.IsMeter=result.IsMeter;
                    $scope.IsYard=result.IsYard;
                    $scope.PrintFormat=result.PrintFormat;
                    console.log(result);
                }
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };

        //button hide
        $scope.btnAdd = $scope.btnEdit = $scope.btnView = $scope.btnDelete = $scope.btnApprove= $scope.btnRevise =$scope.btnReceive =$scope.btnReturn = $scope.btnAdvSearch = true ;
        //button show
        if(PermissionChecker('Add','FabricDeliveryOrder',oAuthorizationRolesMapping)){$scope.btnAdd = false; }
        if(PermissionChecker('Edit','FabricDeliveryOrder',oAuthorizationRolesMapping)){$scope.btnEdit = false;}
        if(PermissionChecker('View','FabricDeliveryOrder',oAuthorizationRolesMapping)){$scope.btnView = false;}
        if(PermissionChecker('Delete','FabricDeliveryOrder',oAuthorizationRolesMapping)){$scope.btnDelete = false;}
        if(PermissionChecker('Approved','FabricDeliveryOrder',oAuthorizationRolesMapping)){$scope.btnApprove = false;}
        if(PermissionChecker('Revise','FabricDeliveryOrder',oAuthorizationRolesMapping)){$scope.btnRevise = false;}
        if(PermissionChecker('Cancel','FabricDeliveryOrder',oAuthorizationRolesMapping)){$scope.btnCancelFDO= false;}
        if(PermissionChecker('Received','FabricDeliveryOrder',oAuthorizationRolesMapping)){$scope.btnReceive = false;$scope.btnReturn =false;}
        //if(PermissionChecker('UndoRequest','FabricDeliveryOrder',oAuthorizationRolesMapping)){$scope.btnUndoApprove = false;}
        if(PermissionChecker('AdvSearch','FabricDeliveryOrder',oAuthorizationRolesMapping)){$scope.btnAdvSearch = false;}

        function CheckControll()
        {
            debugger;
            if($scope.btnAdd == false  && !PermissionChecker('Add','FabricDeliveryOrder',oAuthorizationRolesMapping))
            {$scope.btnAdd = true; }
            if($scope.btnEdit == false && !PermissionChecker('Edit','FabricDeliveryOrder',oAuthorizationRolesMapping))
            {$scope.btnEdit = true;$scope.btnUpdate = true;}
            if($scope.btnView == false && !PermissionChecker('View','FabricDeliveryOrder',oAuthorizationRolesMapping))
            {$scope.btnView = true;}
            if($scope.btnApprove == false && !PermissionChecker('Approved','FabricDeliveryOrder',oAuthorizationRolesMapping))
            {$scope.btnApprove = true;}
            if($scope.btnDelete == false && !PermissionChecker('Delete','FabricDeliveryOrder',oAuthorizationRolesMapping))
            {$scope.btnDelete = true;}
            if($scope.btnRevise == false && !PermissionChecker('Revise','FabricDeliveryOrder',oAuthorizationRolesMapping))
            {$scope.btnRevise = true;}
            if($scope.btnReceive == false && !PermissionChecker('Received','FabricDeliveryOrder',oAuthorizationRolesMapping))
            {$scope.btnReceive = true;}
            if($scope.btnUndoApprove == false && !PermissionChecker('UndoRequest','FabricDeliveryOrder',oAuthorizationRolesMapping))
            {$scope.btnUndoApprove = true;}
            if($scope.btnAdvSearch == false && !PermissionChecker('AdvSearch','FabricDeliveryOrder',oAuthorizationRolesMapping))
            {$scope.btnAdvSearch = true;}
            if($scope.btnAdvSearch == false && !PermissionChecker('Cancel','FabricDeliveryOrder',oAuthorizationRolesMapping))
            {$scope.btnCancelFDO = true;}
        }

    });


    FabricDeliveryOrderModule.controller('ModalInstanceCtrl', function ($scope, $http, $uibModalInstance, uiGridConstants, msModal, obj) {
        $scope.Operation=obj.Operation;

        $scope.FDOFormat = obj.value;

        $scope.FDOFormat.PrintFormat_Normal =$scope.FDOFormat.PrintFormat_Pad = false;
        if($scope.FDOFormat.PrintFormat==0) $scope.FDOFormat.PrintFormat_Normal = true;
        if($scope.FDOFormat.PrintFormat==1) $scope.FDOFormat.PrintFormat_Pad = true;

        $scope.UpdateStatus= function ()
        {
            if($scope.FDOFormat.IsMeter==$scope.FDOFormat.IsYard)
            {
                alert("Sorry, Inavlid Format !!"); return;
            }
            console.log($scope.FDOFormat)
            $uibModalInstance.close($scope.FDOFormat);
        };

        $scope.change=function(nEvent)
        {
            if(nEvent==1)
            {
                if($scope.FDOFormat.IsMeter)
                    $scope.FDOFormat.IsYard=false;
                else
                    $scope.FDOFormat.IsYard=true;
            }
            else if(nEvent==2)
            {
                if($scope.FDOFormat.IsYard)
                    $scope.FDOFormat.IsMeter=false;
                else
                    $scope.FDOFormat.IsMeter=true;
            }
        }
        $scope.changeFormat=function(nEvent)
        {
            $scope.FDOFormat.PrintFormat = -1;
            if(nEvent==1)
            {
                if($scope.FDOFormat.PrintFormat_Normal)
                {
                    $scope.FDOFormat.PrintFormat = 0;
                    $scope.FDOFormat.PrintFormat_Pad=false;
                }
            }
            else if(nEvent==2)
            {
                if($scope.FDOFormat.PrintFormat_Pad)
                {
                    $scope.FDOFormat.PrintFormat = 1;
                    $scope.FDOFormat.PrintFormat_Normal=false;
                }
            }
        }
        $scope.cancel= function () {
            $uibModalInstance.close($scope.FDOFormat);
        };

    });

</script>
                       


              
