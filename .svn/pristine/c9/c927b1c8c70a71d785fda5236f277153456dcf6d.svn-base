@{
    ViewBag.Title = "Sale Commission Payment";
}
@model ESimSol.BusinessObjects.SalesComPayment

<div style="padding-top:5px" ng-app="SalesComPaymentApp" ng-controller="SalesComPaymentCntrlr" class="form-horizontal regionSCP">
    <div class="col-md-12">
        <fieldset>
            <legend>Add. Commission Payment</legend>
            <div class="col-md-12">
                <div class="col-md-2 text-right"><label class="control-label">Party Name:</label></div>
                <div class="col-md-3 text-left">
                    <div class="input-group">
                        <input ng-model="SalesComPayment.ContractorName" ng-keydown="SearchContractorNameByKeyUp($event)" class="form-control" placeholder="Type Party Name & Enter" ng-disabled="disabled" required />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-sm " aria-label="Left Align" ng-click="SearchContractorName()" ng-disabled="disabled"> <span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
                        </span>
                    </div>
                </div>
                <div class="col-md-2 text-right"><label class="control-label">Concern Person:</label></div>
                <div class="col-md-3 text-left">
                    <div class="input-group">
                        <input ng-model="SalesComPayment.CPName" ng-keydown="SearchCPNameByKeyUp($event)" class="form-control" ng-disabled="disabled" placeholder="Type Person Name & Enter" required />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="SearchCPName()" ng-disabled="disabled"> <span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
                        </span>
                    </div>
                </div>

            </div>

            <div class="col-md-12">
                    <div class="ui-grid-top-panel">
                        <div class="row col-md-12">
                            <div class="col-sm-1 text-right"> <label class="control-label">LC No</label> </div>
                            <div class="col-sm-5 text-left">
                                <div class="input-group">
                                    <input ng-model="LCNo" ng-keydown="SerachLCNoByKeyUp($event)" class="form-control" placeholder="Search LC No" required />
                                    <span class="input-group-btn">
                                        <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PickSalesComPayableByLCNo()"> <span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
                                    </span>
                                </div>
                            </div>

                            <div class="col-sm-1 text-right"> <label class="control-label">PI No</label> </div>
                            <div class="col-sm-5 text-left">
                                <div class="input-group">
                                    <input ng-model="PINo" ng-keydown="SerachPINoByKeyUp($event)" class="form-control" placeholder="Search PI No" required />
                                    <span class="input-group-btn">
                                        <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PickSalesComPayableByPINo()"> <span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
                                    </span>
                                </div>
                            </div>
                            <div class="col-sm-1 text-right"> <label class="control-label">LDBC No</label> </div>
                            <div class="col-sm-5 text-left">
                                <div class="input-group">
                                    <input ng-model="LDBCNo" ng-keydown="SerachLDBCNoByKeyUp($event)" class="form-control" placeholder="Search LDBC No" required />
                                    <span class="input-group-btn">
                                        <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PickSalesComPayableByLDBCNo()"> <span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
                                    </span>
                                </div>
                            </div>
                              <div class="col-sm-5 text-left">
                                  <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="PickBill()"> <span class="glyphicon glyphicon-plus" aria-hidden="true">Bill Pick</span> </button>
                                <button type="button" class="btn btn-sm btn-danger" aria-label="Left Align" ng-click="RemoveBill()"> <span class="glyphicon glyphicon-remove" aria-hidden="true">Remove</span> </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div ui-grid="gridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav ui-grid-edit class="grid ui-grid-selectable"></div>
                    </div>
            </div>

            <div style="padding-top:5px"></div>
                    <div class=" col-md-12">
                        <div class="col-md-2 text-right"><label class="control-label">Payment Type:</label></div>
                        <div class="col-md-3 text-left">
                            <select ng-model="SalesComPayment.PaymentType" ng-options="obj.id as obj.Value for obj in PaymentTypes" class="form-control">
                                <option value=""> --Select Payment Type--</option>
                            </select>
                        </div>
                        <div class="col-md-2 text-right"><label class="control-label">MR Date:</label></div>
                        <div class="col-md-3 text-left">
                            <div class="input-group date date-container">
                                <input type="text" class="form-control" ng-model="SalesComPayment.MRDateStr" ng-init="initializeDatepicker()"><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                            </div>
                        </div>
                        <div class="col-md-2 text-right"><label class="control-label">MR No:</label></div>
                        <div class="col-md-3 text-left">
                            <input ng-model="SalesComPayment.MRNo" class="form-control" required disabled />
                        </div>
                    </div>

                    <div class=" col-md-12">
                        <div class="col-md-2 text-right"><label class="control-label">Currency:</label></div>
                        <div class="col-md-3 text-left">
                            <div class="col-sm-3 text-left">
                                <select ng-model="SalesComPayment.CurrencyID" ng-options="obj.CurrencyID as obj.CurrencyName for obj in Currencys" class="form-control" disabled>
                                    <option value=""> --Select One--</option>
                                </select>
                            </div>
                            <div class="col-sm-2 text-right"><label class="control-label">C.Rate:</label></div>
                            <div class="col-sm-3 text-left">
                                <input ng-model="SalesComPayment.CRate" class="form-control" required ng-change="getAmountWithCRRate()" />
                            </div>
                        </div>
                        <div class="col-md-2 text-right"><label class="control-label">Amount(BDT):</label></div>
                        <div class="col-md-3 text-left">
                         <div class="form-inline">
                             <input ng-model="AmountInBDT" class="form-control" style="width:45%" required disabled />
                             <label style="width:15%" class="text-right" > USD:</label>
                             <input ng-model="AmountINUSD" class="form-control" style="width:35%" required disabled />
                         </div>
                        </div>
                        <div class="col-md-2 text-right"><label class="control-label">Discount(BDT):</label></div>
                        <div class="col-md-3 text-left">
                            <input ng-model="DiscountAmountINBDT" class="form-control number" ng-keyup="DiscountChange()" required />
                        </div>
                    </div>

                    <div class=" col-md-12" ng-if="SalesComPayment.PaymentType ==2">
                        <div class="col-md-2 text-right"><label class="control-label">Payment Mode:</label></div>
                        <div class="col-md-3 text-left">
                            <select ng-model="SalesComPayment.PaymentMode" ng-options="obj.id as obj.Value for obj in PaymentModes" class="form-control">
                                <option value=""> --Select Payment Mode--</option>
                            </select>
                        </div>
                        <div class="col-md-2 text-right"><label class="control-label">No:</label></div>
                        <div class="col-md-3 text-left">
                            <input ng-model="SalesComPayment.DocNo" class="form-control" required />
                        </div>
                        <div class="col-md-2 text-right"><label class="control-label">Date:</label></div>
                        <div class="col-md-3 text-left">
                            <div class="input-group date date-container">
                                <input type="text" class="form-control" ng-model="SalesComPayment.DocDateStr" ng-init="initializeDatepicker()"><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                            </div>


                        </div>
                    </div>

                    <div class=" col-md-12" ng-if="SalesComPayment.PaymentType ==2">
                        <div class="col-md-2 text-right"><label class="control-label">Bank:</label></div>
                        <div class="col-sm-6 text-left">
                            <div class="input-group">
                                <input ng-model="SalesComPayment.BankNameWithBranch" ng-keydown="SearchBankByKeyUp($event)" class="form-control" ng-disabled="disabled" placeholder="Type Bank Name & Enter" required />
                                <span class="input-group-btn">
                                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="SearchBank()" ng-disabled="disabled"> <span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
                                </span>
                            </div>
                        </div>

                        <div class="col-md-2 text-right"><label class="control-label">Account No:</label></div>
                        <div class="col-md-3 text-left">
                            <select ng-model="SalesComPayment.BankAccountID" ng-options="obj.BankAccountID as obj.AccountNo for obj in BankAccounts" class="form-control">
                                <option value=""> --Select One--</option>
                            </select>
                        </div>
                    </div>

                    <div class=" col-md-12" ng-if="SalesComPayment.PaymentType ==3">
                        <div class="col-md-2 text-right"><label class="control-label">Invoice No:</label></div>
                        <div class="col-md-3 text-left">
                            <div class="input-group">
                                <input ng-model="SalesComPayment.SampleInvoiceNo" ng-keydown="SearchSampleAdjustment($event)" class="form-control" placeholder="Type Invoice No" ng-disabled="disabled" required />
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-sm " aria-label="Left Align" ng-click="SamleAdujstment()" ng-disabled="disabled"> <span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
                            </span>
                        </div>
                        </div>
                        <div class="col-md-2 text-right"><label class="control-label">Date:</label></div>
                        <div class="col-md-3 text-left">
                            <div class="input-group date date-container">
                                <input type="text" class="form-control" ng-model="SalesComPayment.SampleInvoiceDateStr" ng-init="initializeDatepicker()" disabled><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                            </div>
                        </div>
                        <div class="col-md-2 text-right"><label class="control-label"> Amount:</label></div>
                        <div class="col-md-3 text-left">
                            <input ng-model="SalesComPayment.SampleInvoice_Amount" class="form-control" required disabled />
                        </div>
                        
                    </div>
           
                    <div class=" col-md-12">
                        <div class="col-md-2 text-right"><label class="control-label">Amount In Words:</label></div>
                        <div class="col-md-3 text-left">
                            <input ng-model="amountINwords" class="form-control" disabled />
                        </div>
                        <div class="col-md-2 text-right"><label class="control-label">Note:</label></div>
                        <div class="col-md-7 text-left">
                            <input ng-model="SalesComPayment.Note" class="form-control" ng-disabled="disabled" />
                        </div>
                    </div>
                   
                    @*<div class=" col-md-12">
                        <div class="col-md-2 text-right"><label class="control-label">Prepared By:</label></div>
                        <div class="col-md-3 text-left">
                            <input ng-model="SalesComPayment.PreparedByName" class="form-control" required disabled />
                        </div>

                        <div class="col-md-2 text-right"><label class="control-label">Approved By:</label></div>
                        <div class="col-md-3 text-left">
                            <input ng-model="SalesComPayment.ApprovedByName" class="form-control" required disabled />
                        </div>
                    </div>*@
            <div class=" col-md-12" ng-if="(SalesComPayment.PaymentType <2||SalesComPayment.PaymentType == null )" style="height:55px"> </div>
            <div class=" col-md-12" ng-if="SalesComPayment.PaymentType == 3" style="height:20px"> </div>
            <div class="col-md-12">
                <fieldset>
                    <legend>Action</legend>
                    <div class="col-md-12">
                        <div class="col-md-6  text-left ">
                            <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="save()"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true">Print preview</span> </button>
                        </div>
                        <div class="col-md-6  text-right ">
                            <button type="button" class="btn btn-sm  btn-success" aria-label="Left Align" ng-click="Save()"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"> Save</span> </button>
                            <button type="button" class="btn btn-sm btn-danger" aria-label="Left Align" ng-click="close()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"> Close</span> </button>
                        </div>
                    </div>
                </fieldset>
            </div>

        </fieldset>
    </div>
</div>
<style type="text/css">
    .regionSCP .form-horizontal .control-label {
        padding-top: 3px;
    }

    .form-control {
        height: 26px;
        padding: 0px 6px;
        font-size: 12px;
    }
    .grid{
        width:100%; 
        height:220px;
    }
    .regionSCP .col-sm-3{
        width: 38%;
        padding-right: 5px;
        padding-left: 5px;
        margin-bottom: 5px;
    }
    .regionSCP .col-sm-2{
        width: 24%;
        padding-right: 5px;
        padding-left: 5px;
        margin-bottom: 5px;
    }

   .regionSCP .col-md-12 {
        width: 100%;
        padding-right: 5px;
        padding-left: 5px;
        margin-bottom: 5px;
    }

   .regionSCP .col-md-2 {
        width: 13%;
        padding-right: 5px;
        padding-left: 5px;
    }

   .regionSCP .col-md-3 {
        width: 20%;
        padding-right: 5px;
        padding-left: 5px;
    }
   .regionSCP .col-sm-6 {
        width: 53%;
        padding-right: 5px;
        padding-left: 5px;
    }
   .regionSCP .col-sm-5 {
        width: 18.666667%;
        padding-right: 5px;
        padding-left: 5px;
    }

  .regionSCP  .col-md-4 {
        width: 28%;
        padding-right: 5px;
        padding-left: 5px;
    }
  
  .regionSCP  .col-md-5 {
        width: 40%;
        padding-right: 5px;
        padding-left: 0px;
    }

  .regionSCP  .col-md-7 {
        width: 52.4%;
        padding-right: 0px;
        padding-left: 5px;
    }

 .regionSCP   .col-md-10 {
        width: 86%;
        padding-right: 5px;
        padding-left: 5px;
    }

  .regionSCP  .btn-sm {
        padding: 3px 10px;
    }

    .modal-dialog {
        width: 800px;
    }

 .regionSCP   .input-group-addon {
        padding: 4px 8px;
    }
  .regionSCP  .col-sm-1{
        width: 8%;
        padding-left: 5px;
        padding-right: 0px;
    }
   
</style>

<script type="text/javascript">
    _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    var oSalesComPayment=@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    var oSalesComPaymentDetails  =@Html.Raw(Json.Encode(ViewBag.SalesComPaymentDetails));
    var oPaymentModes  =@Html.Raw(Json.Encode(ViewBag.EnumPaymentModes));
    var oPaymentTypes  =@Html.Raw(Json.Encode(ViewBag.EnumPaymentTypes)); 
    var oCurrencys =@Html.Raw(Json.Encode(ViewBag.Currencys));
    var oUser =@Html.Raw(Json.Encode(ViewBag.PreparedByName)); 
    var oBankAccounts =@Html.Raw(Json.Encode(ViewBag.BankAccounts)); 
    var oCompany=@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.Company));
    var SalesComPaymentAppModule = angular.module('SalesComPaymentApp', ['ms.service','ngAnimate', 'ui.bootstrap', 'ui.grid', 'ui.grid.resizeColumns','ui.grid.selection', 'ui.grid.cellNav','ui.grid.edit']);

    SalesComPaymentAppModule.controller('SalesComPaymentCntrlr', function ($scope, $http, $uibModal, $log, uiGridConstants, msModal ,userSession,icsMethod ) {

        $scope.SalesComPayment =oSalesComPayment;
        $scope.initializeDatepicker  =function(){
            $('.date-container').datepicker({
                format: "dd M yyyy",
                calendarWeeks: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        $( document ).ready(function() {
            $(".number-int").icsNumberField({ min: 0,precision: 0 });
            $(".number-precision").icsNumberField({ min: 0,precision: 2 });
        });
        $scope.SalesComPayment.CurrencyID =oCompany.BaseCurrencyID;
        $scope.PaymentTypes  = oPaymentTypes;
        $scope.PaymentModes  = oPaymentModes;
        $scope.Currencys = oCurrencys ;
        $scope.BankAccounts =oBankAccounts;
        $scope.SalesComPayment.BankNameWithBranch ="";
       
        $scope.AmountInBDT =0;
        $scope.amountINwords ="";
        $scope.SalesComPayment.PreparedByName =oUser.UserName;
        $scope.LDBCNo ="";
        $scope.PINo ="";
        $scope.LCNo ="";

        //uigrid
        $scope.gridOptions = {
            
            enableRowSelection: true,
            enableRowHeaderSelection: false,
            multiSelect: false,
            enableColumnResizing: true,
            showColumnFooter: true,
            enableHorizontalScrollbar: uiGridConstants.scrollbars.ALWAYS,
            enableHorizontalScrollbar : 2,
            enableVerticalScrollbar : 2,
            cellEditableCondition: function($scope) {
              
                debugger;
                //if($scope.row.entity.PayableAmount<=0 ||$scope.row.entity.PayableAmount==undefined)
                //    return false;
                //else

                    return true;
            },
            columnDefs: [
                 {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{rowRenderIndex+1}}</span></div>',cellClass: 'text-center', enableSorting:false, enableColumnResizing:false, enableColumnMenu:false,enableCellEdit:false},
                 { field: 'PINo', name: 'PI No', width: '9%', cellClass: 'text-center',enableCellEdit:false  },
                 //{ field: 'ExportLCNo', name: 'L/C No', width: '10%', cellClass: 'text-center',enableCellEdit:false  },
                 { field: 'LDBCNo', name: 'LDBC No', width: '11%', cellClass: 'text-center',enableCellEdit:false  },
                 { field: 'CommissionAmount', name: 'Com. Amount(USD)',  cellClass: 'text-right', cellFilter: 'number: 2', width: '8%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',enableCellEdit:false },
                 { field: 'PayableAmount', name: 'Payable Amount(USD)',  cellClass: 'text-right', cellFilter: 'number: 2', width: '8%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',enableCellEdit:false  },
                 { field: 'ActualPayable', name: 'Actual Payable (TK)',  cellClass: 'text-right', cellFilter: 'number: 2', width: '8%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',enableCellEdit:true  },
                 { field: 'Amount', name: 'Amount(USD)',  cellClass: 'text-right', cellFilter: 'number: 2', width: '8%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false }
                ,{ field: 'AmountBC', name: 'Amount(Tk)',  cellClass: 'text-right', cellFilter: 'number: 2', width: '10%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false }
                ,{ field: 'AdjDeduct', name: 'AdjDed(USD)',  cellClass: 'text-right', cellFilter: 'number: 2', width: '10%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false }
                ,{ field: 'AdjDeductPercentage', name: 'Disc (%)',  cellClass: 'text-right', cellFilter: 'number: 2', width: '10%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: false, footerCellFilter: 'number:2', footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false }
                ,{ field: 'AdjDeductBDT', name: 'AdjDed(Tk)',  cellClass: 'text-right', cellFilter: 'number: 2', width: '10%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false }
                  
            ],
            data: oSalesComPaymentDetails,
            onRegisterApi: function (gridApi) {
                $scope.gridApi = gridApi;
                //$scope.MakePercentage();
               gridApi.edit.on.afterCellEdit($scope,
               function (rowEntity, colDef, newValue, oldValue)
               {
                   debugger;
                   //alert(colDef.field);AmountBC,Amount
                   if(colDef.field=='ActualPayable')
                   {
                       rowEntity.Amount=(parseFloat(rowEntity.Amount)) ;

                       if(rowEntity.PayableAmount < rowEntity.ActualPayable)
                       {
                           rowEntity.ActualPayable=oldValue; 
                       }
                       $scope.DiscountChange();
                   }
                   if(colDef.field=='Amount')
                   {
                       rowEntity.Amount=(parseFloat(rowEntity.Amount)) ;
                       rowEntity.AmountBC=(parseFloat(rowEntity.Amount)*parseFloat($scope.SalesComPayment.CRate));

                       rowEntity.AdjDeduct=(parseFloat(rowEntity.PayableAmount)-parseFloat(rowEntity.Amount));
                   }
                   else if(colDef.field=='AmountBC')
                   {
                       rowEntity.AmountBC=(parseFloat(rowEntity.AmountBC)) ;
                       rowEntity.Amount=(parseFloat(rowEntity.AmountBC)/parseFloat(( $scope.SalesComPayment.CRate<=0 ? 1 : $scope.SalesComPayment.CRate)));
                       rowEntity.AdjDeduct=(parseFloat(rowEntity.PayableAmount)-parseFloat(rowEntity.Amount));
                   }
                   else if(colDef.field=='AdjDeduct')
                   {
                       rowEntity.AdjDeduct=(parseFloat(rowEntity.AdjDeduct)) ;
                       rowEntity.Amount=(parseFloat(rowEntity.PayableAmount)-parseFloat(rowEntity.AdjDeduct));
                       rowEntity.AmountBC=(parseFloat(rowEntity.Amount)*parseFloat($scope.SalesComPayment.CRate));
                   }
                   if(rowEntity.Amount-3 > rowEntity.PayableAmount){ rowEntity.Amount=(parseFloat(rowEntity.PayableAmount)); rowEntity.AmountBC=0;}
                   if(rowEntity.Amount-3 > rowEntity.CommissionAmount){ rowEntity.Amount=(parseFloat(rowEntity.PayableAmount)); rowEntity.AmountBC=0;}
               
                   $scope.SetTotal();
                   return rowEntity;
               });
            }
        };
        
         
        $scope.SearchContractorNameByKeyUp = function (e) {
            debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
                var ContractorName = $.trim($scope.SalesComPayment.ContractorName);
                if (ContractorName == "" || ContractorName == null) {
                   
                    msModal.Message({ headerTitle: '', bodyText: 'Type Contractor Name and Press Enter', sucessText: ' Yes', cancelText: ' Close', feedbackType: false, autoClose: false });
                    return;
                }
                $scope.PickContractor();
            } 
            else if (code == 8) //backspace=8
            {
                //debugger;
                $scope.ContractorName = '';
                $scope.ContractorID= '';
            }
        };
        $scope.PickContractor = function () {
            debugger;
            var oContractor = {
                Params: '2,3' + '~' + $.trim($scope.SalesComPayment.ContractorName) + '~' + sessionStorage.getItem('BUID')
            };
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress + '/Contractor/ContractorSearchByNameType', $.param(oContractor), config).then(
                                function (response) {
                                    debugger;
                                    var oColumns = [];
                                    var oColumn = { field: 'ContractorID', name: 'Code', width: '20%' }; oColumns.push(oColumn);
                                    oColumn = { field: 'Name', name: 'Contractor Name', width: '50%', enableSorting: false }; oColumns.push(oColumn);
                                    oColumn = { field: 'Address', name: 'Address', width: '30%', enableSorting: false }; oColumns.push(oColumn);
                                    var results = response.data;
                                    var modalObj = {
                                        size: 'md',
                                        modalcontroller: 'ModalCommonListCtrl',
                                        appcontroller: 'SalesComPaymentCntrlr',
                                        objs: results,
                                        multiSelect: false,
                                        pickertitle: 'Party List',
                                        searchingbyfieldName: 'Name',
                                        columns: oColumns
                                    }
                                    var modalInstance = msModal.Instance(modalObj);
                                    $scope.ContractorID ="";
                                    modalInstance.result.then(function (result) {
                                        if(result.ContractorID>0){
                                            debugger;
                                            $scope.SalesComPayment.ContractorName =result.Name;
                                            $scope.ContractorID =result.ContractorID ;
                                        }
                                        
                                    }, function () {
                                        $log.info('Modal dismissed at: ' + new Date());
                                    });
                                },
                                  function (response) { alert(response.data.Message); }
                            );
        };

        $scope.SearchContractorName =function(){
            $scope.PickContractor();
        }

        $scope.SearchCPNameByKeyUp = function (e) {
            debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
                var BuyerName = $.trim($scope.SalesComPayment.CPName);
                
                $scope.PickCP();
            }
            else if (code == 8) //backspace=8
            {
               
                $scope.SalesComPayment.CPName = '';
                $scope.SalesComPayment.ContactPersonnelID = '';
            }
        };

        $scope.SearchCPName =function(){
            $scope.PickCP();
        }
        
        $scope.PickCP = function () {
            debugger;
            
            var sContractorID = '';
           
            if ($scope.ContractorID > 0) {
                sContractorID = $scope.ContractorID;
              
            }
            var oBuyerConcern = {
                ContractorName: sContractorID,
                Name: $.trim($scope.SalesComPayment.CPName)
         };
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress + '/ContractorPersonal/GetsByContractors', $.param(oBuyerConcern), config).then(
                                function (response) {
                                    debugger;
                                    var oColumns = [];
                                    var oColumn = { field: 'ContactPersonnelID', name: 'Code', width: '20%' }; oColumns.push(oColumn);
                                    oColumn = { field: 'Name', name: 'Personnel Name', width: '50%', enableSorting: false }; oColumns.push(oColumn);
                                    //oColumn = { field: 'ContractorName', name: 'Contractor Name', width: '30%', enableSorting: false }; oColumns.push(oColumn);
                                    var results = jQuery.parseJSON(response.data);
                                    var modalObj = {
                                        size: 'md',
                                        modalcontroller: 'ModalCommonListCtrl',
                                        appcontroller: 'SalesComPaymentCntrlr',
                                        objs: results,
                                        multiSelect: false,
                                        pickertitle: 'Concern Person List',
                                        searchingbyfieldName: 'Name',
                                        columns: oColumns
                                    }
                                    var modalInstance = msModal.Instance(modalObj);
                                     $scope.SalesComPayment.ContactPersonnelID = "";
                                    modalInstance.result.then(function (result) {
                                        debugger;
                                        if(result.ContactPersonnelID>0)
                                        {
                                            debugger;
                                            $scope.SalesComPayment.CPName = result.Name;
                                            $scope.SalesComPayment.ContactPersonnelID =result.ContactPersonnelID;
                                            $scope.ContractorID = result.ContractorID;
                                            $scope.SalesComPayment.ContractorName =result.ContractorName;

                                           
                                        }
                                       
                                    }, function () {
                                        $log.info('Modal dismissed at: ' + new Date());
                                    });
                                },
                                  function (response) { alert(jQuery.parseJSON(response.data).Message); }
                            );
        };
        $scope.SerachLDBCNoByKeyUp = function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
                $scope.PickSalesComPayableByLDBCNo();
            }
            else if (code == 8) //backspace=8
            {
                $scope.LDBCNo = '';
              
            }
        };   

        $scope.PickSalesComPayableByLDBCNo = function () {
             var sContractorID = '';
            var sContactPersonnelID = '';
           
            if ($scope.ContractorID > 0) {
                sContractorID = $scope.ContractorID;
               
            }
            if ($scope.SalesComPayment.ContactPersonnelID> 0) {
                sContactPersonnelID = $scope.SalesComPayment.ContactPersonnelID;
               
            }
             var oSalesComPayable = {
                ContractorID: 0,
                ContactPersonnelID:sContactPersonnelID,
                LDBCNo: $scope.LDBCNo,
                ExportLCNo :"",
                PINo:"",
                BUID:sessionStorage.getItem('BUID'),
                Params:( $scope.getSalesCommissionPayableIDInGrid == null) ? "" : $scope.getSalesCommissionPayableIDInGrid
            };
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress + '/SalesComPayment/GetsSalesCommissionPayableForComPayment', $.param(oSalesComPayable), config).then(
                                 function (response) 
                                 { 
                                     debugger;
                                     var oColumns = [];
                                     var oColumn = { field: 'ExportLCNo', name: 'LC No', width: '15%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'CPName', name: 'Name', width: '15%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'PINo', name: 'PI No', width: '15%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'LDBCNo', name: 'LDBC No', width: '15%', enableSorting: false }; oColumns.push(oColumn);
                                     oColumn = { field: 'CommissionAmount', name: 'Commission Amount', width: '20%', enableSorting: false,aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false }; oColumns.push(oColumn);
                                     oColumn = { field: 'PayableAmount', name: 'Payable Amount', width: '20%', enableSorting: false,aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false }; oColumns.push(oColumn);
                                     oColumn = { field: 'Amount', name: 'Amount', width: '20%', enableSorting: false,aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false }; oColumns.push(oColumn);
                                     var results = jQuery.parseJSON(response.data);
                                     var modalObj = {
                                         size: 'md',
                                         modalcontroller: 'ModalCommonListCtrl',
                                         appcontroller: 'SalesComPaymentCntrlr',
                                         objs: results,
                                         multiSelect: true,
                                         showColumnFooter:true,
                                         pickertitle: 'Concern Person List',
                                         searchingbyfieldName: 'Name',
                                         columns: oColumns
                                     }
                                     var modalInstance = msModal.Instance(modalObj);
                                     modalInstance.result.then(function (result) {

                                         if(result!=null & result!=undefined){
                                             $scope.AddSalesCommissionPayableDetail(result);
                                         }
                                         //if(result[0].SalesCommissionPayableID>0)
                                         //{
                                         //    debugger;
                                         //    $scope.SalesComPayment.CRate=result[0].Param_CRate;
                                         //    console.log($scope.SalesComPayment.CRate);
                                         //    if($scope.gridOptions.data.length>1)
                                         //    {
                                         //        for(var i =0 ;i<$scope.gridOptions.data.length ;i++){
                                         //            $scope.gridOptions.data.push(result[i]);
                                         //        }
                                         //    }
                                         //    else{
                                         //        $scope.gridOptions.data.push(result[0]);
                                         //    }
                                           
                                         //    $scope.SalesComPayment.CPName = result[0].CPName;
                                         //    $scope.SalesComPayment.ContractorName = result[0].ContractorName;
                                         //    $scope.SalesComPayment.ContactPersonnelID = result[0].ContactPersonnelID;
                                         //    $scope.SalesComPayment.ContractorID = result[0].ContractorID;
                                         //    $scope.getAmountWithCRRate();
                                         //}
                                          
                                         
                                       
                                     }, function () {
                                         $log.info('Modal dismissed at: ' + new Date());
                                     });
                                 },
                                  function (response) { alert(jQuery.parseJSON(response.data).Message); }
                            );
        };
        $scope.PickBill = function () {
            var sContractorID = '';
            var sContactPersonnelID = '';
           
            if ($scope.ContractorID > 0) {
                sContractorID = $scope.ContractorID;
               
            }
            if ($scope.SalesComPayment.ContactPersonnelID> 0) {
                sContactPersonnelID = $scope.SalesComPayment.ContactPersonnelID;
               
            }
            else{
                msModal.Message({headerTitle : '', bodyText:'No Contact Person Found.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            var oSalesComPayable = {
                ContractorID: 0,
                ContactPersonnelID:sContactPersonnelID,
                BUID:sessionStorage.getItem('BUID'),
                Params:( $scope.getSalesCommissionPayableIDInGrid == null) ? "" : $scope.getSalesCommissionPayableIDInGrid
            };
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress + '/SalesComPayment/GetsSalesCommissionPayableForComPayment', $.param(oSalesComPayable), config).then(
                                 function (response) 
                                 { 
                                     debugger;
                                     var oColumns = [];
                                     var oColumn = { field: 'CPName', name: 'Name', width: '15%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'ExportLCNo', name: 'LC No', width: '15%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'PINo', name: 'PI No', width: '15%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'LDBCNo', name: 'LDBC No', width: '15%', enableSorting: false }; oColumns.push(oColumn);
                                     oColumn = { field: 'CommissionAmount', name: 'Commission Amount', width: '20%', enableSorting: false }; oColumns.push(oColumn);
                                     oColumn = { field: 'PayableAmount', name: 'Payable Amount', width: '20%', enableSorting: false }; oColumns.push(oColumn);
                                     oColumn = { field: 'Amount', name: 'Amount', width: '20%', enableSorting: false }; oColumns.push(oColumn);
                                     var results = jQuery.parseJSON(response.data);
                                     var modalObj = {
                                         size: 'md',
                                         modalcontroller: 'ModalCommonListCtrl',
                                         appcontroller: 'SalesComPaymentCntrlr',
                                         objs: results,
                                         multiSelect: true,
                                         pickertitle: 'Concern Person List',
                                         searchingbyfieldName: 'Name',
                                         columns: oColumns
                                     }
                                     var modalInstance = msModal.Instance(modalObj);
                                     modalInstance.result.then(function (result) {
                                         debugger;
                                         if(result!=null & result!=undefined){
                                             $scope.AddSalesCommissionPayableDetail(result);
                                         }
                                         //if(result[0].SalesCommissionPayableID>0)
                                         //{
                                         //    if($scope.gridOptions.data.length>1)
                                         //    {
                                         //        for(var i =0 ;i<$scope.gridOptions.data.length ;i++){
                                         //            $scope.gridOptions.data.push(result[i]);
                                         //        }
                                         //    }
                                         //    else{
                                         //        $scope.gridOptions.data.push(result[0]);
                                         //    }
                                           
                                         //    $scope.SalesComPayment.CPName = result[0].CPName;
                                         //    $scope.SalesComPayment.ContractorName = result[0].ContractorName;
                                         //    $scope.SalesComPayment.ContactPersonnelID = result[0].ContactPersonnelID;
                                         //    $scope.SalesComPayment.ContractorID = result[0].ContractorID;
                                         //    $scope.getAmountWithCRRate();
                                         //}
                                          
                                         
                                       
                                     }, function () {
                                         $log.info('Modal dismissed at: ' + new Date());
                                     });
                                 },
                                  function (response) { alert(jQuery.parseJSON(response.data).Message); }
                            );
        };

        $scope.SerachLCNoByKeyUp  = function (e){
            var code = (e.keyCode ? e.keyCode :e.which);
            if (code == 13) {
                $scope.PickSalesComPayableByLCNo();
            }
            else if (code == 8) //backspace=8
            {
               
                $scope.LCNo = '';
              
            }
        }

        $scope.PickSalesComPayableByLCNo = function () {
            var sContractorID = '';
            var sContactPersonnelID = '';
           
            if ($scope.ContractorID > 0) {
                sContractorID = $scope.ContractorID;
               
            }
            if ($scope.SalesComPayment.ContactPersonnelID> 0) {
                sContactPersonnelID = $scope.SalesComPayment.ContactPersonnelID;
               
            }
            var oSalesComPayable = {
                ContractorID: sContractorID,
                ContactPersonnelID:sContactPersonnelID,
                LDBCNo:"",
                ExportLCNo :$scope.LCNo,
                PINo:"",
                BUID:sessionStorage.getItem('BUID'),
                Params:( $scope.getSalesCommissionPayableIDInGrid == null) ? "" : $scope.getSalesCommissionPayableIDInGrid
            };
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress + '/SalesComPayment/GetsSalesCommissionPayableForComPayment', $.param(oSalesComPayable), config).then(
                                 function (response) 
                                 { 
                                     debugger;
                                     var oColumns = [];
                                     var oColumn = { field: 'ExportLCNo', name: 'LC No', width: '15%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'CPName', name: 'Name', width: '15%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'PINo', name: 'PI No', width: '15%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'LDBCNo', name: 'LDBC No', width: '15%', enableSorting: false }; oColumns.push(oColumn);
                                     oColumn = { field: 'CommissionAmount', name: 'Commission Amount', cellClass:'test-right', width: '20%', enableSorting: false,aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellClass: 'number:2' , footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false }; oColumns.push(oColumn);
                                     oColumn = { field: 'PayableAmount', name: 'Payable Amount', width: '20%', cellClass:'test-right', enableSorting: false,aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false  }; oColumns.push(oColumn);
                                     oColumn = { field: 'Amount',        name: 'Amount', width: '20%', cellClass:'test-right',  enableSorting: false,aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellClass: 'number:2' , footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false, }; oColumns.push(oColumn);
                                     var results = jQuery.parseJSON(response.data);
                                     var modalObj = {
                                         size: 'md',
                                         modalcontroller: 'ModalCommonListCtrl',
                                         appcontroller: 'SalesComPaymentCntrlr',
                                         objs: results,
                                         showColumnFooter:true,
                                         multiSelect: true,
                                         pickertitle: 'Concern Person List',
                                         searchingbyfieldName: 'Name',
                                         columns: oColumns
                                     }
                                     var modalInstance = msModal.Instance(modalObj);
                                     modalInstance.result.then(function (result) 
                                     {
                                         debugger;
                                         if(result!=null & result!=undefined){
                                             $scope.AddSalesCommissionPayableDetail(result);
                                         }
                                     }, function () {
                                         $log.info('Modal dismissed at: ' + new Date());
                                     });
                                 },
                                  function (response) { alert(jQuery.parseJSON(response.data).Message); }
                            );
        };

        $scope.SerachPINoByKeyUp  = function (e){
            var code = (e.keyCode ? e.keyCode :e.which);
            if (code == 13) {
                $scope.PickSalesComPayableByPINo();
            }
            else if (code == 8) //backspace=8
            {
               
                $scope.PINo = '';
              
            }
        }
        $scope.PickSalesComPayableByPINo = function () {
          
            var sContractorID = '';
            var sContactPersonnelID = '';
           
            if ($scope.ContractorID > 0) {
                sContractorID = $scope.ContractorID;
               
            }
            if ($scope.SalesComPayment.ContactPersonnelID> 0) {
                sContactPersonnelID = $scope.SalesComPayment.ContactPersonnelID;
               
            }
            var oSalesComPayable = {
                ContractorID: 0,
                ContactPersonnelID:sContactPersonnelID,
                LDBCNo:"",
                ExportLCNo :"",
                PINo:$scope.PINo,
                BUID:sessionStorage.getItem('BUID'),
                Params:( $scope.getSalesCommissionPayableIDInGrid == null) ? "" : $scope.getSalesCommissionPayableIDInGrid
            };
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress + '/SalesComPayment/GetsSalesCommissionPayableForComPayment', $.param(oSalesComPayable), config).then(
                                 function (response) 
                                 { 
                                     debugger;
                                     var oColumns = [];
                                     var oColumn = { field: 'CPName', name: 'Name', width: '15%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'ContractorName', name: 'Party Name', width: '15%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'ExportLCNo', name: 'LC No', width: '10%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'PINo', name: 'PI No', width: '10%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'LDBCNo', name: 'LDBC No', width: '15%', enableSorting: false }; oColumns.push(oColumn);
                                     oColumn = { field: 'CommissionAmount', name: 'Commission Amount', width: '10%', enableSorting: false,aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false }; oColumns.push(oColumn);
                                     oColumn = { field: 'PayableAmount', name: 'Payable Amount', width: '10%', enableSorting: false,aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false }; oColumns.push(oColumn);
                                     oColumn = { field: 'Amount', name: 'Amount', width: '10%', enableSorting: false,aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:false }; oColumns.push(oColumn);
                                     var results = jQuery.parseJSON(response.data);
                                     var modalObj = {
                                         size: 'md',
                                         modalcontroller: 'ModalCommonListCtrl',
                                         appcontroller: 'SalesComPaymentCntrlr',
                                         objs: results,
                                         multiSelect: true,
                                         showColumnFooter:true,
                                         pickertitle: 'Concern Person List',
                                         searchingbyfieldName: 'Name',
                                         columns: oColumns
                                     }
                                     var modalInstance = msModal.Instance(modalObj);
                                     modalInstance.result.then(function (result) {
                                         if(result!=null & result!=undefined){
                                             $scope.AddSalesCommissionPayableDetail(result);
                                         }
                                     }, function () {
                                         $log.info('Modal dismissed at: ' + new Date());
                                     });
                                 },
                                  function (response) { alert(jQuery.parseJSON(response.data).Message); }
                            );
        };
        $scope.getSalesCommissionPayableIDInGrid =function(){
            debugger;
            $scope.objs = $scope.gridOptions.data ;
            $scope.SalesCommissionPayableIDs ="";
            if($scope.objs.length >0)
            {
                $scope.SalesCommissionPayableIDs = icsMethod.ICS_PropertyConcatation($scope.objs, 'SalesCommissionPayableID');
                
            }
            return $scope.SalesCommissionPayableIDs;
            
        }

        $scope.SearchBankByKeyUp = function (e) {
            debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
                var BankName = $.trim($scope.SalesComPayment.BankNameWithBranch);
                if (BankName == "" || BankName == null) {
                  
                    msModal.Message({ headerTitle: '', bodyText: 'Type Bank Name and Press Enter', sucessText: ' Yes', cancelText: ' Close', feedbackType: false, autoClose: false });
                    return;
                }
                $scope.PickBank();
            } 
            else if (code == 8) //backspace=8
            {
                //debugger;
                $scope.SalesComPayment.BankNameWithBranch= '';
                $scope.SalesComPayment.BankID= 0;
            }
        };
       
        $scope.PickBank = function () {
            debugger;
            var oBankBranch = {
                BUID:sessionStorage.getItem('BUID'),
                DeptIDs: '4,7',//EnumOperationalDept : Export_Party=5
                BankName: $.trim($scope.SalesComPayment.BankNameWithBranch)
            };
           
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress + '/BankBranch/GetsBankBranchSearchByBankName', $.param(oBankBranch), config).then(
                                function (response) {
                                    debugger;
                                    var oColumns = [];
                                    var oColumn = { field: 'BankName', name: 'Bank Name', width: '20%' }; oColumns.push(oColumn);
                                    oColumn = { field: 'BranchName', name: 'Branch Name', width: '50%', enableSorting: false }; oColumns.push(oColumn);
                                    oColumn = { field: 'Address', name: 'Address', width: '30%', enableSorting: false }; oColumns.push(oColumn);
                                    var results = jQuery.parseJSON(response.data);
                                    var modalObj = {
                                        size: 'md',
                                        modalcontroller: 'ModalCommonListCtrl',
                                        appcontroller: 'SalesComPaymentCntrlr',
                                        objs: results,
                                        multiSelect: false,
                                        pickertitle: 'Bank List',
                                        searchingbyfieldName: 'BankName',
                                        columns: oColumns
                                    }
                                    var modalInstance = msModal.Instance(modalObj);
                                    $scope.SalesComPayment.BankName ="";
                                    $scope.SalesComPayment.BranchName ="";
                                    $scope.SalesComPayment.BankAccountID =0;
                                    $scope.SalesComPayment.BankNameWithBranch="";
                                    $scope.SalesComPayment.BankID =0;
                                    $scope.SalesComPayment.BankBranchID =0;
                                    modalInstance.result.then(function (result) {
                                        if(result.BankBranchID>0){
                                            debugger;
                                            $scope.SalesComPayment.BankName =result.BankName;
                                            $scope.SalesComPayment.BranchName =result.BranchName;
                                            $scope.SalesComPayment.BankID =result.BankID;
                                            $scope.SalesComPayment.BankBranchID =result.BankBranchID;
                                            $scope.SalesComPayment.BankNameWithBranch=result.BankName +" [ " +result.BranchName+" ] ";
                                            var oBankAccount = {
                                                BankName: $scope.SalesComPayment.BankBranchID +'~'+  $scope.SalesComPayment.BankID 
                                            };
                                            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
                                            $http.post(_sBaseAddress + '/SalesComPayment/GetsBankAccountSearchByBankNameAndBranch', $.param(oBankAccount), config).then(
                                                                function (response) {
                                                                    var result=jQuery.parseJSON(response.data);
                                                                    if(result[0].BankAccountID > 0 && result.length >0)
                                                                    {
                                                                        $scope.BankAccounts = result;
                                                                    }
                                                                    else{
                                                                        $scope.BankAccounts= [];
                                                                    }
                                                                },
                                                                  function (response) { alert(jQuery.parseJSON(response.data).Message); }
                                                            );
                                            
                                        }
                                        
                                        
                                    }, function () {
                                        $log.info('Modal dismissed at: ' + new Date());
                                    });
                                },
                                  function (response) { alert(jQuery.parseJSON(response.data).Message); }
                            );
        };

        $scope.SearchBank =function(){
            $scope.PickBank();
        }

        $scope.SearchSampleAdjustment  = function (e){
            var code = (e.keyCode ? e.keyCode :e.which);
            if (code == 13) {
                $scope.SamleAdujstment();
            }
            else if (code == 8) //backspace=8
            {
               
                $scope.SalesComPayment.SampleInvoiceNo = '';
              
            }
        }
        $scope.SamleAdujstment = function () {
            debugger;
            var sContractorID = '';
            var sContactPersonnelID = '';
           
            if ($scope.SalesComPayment.ContractorID > 0) {
                sContractorID = $scope.SalesComPayment.ContractorID;
               
            }
            //else{
            //    msModal.Message({headerTitle : '', bodyText:'No party Found', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false,size:'sm'});
            //    return false;
            //}
         
            if ($scope.SalesComPayment.ContactPersonnelID > 0) {
                sContactPersonnelID = $scope.SalesComPayment.ContactPersonnelID;
               
            }
            else{
                msModal.Message({headerTitle : '', bodyText:'No Contact Person Found.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            var oSampleAdj = {
                ContractorID: sContractorID,
                ContractorPersopnnalID:sContactPersonnelID,
                BUID:sessionStorage.getItem('BUID'),
                SampleInvoiceNo :($scope.SalesComPayment.SampleInvoiceNo == undefined)? "":$scope.SalesComPayment.SampleInvoiceNo
              
            };
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress + '/SalesComPayment/GetsSampleAdjustment', $.param(oSampleAdj), config).then(
                                 function (response) 
                                 { 
                                     debugger;
                                     var oColumns = []; 
                                     var oColumn = { field: 'ContractorName', name: 'Contractor Name', width: '25%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'ContractorPersopnnalName', name: 'Persopnnal Name', width: '20%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'SampleInvoiceNo', name: 'Invoice No', width: '20%' }; oColumns.push(oColumn);
                                     oColumn = { field: 'Amount', name: 'Amount', width: '10%' }; oColumns.push(oColumn);
                                     var results = jQuery.parseJSON(response.data);
                                     var modalObj = {
                                         size: 'md',
                                         modalcontroller: 'ModalCommonListCtrl',
                                         appcontroller: 'SalesComPaymentCntrlr',
                                         objs: results,
                                         multiSelect: false,
                                         pickertitle: 'Sample Adjustment',
                                         searchingbyfieldName: 'SampleInvoiceNo',
                                         columns: oColumns
                                     }
                                     var modalInstance = msModal.Instance(modalObj);
                                     modalInstance.result.then(function (result) {
                                         if(result.SampleInvoiceID>0) 
                                         {
                                             debugger;
                                             $scope.SalesComPayment.SampleInvoiceID = result.SampleInvoiceID;
                                             $scope.SalesComPayment.SampleInvoiceNo = result.SampleInvoiceNo;
                                             $scope.SalesComPayment.SampleInvoice_Amount = result.Amount;
                                             $scope.SalesComPayment.SampleInvoiceDateStr = result.SampleInvoiceDateST;
                                         }
                                          
                                        
                                     }, function () {
                                         $log.info('Modal dismissed at: ' + new Date());
                                     });
                                 },
                                  function (response) { alert(jQuery.parseJSON(response.data).Message); }
                            );
        };
       
        $scope.close = function () {
            userSession.previousPage();
        };

       
        $scope.SetTotal =function ()
        {
            $scope.Totalamount = 0;
            debugger;
            var oGriddata = $scope.gridOptions.data;
           
            if(oGriddata.length>0)
            {
                for(var i =0;i<oGriddata.length;i++)
                {
                    $scope.Totalamount+= parseFloat(oGriddata[i].Amount);
                    parseFloat($scope.Totalamount);
                }
                
            }
            $scope.AmountINUSD = formatPrice(parseFloat($scope.Totalamount),0);
            $scope.AmountInBDT = formatPrice(parseFloat($scope.Totalamount *  $scope.SalesComPayment.CRate),0);
            $scope.amountINwords = AmountInWordConversion(parseFloat(icsRemoveComma( $scope.AmountInBDT,4)) , 'BDT');
        }
        $scope.SetTotal();
        $scope.getAmountWithCRRate =function()
        {
            var oGriddata = $scope.gridOptions.data;
            for(var i=0; i<oGriddata.length; i++)
            {
                oGriddata[i].AmountBC=oGriddata[i].Amount*$scope.SalesComPayment.CRate;
                oGriddata[i].PayableAmountBC=oGriddata[i].PayableAmount*$scope.SalesComPayment.CRate;
            }
            $scope.gridOptions.data=oGriddata;
            $scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN); 
            $scope.SetTotal();

            $scope.AmountInBDT = formatPrice(parseFloat(parseFloat($scope.Totalamount) *  parseFloat($scope.SalesComPayment.CRate)),0);
            $scope.amountINwords = AmountInWordConversion(parseFloat( icsRemoveComma($scope.AmountInBDT,4)) , 'BDT');
        }

        $scope.DiscountChange=function()
        {
            debugger;
            $scope.Totalamount=0;
            $scope.TotalamountBC=0;
            var oGriddata = $scope.gridOptions.data;
            for(var i =0;i<oGriddata.length;i++)
            {
                $scope.TotalamountBC+= parseFloat(oGriddata[i].PayableAmount * $scope.SalesComPayment.CRate);
                parseFloat($scope.TotalamountBC);
            }

            for(var i=0; i<oGriddata.length; i++)
            {
                var nActualPayableBC=oGriddata[i].PayableAmount * $scope.SalesComPayment.CRate;

                oGriddata[i].PayableAmountBC=oGriddata[i].PayableAmount*$scope.SalesComPayment.CRate;
                oGriddata[i].AdjDeductPercentage= (100/$scope.TotalamountBC) * nActualPayableBC;
                oGriddata[i].AdjDeductBDT = oGriddata[i].AdjDeductPercentage * ( isNaN(parseFloat($scope.DiscountAmountINBDT)) ? 0 : $scope.DiscountAmountINBDT) / 100;

                oGriddata[i].AmountBC=(parseFloat(nActualPayableBC) -parseFloat(oGriddata[i].AdjDeductBDT)) ;
                oGriddata[i].Amount=(parseFloat(oGriddata[i].AmountBC)/parseFloat(( $scope.SalesComPayment.CRate<=0 ? 1 : $scope.SalesComPayment.CRate)));
                oGriddata[i].AdjDeduct=(parseFloat(oGriddata[i].PayableAmount)-parseFloat(oGriddata[i].Amount));

                $scope.Totalamount+= parseFloat(oGriddata[i].Amount);
            }
            $scope.gridOptions.data=oGriddata;
            $scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN); 
            
            //SET TOTAL
            $scope.AmountINUSD = formatPrice(parseFloat($scope.Totalamount),0);
            $scope.AmountInBDT = formatPrice(parseFloat($scope.Totalamount *  $scope.SalesComPayment.CRate),0);
            $scope.amountINwords = AmountInWordConversion(parseFloat(icsRemoveComma( $scope.AmountInBDT,4)) , 'BDT');
        }
        $scope.DiscountChange_Ready=function()
        {
            debugger;
            $scope.Totalamount=0;
            $scope.TotalamountBC=0;
            var oGriddata = $scope.gridOptions.data;
            for(var i =0;i<oGriddata.length;i++)
            {
                $scope.TotalamountBC+= parseFloat(oGriddata[i].PayableAmount * $scope.SalesComPayment.CRate); 
                oGriddata[i].PayableAmountBC=oGriddata[i].PayableAmount*$scope.SalesComPayment.CRate;
                parseFloat($scope.TotalamountBC);
            }

            var totalDiscount=0;
            for(var i=0; i<oGriddata.length; i++)
            {
                var nActualPayableBC=oGriddata[i].PayableAmount * $scope.SalesComPayment.CRate;

                oGriddata[i].PayableAmountBC=oGriddata[i].PayableAmount*$scope.SalesComPayment.CRate;
                oGriddata[i].AdjDeductPercentage= (100/$scope.TotalamountBC) * nActualPayableBC;
                oGriddata[i].AdjDeduct=(parseFloat(oGriddata[i].PayableAmount)-parseFloat(oGriddata[i].Amount));
                oGriddata[i].AdjDeductBDT = oGriddata[i].AdjDeduct * $scope.SalesComPayment.CRate;

                totalDiscount+=parseFloat(oGriddata[i].AdjDeductBDT);
            }
            $scope.DiscountAmountINBDT=parseFloat(totalDiscount).toFixed(2);
        };
        $scope.DiscountChange_Ready();

        $scope.RemoveBill =function ()
        {
            debugger;
            var oBillDetail =$scope.gridApi.selection.getSelectedRows();;
            if(oBillDetail==null || oBillDetail.length<=0)
            {
                msModal.Message({headerTitle : '', bodyText:'Select At least One item !', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            debugger;
            if(oBillDetail[0].SalesComPaymentDetailID > 0 && oBillDetail[0].SalesComPaymentID > 0)
            {
                $http.post(_sBaseAddress+'/SalesComPayment/DeleteDetail',JSON.stringify(oBillDetail[0])).then(
                              function (response) {
                                  if(jQuery.parseJSON(response.data)=='Deleted'){
                                      debugger;
                                      angular.forEach($scope.gridOptions.data,function(value,index){
                                          if(value.SalesComPaymentDetailID==oBillDetail[0].SalesComPaymentDetailID){
                                              $scope.gridOptions.data.splice(index,1);
                                          }
                                      },$scope.gridOptions.data);
                                      $scope.SetTotal();
                                  }
                                  else{
                                      alert(jQuery.parseJSON(response.data));
                                  }
                              },
                              function (response) {alert(jQuery.parseJSON(response.data));}
                          );
            }
            else {
                angular.forEach($scope.gridOptions.data, function (value, index)
                {
                    if (value.SalesCommissionPayableID == oBillDetail[0].SalesCommissionPayableID)
                    {
                        $scope.gridOptions.data.splice(index, 1);
                    }
                       
                }, $scope.gridOptions.data);
                $scope.SetTotal();
            }
            
        };

        $scope.Save =function()
        {
            debugger;
            if( !$scope.Validation())
                return false;
            var obj = $scope.refreshObjectSalesComPayment();
            $http.post(_sBaseAddress+'/SalesComPayment/Save', JSON.stringify(obj)).then(
                            function (response) {   
                                var result=jQuery.parseJSON(response.data);
                                debugger;
                                if(result.SalesComPaymentID > 0)
                                {
                                    userSession.setData('SalesComPayment',result);

                                    userSession.previousPage();
                                }
                                else{
                                    msModal.Message({headerTitle : '', bodyText:result.ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                }
                            },
                            function (response) { 
                               msModal.Message({headerTitle : '', bodyText:(response.data).ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});}

                      );
 };

        $scope.Validation= function()
        {
            debugger;
             if($scope.SalesComPayment.CPName==null && $scope.SalesComPayment.ContactPersonnelID <=0){
                msModal.Message({headerTitle : '', bodyText:"Pick Contact Person!", sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            else if( $scope.gridOptions.data.length<=0){
                msModal.Message({headerTitle : '', bodyText:"No Sales Commission record Found!", sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            else if($scope.SalesComPayment.CurrencyID <=0){
                msModal.Message({headerTitle : '', bodyText:"Currency Not Selected !", sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            else if($scope.SalesComPayment.PaymentType <=0){
                msModal.Message({headerTitle : '', bodyText:"Select Payment Type!", sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            else if($scope.SalesComPayment.PaymentType ==3){
                $scope.PaymentAmount = parseFloat(($scope.gridOptions.data.select('Amount').sum()).toFixed(2));
              
                if(parseFloat($scope.SalesComPayment.SampleInvoice_Amount)!= parseFloat($scope.PaymentAmount.toFixed(2))) {
                   
                    msModal.Message({headerTitle : '', bodyText:"Adjustment Amount must be equal to Payment Amount", sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                    return false;
                }
            }
            else if($scope.SalesComPayment.MRDateStr == null) {
                msModal.Message({headerTitle : '', bodyText:"Select Payment Type!", sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            else if($scope.SalesComPayment.PaymentMode >0) {
                  if($scope.SalesComPayment.DocNo == null) {
                    msModal.Message({headerTitle : '', bodyText:"Enter Document No !", sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                    return false;
                  }
                  if($scope.SalesComPayment.DocDateStr == null) {
                      msModal.Message({headerTitle : '', bodyText:"Enter Document Date !", sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                      return false;
                  }
                  if($scope.SalesComPayment.BankNameWithBranch == null || $scope.SalesComPayment.BankAccountID < 0) {
                      msModal.Message({headerTitle : '', bodyText:"Bank Account Not Found! !", sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                      return false;
                  }
                  return true;
            }
            

            return true;
        };

        $scope.AddSalesCommissionPayableDetail=function(result){
            debugger;
            for(var i=0;i<result.length;i++)
            {
                if(result[i].SalesCommissionPayableID>0)
                {
                    var IsExsist=false;
                    $scope.SalesComPayment.CRate=result[i].Param_CRate;
                    if($scope.gridOptions.data.length>0)
                    {
                        for(var j =0 ;j<$scope.gridOptions.data.length ;j++)
                        {
                            if($scope.gridOptions.data[j].ContactPersonnelID!=result[i].ContactPersonnelID)
                            {
                                alert("Sorry, Invalid Operation For '"+ result[i].CPName+"' !"); IsExsist=true; return;
                            }
                        }
                    }
                    if(!IsExsist){
                        result[i].PayableAmountBC= result[i].PayableAmount *  $scope.SalesComPayment.CRate;
                        result[i].ActualPayable=result[i].PayableAmountBC;
                        $scope.gridOptions.data.push(result[i]);
                        $scope.SalesComPayment.CPName = result[i].CPName;
                        $scope.SalesComPayment.ContractorName = result[i].ContractorName;
                        $scope.SalesComPayment.ContactPersonnelID = result[i].ContactPersonnelID;
                        $scope.SalesComPayment.ContractorID = result[i].ContractorID;
                        $scope.getAmountWithCRRate();
                    }
                }
            }
        }

        $scope.refreshObjectSalesComPayment = function()
        {
            debugger;
            var oSalesComPayment = $scope.SalesComPayment; 
            oSalesComPayment.BUID = sessionStorage.getItem("BUID");
            oSalesComPayment.MRDate = new Date( $scope.SalesComPayment.MRDateStr);
            oSalesComPayment.DocDate = new Date( $scope.SalesComPayment.DocDateStr);
            oSalesComPayment.SalesComPaymentDetails= $scope.gridOptions.data;
            return oSalesComPayment;
        };
});





</script>
