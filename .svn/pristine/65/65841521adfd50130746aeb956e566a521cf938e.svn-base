using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ESimSol.BusinessObjects;
using System.Web.Script.Serialization;
using iTextSharp.text;
using ESimSol.Reports;
using System.Drawing.Imaging;
using System.IO;
using System.Drawing;
using ICS.Core;
using ICS.Core.Framework;
using ICS.Core.Utility;
using ReportManagement;
using System.Xml.Serialization;
using ESimSol.BusinessObjects.ReportingObject;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.Data;
using System.Data.OleDb;
using System.Diagnostics;
using ESimSol.Services.DataAccess;


namespace ESimSolFinancial.Controllers
{
    public class CalculateManpower
    {
        public string DepartmentName { get; set; }
        public int NoOfEmployee { get; set; }
        public int PresentEmployee { get; set; }
        public int AbsentEmployee { get; set; }
    }
    public class AttendanceDailyController : PdfViewController
    {
        #region Declaration
        AttendanceDaily _oAttendanceDaily;
        private List<AttendanceDaily> _oAttendanceDailys;
        string sFormat = "";
        List<CalculateManpower> showSummery = new List<CalculateManpower>();
        int Present, Absent, DayOff, Holiday, Late, EarlyLeaving, OT, NoWork, Leave, NoOutTime;
        bool IsNUInDate, IsNUInTime, IsNUOutDate, IsNUOutTime, IsNULate, IsNUEarly, IsNUOT, IsNURemark;
        List<AttendenceRegister> _oAttendenceRegisters = new List<AttendenceRegister>();
        AttendenceRegister _oAttendenceRegister = new AttendenceRegister();
        string _sDateRange = "";
        int _nLayout;
        string _sTotalDays;
        #endregion

        #region Views
        public ActionResult ViewAttendanceDailys(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            string sSQL = "";
            _oAttendanceDailys = new List<AttendanceDaily>();
            sSQL = "select * from View_AttendanceDaily";
            _oAttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            return PartialView(_oAttendanceDailys);
        }

        public ActionResult ViewAttendanceDaily(int nEmployeeID, int nId, double ts) // nID= AttendanceID
        {
            _oAttendanceDaily = new AttendanceDaily();

            if (nId > 0)
            {
                string sSQL = "SELECT * FROM View_AttendanceDaily WHERE AttendanceID=" + nId.ToString();
                _oAttendanceDaily = AttendanceDaily.Get(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            else
            {
                AttendanceDaily oAtd = new AttendanceDaily();
                string sSql = "SELECT top(1)* FROM View_AttendanceDaily WHERE EmployeeID=" + nEmployeeID + " AND AttendanceDate='" + DateTime.Today + "'";
                oAtd = AttendanceDaily.Get(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (oAtd.AttendanceID > 0)
                { _oAttendanceDaily = oAtd; }
                else
                {
                    _oAttendanceDaily.EmployeeID = nEmployeeID;
                }

            }

            return PartialView(_oAttendanceDaily);
        }


        public ActionResult ViewBridgeAbsent(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            AttendanceDaily oAD = new AttendanceDaily();

            return View(oAD);
        }


        public ActionResult View_UploadAttendance(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();

            return View(oAttendanceDaily);
        }

        #endregion

        #region IUD
        [HttpPost]
        public JsonResult AttendanceDaily_IU(AttendanceDaily oAttendanceDaily)
        {
            _oAttendanceDaily = new AttendanceDaily();
            try
            {
                _oAttendanceDaily = oAttendanceDaily;
                _oAttendanceDaily.WorkingStatus = (EnumEmployeeWorkigStatus)oAttendanceDaily.WorkingStatusInt;
                if (_oAttendanceDaily.AttendanceID > 0)
                {
                    _oAttendanceDaily = _oAttendanceDaily.IUD((int)EnumDBOperation.Update, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                }
                else
                {
                    _oAttendanceDaily = _oAttendanceDaily.IUD((int)EnumDBOperation.Insert, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                }
            }
            catch (Exception ex)
            {
                _oAttendanceDaily = new AttendanceDaily();
                _oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oAttendanceDaily);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult AttendanceDaily_Delete(int id)
        {
            _oAttendanceDaily = new AttendanceDaily();
            try
            {

                _oAttendanceDaily.AttendanceID = id;
                _oAttendanceDaily = _oAttendanceDaily.IUD((int)EnumDBOperation.Delete, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            }
            catch (Exception ex)
            {
                _oAttendanceDaily = new AttendanceDaily();
                _oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oAttendanceDaily.ErrorMessage);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Get
        [HttpGet]
        public JsonResult Gets(string sTemp, double ts)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            try
            {
                string sSql = "SELECT * from View_AttendanceDaily where EmployeeID IN (" + sTemp + ")";
                oAttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                _oAttendanceDaily = new AttendanceDaily();
                _oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDailys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public JsonResult Get(int nEmpID, string sDate, double ts)
        {
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();
            try
            {
                string sSql = "SELECT top(1)* FROM View_AttendanceDaily WHERE EmployeeID=" + nEmpID + " AND AttendanceDate='" + sDate + "'";
                oAttendanceDaily = AttendanceDaily.Get(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                oAttendanceDaily = new AttendanceDaily();
                oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDaily);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Report
        public ActionResult View_Rpt_EmpWiseAttendance(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            _oAttendanceDaily = new AttendanceDaily();
            //string sSql = "SELECT * FROM HRM_Shift WHERE IsActive=1";
            //_oAttendanceDaily.HRMShifts = HRMShift.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeTypes = EmployeeType.Gets("select * from EmployeeType where EmployeeGrouping=" + (int)EnumEmployeeGrouping.EmployeeType, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();

            return View(_oAttendanceDaily);
        }

        public ActionResult View_Rpt_EmpWiseAttendanceSearch()
        {
            _oAttendanceDaily = new AttendanceDaily();
            return PartialView(_oAttendanceDaily);
        }
        public JsonResult rptGets(string sTemp)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            try
            {
                int EmployeeID = Convert.ToInt32(sTemp.Split('~')[0]);
                DateTime Date = Convert.ToDateTime(sTemp.Split('~')[1]);
                DateTime Startdate = Convert.ToDateTime(sTemp.Split('~')[2]);
                DateTime EndDate = Convert.ToDateTime(sTemp.Split('~')[3]);
                string DateType = Convert.ToString(sTemp.Split('~')[4]);
                string sReturn1 = "SELECT * FROM View_AttendanceDaily";
                string sReturn = "";
                if (EmployeeID > 0)
                {
                    Global.TagSQL(ref sReturn);
                    sReturn = sReturn + " EmployeeID = " + EmployeeID.ToString();
                }
                if (DateType == "Daily")
                {
                    if (Date != null)
                    {
                        Global.TagSQL(ref sReturn);
                        sReturn = sReturn + " AttendanceDate = '" + Date.ToString("dd MMM yyyy") + "'";
                    }
                }
                if (DateType == "Monthly")
                {
                    if (Startdate != null && EndDate != null)
                    {
                        Global.TagSQL(ref sReturn);
                        sReturn = sReturn + " AttendanceDate>= '" + Startdate.ToString("dd MMM yyyy") + "' AND AttendanceDate < '" + EndDate.AddDays(1).ToString("dd MMM yyyy") + "'";
                    }
                }
                string sSQL = sReturn1 + sReturn;
                oAttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                _oAttendanceDaily = new AttendanceDaily();
                _oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDailys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult EmployeeWiseAttendanceSearch(string sTemp)
        {
            _oAttendanceDailys = new List<AttendanceDaily>();
            try
            {
                string sEmployeeIDs = sTemp.Split('~')[0];
                DateTime Startdate = Convert.ToDateTime(sTemp.Split('~')[1]);
                DateTime EndDate = Convert.ToDateTime(sTemp.Split('~')[2]);
                string sSql = "SELECT * FROM View_AttendanceDaily WHERE EmployeeID !=0 ";

                if (sEmployeeIDs != "")
                {
                    sSql = sSql + " AND EmployeeID IN(" + sEmployeeIDs + ")";
                }

                sSql = sSql + " AND AttendanceDate BETWEEN '" + Startdate.ToString("dd MMM yyyy") + "' AND '" + EndDate.ToString("dd MMM yyyy") + "' ORDER BY AttendanceDate";
                _oAttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (_oAttendanceDailys.Count <= 0)
                {
                    throw new Exception("Data Not Found !");
                }
            }
            catch (Exception ex)
            {
                _oAttendanceDaily = new AttendanceDaily();
                _oAttendanceDailys = new List<AttendanceDaily>();
                _oAttendanceDaily.ErrorMessage = ex.Message;
                _oAttendanceDailys.Add(_oAttendanceDaily);
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oAttendanceDailys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        public System.Drawing.Image GetCompanyLogo(Company oCompany)
        {
            if (oCompany.OrganizationLogo != null)
            {
                string fileDirectory = Server.MapPath("~/Content/CompanyLogo.jpg");
                if (System.IO.File.Exists(fileDirectory))
                {
                    System.IO.File.Delete(fileDirectory);
                }

                MemoryStream m = new MemoryStream(oCompany.OrganizationLogo);
                System.Drawing.Image img = System.Drawing.Image.FromStream(m);
                img.Save(fileDirectory, ImageFormat.Jpeg);
                return img;
            }
            else
            {
                return null;
            }
        }

        public ActionResult View_Rpt_MonthlyAttendance(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            _oAttendanceDailys = new List<AttendanceDaily>();

            this.Session.Remove(SessionInfo.AuthorizationRolesMapping);
            this.Session.Add(SessionInfo.AuthorizationRolesMapping, AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.Attendance).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]));


            ViewBag.EmployeeTypes = EmployeeType.Gets("select * from EmployeeType where EmployeeGrouping=" + (int)EnumEmployeeGrouping.EmployeeType, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeCategorys = Enum.GetValues(typeof(EnumEmployeeCategory)).Cast<EnumEmployeeCategory>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.Months = Enum.GetValues(typeof(EnumMonth)).Cast<EnumMonth>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).Where(x => x.Value != 0.ToString()).ToList();

            string sSql = "SELECT * FROM BusinessUnit WHERE BusinessUnitID IN(SELECT BusinessUnitID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID<>0";
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " )";
            }
            sSql = sSql + ")";

            ViewBag.BusinessUnits = BusinessUnit.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));

            List<int> oYears = new List<int>();
            int nCurrentYear = Convert.ToInt32(DateTime.Now.Year.ToString());
            int nStartRange = nCurrentYear-2;
            int nEndRange = nCurrentYear+2;
            for (int i = nStartRange; i <= nEndRange; i++)
            {
                oYears.Add(i);
            }
            ViewBag.Years = oYears;
            return View(_oAttendanceDailys);
        }
        public ActionResult View_Rpt_MonthlyAttendanceSearch()
        {
            _oAttendanceDaily = new AttendanceDaily();
            _oAttendanceDaily.EmployeeTypes = EmployeeType.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);// sshojib

            return PartialView(_oAttendanceDaily);
        }

        public JsonResult MonthlyAttendanceGets(string sTemp)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            try
            {
                int LocationID = Convert.ToInt32(sTemp.Split('~')[0]);
                int DepartmentID = Convert.ToInt32(sTemp.Split('~')[1]);
                DateTime Startdate = Convert.ToDateTime(sTemp.Split('~')[2]);
                DateTime EndDate = Convert.ToDateTime(sTemp.Split('~')[3]);
                int AttendanceSchemeID = Convert.ToInt32(sTemp.Split('~')[4]);
                string sEmployeeIDs = sTemp.Split('~')[5];
                int EmployeeTypeID = Convert.ToInt32(sTemp.Split('~')[6]);
                string Mon = Convert.ToString(sTemp.Split('~')[7]);
                string DepartmentName = Convert.ToString(sTemp.Split('~')[8]);

                string EMPID = "";
                if (sEmployeeIDs != "")
                {
                    EMPID = "WHERE EmployeeID IN(" + sEmployeeIDs + ")";
                }

                string sReturn1 = "SELECT EmployeeName,Code,Designation,EmployeeType,COUNT(AttendanceDate) AS TotalWorkingDay," +
                "COUNT(AttendanceDate) AS TotalShift,CONVERT (DECIMAL(30,17),SUM(TotalWorkingHourInMinute)/60) AS TotalWorkingHour," +
                "COUNT( CASE WHEN (CONVERT(TIME,View_AttendanceDaily.InTime)!='00:00' AND " +
                "CONVERT(TIME,View_AttendanceDaily.OutTime)!='00:00')THEN AttendanceDate END) " +
                "AS PresentShift," +
                "COUNT( CASE WHEN (CONVERT(TIME,View_AttendanceDaily.InTime)='00:00' AND " +
                "CONVERT(TIME,View_AttendanceDaily.OutTime)='00:00')THEN AttendanceDate END) " +
                "AS AbsentShift," +
                "COUNT( CASE WHEN IsDayOFF=1 THEN IsDayOFF END) " +
                "AS IsDayOFF," +
                "COUNT( CASE WHEN IsLeave=1 THEN IsLeave END) " +
                "AS Leave," +
                "COUNT( CASE WHEN IsPaid=1 THEN IsPaid END) " +
                "AS Paid," +
                "COUNT( CASE WHEN WorkingStatus='1'THEN WorkingStatus END) " +
                "AS InWorkPlace," +
                "COUNT( CASE WHEN WorkingStatus='2'THEN WorkingStatus END) " +
                "AS OSD," +
                "COUNT( CASE WHEN WorkingStatus='4'THEN WorkingStatus END) " +
                "AS Suspended," +
                "(SELECT SUM(sa) FROM (SELECT CONVERT(Int, DATEDIFF(day,StartDate,DATEADD(day,1,EndDate))) As sa FROM AttendanceCalendarSessionHoliday " +
                "WHERE ACSID IN (SELECT ACSID FROM AttendanceCalendarSession " +
                "WHERE AttendanceCalendarID IN (SELECT AttendanceCalenderID FROM AttendanceScheme " +
                "WHERE AttendanceSchemeID IN (SELECT AttendanceSchemeID FROM EmployeeOfficial " +
                EMPID + "))AND IsActive=1)AND MONTH(" + "'" + Mon + "'" + ") BETWEEN " +
                "MONTH(StartDate) AND MONTH(EndDate)) aa) " +
                "AS Holiday," +
                "SUM(LateArrivalMinute) AS Late," +
                "SUM(EarlyDepartureMinute) AS EarlyLeaving," +
                "CONVERT (DECIMAL(2,2),SUM(OverTimeInMinute)/60) AS OvertimeInhour " +
                "FROM View_AttendanceDaily ";
                string sReturn = "";

                if (LocationID > 0)
                {
                    Global.TagSQL(ref sReturn);
                    sReturn = sReturn + " LocationID =" + LocationID;
                }
                if (DepartmentID > 0)
                {
                    Global.TagSQL(ref sReturn);
                    sReturn = sReturn + " DepartmentID =" + DepartmentID;
                }
                if (Startdate != null && EndDate != null)
                {
                    Global.TagSQL(ref sReturn);
                    sReturn = sReturn + " AttendanceDate>= '" + Startdate.ToString("dd MMM yyyy") + "' AND AttendanceDate < '" + EndDate.AddDays(1).ToString("dd MMM yyyy") + "'";
                }
                if (AttendanceSchemeID != 0)
                {
                    Global.TagSQL(ref sReturn);
                    sReturn = sReturn + " AttendanceSchemeID =" + AttendanceSchemeID;
                }
                if (sEmployeeIDs != "")
                {
                    Global.TagSQL(ref sReturn);
                    sReturn = sReturn + " EmployeeID IN(" + sEmployeeIDs + ")";
                }
                if (EmployeeTypeID != 0)
                {
                    Global.TagSQL(ref sReturn);
                    sReturn = sReturn + " EmployeeTypeID =" + EmployeeTypeID;
                }
                sReturn = sReturn + " " + "GROUP BY EmployeeName,Code,Designation,EmployeeType";
                string sSQL = sReturn1 + sReturn;

                oAttendanceDailys = AttendanceDaily.GetsForReport(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                _oAttendanceDaily = new AttendanceDaily();
                _oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDailys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        public ActionResult rptMonthlyAttendance(string sTemp)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();

            int LocationID = Convert.ToInt32(sTemp.Split('~')[0]);
            int DepartmentID = Convert.ToInt32(sTemp.Split('~')[1]);
            DateTime Startdate = Convert.ToDateTime(sTemp.Split('~')[2]);
            DateTime EndDate = Convert.ToDateTime(sTemp.Split('~')[3]);
            int AttendanceSchemeID = Convert.ToInt32(sTemp.Split('~')[4]);
            int EmployeeID = Convert.ToInt32(sTemp.Split('~')[5]);
            int EmployeeTypeID = Convert.ToInt32(sTemp.Split('~')[6]);
            string Mon = Convert.ToString(sTemp.Split('~')[7]);
            string DepartmentName = Convert.ToString(sTemp.Split('~')[8]);

            string EMPID = "";
            if (EmployeeID != 0)
            {
                EMPID = "WHERE EmployeeID=" + EmployeeID;
            }

            string sReturn1 = "SELECT EmployeeName,Code,Designation,EmployeeType,COUNT(AttendanceDate) AS TotalWorkingDay," +
            "COUNT(AttendanceDate) AS TotalShift,CONVERT (DECIMAL(30,17),SUM(TotalWorkingHourInMinute)/60) AS TotalWorkingHour," +
            "COUNT( CASE WHEN (CONVERT(TIME,View_AttendanceDaily.InTime)!='00:00' AND " +
            "CONVERT(TIME,View_AttendanceDaily.OutTime)!='00:00')THEN AttendanceDate END) " +
            "AS PresentShift," +
            "COUNT( CASE WHEN (CONVERT(TIME,View_AttendanceDaily.InTime)='00:00' AND " +
            "CONVERT(TIME,View_AttendanceDaily.OutTime)='00:00')THEN AttendanceDate END) " +
            "AS AbsentShift," +
            "COUNT( CASE WHEN IsDayOFF=1 THEN IsDayOFF END) " +
            "AS IsDayOFF," +
            "COUNT( CASE WHEN IsLeave=1 THEN IsLeave END) " +
            "AS Leave," +
            "COUNT( CASE WHEN IsPaid=1 THEN IsPaid END) " +
            "AS Paid," +
            "COUNT( CASE WHEN WorkingStatus='1'THEN WorkingStatus END) " +
            "AS InWorkPlace," +
            "COUNT( CASE WHEN WorkingStatus='2'THEN WorkingStatus END) " +
            "AS OSD," +
            "COUNT( CASE WHEN WorkingStatus='4'THEN WorkingStatus END) " +
            "AS Suspended," +
            "(SELECT SUM(sa) FROM (SELECT CONVERT(Int, DATEDIFF(day,StartDate,DATEADD(day,1,EndDate))) As sa FROM AttendanceCalendarSessionHoliday " +
            "WHERE ACSID IN (SELECT ACSID FROM AttendanceCalendarSession " +
            "WHERE AttendanceCalendarID IN (SELECT AttendanceCalenderID FROM AttendanceScheme " +
            "WHERE AttendanceSchemeID IN (SELECT AttendanceSchemeID FROM EmployeeOfficial " +
            EMPID + "))AND IsActive=1)AND MONTH(" + "'" + Mon + "'" + ") BETWEEN " +
            "MONTH(StartDate) AND MONTH(EndDate)) aa) " +
            "AS Holiday," +
            "SUM(LateArrivalMinute) AS Late," +
            "SUM(EarlyDepartureMinute) AS EarlyLeaving," +
            "CONVERT (DECIMAL(2,2),SUM(OverTimeInMinute)/60) AS OvertimeInhour " +
            "FROM View_AttendanceDaily ";
            string sReturn = "";

            if (LocationID != null)
            {
                Global.TagSQL(ref sReturn);
                sReturn = sReturn + " LocationID =" + LocationID;
            }
            if (DepartmentID != null)
            {
                Global.TagSQL(ref sReturn);
                sReturn = sReturn + " DepartmentID =" + DepartmentID;
            }
            if (Startdate != null && EndDate != null)
            {
                Global.TagSQL(ref sReturn);
                sReturn = sReturn + " AttendanceDate>= '" + Startdate.ToString("dd MMM yyyy") + "' AND AttendanceDate < '" + EndDate.AddDays(1).ToString("dd MMM yyyy") + "'";
            }
            if (AttendanceSchemeID != 0)
            {
                Global.TagSQL(ref sReturn);
                sReturn = sReturn + " AttendanceSchemeID =" + AttendanceSchemeID;
            }
            if (EmployeeID != 0)
            {
                Global.TagSQL(ref sReturn);
                sReturn = sReturn + " EmployeeID =" + EmployeeID;
            }
            if (EmployeeTypeID != 0)
            {
                Global.TagSQL(ref sReturn);
                sReturn = sReturn + " EmployeeTypeID =" + EmployeeTypeID;
            }
            sReturn = sReturn + " " + "GROUP BY EmployeeName,Code,Designation,EmployeeType";
            string sSQL = sReturn1 + sReturn;

            oAttendanceDailys = AttendanceDaily.GetsForReport(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();
            oAttendanceDaily.AttendanceDailys = oAttendanceDailys;
            oAttendanceDaily.ErrorMessage = Mon;
            oAttendanceDaily.DepartmentName = DepartmentName;
            return this.ViewPdf("", "rptMonthlyAttendance", oAttendanceDaily, PageSize.A4_LANDSCAPE, 40, 40, 40, 40);
        }

        public ActionResult View_Rpt_DailyAttendance(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            AttendanceDaily oAD = new AttendanceDaily();
            string sSql = "SELECT * FROM HRM_Shift WHERE IsActive=1";
            oAD.HRMShifts = HRMShift.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.LeaveHeads = LeaveHead.Gets("SELECT * FROM LeaveHead WHERE IsActive=1 AND ShortName IS NOT NULL", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            ViewBag.EmployeeTypes = EmployeeType.Gets("select * from EmployeeType where EmployeeGrouping=" + (int)EnumEmployeeGrouping.EmployeeType, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeCategorys = Enum.GetValues(typeof(EnumEmployeeCategory)).Cast<EnumEmployeeCategory>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();

            sSql = "";
            sSql = "SELECT * FROM BusinessUnit WHERE BusinessUnitID IN(SELECT BusinessUnitID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID<>0";
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " )";
            }
            sSql = sSql + ")";

            ViewBag.BusinessUnits = BusinessUnit.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));

            return View(oAD);
        }

        public ActionResult View_Rpt_DailyAbsent(int menuid)
        {
            List<AttendanceDaily> oADs = new List<AttendanceDaily>();
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);

            string sSql = "SELECT * FROM BusinessUnit WHERE BusinessUnitID IN(SELECT BusinessUnitID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID<>0";
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " )";
            }
            sSql = sSql + ")";
            ViewBag.BusinessUnits = BusinessUnit.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));

            return View(oADs);
        }

        [HttpPost]
        public JsonResult GetsDailyAbsent(DateTime dtDateFrom, DateTime dtDateTo, string sBusinessUnitIds, string sLocationIds, string sDepartmentIds, string sDesignationIds, bool bContinuousAbsent, int nLoadRecords, int nRowLength, double nts)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            try
            {
                string sSQL = "";
                if (!bContinuousAbsent)
                {
                    dtDateTo = dtDateFrom;
                    sSQL = "SELECT top(" + nLoadRecords + ")* FROM (SELECT ROW_NUMBER() OVER(ORDER BY Code) Row,* FROM View_AttendanceDaily WHERE AttendanceID <>0 ";
                }
                else
                {
                    sSQL = "SELECT * FROM View_AttendanceDaily WHERE AttendanceID IN (SELECT MIN(AttendanceID) FROM AttendanceDaily WHERE AttendanceID <>0 ";
                }
                sSQL = sSQL + " AND AttendanceDate  BETWEEN'" + dtDateFrom.ToString("dd MMM yyyy") + "' AND '" + dtDateTo.ToString("dd MMM yyyy") + "' AND CAST(InTime AS TIME(0)) ='00:00:00' AND CAST(OutTime AS TIME(0))='00:00:00'";
                if (sBusinessUnitIds != "")
                {
                    sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
                }
                if (sLocationIds != "")
                {
                    sSQL = sSQL + " AND LocationID IN(" + sLocationIds + ")";
                }
                if (sDepartmentIds != "")
                {
                    sSQL = sSQL + " AND DepartmentID IN(" + sDepartmentIds + ")";
                }
                if (sDesignationIds != "")
                {
                    sSQL = sSQL + " AND DesignationID IN(" + sDesignationIds + ")";
                }
                if (!bContinuousAbsent) { sSQL = sSQL + ") aa WHERE Row >" + nRowLength; }
                else { sSQL = sSQL + " GROUP BY EmployeeID HAVING COUNT(EmployeeID)=DATEDIFF(day,'" + dtDateFrom.ToString("dd MMM yyyy") + "','" + dtDateTo.ToString("dd MMM yyyy") + "')+1)"; }

                sSQL = sSQL + " ORDER BY Code";
                oAttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                oAttendanceDailys = new List<AttendanceDaily>();
                oAttendanceDailys[0].ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDailys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }


        [HttpGet]
        //public JsonResult GetAttendanceExtraSearch(string sDate, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sEmployeeIDs, bool bAbsent, string ShiftIds, int nLoadRecords, int nRowLength, string selectedFormat, int CriteriaType, string StartInTime, string EndInTime, string StartOutTime, string EndOutTime, int StartLate, int EndLate, int StartEarly, int EndEarly, double nts)
        public JsonResult GetAttendanceExtraSearch(string sParam)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();

            //DateTime dStartInTime = Convert.ToDateTime(StartInTime);
            //DateTime dEndInTime = Convert.ToDateTime(EndInTime);
            //DateTime dStartOutTime = Convert.ToDateTime(StartOutTime);
            //DateTime dEndOutTime = Convert.ToDateTime(EndOutTime);

            //DateTime dStartInTime;
            //DateTime dEndInTime;
            //DateTime dStartOutTime;
            //DateTime dEndOutTime;

            //DateTime paramDate;
            //paramDate = Convert.ToDateTime(sDate);

            //try
            //{
            //    string sSQL = "SELECT top(" + nLoadRecords + ")* FROM (SELECT ROW_NUMBER() OVER(ORDER BY Code) Row,* FROM View_AttendanceDaily WHERE AttendanceID <>0 AND AttendanceDate ='" + sDate + "'";
            //    if (bAbsent == true)
            //    {
            //        sSQL = sSQL + " AND InTime='" + sDate + " 00:00:00.000' AND OutTime='" + sDate + " 00:00:00.000'";
            //    }
            //    if (sBusinessUnitIds != "")
            //    {
            //        sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            //    }
            //    if (sLocationID != "")
            //    {
            //        sSQL = sSQL + " AND LocationID IN(" + sLocationID + ")";
            //    }
            //    if (sDepartmentIds != "")
            //    {
            //        sSQL = sSQL + " AND DepartmentID IN(" + sDepartmentIds + ")";
            //    }
            //    if (sDesignationIds != "")
            //    {
            //        sSQL = sSQL + " AND DesignationID IN(" + sDesignationIds + ")";
            //    }
            //    if (sEmployeeIDs != "")
            //    {
            //        sSQL = sSQL + " AND EmployeeID IN(" + sEmployeeIDs + ")";
            //    }
            //    if (ShiftIds != "")
            //    {
            //        sSQL = sSQL + " AND ShiftID IN(" + ShiftIds + ")";
            //    }
            //    if (sChkType != "")
            //    {
            //        if (sChkType == "Present")
            //        {
            //            sSQL += " AND (CAST(InTime AS TIME(0))!='00:00:00'OR CAST(OutTime AS TIME(0))!='00:00:00')";
            //        }
            //        if (sChkType == "Absent")
            //        {
            //            sSQL += " AND (CAST(InTime AS TIME(0))='00:00:00'AND CAST(OutTime AS TIME(0))='00:00:00') AND LeaveHeadID=0 AND IsDayOff=0 AND IsHoliday=0";
            //        }
            //        if (sChkType == "Late")
            //        {
            //            sSQL += " AND LateArrivalMinute>0";
            //        }
            //        if (sChkType == "Early")
            //        {
            //            sSQL += " AND EarlyDepartureMinute>0";
            //        }
            //        if (sChkType == "OT")
            //        {
            //            sSQL += " AND OverTimeInMinute>0";
            //        }
            //        if (sChkType == "NoWork")
            //        {
            //            sSQL += " AND IsNoWork=1";
            //        }
            //        if (sChkType == "Leave")
            //        {
            //            sSQL += " AND LeaveHeadID>0";
            //        }
            //        if (sChkType == "NOT")//No Out Time
            //        {
            //            sSQL += " AND (CAST(InTime AS TIME(0))!='00:00:00'AND CAST(OutTime AS TIME(0))='00:00:00')";
            //        }
            //    }

            //    DateTime d;

            //    //dStartInTime = Convert.ToDateTime(StartInTime);
            //    if (DateTime.TryParse(StartInTime, out d)) { dStartInTime = d; } else { dStartInTime = new DateTime(); }

            //    paramDate = paramDate.AddHours(-paramDate.Hour);
            //    paramDate = paramDate.AddHours(dStartInTime.Hour);
            //    paramDate = paramDate.AddMinutes(-paramDate.Minute);
            //    paramDate = paramDate.AddMinutes(dStartInTime.Minute);
            //    paramDate = paramDate.AddSeconds(-paramDate.Second);
            //    paramDate = paramDate.AddSeconds(dStartInTime.Second);

            //    dStartInTime = paramDate;

            //    //dEndInTime = Convert.ToDateTime(EndInTime);
            //    if (DateTime.TryParse(EndInTime, out d)) { dEndInTime = d; } else { dEndInTime = new DateTime(); }

            //    paramDate = paramDate.AddHours(-paramDate.Hour);
            //    paramDate = paramDate.AddHours(dEndInTime.Hour);
            //    paramDate = paramDate.AddMinutes(-paramDate.Minute);
            //    paramDate = paramDate.AddMinutes(dEndInTime.Minute);
            //    paramDate = paramDate.AddSeconds(-paramDate.Second);
            //    paramDate = paramDate.AddSeconds(dEndInTime.Second);
            //    dEndInTime = paramDate;

            //    //dStartOutTime = Convert.ToDateTime(StartOutTime);
            //    if (DateTime.TryParse(StartOutTime, out d)) { dStartOutTime = d; } else { dStartOutTime = new DateTime(); }

            //    paramDate = paramDate.AddHours(-paramDate.Hour);
            //    paramDate = paramDate.AddHours(dStartOutTime.Hour);
            //    paramDate = paramDate.AddMinutes(-paramDate.Minute);
            //    paramDate = paramDate.AddMinutes(dStartOutTime.Minute);
            //    paramDate = paramDate.AddSeconds(-paramDate.Second);
            //    paramDate = paramDate.AddSeconds(dStartOutTime.Second);
            //    dStartOutTime = paramDate;

            //    //dEndOutTime = Convert.ToDateTime(EndOutTime);
            //    if (DateTime.TryParse(EndOutTime, out d)) { dEndOutTime = d; } else { dEndOutTime = new DateTime(); }

            //    paramDate = paramDate.AddHours(-paramDate.Hour);
            //    paramDate = paramDate.AddHours(dEndOutTime.Hour);
            //    paramDate = paramDate.AddMinutes(-paramDate.Minute);
            //    paramDate = paramDate.AddMinutes(dEndOutTime.Minute);
            //    paramDate = paramDate.AddSeconds(-paramDate.Second);
            //    paramDate = paramDate.AddSeconds(dEndOutTime.Second);
            //    dEndOutTime = paramDate;

            //    if (CriteriaType == 1)
            //    {

            //        if (StartInTime != "00:00:00" && EndInTime != "00:00:00")
            //        {
            //            sSQL += " AND CAST(InTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndInTime + "' AS TIME(0)))";
            //        }

            //        if (StartOutTime != "00:00:00" && EndOutTime != "00:00:00")
            //        {
            //            sSQL += " AND CAST(OutTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndOutTime + "' AS TIME(0)))";
            //        }
            //        if (StartLate > 0 || EndLate > 0)
            //        {
            //            sSQL += " AND LateArrivalMinute BETWEEN " + "CONVERT(varchar(50),'" + StartLate + "')" + " AND " + "CONVERT(varchar(50),'" + EndLate + "')";
            //        }
            //        if (StartEarly > 0 || EndEarly > 0)
            //        {
            //            sSQL += " AND EarlyDepartureMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartEarly + "')" + " AND " + "CONVERT(varchar(50),'" + EndEarly + "')";
            //        }
            //    }
            //    if (CriteriaType == 2)
            //    {
            //        if (StartInTime != "00:00:00")
            //        {
            //            sSQL += " AND CAST(InTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
            //        }

            //        if (StartOutTime != "00:00:00")
            //        {
            //            sSQL += " AND CAST(OutTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
            //        }
            //        if (StartLate > 0)
            //        {
            //            sSQL += " AND LateArrivalMinute  = " + "CONVERT(varchar(50),'" + StartLate + "')";
            //        }
            //        if (StartEarly > 0)
            //        {
            //            sSQL += " AND EarlyDepartureMinute  = " + "CONVERT(varchar(50),'" + StartEarly + "')";
            //        }
            //    }
            //    if (CriteriaType == 3)
            //    {
            //        if (StartInTime != "00:00:00")
            //        {
            //            sSQL += " AND CAST(InTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
            //        }

            //        if (StartOutTime != "00:00:00")
            //        {
            //            sSQL += " AND CAST(OutTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
            //        }
            //        if (StartLate > 0)
            //        {
            //            sSQL += " AND LateArrivalMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartLate - 1) + "')";
            //        }
            //        if (StartEarly > 0)
            //        {
            //            sSQL += " AND EarlyDepartureMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartEarly - 1) + "')";
            //        }
            //    }
            //    if (CriteriaType == 4)
            //    {
            //        if (StartInTime != "00:00:00")
            //        {
            //            sSQL += " AND CAST(InTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
            //        }

            //        if (StartOutTime != "00:00:00")
            //        {
            //            sSQL += " AND CAST(OutTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
            //        }
            //        if (StartLate > 0)
            //        {
            //            sSQL += " AND LateArrivalMinute  > " + "CONVERT(varchar(50),'" + StartLate + "')";
            //        }
            //        if (StartEarly > 0)
            //        {
            //            sSQL += " AND EarlyDepartureMinute  > " + "CONVERT(varchar(50),'" + StartEarly + "')";
            //        }
            //    }


            //    if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            //    {
            //        sSQL = sSQL + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            //    }
            //    sSQL = sSQL + ") aa WHERE Row >" + nRowLength;
            //    sSQL = sSQL + " ORDER BY Code";
            try
            {
                oAttendanceDailys = AttendanceDaily.Gets(sParam, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                oAttendanceDailys = new List<AttendanceDaily>();
                oAttendanceDailys[0].ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDailys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetAttendanceBYDate(string sDate, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sEmployeeIDs, bool bAbsent, string ShiftIds, string sChkType, int nLoadRecords, int nRowLength, string selectedFormat, int CriteriaType, string StartInTime, string EndInTime, string StartOutTime, string EndOutTime, int StartLate, int EndLate, int StartEarly, int EndEarly, string Remarks, bool IsRemarked, string sBlockIDs, string sGroupIDs, double nts)
        {
            DateTime dStartInTime = Convert.ToDateTime(StartInTime);
            DateTime dEndInTime = Convert.ToDateTime(EndInTime);
            DateTime dStartOutTime = Convert.ToDateTime(StartOutTime);
            DateTime dEndOutTime = Convert.ToDateTime(EndOutTime);
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            try
            {
                string sSQL = "SELECT top(" + nLoadRecords + ")* FROM (SELECT ROW_NUMBER() OVER(ORDER BY Code) Row,* FROM View_AttendanceDaily WHERE AttendanceID <>0 AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=1) AND AttendanceDate ='" + sDate + "'";
                if (bAbsent == true)
                {
                    sSQL = sSQL + " AND InTime='" + sDate + " 00:00:00.000' AND OutTime='" + sDate + " 00:00:00.000' AND IsOSD!=1";
                }
                if (sBusinessUnitIds != "")
                {
                    sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
                }
                if (sLocationID != "")
                {
                    sSQL = sSQL + " AND LocationID IN(" + sLocationID + ")";
                }
                if (sDepartmentIds != "")
                {
                    sSQL = sSQL + " AND DepartmentID IN(" + sDepartmentIds + ")";
                }
                if (sDesignationIds != "")
                {
                    sSQL = sSQL + " AND DesignationID IN(" + sDesignationIds + ")";
                }
                if (sEmployeeIDs != "")
                {
                    sSQL = sSQL + " AND EmployeeID IN(" + sEmployeeIDs + ")";
                }
                if (ShiftIds != "")
                {
                    sSQL = sSQL + " AND ShiftID IN(" + ShiftIds + ")";
                }
                if (!string.IsNullOrEmpty(sBlockIDs))
                {
                    sSQL = sSQL + " AND EmployeeID IN( SELECT EmployeeID From EmployeeGroup WHERE EmployeeTypeID IN(" + sBlockIDs + ")) ";
                }
                if (!string.IsNullOrEmpty(sGroupIDs))
                {
                    sSQL = sSQL + " AND EmployeeID IN( SELECT EmployeeID From EmployeeGroup WHERE EmployeeTypeID IN(" + sGroupIDs + ")) ";
                }
                if (sChkType != "")
                {
                    if (sChkType == "Present")
                    {
                        sSQL += " AND (CAST(InTime AS TIME(0))!='00:00:00' OR CAST(OutTime AS TIME(0))!='00:00:00' OR IsOSD=1)";
                    }
                    if (sChkType == "Absent")
                    {
                        sSQL += " AND (CAST(InTime AS TIME(0))='00:00:00'AND CAST(OutTime AS TIME(0))='00:00:00') AND LeaveHeadID=0 AND IsDayOff=0 AND IsHoliday=0 AND IsOSD !=1";
                    }
                    if (sChkType == "Dayoff")
                    {
                        sSQL += " AND IsDayOff=1";
                    }
                    if (sChkType == "Holiday")
                    {
                        sSQL += " AND IsHoliday=1";
                    }
                    if (sChkType == "Late")
                    {
                        sSQL += " AND LateArrivalMinute>0";
                    }
                    if (sChkType == "Early")
                    {
                        sSQL += " AND EarlyDepartureMinute>0";
                    }
                    if (sChkType == "OT")
                    {
                        sSQL += " AND OverTimeInMinute>0";
                    }
                    if (sChkType == "NoWork")
                    {
                        sSQL += " AND IsNoWork=1";
                    }
                    if (sChkType == "Leave")
                    {
                        sSQL += " AND LeaveHeadID>0";
                    }
                    if (sChkType == "NOT")//No Out Time
                    {
                        sSQL += " AND (CAST(InTime AS TIME(0))!='00:00:00'AND CAST(OutTime AS TIME(0))='00:00:00')";
                    }
                }
                if (CriteriaType == 1)
                {

                    if (StartInTime != "00:00:00" && EndInTime != "00:00:00")
                    {
                        sSQL += " AND CAST(InTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndInTime + "' AS TIME(0)))";
                    }

                    if (StartOutTime != "00:00:00" && EndOutTime != "00:00:00")
                    {
                        sSQL += " AND CAST(OutTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndOutTime + "' AS TIME(0)))";
                    }
                    if (StartLate > 0 || EndLate > 0)
                    {
                        sSQL += " AND LateArrivalMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartLate + "')" + " AND " + "CONVERT(varchar(50),'" + EndLate + "')";
                    }
                    if (StartEarly > 0 || EndEarly > 0)
                    {
                        sSQL += " AND EarlyDepartureMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartEarly + "')" + " AND " + "CONVERT(varchar(50),'" + EndEarly + "')";
                    }
                }
                if (CriteriaType == 2)
                {
                    if (StartInTime != "00:00:00")
                    {
                        sSQL += " AND CAST(InTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                    }

                    if (StartOutTime != "00:00:00")
                    {
                        sSQL += " AND CAST(OutTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                    }
                    if (StartLate > 0)
                    {
                        sSQL += " AND LateArrivalMinute  = " + "CONVERT(varchar(50),'" + StartLate + "')";
                    }
                    if (StartEarly > 0)
                    {
                        sSQL += " AND EarlyDepartureMinute = " + "CONVERT(varchar(50),'" + StartEarly + "')";
                    }
                }
                if (CriteriaType == 3)
                {
                    if (StartInTime != "00:00:00")
                    {
                        sSQL += " AND CAST(InTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                    }

                    if (StartOutTime != "00:00:00")
                    {
                        sSQL += " AND CAST(OutTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                    }
                    if (StartLate > 0)
                    {
                        sSQL += " AND LateArrivalMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartLate - 1) + "')";
                    }
                    if (StartEarly > 0)
                    {
                        sSQL += " AND EarlyDepartureMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartEarly - 1) + "')";
                    }
                }
                if (CriteriaType == 4)
                {
                    if (StartInTime != "00:00:00")
                    {
                        sSQL += " AND CAST(InTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                    }

                    if (StartOutTime != "00:00:00")
                    {
                        sSQL += " AND CAST(OutTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                    }
                    if (StartLate > 0)
                    {
                        sSQL += " AND LateArrivalMinute > " + "CONVERT(varchar(50),'" + StartLate + "')";
                    }
                    if (StartEarly > 0)
                    {
                        sSQL += " AND EarlyDepartureMinute > " + "CONVERT(varchar(50),'" + StartEarly + "')";
                    }
                }
                if (IsRemarked)
                {
                    sSQL += " AND (Remark IS NOT NULL OR Remark <> '')";
                }
                if (!string.IsNullOrEmpty(Remarks))
                {
                    sSQL += " AND Remark LIKE '%" + Remarks + "%'";
                }

                if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
                {
                    sSQL = sSQL + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
                }
                sSQL = sSQL + ") aa WHERE Row >" + nRowLength;
                sSQL = sSQL + " ORDER BY Code";
                oAttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                oAttendanceDailys = new List<AttendanceDaily>();
                oAttendanceDailys[0].ErrorMessage = ex.Message;
            }


            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDailys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetCount(string sDate)
        {
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();
            string sQuery = "SELECT COUNT(*) FROM AttendanceDaily WHERE EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive = 1) AND AttendanceDate='" + sDate + "'";
            oAttendanceDaily = AttendanceDaily.GetTotalCount(sQuery, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDaily);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }
        
        [HttpPost]
        public JsonResult MonthlyAttendanceReportSearch(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sGroupIDs, string sBlockIDs, double nStartSalaryRange, double nEndSalaryRange, string ShiftIds)
        {
            List<MonthlyAttendanceReport> MonthlyAttendanceReports = new List<MonthlyAttendanceReport>();
            MonthlyAttendanceReport MonthlyAttendanceReport = new MonthlyAttendanceReport();
            try
            {
                MonthlyAttendanceReports = MonthlyAttendanceReport.Gets(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, "", sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ShiftIds, "", ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (MonthlyAttendanceReports.Count <= 0)
                {
                    throw new Exception("Data Not Found !");
                }
            }
            catch (Exception ex)
            {
                MonthlyAttendanceReport = new MonthlyAttendanceReport();
                MonthlyAttendanceReports = new List<MonthlyAttendanceReport>();
                MonthlyAttendanceReport.ErrorMessage = ex.Message;
                MonthlyAttendanceReports.Add(MonthlyAttendanceReport);
            }

            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(MonthlyAttendanceReports);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region Print
        private List<AttendanceDaily> GetsDailyAbsent(string sParam)
        {
            _oAttendanceDailys = new List<AttendanceDaily>();

            DateTime dtDateFrom = Convert.ToDateTime(sParam.Split('~')[0]);
            DateTime dtDateTo = Convert.ToDateTime(sParam.Split('~')[1]);
            string sBusinessUnitIds = sParam.Split('~')[2];
            string sLocationIds = sParam.Split('~')[3];
            string sDepartmentIds = sParam.Split('~')[4];
            string sDesignationIds = sParam.Split('~')[5];
            bool bContinuousAbsent = Convert.ToBoolean(sParam.Split('~')[6]);
            int nDayCount = Convert.ToInt32(sParam.Split('~')[7]);

            string sSQL = "";
            if (!bContinuousAbsent)
            {
                dtDateTo = dtDateFrom;
                sSQL = "SELECT * FROM View_AttendanceDaily WHERE AttendanceID <>0 ";
            }
            else
            {
                sSQL = "SELECT * FROM View_AttendanceDaily WHERE AttendanceID IN (SELECT MIN(AttendanceID) FROM AttendanceDaily WHERE AttendanceID <>0 ";
            }
            sSQL = sSQL + " AND AttendanceDate  BETWEEN'" + dtDateFrom.ToString("dd MMM yyyy") + "' AND '" + dtDateTo.ToString("dd MMM yyyy") + "' AND CAST(InTime AS TIME(0)) ='00:00:00' AND CAST(OutTime AS TIME(0))='00:00:00'";
            if (sBusinessUnitIds != "")
            {
                sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationIds != "")
            {
                sSQL = sSQL + " AND LocationID IN(" + sLocationIds + ")";
            }
            if (sDepartmentIds != "")
            {
                sSQL = sSQL + " AND DepartmentID IN(" + sDepartmentIds + ")";
            }
            if (sDesignationIds != "")
            {
                sSQL = sSQL + " AND DesignationID IN(" + sDesignationIds + ")";
            }
            if (bContinuousAbsent) { sSQL = sSQL + " GROUP BY EmployeeID HAVING (COUNT(EmployeeID) BETWEEN "+nDayCount+" AND DATEDIFF(day,'" + dtDateFrom.ToString("dd MMM yyyy") + "','" + dtDateTo.ToString("dd MMM yyyy") + "')+1))"; }

            sSQL = sSQL + " ORDER BY Code";

            _oAttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            return _oAttendanceDailys;
        }

        public ActionResult PrintDailyAbsent_LocationWise(string sParam, double nts)
        {
            _oAttendanceDaily = new AttendanceDaily();
            _oAttendanceDaily.AttendanceDailys = this.GetsDailyAbsent(sParam);

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oAttendanceDaily.Company = oCompanys.First();

            rptDailyAbsent_LocationWise oReport = new rptDailyAbsent_LocationWise();
            byte[] abytes = oReport.PrepareReport(_oAttendanceDaily);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintDailyAbsent_DepartmentWise(string sParam, double nts)
        {
            _oAttendanceDaily = new AttendanceDaily();
            _oAttendanceDaily.AttendanceDailys = this.GetsDailyAbsent(sParam);

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oAttendanceDaily.Company = oCompanys.First();
            //_oAttendanceDaily.ErrorMessage = sMsg;

            rptDailyAbsent_DepartmentWise oReport = new rptDailyAbsent_DepartmentWise();
            byte[] abytes = oReport.PrepareReport(_oAttendanceDaily);
            return File(abytes, "application/pdf");
        }

        //public ActionResult PrintAbsentAttendance(string sAttIDs, int nAction, double nts)
        //{
        //    _oAttendanceDaily = new AttendanceDaily();

        //    string sSQL = "";
        //    string sMsg = "";

        //    sSQL = "SELECT * FROM View_AttendanceDaily WHERE AttendanceID IN(" + sAttIDs + ") ORDER BY Code";

        //    if (nAction == 1)
        //    {
        //        sMsg = "Present";
        //    }

        //    if (nAction == 2)
        //    {
        //        sMsg = "Absent";
        //    }

        //    if (nAction == 3)
        //    {
        //        sMsg = "Late";
        //    }

        //    if (nAction == 4)
        //    {
        //        sMsg = "Early";
        //    }

        //    _oAttendanceDaily.AttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

        //    List<Company> oCompanys = new List<Company>();
        //    oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
        //    _oAttendanceDaily.Company = oCompanys.First();
        //    _oAttendanceDaily.ErrorMessage = sMsg;

        //    rptAbsentAttendance oReport = new rptAbsentAttendance();
        //    byte[] abytes = oReport.PrepareReport(_oAttendanceDaily);
        //    return File(abytes, "application/pdf");
        //}

        public ActionResult PrintMonthlyAttendance(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sWorkingStatus, string sGroupIDs, string sBlockIDs, double ts)
        {

            MonthlyAttendanceReport oMonthlyAttendanceReport = new MonthlyAttendanceReport();

            oMonthlyAttendanceReport.MonthlyAttendanceReports = MonthlyAttendanceReport.Gets(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, sWorkingStatus, sGroupIDs, sBlockIDs, 0, 0, "", "", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oMonthlyAttendanceReport.ErrorMessage = DateFrom.ToString("dd MMM yyyy") + " To " + DateTo.ToString("dd MMM yyyy");
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oMonthlyAttendanceReport.Company = oCompanys.First();
            oMonthlyAttendanceReport.Company.CompanyLogo = GetCompanyLogo(oMonthlyAttendanceReport.Company);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oMonthlyAttendanceReport.MonthlyAttendanceReports.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            rptMonthlyAttendance oReport = new rptMonthlyAttendance();
            byte[] abytes = oReport.PrepareReport(oMonthlyAttendanceReport, oBusinessUnits);
            return File(abytes, "application/pdf");

        }


        public void PrintMonthlyAttendanceXL(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sWorkingStatus, string sGroupIDs, string sBlockIDs, double ts)
        {

            MonthlyAttendanceReport _oMonthlyAttendanceReport = new MonthlyAttendanceReport();
            List<MonthlyAttendanceReport> _oMonthlyAttendanceReports = new List<MonthlyAttendanceReport>();

            MonthlyAttendanceReport oMonthlyAttendanceReport = new MonthlyAttendanceReport();

            oMonthlyAttendanceReport.MonthlyAttendanceReports = MonthlyAttendanceReport.Gets(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, sWorkingStatus, sGroupIDs, sBlockIDs, 0, 0, "", "", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oMonthlyAttendanceReport.ErrorMessage = DateFrom.ToString("dd MMM yyyy") + " To " + DateTo.ToString("dd MMM yyyy");
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oMonthlyAttendanceReport.Company = oCompanys.First();
            oMonthlyAttendanceReport.Company.CompanyLogo = GetCompanyLogo(oMonthlyAttendanceReport.Company);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oMonthlyAttendanceReport.MonthlyAttendanceReports.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            //rptMonthlyAttendance oReport = new rptMonthlyAttendance();
            //byte[] abytes = oReport.PrepareReport(oMonthlyAttendanceReport, oBusinessUnits);
            //return File(abytes, "application/pdf");


            int nColumns = 0;
            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Monthly Attendance");
                sheet.Name = "Monthly Attendance";

                
                sheet.Column(2).Width = 8; 
                sheet.Column(3).Width = 25; 
                sheet.Column(4).Width = 35; 
                sheet.Column(5).Width = 20; 
                sheet.Column(6).Width = 15;
                sheet.Column(7).Width = 15;
                sheet.Column(8).Width = 15;
                sheet.Column(9).Width = 15;
                sheet.Column(10).Width = 15;
                sheet.Column(11).Width = 15;
                sheet.Column(12).Width = 15;
                sheet.Column(13).Width = 15;
                sheet.Column(14).Width = 15; 


                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, 2]; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 2]; cell.Value = "Monthly Attendance"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Code"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Name"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Joining"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "WD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "PD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Off"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "HD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "LD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Half/Short L"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "NW"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex += 1;
                colIndex = 2;

                _oMonthlyAttendanceReports = oMonthlyAttendanceReport.MonthlyAttendanceReports;
                _oMonthlyAttendanceReport = oMonthlyAttendanceReport;

                _oMonthlyAttendanceReports = _oMonthlyAttendanceReports.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ToList();

                while (_oMonthlyAttendanceReports.Count > 0)
                {
                    var oResults = _oMonthlyAttendanceReports.Where(x => x.LocationName == _oMonthlyAttendanceReports[0].LocationName && x.DepartmentName == _oMonthlyAttendanceReports[0].DepartmentName).OrderBy(x => x.EmployeeCode).ToList();

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Unit : " + oResults.FirstOrDefault().LocationName + ",Department : " + oResults.FirstOrDefault().DepartmentName; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex += 1;
                    colIndex = 2;

                    int nCount = 0;
                    foreach (MonthlyAttendanceReport oItem in oResults)
                    {
                        nCount++;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nCount; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.TotalWorkingDay; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.PresentDay; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DayOFF; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.HoliDay; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Leave; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.LeaveHalfShort; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.AbsentDay; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NoWork; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OvertimeInhour; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###.##;(#,###.##)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex += 1;
                        colIndex = 2;

                        
                    }
                    rowIndex += 2;

                    _oMonthlyAttendanceReports.RemoveAll(x => x.LocationName == oResults[0].LocationName && x.DepartmentName == oResults[0].DepartmentName);
                }

                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=MonthlyAttendance.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        public void PrintMonthlyAttendanceXLWithSalary(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sWorkingStatus, string sGroupIDs, string sBlockIDs, double ts)
        {

            MonthlyAttendanceReport _oMonthlyAttendanceReport = new MonthlyAttendanceReport();
            List<MonthlyAttendanceReport> _oMonthlyAttendanceReports = new List<MonthlyAttendanceReport>();

            MonthlyAttendanceReport _oDBMonthlyAttendanceReport = new MonthlyAttendanceReport();
            List<MonthlyAttendanceReport> _oDBMonthlyAttendanceReports = new List<MonthlyAttendanceReport>();

            MonthlyAttendanceReport oMonthlyAttendanceReport = new MonthlyAttendanceReport();

            oMonthlyAttendanceReport.MonthlyAttendanceReports = MonthlyAttendanceReport.Gets(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, sWorkingStatus, sGroupIDs, sBlockIDs, 0, 0, "", "", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oMonthlyAttendanceReport.ErrorMessage = DateFrom.ToString("dd MMM yyyy") + " To " + DateTo.ToString("dd MMM yyyy");
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oMonthlyAttendanceReport.Company = oCompanys.First();
            oMonthlyAttendanceReport.Company.CompanyLogo = GetCompanyLogo(oMonthlyAttendanceReport.Company);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oMonthlyAttendanceReport.MonthlyAttendanceReports.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";

                #region Details Report
                var sheet = excelPackage.Workbook.Worksheets.Add("Monthly Attendance");
                sheet.Name = "Monthly Attendance";
                sheet.View.FreezePanes(6, 5);

                sheet.Column(2).Width = 8; //SL	
                sheet.Column(3).Width = 25; //Code
                sheet.Column(4).Width = 35; //Name
                sheet.Column(5).Width = 20; //Joining
                sheet.Column(6).Width = 10; //WD
                sheet.Column(7).Width = 10; //PD
                sheet.Column(8).Width = 10; //Off
                sheet.Column(9).Width = 10; //HD
                sheet.Column(10).Width = 10; //LD	
                sheet.Column(11).Width = 15; //Half/Short L	
                sheet.Column(12).Width = 10; //Absent	
                sheet.Column(13).Width = 10; //NW
                sheet.Column(14).Width = 10; //Regular OT Hour
                sheet.Column(15).Width = 10; //Extra OT Hour
                sheet.Column(16).Width = 10; //EWD
                sheet.Column(17).Width = 15; //Gross Salary
                sheet.Column(18).Width = 15; //Per Day Gross
                sheet.Column(19).Width = 15; //Per Day Basic
                sheet.Column(20).Width = 15; //Payable Gross
                sheet.Column(21).Width = 10; //OT Rate
                sheet.Column(22).Width = 15; //Absent Amount
                sheet.Column(23).Width = 15; //Salary Amount
                sheet.Column(24).Width = 18; //Regular OT Amount
                sheet.Column(25).Width = 18; //Extra OT Amount
                sheet.Column(26).Width = 18; //Total OT Amount
                sheet.Column(27).Width = 18; //Net Salary


                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, 3]; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 3]; cell.Value = "Monthly Attendance"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Code"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Name"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Joining"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "WD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "PD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Off"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "HD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "LD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Half/Short L"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "NW"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Regular OT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Extra OT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "EWD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Gross Salary"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Gross/Day"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Basic/Day"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Payable Gross"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Rate"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Absent Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Salary Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Regular OT Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Extra OT Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total OT Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Net Salary"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                rowIndex += 1;
                colIndex = 2;
                #endregion

                _oDBMonthlyAttendanceReports = oMonthlyAttendanceReport.MonthlyAttendanceReports;
                _oDBMonthlyAttendanceReport = oMonthlyAttendanceReport;
                _oDBMonthlyAttendanceReports = _oDBMonthlyAttendanceReports.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ToList();

                _oMonthlyAttendanceReports = oMonthlyAttendanceReport.MonthlyAttendanceReports;
                _oMonthlyAttendanceReport = oMonthlyAttendanceReport;
                _oMonthlyAttendanceReports = _oMonthlyAttendanceReports.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ToList();


                #region Report Body
                Dictionary<string, string> aGrandTotals = new Dictionary<string, string>();
                string sStartCell = "", sEndCell = ""; int nStartRow = 2, nEndRow = 0;
                while (_oMonthlyAttendanceReports.Count > 0)
                {
                    var oResults = _oMonthlyAttendanceReports.Where(x => x.LocationName == _oMonthlyAttendanceReports[0].LocationName && x.DepartmentName == _oMonthlyAttendanceReports[0].DepartmentName).OrderBy(x => x.EmployeeCode).ToList();

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Unit : " + oResults.FirstOrDefault().LocationName + ",Department : " + oResults.FirstOrDefault().DepartmentName; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex += 1;
                    colIndex = 2;

                    int nCount = 0; string sPresentDayCell = "", sAbsentDayCell = "", sDayOffCell = "", sHolidayCell = "", sLeaveDayCell = "", sRegularOTHCell = "", sExtraOTCell = "", sEWDCell = "", sPayableGrossCell = "", sPerDayGrossCell = "", sPerDayBasicCell = "", sOTRateCell = "", sAbsentAmountCell = "", sSalaryAmountCell = "", sRegulatOTAmountCell = "", sExtraOTAmountCell = "", sTotalOTAmountCell = "";
                    nStartRow = rowIndex;
                    foreach (MonthlyAttendanceReport oItem in oResults)
                    {
                        nCount++;
                        //Sl
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nCount; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Code
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Name
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Joinning
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //WD
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.TotalWorkingDay; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //PD
                        sPresentDayCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.PresentDay; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Off
                        sDayOffCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DayOFF; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Holiday
                        sHolidayCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.HoliDay; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Leave
                        sLeaveDayCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Leave; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Half/Short Leave
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.LeaveHalfShort; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Absent
                        sAbsentDayCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.AbsentDay; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //No Work
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NoWork; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Regular OT Hour
                        sRegularOTHCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.RegularOT_Hr; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Extra OT Hour
                        sExtraOTCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.ExtraOT_Hr; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //EWD
                        sEWDCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "(" + sPresentDayCell + "+" + sDayOffCell + "+" + sHolidayCell + "+" + sLeaveDayCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Gross Salary                        
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.GrossSalary; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Per Day Gross
                        sPerDayGrossCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.PerDaySalary; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Per Day Basic
                        sPerDayBasicCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.PerDaySalaryBasic; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        
                        //Payable Gross
                        sPayableGrossCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "((" + sEWDCell + "+" + sAbsentDayCell + ") * " + sPerDayGrossCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //OT Rate
                        sOTRateCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OT_Rate; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                                                
                        //Absent Amount
                        sAbsentAmountCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "(" + sAbsentDayCell + "*" + sPerDayBasicCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Salary Amount
                        sSalaryAmountCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "(" + sPayableGrossCell + "-" + sAbsentAmountCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Regular OT Amount
                        sRegulatOTAmountCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "(" + sRegularOTHCell + "*" + sOTRateCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Extra OT Amount
                        sExtraOTAmountCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "(" + sExtraOTCell + "*" + sOTRateCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Total OT Amount
                        sTotalOTAmountCell = Global.GetExcelCellName(rowIndex, colIndex);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "(" + sRegulatOTAmountCell + "+" + sExtraOTAmountCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Net Salary
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "(" + sSalaryAmountCell + "+" + sTotalOTAmountCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        nEndRow = rowIndex;

                        rowIndex += 1;
                        colIndex = 2;

                    }

                    #region Sub Total
                    aGrandTotals.Add((aGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + nEndRow.ToString()));
                    cell = sheet.Cells[rowIndex, 2, rowIndex, 4]; cell.Merge = true; cell.Value = "Sub Total :"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    colIndex = 5;
                    //Join Date
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //WD
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    //PD
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Day Off
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //HD
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //LD
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Half Leave
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Absent
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //NW
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Regular OT
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Extra OT
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //EWD                    
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Gross Salary
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Per Day Gross
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Per Day Basic
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Payable Gross
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //OT Rate
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Absent Amount
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    //Salary Amount
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Regular OT Amount
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Extra OT Amount
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Total OT Amount
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Net Salary
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex += 1;
                    colIndex = 2;
                    #endregion

                    rowIndex += 2;
                    _oMonthlyAttendanceReports.RemoveAll(x => x.LocationName == oResults[0].LocationName && x.DepartmentName == oResults[0].DepartmentName);
                }

                #region Grand Total
                string sFormula = ""; int nTempStartRow = 0, nTempEndRow = 0;
                cell = sheet.Cells[rowIndex, 2, rowIndex, 4]; cell.Merge = true; cell.Value = "Grand Total :"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                colIndex = 5;
                //Join Date
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                //WD
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                //PD
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Day Off
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //HD
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //LD
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Half Leave
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Absent
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //NW
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Regular OT
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Extra OT
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //EWD                    
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Gross Salary
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, colIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, colIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = sFormula; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Per Day Gross
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, colIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, colIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = sFormula; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Per Day Basic
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, colIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, colIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = sFormula; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Payable Gross
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, colIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, colIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = sFormula; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //OT Rate
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Absent Amount
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, colIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, colIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = sFormula; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Salary Amount
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, colIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, colIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = sFormula; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Regular OT Amount
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, colIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, colIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = sFormula; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Extra OT Amount
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, colIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, colIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = sFormula; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Total OT Amount
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, colIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, colIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = sFormula; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Net Salary
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, colIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, colIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Formula = sFormula; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex += 1;
                colIndex = 2;
                #endregion

                #endregion
                #endregion

                #region Summary Report
                var Summarysheet = excelPackage.Workbook.Worksheets.Add("Salary Summary");
                Summarysheet.Name = "Salary Summary";
                Summarysheet.View.FreezePanes(6, 3);

                Summarysheet.Column(2).Width = 8; //SL	
                Summarysheet.Column(3).Width = 25; //Location Name
                Summarysheet.Column(4).Width = 35; //Department Name                
                Summarysheet.Column(5).Width = 15; //Manpower 
                Summarysheet.Column(6).Width = 15; //Gross Salary
                Summarysheet.Column(7).Width = 18; //Present Manpower
                Summarysheet.Column(8).Width = 15; //Payable Gross
                Summarysheet.Column(9).Width = 18; //Absent Manpower
                Summarysheet.Column(10).Width = 15; //Absent Amount
                Summarysheet.Column(11).Width = 15; //Salary Amount
                Summarysheet.Column(12).Width = 15; //OT Manpower
                Summarysheet.Column(13).Width = 18; //Regular OT Hour
                Summarysheet.Column(14).Width = 18; //Regular OT Amount                
                Summarysheet.Column(15).Width = 15; //Extra OT Manpower
                Summarysheet.Column(16).Width = 18; //Extra OT Hour
                Summarysheet.Column(17).Width = 18; //Extra OT Amount                
                Summarysheet.Column(18).Width = 18; //Total OT Amount                
                Summarysheet.Column(19).Width = 18; //Net Salary


                colIndex = 2;
                rowIndex = 2;

                #region Report Header
                cell = Summarysheet.Cells[rowIndex, 3]; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = Summarysheet.Cells[rowIndex, 3]; cell.Value = "Salary Summary"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = Summarysheet.Cells[rowIndex, colIndex++];
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Location Name"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Department Name"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Manpower"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Gross Salary"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Present Manpower"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Payable Gross"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Absent Manpower"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Absent Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Salary Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Manpower"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Regular OT Hour"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Regular OT Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Extra OT Manpower"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Extra OT Hour"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Extra OT Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Total OT Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = "Net Salary"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex += 1;
                colIndex = 2;
                #endregion

                _oDBMonthlyAttendanceReports = oMonthlyAttendanceReport.MonthlyAttendanceReports;
                _oDBMonthlyAttendanceReport = oMonthlyAttendanceReport;
                _oDBMonthlyAttendanceReports = _oDBMonthlyAttendanceReports.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ToList();


                #region Report Body
                aGrandTotals = new Dictionary<string, string>();
                sStartCell = ""; sEndCell = ""; nStartRow = 2; nEndRow = 0;
                var oDBMonthlyAttendanceReports = _oDBMonthlyAttendanceReports.GroupBy(x => new { x.LocationName, x.DepartmentName })
                                                         .Select(x => new MonthlyAttendanceReport
                                                         {
                                                             LocationName = x.Key.LocationName,
                                                             DepartmentName = x.Key.DepartmentName,
                                                             EmpCount = x.Count(),
                                                             GrossSalary = x.Sum(y => y.GrossSalary),
                                                             PayableGrossAmount = x.Sum(y => ((y.PresentDay + y.DayOFF + y.HoliDay + y.Leave + y.AbsentDay) * y.PerDaySalary)),
                                                             AbsentAmount = x.Sum(y => (y.AbsentDay * y.PerDaySalaryBasic)),
                                                             RegularOT_Hr = x.Sum(y => y.RegularOT_Hr),
                                                             RegularOT_Amount = x.Sum(y => (y.RegularOT_Hr * y.OT_Rate)),
                                                             ExtraOT_Hr = x.Sum(y => y.ExtraOT_Hr),
                                                             ExtraOT_Amount = x.Sum(y => (y.ExtraOT_Hr * y.OT_Rate))
                                                         });

                int nSummaryCount = 0; string sSummaryPayableGrossAmount = ""; string sSummaryAbsentAmount = ""; string sSummarySalaryAmountCell = ""; string sSummaryRegularOTAmount = ""; string sSummaryExtraOTAmount = ""; string sSummaryTotalOTAmount = "";
                nStartRow = rowIndex;
                foreach (MonthlyAttendanceReport oItem in oDBMonthlyAttendanceReports)
                {

                    //Sl
                    nSummaryCount++;
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = nSummaryCount; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Location Name
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.LocationName; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Department Name
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Manpower
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmpCount; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Gross Salary                        
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.GrossSalary; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Present Manpower

                    //oAttendanceDailys.Where(x => x.EmployeeID == oAttendanceDailys[0].EmployeeID).OrderBy(x => x.AttendanceDate).ToList();
                    int nPresetManpower = _oDBMonthlyAttendanceReports.Where(x => x.LocationName == oItem.LocationName && x.DepartmentName == oItem.DepartmentName && x.AbsentDay == 0).ToList().Count;
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = nPresetManpower; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Payable Gross
                    sSummaryPayableGrossAmount = Global.GetExcelCellName(rowIndex, colIndex);
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.PayableGrossAmount; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Absent Manpower
                    int nAbsentManpower = _oDBMonthlyAttendanceReports.Where(x => x.LocationName == oItem.LocationName && x.DepartmentName == oItem.DepartmentName && x.AbsentDay > 0).ToList().Count;
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = nAbsentManpower; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Absent Amount
                    sSummaryAbsentAmount = Global.GetExcelCellName(rowIndex, colIndex);
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.AbsentAmount; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Salary Amount
                    sSummarySalaryAmountCell = Global.GetExcelCellName(rowIndex, colIndex);
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "(" + sSummaryPayableGrossAmount + "-" + sSummaryAbsentAmount + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //OT Manpower
                    int nOTManpower = _oDBMonthlyAttendanceReports.Where(x => x.LocationName == oItem.LocationName && x.DepartmentName == oItem.DepartmentName && x.RegularOT_Hr > 0).ToList().Count;
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = nOTManpower; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Regular OT Hour                    
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.RegularOT_Hr; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Regular OT Amount
                    sSummaryRegularOTAmount = Global.GetExcelCellName(rowIndex, colIndex);
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.RegularOT_Amount; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Extra OT Manpower
                    int nExtraOTManpower = _oDBMonthlyAttendanceReports.Where(x => x.LocationName == oItem.LocationName && x.DepartmentName == oItem.DepartmentName && x.ExtraOT_Hr > 0).ToList().Count;
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = nExtraOTManpower; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Extra OT Hour                    
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.ExtraOT_Hr; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Extra OT Amount
                    sSummaryExtraOTAmount = Global.GetExcelCellName(rowIndex, colIndex);
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.ExtraOT_Amount; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Total OT Amount
                    sSummaryTotalOTAmount = Global.GetExcelCellName(rowIndex, colIndex);
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "(" + sSummaryRegularOTAmount + "+" + sSummaryExtraOTAmount + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Net Salary
                    cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "(" + sSummarySalaryAmountCell + "+" + sSummaryTotalOTAmount + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    nEndRow = rowIndex;

                    rowIndex += 1;
                    colIndex = 2;

                }

                #region Grand Total
                cell = Summarysheet.Cells[rowIndex, 2, rowIndex, 4]; cell.Merge = true; cell.Value = "Grand Total :"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                colIndex = 5;
                //Manpower
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Gross Salary
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Present Manpower
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Payable Gross
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Absent Manpower
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Absent Amount
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Salary Amount
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //OT Manpower
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Regular OT Hour
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Regular OT Amount
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Extra OT Manpower
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                
                //Extra OT Hour
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Extra OT Amount
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Total OT Amount
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                //Net Salary
                sStartCell = Global.GetExcelCellName(nStartRow, colIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, colIndex);
                cell = Summarysheet.Cells[rowIndex, colIndex++]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex += 1;
                colIndex = 2;
                #endregion

                #endregion
                #endregion
                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=MonthlyAttendance.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }


        public ActionResult PrintDateWiseAttendance(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sGroupIDs, string sBlockIDs, double ts)
        {
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();

            string sSql = "SELECT * FROM View_AttendanceDaily WHERE AttendanceDate BETWEEN '" + DateFrom.ToString("dd MMM yyyy") + "' AND '" + DateTo.ToString("dd MMM yyyy") + "' ";
            if (!string.IsNullOrEmpty(sEmployeeIDs))
            {
                sSql += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (!string.IsNullOrEmpty(sBusinessUnitIds))
            {
                sSql = sSql + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (!string.IsNullOrEmpty(sLocationID))
            {
                sSql = sSql + " AND LocationID IN(" + sLocationID + ")";
            }
            if (!string.IsNullOrEmpty(sDepartmentIds))
            {
                sSql += " AND DepartmentID IN(" + sDepartmentIds + ")";
            }
            if (!string.IsNullOrEmpty(sDesignationIds))
            {
                sSql += " AND DesignationID IN(" + sDesignationIds + ")";
            }
            if (!string.IsNullOrEmpty(sSalarySchemeIDs))
            {
                sSql += " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
            }
            if (!string.IsNullOrEmpty(sGroupIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sGroupIDs + "))";
            }
            if (!string.IsNullOrEmpty(sBlockIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sBlockIDs + "))";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }

            oAttendanceDaily.AttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily.ErrorMessage = DateFrom.ToString() + "," + DateTo.ToString();

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily.Company = oCompanys.First();
            oAttendanceDaily.Company.CompanyLogo = GetCompanyLogo(oAttendanceDaily.Company);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oAttendanceDaily.AttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            rptDateWiseAttendance oReport = new rptDateWiseAttendance();
            byte[] abytes = oReport.PrepareReport(oAttendanceDaily, oBusinessUnits);
            return File(abytes, "application/pdf");

        }

        public ActionResult PrintDateWiseAttendance_Comp(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sGroupIDs, string sBlockIDs, double ts)
        {
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();

            string sSql = "SELECT * FROM View_AttendanceDaily WHERE AttendanceDate BETWEEN '" + DateFrom.ToString("dd MMM yyyy") + "' AND '" + DateTo.ToString("dd MMM yyyy") + "' ";
            if (sEmployeeIDs != "")
            {
                sSql += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (sBusinessUnitIds != "")
            {
                sSql = sSql + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSql = sSql + " AND LocationID IN(" + sLocationID + ")";
            }

            if (sDepartmentIds != "")
            {
                sSql += " AND DepartmentID IN(" + sDepartmentIds + ")";
            }
            if (sDesignationIds != "")
            {
                sSql += " AND DesignationID IN(" + sDesignationIds + ")";
            }
            if (sSalarySchemeIDs != "")
            {
                sSql += " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
            }
            if (!string.IsNullOrEmpty(sGroupIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sGroupIDs + "))";
            }
            if (!string.IsNullOrEmpty(sBlockIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sBlockIDs + "))";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }
            oAttendanceDaily.AttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily.ErrorMessage = DateFrom.ToString() + "," + DateTo.ToString();

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily.Company = oCompanys.First();
            oAttendanceDaily.Company.CompanyLogo = GetCompanyLogo(oAttendanceDaily.Company);


            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oAttendanceDaily.AttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            rptDateWiseAttendance_Comp oReport = new rptDateWiseAttendance_Comp();
            byte[] abytes = oReport.PrepareReport(oAttendanceDaily, oBusinessUnits);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintDateWiseAttendance_Summery(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sGroupIDs, string sBlockIDs, double ts)
        {
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();

            string sSql = "SELECT * FROM View_AttendanceDaily WHERE AttendanceDate BETWEEN '" + DateFrom.ToString("dd MMM yyyy") + "' AND '" + DateTo.ToString("dd MMM yyyy") + "' ";
            if (sEmployeeIDs != "")
            {
                sSql += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (sBusinessUnitIds != "")
            {
                sSql = sSql + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSql = sSql + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIds != "")
            {
                sSql += " AND DepartmentID IN(" + sDepartmentIds + ")";
            }
            if (sDesignationIds != "")
            {
                sSql += " AND DesignationID IN(" + sDesignationIds + ")";
            }
            if (sSalarySchemeIDs != "")
            {
                sSql += " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
            }
            if (!string.IsNullOrEmpty(sGroupIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sGroupIDs + "))";
            }
            if (!string.IsNullOrEmpty(sBlockIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sBlockIDs + "))";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }
            oAttendanceDaily.AttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily.ErrorMessage = DateFrom.ToString() + "," + DateTo.ToString();

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily.Company = oCompanys.First();
            oAttendanceDaily.Company.CompanyLogo = GetCompanyLogo(oAttendanceDaily.Company);


            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oAttendanceDaily.AttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            rptDateWiseAttendance_Summery oReport = new rptDateWiseAttendance_Summery();
            byte[] abytes = oReport.PrepareReport(oAttendanceDaily, oBusinessUnits);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintDailyAttendance_LocationWise(string sParam, double nts)
        {
            //string Date = sParam.Split('~')[0];

            DateTime paramDate;
            string Date = sParam.Split('~')[0];
            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];
            string sChkType = sParam.Split('~')[7];
            string format = sParam.Split('~')[8];
            int CriteriaType = Convert.ToInt32(sParam.Split('~')[9]);
            string StartInTime = sParam.Split('~')[10];
            string EndInTime = sParam.Split('~')[11];
            string StartOutTime = sParam.Split('~')[12];
            string EndOutTime = sParam.Split('~')[13];
            int StartLate = Convert.ToInt32(sParam.Split('~')[14]);
            int EndLate = Convert.ToInt32(sParam.Split('~')[15]);
            int StartEarly = Convert.ToInt32(sParam.Split('~')[16]);
            int EndEarly = Convert.ToInt32(sParam.Split('~')[17]);
            string Remark = sParam.Split('~')[18];
            bool IsRemark = Convert.ToBoolean(sParam.Split('~')[19]);
            string GroupIDs = sParam.Split('~')[20];
            string BlockIDs = sParam.Split('~')[21];

            sFormat = format;

            DateTime dStartInTime;
            DateTime dEndInTime;
            DateTime dStartOutTime;
            DateTime dEndOutTime;

            DateTime dStartLate;
            DateTime dEndLate;
            DateTime dStartEarly;
            DateTime dEndEarly;

            _oAttendanceDaily = new AttendanceDaily();
            string sSQL = "";
            string sMsg = "";

            sSQL = "SELECT * FROM View_AttendanceDaily WHERE AttendanceID <>0 AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=1)";
            //if (sAttID != "") { sSQL += " WHERE AttendanceID IN(" + sAttID + ")"; }
            //else
            //{
            sSQL += " AND AttendanceDate ='" + Date + "'";
            if (sBusinessUnitIds != "")
            {
                sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSQL = sSQL + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIDs != "")
            {
                sSQL += " AND DepartmentID IN(" + sDepartmentIDs + ")";
            }
            if (sDesignationIDs != "")
            {
                sSQL += " AND DesignationID IN(" + sDesignationIDs + ")";
            }
            if (sEmployeeIDs != "")
            {
                sSQL += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (ShiftIds != "")
            {
                sSQL = sSQL + " AND ShiftID IN(" + ShiftIds + ")";
            }

            if (sChkType == "Present")
            {
                sSQL += " AND (CAST(InTime AS TIME(0))!='00:00:00' OR CAST(OutTime AS TIME(0))!='00:00:00' OR IsOSD=1)";
            }

            if (sChkType == "Absent")
            {
                sSQL += " AND (CAST(InTime AS TIME(0))='00:00:00'AND CAST(OutTime AS TIME(0))='00:00:00') AND LeaveHeadID=0 AND IsDayOff=0 AND IsHoliday=0 AND IsOSD!=1";
            }
            if (sChkType == "Dayoff")
            {
                sSQL += " AND IsDayOff=1";
            }
            if (sChkType == "Holiday")
            {
                sSQL += " AND IsHoliday=1";
            }
            if (sChkType == "Late")
            {
                sSQL += " AND LateArrivalMinute>0";
            }

            if (sChkType == "Early")
            {
                sSQL += " AND EarlyDepartureMinute>0";
            }
            if (sChkType == "OT")
            {
                sSQL += " AND OverTimeInMinute>0";
            }
            if (sChkType == "NoWork")
            {
                sSQL += " AND IsNoWork=1";
            }
            if (sChkType == "Leave")
            {
                sSQL += " AND LeaveHeadID>0";
            }
            if (sChkType == "NOT")//No Out Time
            {
                sSQL += " AND (CAST(InTime AS TIME(0))!='00:00:00'AND CAST(OutTime AS TIME(0))='00:00:00')";
            }
            if (IsRemark)
            {
                sSQL += " AND (Remark IS NOT NULL OR Remark <> '')";
            }
            if (!string.IsNullOrEmpty(Remark))
            {
                sSQL += " AND Remark LIKE '%" + Remark + "%'";
            }

            if (!string.IsNullOrEmpty(GroupIDs))
            {
                sSQL += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + GroupIDs + "))";
            }
            if (!string.IsNullOrEmpty(BlockIDs))
            {
                sSQL += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + BlockIDs + "))";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSQL = sSQL + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }

            //dStartInTime = Convert.ToDateTime(StartInTime);
            //dEndInTime = Convert.ToDateTime(EndInTime);
            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            //dEndOutTime = Convert.ToDateTime(EndOutTime);

            DateTime d;

            //dStartInTime = Convert.ToDateTime(StartInTime);
            if (DateTime.TryParse(StartInTime, out d)) { dStartInTime = d; } else { dStartInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartInTime.Second);

            dStartInTime = paramDate;

            //dEndInTime = Convert.ToDateTime(EndInTime);
            if (DateTime.TryParse(EndInTime, out d)) { dEndInTime = d; } else { dEndInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndInTime.Second);
            dEndInTime = paramDate;

            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            if (DateTime.TryParse(StartOutTime, out d)) { dStartOutTime = d; } else { dStartOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartOutTime.Second);
            dStartOutTime = paramDate;

            //dEndOutTime = Convert.ToDateTime(EndOutTime);
            if (DateTime.TryParse(EndOutTime, out d)) { dEndOutTime = d; } else { dEndOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndOutTime.Second);
            dEndOutTime = paramDate;


            if (CriteriaType == 1)
            {

                if (StartInTime != "00:00:00" && EndInTime != "00:00:00")
                {
                    sSQL += " AND CAST(InTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00" && EndOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(OutTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0 || EndLate > 0)
                {
                    sSQL += " AND LateArrivalMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartLate + "')" + " AND " + "CONVERT(varchar(50),'" + EndLate + "')";
                }
                if (StartEarly > 0 || EndEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartEarly + "')" + " AND " + "CONVERT(varchar(50),'" + EndEarly + "')";
                }
            }
            if (CriteriaType == 2)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(InTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(OutTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND LateArrivalMinute  = " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute  = " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }
            if (CriteriaType == 3)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(InTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(OutTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND LateArrivalMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartLate - 1) + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartEarly - 1) + "')";
                }
            }
            if (CriteriaType == 4)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(InTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(OutTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND LateArrivalMinute > " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute  > " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }

            //}
            sSQL += " ORDER BY Code";
            sMsg = sChkType;

            _oAttendanceDaily.AttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oAttendanceDaily.Company = oCompanys.First();
            _oAttendanceDaily.ErrorMessage = sMsg;

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", _oAttendanceDaily.AttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            rptDailyAttendance_LocationWise oReport = new rptDailyAttendance_LocationWise();
            byte[] abytes = oReport.PrepareReport(_oAttendanceDaily, format, oBusinessUnits);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintDailyAttendance_DepartmentWise(string sParam, double nts)
        {
            //string Date = sParam.Split('~')[0];


            DateTime paramDate;
            string Date = sParam.Split('~')[0];
            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];
            string sChkType = sParam.Split('~')[7];
            string format = sParam.Split('~')[8];
            int CriteriaType = Convert.ToInt32(sParam.Split('~')[9]);
            string StartInTime = sParam.Split('~')[10];
            string EndInTime = sParam.Split('~')[11];
            string StartOutTime = sParam.Split('~')[12];
            string EndOutTime = sParam.Split('~')[13];
            int StartLate = Convert.ToInt32(sParam.Split('~')[14]);
            int EndLate = Convert.ToInt32(sParam.Split('~')[15]);
            int StartEarly = Convert.ToInt32(sParam.Split('~')[16]);
            int EndEarly = Convert.ToInt32(sParam.Split('~')[17]);
            string Remark = sParam.Split('~')[18];
            bool IsRemark = Convert.ToBoolean(sParam.Split('~')[19]);
            string GroupIDs = sParam.Split('~')[20];
            string BlockIDs = sParam.Split('~')[21];

            sFormat = format;

            DateTime dStartInTime;
            DateTime dEndInTime;
            DateTime dStartOutTime;
            DateTime dEndOutTime;

            DateTime dStartLate;
            DateTime dEndLate;
            DateTime dStartEarly;
            DateTime dEndEarly;

            _oAttendanceDaily = new AttendanceDaily();
            string sSQL = "";
            string sMsg = "";

            sSQL = "SELECT * FROM View_AttendanceDaily WHERE AttendanceID <>0 AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=1)";
            //if (sAttID != "") { sSQL += " WHERE AttendanceID IN(" + sAttID + ")"; }
            //else
            //{
            sSQL += " AND AttendanceDate ='" + Date + "'";
            if (sBusinessUnitIds != "")
            {
                sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSQL = sSQL + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIDs != "")
            {
                sSQL += " AND DepartmentID IN(" + sDepartmentIDs + ")";
            }
            if (sDesignationIDs != "")
            {
                sSQL += " AND DesignationID IN(" + sDesignationIDs + ")";
            }
            if (sEmployeeIDs != "")
            {
                sSQL += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (ShiftIds != "")
            {
                sSQL = sSQL + " AND ShiftID IN(" + ShiftIds + ")";
            }

            if (sChkType == "Present")
            {
                sSQL += " AND (CAST(InTime AS TIME(0))!='00:00:00' OR CAST(OutTime AS TIME(0))!='00:00:00' OR IsOSD=1)";
            }

            if (sChkType == "Absent")
            {
                sSQL += " AND (CAST(InTime AS TIME(0))='00:00:00'AND CAST(OutTime AS TIME(0))='00:00:00') AND LeaveHeadID=0 AND IsDayOff=0 AND IsHoliday=0 AND IsOSD=0";
            }
            if (sChkType == "Dayoff")
            {
                sSQL += " AND IsDayOff=1";
            }
            if (sChkType == "Holiday")
            {
                sSQL += " AND IsHoliday=1";
            }
            if (sChkType == "Late")
            {
                sSQL += " AND LateArrivalMinute>0";
            }

            if (sChkType == "Early")
            {
                sSQL += " AND EarlyDepartureMinute>0";
            }
            if (sChkType == "OT")
            {
                sSQL += " AND OverTimeInMinute>0";
            }
            if (sChkType == "NoWork")
            {
                sSQL += " AND IsNoWork=1";
            }
            if (sChkType == "Leave")
            {
                sSQL += " AND LeaveHeadID>0";
            }
            if (sChkType == "NOT")//No Out Time
            {
                sSQL += " AND (CAST(InTime AS TIME(0))!='00:00:00'AND CAST(OutTime AS TIME(0))='00:00:00')";
            }
            if (IsRemark)
            {
                sSQL += " AND (Remark IS NOT NULL OR Remark <> '')";
            }
            if (!string.IsNullOrEmpty(Remark))
            {
                sSQL += " AND Remark LIKE '%" + Remark + "%'";
            }
            if (!string.IsNullOrEmpty(GroupIDs))
            {
                sSQL += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + GroupIDs + "))";
            }
            if (!string.IsNullOrEmpty(BlockIDs))
            {
                sSQL += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + BlockIDs + "))";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSQL = sSQL + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }

            //dStartInTime = Convert.ToDateTime(StartInTime);
            //dEndInTime = Convert.ToDateTime(EndInTime);
            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            //dEndOutTime = Convert.ToDateTime(EndOutTime);

            DateTime d;

            //dStartInTime = Convert.ToDateTime(StartInTime);
            if (DateTime.TryParse(StartInTime, out d)) { dStartInTime = d; } else { dStartInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartInTime.Second);

            dStartInTime = paramDate;

            //dEndInTime = Convert.ToDateTime(EndInTime);
            if (DateTime.TryParse(EndInTime, out d)) { dEndInTime = d; } else { dEndInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndInTime.Second);
            dEndInTime = paramDate;

            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            if (DateTime.TryParse(StartOutTime, out d)) { dStartOutTime = d; } else { dStartOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartOutTime.Second);
            dStartOutTime = paramDate;

            //dEndOutTime = Convert.ToDateTime(EndOutTime);
            if (DateTime.TryParse(EndOutTime, out d)) { dEndOutTime = d; } else { dEndOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndOutTime.Second);
            dEndOutTime = paramDate;

            if (CriteriaType == 1)
            {

                if (StartInTime != "00:00:00" && EndInTime != "00:00:00")
                {
                    sSQL += " AND CAST(InTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00" && EndOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(OutTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0 || EndLate > 0)
                {
                    sSQL += " AND LateArrivalMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartLate + "')" + " AND " + "CONVERT(varchar(50),'" + EndLate + "')";
                }
                if (StartEarly > 0 || EndEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute BETWEEN " + "CONVERT(varchar(50),'" + StartEarly + "')" + " AND " + "CONVERT(varchar(50),'" + EndEarly + "')";
                }
            }
            if (CriteriaType == 2)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(InTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(OutTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND LateArrivalMinute  = " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute  = " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }
            if (CriteriaType == 3)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(InTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(OutTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND LateArrivalMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartLate - 1) + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartEarly - 1) + "')";
                }
            }
            if (CriteriaType == 4)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(InTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(OutTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND LateArrivalMinute  > " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute  > " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }

            //}
            sSQL += " ORDER BY Code";
            sMsg = sChkType;

            _oAttendanceDaily.AttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oAttendanceDaily.Company = oCompanys.First();
            _oAttendanceDaily.ErrorMessage = sMsg;


            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", _oAttendanceDaily.AttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            if (sChkType == "NoWork")
            {
                rptDailyAttendance_DepartmentWise_NoWork oReport = new rptDailyAttendance_DepartmentWise_NoWork();
                byte[] abytes = oReport.PrepareReport(_oAttendanceDaily);
                return File(abytes, "application/pdf");
            }
            else
            {
                rptDailyAttendance_DepartmentWise oReport = new rptDailyAttendance_DepartmentWise();
                byte[] abytes = oReport.PrepareReport(_oAttendanceDaily, format, oBusinessUnits);
                return File(abytes, "application/pdf");
            }
        }

        #endregion Print

        #region No Work
        [HttpPost]
        public JsonResult NoWorkExecution(List<AttendanceDaily> oAttendanceDailys)
        {
            _oAttendanceDailys = new List<AttendanceDaily>();
            _oAttendanceDaily = new AttendanceDaily();
            try
            {
                _oAttendanceDailys = AttendanceDaily.NoWorkExecution(oAttendanceDailys, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                _oAttendanceDaily = new AttendanceDaily();
                _oAttendanceDailys = new List<AttendanceDaily>();
                _oAttendanceDaily.ErrorMessage = ex.Message;
                _oAttendanceDailys.Add(_oAttendanceDaily);

            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oAttendanceDailys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult CancelNoWorkExecution(List<AttendanceDaily> oAttendanceDailys)
        {
            _oAttendanceDailys = new List<AttendanceDaily>();
            _oAttendanceDaily = new AttendanceDaily();
            try
            {
                _oAttendanceDailys = AttendanceDaily.CancelNoWorkExecution(oAttendanceDailys, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                _oAttendanceDaily = new AttendanceDaily();
                _oAttendanceDailys = new List<AttendanceDaily>();
                _oAttendanceDaily.ErrorMessage = ex.Message;
                _oAttendanceDailys.Add(_oAttendanceDaily);

            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oAttendanceDailys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        #endregion No work

        #region Manual Attendance
        public ActionResult View_ManualAttendances(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            string SsQL = "SELECT * FROM View_EmployeeOfficial WHERE EmployeeID =" + ((User)(Session[SessionInfo.CurrentUser])).EmployeeID;
            ViewBag.EmployeeOfficial = EmployeeOfficial.Get(SsQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeTypes = EmployeeType.Gets("select * from EmployeeType where EmployeeGrouping=" + (int)EnumEmployeeGrouping.EmployeeType, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            _oAttendanceDaily = new AttendanceDaily();
            return View(_oAttendanceDaily);
        }

        [HttpPost]
        public JsonResult ManualAttendance_Update(AttendanceDaily oAttendanceDaily)
        {
            _oAttendanceDaily = new AttendanceDaily();
            try
            {
                _oAttendanceDaily = oAttendanceDaily;
                _oAttendanceDaily.WorkingStatus = (EnumEmployeeWorkigStatus)oAttendanceDaily.WorkingStatusInt;
                _oAttendanceDaily = _oAttendanceDaily.ManualAttendance_Update((int)EnumDBOperation.Update, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                _oAttendanceDaily = new AttendanceDaily();
                _oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oAttendanceDaily);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult GetAttendanceByDateAndEmp(string sParam)
        {
            _oAttendanceDaily = new AttendanceDaily();
            try
            {
                int EmployeeID = Convert.ToInt32(sParam.Split('~')[0]);
                DateTime Startdate = Convert.ToDateTime(sParam.Split('~')[1]);
                DateTime EndDate = Convert.ToDateTime(sParam.Split('~')[2]);
                string sSql = "SELECT * FROM View_AttendanceDaily WHERE EmployeeID =" + EmployeeID
                     + " AND AttendanceDate BETWEEN '" + Startdate + "' AND '" + EndDate + "'";
                _oAttendanceDaily = AttendanceDaily.Get(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (_oAttendanceDaily.AttendanceID <= 0)
                {
                    throw new Exception("Att. is not processed in this date!");
                }
            }
            catch (Exception ex)
            {
                _oAttendanceDaily = new AttendanceDaily();
                _oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oAttendanceDaily);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Operational Dashboard
        /// <summary>
        /// added by fahim0abir on date: 13 jan 2016
        /// </summary>
        /// <param name="menuid"></param>
        /// <returns></returns>
        public ActionResult View_OperationalDashboard(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            _oAttendanceDailys = new List<AttendanceDaily>();
            ViewBag.Locations = Location.Gets("SELECT * FROM Location WHERE LocationID NOT IN (SELECT ParentID FROM Location)", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            return View(_oAttendanceDailys);
        }

        /// <summary>
        /// added by fahim0abir on date: 13 jan 2016
        /// </summary>
        /// <param name="oAttendanceDaily"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult GetsForOPDB(AttendanceDaily oAttendanceDaily)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            try
            {
                string sSQL = "", sQuery = "SELECT * FROM View_AttendanceDaily AS AD ";


                #region EmployeeIDs
                if (oAttendanceDaily.EmployeeIDs != null)
                {
                    if (oAttendanceDaily.EmployeeIDs != "")
                    {
                        Global.TagSQL(ref sSQL);
                        sSQL = sSQL + " AD.EmployeeID IN (" + oAttendanceDaily.EmployeeIDs + ") ";
                    }
                }
                #endregion
                #region DepartmentIDs
                if (oAttendanceDaily.DepartmentIDs != null)
                {
                    if (oAttendanceDaily.DepartmentIDs != "")
                    {
                        Global.TagSQL(ref sSQL);
                        sSQL = sSQL + " AD.DepartmentID IN (" + oAttendanceDaily.DepartmentIDs + ")";
                    }
                }
                #endregion
                #region DesignationIDs
                if (oAttendanceDaily.DesignationIDs != null)
                {
                    if (oAttendanceDaily.DesignationIDs != "")
                    {
                        Global.TagSQL(ref sSQL);
                        sSQL = sSQL + " AD.DesignationID IN (" + oAttendanceDaily.DesignationIDs + ")";
                    }
                }
                #endregion
                #region Location
                if (oAttendanceDaily.LocationID != null)
                {
                    if (oAttendanceDaily.LocationID > 0)
                    {
                        Global.TagSQL(ref sSQL);
                        sSQL = sSQL + " LocationID=" + oAttendanceDaily.LocationID + " ";
                    }
                }
                #endregion
                #region Shift
                if (oAttendanceDaily.ShiftID != null)
                {
                    if (oAttendanceDaily.ShiftID > 0)
                    {
                        Global.TagSQL(ref sSQL);
                        sSQL = sSQL + " AD.ShiftID=" + oAttendanceDaily.ShiftID + " ";
                    }
                }
                #endregion
                #region Attendance Date
                if (oAttendanceDaily.AttendanceDateFrom != null && oAttendanceDaily.AttendanceDateTo != null)
                {
                    if (oAttendanceDaily.AttendanceDateFrom != DateTime.MinValue && oAttendanceDaily.AttendanceDateFrom != DateTime.MinValue)
                    {
                        Global.TagSQL(ref sSQL);
                        sSQL = sSQL + "CONVERT(DATE,CONVERT(VARCHAR(12),AD.AttendanceDate,106)) BETWEEN CONVERT(DATE,CONVERT(VARCHAR(12),'" + oAttendanceDaily.AttendanceDateFrom.ToString("dd MMM yyyy") + "',106)) AND CONVERT(DATE,CONVERT(VARCHAR(12),'" + oAttendanceDaily.AttendanceDateTo.ToString("dd MMM yyyy") + "',106)) ";
                    }
                }
                #endregion

                if (sSQL != "")
                { sQuery = sQuery + sSQL; }


                oAttendanceDailys = AttendanceDaily.Gets(sQuery, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            }
            catch (Exception ex)
            {
                _oAttendanceDaily = new AttendanceDaily();
                _oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize((object)oAttendanceDailys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// added by fahim0abir on date : 14 jan 2016
        /// </summary>
        /// <param name="oAttendanceDaily"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult GetForOPDB(AttendanceDaily oAttendanceDaily)
        {
            _oAttendanceDaily = new AttendanceDaily();
            try
            {
                if (oAttendanceDaily.AttendanceID > 0)
                {
                    string sSql = "SELECT * FROM View_AttendanceDaily AS AD WHERE AD.AttendanceID=" + oAttendanceDaily.AttendanceID;
                    _oAttendanceDaily = AttendanceDaily.Get(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                }
            }
            catch (Exception ex)
            {
                _oAttendanceDaily = new AttendanceDaily();
                _oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oAttendanceDaily);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Day wise Attendance

        public ActionResult PrintDateWiseAbsent(int nDays, DateTime dDate, double ts)
        {
            _oAttendanceDaily = new AttendanceDaily();
            _oAttendanceDaily.AttendanceDailys = AttendanceDaily.GetsDayWiseAbsent(nDays, dDate, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oAttendanceDaily.Company = oCompanys.First();
            _oAttendanceDaily.Company.CompanyLogo = GetCompanyLogo(_oAttendanceDaily.Company);
            _oAttendanceDaily.ErrorMessage = nDays.ToString();
            rptDayWiseAbsent oReport = new rptDayWiseAbsent();
            byte[] abytes = oReport.PrepareReport(_oAttendanceDaily);
            return File(abytes, "application/pdf");
        }
        #endregion

        #region AttendanceDaily_Manual_Single
        [HttpPost]
        public JsonResult AttendanceDaily_Manual_Single(AttendanceDaily oAttendanceDaily)
        {
            try
            {
                oAttendanceDaily = oAttendanceDaily.AttendanceDaily_Manual_Single(((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                oAttendanceDaily = new AttendanceDaily();
                oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDaily);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult AttendanceDaily_Manual_Single_Comp(AttendanceDaily oAttendanceDaily)
        {
            try
            {
                oAttendanceDaily = oAttendanceDaily.AttendanceDaily_Manual_Single_Comp(((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                oAttendanceDaily = new AttendanceDaily();
                oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDaily);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public JsonResult AttendanceDaily_Manual_Single_Comp_Conf(AttendanceDaily oAttendanceDaily)
        {
            try
            {
                oAttendanceDaily = oAttendanceDaily.AttendanceDaily_Manual_Single_Comp_Conf(((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                oAttendanceDaily = new AttendanceDaily();
                oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDaily);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        #endregion AttendanceDaily_Manual_Single

        //#region Mamiya
        //public ActionResult PrintMamiyaTimeCard(string sTemp)
        //{
        //    AttendanceDaily_ZN oAttendanceDaily_ZN = new AttendanceDaily_ZN();

        //    string sEmployeeIDs = sTemp.Split('~')[0];
        //    DateTime Startdate = Convert.ToDateTime(sTemp.Split('~')[1]);
        //    DateTime EndDate = Convert.ToDateTime(sTemp.Split('~')[2]);
        //    string sLocationID = sTemp.Split('~')[3];
        //    string sDepartmentIds = sTemp.Split('~')[4];
        //    string sBUnitIDs = sTemp.Split('~')[5];
        //    double nStartSalaryRange = Convert.ToDouble(sTemp.Split('~')[6]);
        //    double nEndSalaryRange = Convert.ToDouble(sTemp.Split('~')[7]);
        //    string sBMMIDs = sTemp.Split('~')[8];
        //    string sGroupIDs = sTemp.Split('~')[9];


        //    List<AttendanceDaily_ZN> AttendanceDaily_ZNs = new List<AttendanceDaily_ZN>();
        //    AttendanceDaily_ZNs = AttendanceDaily_ZN.GetsTimeCard(sEmployeeIDs, Startdate, EndDate, sLocationID, sDepartmentIds, "", sBUnitIDs, nStartSalaryRange, nEndSalaryRange, sBMMIDs, sGroupIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);
        //    oAttendanceDaily_ZN.AttendanceDaily_ZNs = AttendanceDaily_ZNs;

        //    List<Company> oCompanys = new List<Company>();
        //    oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
        //    oAttendanceDaily_ZN.Company = oCompanys.First();
        //    oAttendanceDaily_ZN.Company.CompanyLogo = GetCompanyLogo(oAttendanceDaily_ZN.Company);
        //    oAttendanceDaily_ZN.ErrorMessage = Startdate.ToString("dd MMM yyyy") + "~" + EndDate.ToString("dd MMM yyyy");
        //    rptMamiyaTimeCard oReport = new rptMamiyaTimeCard();
        //    byte[] abytes = oReport.PrepareReport(oAttendanceDaily_ZN);
        //    return File(abytes, "application/pdf");
        //}

        //#endregion Mamiya

        #region
        [HttpPost]
        public JsonResult GetsAttendanceDailyManualHistory(AttendanceDailyManualHistory oAttendanceDailyManualHistory)
        {
            string sSQL = "";
            sSQL = "SELECT * FROM view_AttendanceDailyManualHistory WHERE AttendanceID=" + oAttendanceDailyManualHistory.AttendanceID;


            List<AttendanceDailyManualHistory> oAttendanceDailyManualHistorys = new List<AttendanceDailyManualHistory>();
            try
            {
                oAttendanceDailyManualHistorys = AttendanceDailyManualHistory.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (oAttendanceDailyManualHistorys.Count <= 0)
                {
                    throw new Exception("Data Not Found !");
                }

            }
            catch (Exception ex)
            {
                oAttendanceDailyManualHistory = new AttendanceDailyManualHistory();
                oAttendanceDailyManualHistorys = new List<AttendanceDailyManualHistory>();
                oAttendanceDailyManualHistory.ErrorMessage = ex.Message;
                oAttendanceDailyManualHistorys.Add(oAttendanceDailyManualHistory);
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDailyManualHistorys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Date Wise Attendance XL
        public void PrintDateWiseAttendanceXL(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sGroupIDs, string sBlockIDs, string sWorkingStatus, string sShiftIds, double ts)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            string sSql = "SELECT * FROM View_AttendanceDaily WHERE AttendanceDate BETWEEN '" + DateFrom.ToString("dd MMM yyyy") + "' AND '" + DateTo.ToString("dd MMM yyyy") + "' ";
            if (sEmployeeIDs != "")
            {
                sSql += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (sBusinessUnitIds != "")
            {
                sSql = sSql + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSql = sSql + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIds != "")
            {
                sSql += " AND DepartmentID IN(" + sDepartmentIds + ")";
            }
            if (sDesignationIds != "")
            {
                sSql += " AND DesignationID IN(" + sDesignationIds + ")";
            }
            if (sSalarySchemeIDs != "")
            {
                sSql += " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
            }
            if (!string.IsNullOrEmpty(sGroupIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sGroupIDs + "))";
            }
            if (!string.IsNullOrEmpty(sBlockIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sBlockIDs + "))";
            }
            if (sWorkingStatus == "Active")
            {
                sSql += " AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=1)";
            }
            if (sWorkingStatus == "InActive")
            {
                sSql += " AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=0)";
            }
            if (sShiftIds != "")
            {
                sSql += " AND ShiftID IN(" + sShiftIds + ")";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }
           
            sSql = sSql + " ORDER BY Department, Code";
            oAttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oAttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            int nDays = 0;
            int nColumns = 0;
            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("DTAE WISE ATTENDACE");
                sheet.Name = "DTAE WISE ATTENDACE";

                int ColSpan1 = 0;
                if (DateFrom.Month == DateTo.Month)
                {
                    ColSpan1 = DateTo.Day - DateFrom.Day + 1 + 6;
                }
                else
                {
                    ColSpan1 = DateTime.DaysInMonth(DateFrom.Year, DateFrom.Month) - Convert.ToInt32(DateFrom.Day) + 1 + 1 + 5;
                }

                TimeSpan diff = DateTo - DateFrom;
                nDays = diff.Days + 1;
                nColumns = nDays + 6;

                sheet.Column(2).Width = 8; //SL
                sheet.Column(3).Width = 30; //NAME
                sheet.Column(4).Width = 20; //CODE
                sheet.Column(5).Width = 28; //DEPARTMENT
                sheet.Column(6).Width = 28; //DESIGNATION

                for (int i = 7; i <= nColumns; i++)
                {
                    sheet.Column(i).Width = 8;
                }

                sheet.Column(nColumns++).Width = 10;//WD
                sheet.Column(nColumns++).Width = 10;//ABSENT
                sheet.Column(nColumns++).Width = 10;//HD
                sheet.Column(nColumns++).Width = 10;//DO
                sheet.Column(nColumns++).Width = 10;//LEAVE
                sheet.Column(nColumns++).Width = 10;//H/SLEAVE
                sheet.Column(nColumns++).Width = 10;//TOTAL WD
                sheet.Column(nColumns++).Width = 10;//LATE
                sheet.Column(nColumns++).Width = 10;//EARLY LEAVE
                sheet.Column(nColumns++).Width = 10;//OTH
                sheet.Column(nColumns++).Width = 15;//JOINING
                sheet.Column(nColumns++).Width = 15;//DOB

                nMaxColumn = nColumns;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, 2]; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 2]; cell.Value = "DTAE WISE ATTENDACE"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = sheet.Cells[rowIndex + 1, colIndex++];
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "NAME"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "CODE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "DEPARTMENT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = DateFrom.ToString("MMM"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                if (DateFrom.Month != DateTo.Month)
                {
                    ColSpan1 = ColSpan1 + DateTo.Day;
                    cell = sheet.Cells[rowIndex, ColSpan1 + 1]; cell.Value = DateTo.ToString("MMM"); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                colIndex = ColSpan1 + 1;
                cell = sheet.Cells[rowIndex + 1, colIndex++];
                cell.Value = "PD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "HD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Off"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "LD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Half/Short L"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "LATE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "EARLY LEAVE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "TD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "OT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Joining"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Date Of Birth"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;
                colIndex = 7;
                DateTime dStartDate = DateFrom;
                while (dStartDate <= DateTo)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = dStartDate.Day.ToString(); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    dStartDate = dStartDate.AddDays(1);
                }

                int nCount = 0;
                int nWorkingDay = 0;
                int nHDay = 0;
                int nDODay = 0;
                int nLDay = 0;
                int nSHLDay = 0;
                int nOTM = 0;
                int nAbsent = 0;
                int nLateArrivalMinute = 0;
                int nEarlyDepartureMinute = 0;

                while (oAttendanceDailys.Count > 0)
                {
                    nWorkingDay = 0;
                    nHDay = 0;
                    nDODay = 0;
                    nSHLDay = 0;
                    nLDay = 0;
                    nOTM = 0;
                    nAbsent = 0;
                    nLateArrivalMinute = 0;
                    nEarlyDepartureMinute = 0;

                    List<AttendanceDaily> oAttDailys = new List<AttendanceDaily>();
                    oAttDailys = oAttendanceDailys.Where(x => x.EmployeeID == oAttendanceDailys[0].EmployeeID).OrderBy(x => x.AttendanceDate).ToList();

                    if (oAttDailys.Count > 0)
                    {
                        nCount++;
                        rowIndex = rowIndex + 1;
                        colIndex = 2;
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = nCount.ToString(); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].EmployeeName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].EmployeeCode; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DepartmentName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DesignationName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        dStartDate = DateFrom;
                        while (dStartDate <= DateTo)
                        {
                            bool bFlag = false;
                            foreach (AttendanceDaily oADItem in oAttDailys)
                            {
                                if (dStartDate == oADItem.AttendanceDate)
                                {
                                    bFlag = true;

                                    cell = sheet.Cells[rowIndex, colIndex++];
                                    cell.Value = oADItem.AttStatusInStringInShort; cell.Style.Font.Bold = true;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsHoliday == false && oADItem.IsLeave == false && oADItem.IsNoWork == false)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "P"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nWorkingDay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsHoliday == false && oADItem.IsLeave == false && oADItem.IsNoWork == true)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "P,NW"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nWorkingDay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsHoliday == true)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "P,HD"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nHDay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == true)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "P,Off"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nDODay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.LateArrivalMinute > 0)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "L,P"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nLateArrivalMinute++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.EarlyDepartureMinute > 0)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "P,E"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nEarlyDepartureMinute++;
                                    }
                                    if (oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-" && oADItem.IsOSD == false && oADItem.IsDayOff == false && oADItem.IsLeave == false && oADItem.IsHoliday == false)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "A"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nAbsent++;
                                    }
                                    if (oADItem.IsHoliday == true && oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-")
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "HD"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nHDay++;
                                    }
                                    if (oADItem.IsDayOff == true && oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-")
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "Off"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nDODay++;
                                    }
                                    if (oADItem.IsLeave == true && oADItem.LeaveType == EnumLeaveType.Full)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "L"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nLDay++;
                                    }
                                    if (oADItem.IsLeave == true && oADItem.LeaveType == EnumLeaveType.Short || oADItem.LeaveType == EnumLeaveType.Half)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "H/S L"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nSHLDay++;
                                        nWorkingDay++;
                                    }
                                    //else
                                    //{
                                    //    cell = sheet.Cells[rowIndex, colIndex++];
                                    //    cell.Value = "N/A"; cell.Style.Font.Bold = true;
                                    //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //}
                                    nOTM += oADItem.OverTimeInMinute;
                                    break;
                                }
                            }
                            if (!bFlag)
                            {
                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = "N/A"; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                nAbsent++;
                            }
                            dStartDate = dStartDate.AddDays(1);
                        }

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nWorkingDay > 0 ? nWorkingDay.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nAbsent > 0 ? nAbsent.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nHDay > 0 ? nHDay.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nDODay > 0 ? nDODay.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nLDay > 0 ? nLDay.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nSHLDay > 0 ? nSHLDay.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nLateArrivalMinute > 0 ? nLateArrivalMinute.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nEarlyDepartureMinute > 0 ? nEarlyDepartureMinute.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nDays > 0 ? nDays.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = ((nOTM / 60).ToString()).Split('.')[0] + ":" + (nOTM % 60).ToString(); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].JoiningDateInString; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DateOfBirthInString; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }
                    oAttendanceDailys.RemoveAll(x => x.EmployeeID == oAttDailys[0].EmployeeID);
                }

                //signature
                rowIndex = rowIndex + 4;
                int nColSpan1_From = 0;
                int nColSpan2_From = 0;
                int nColSpan3_From = 0;
                int nColSpan1_To = 0;
                int nColSpan2_To = 0;
                int nColSpan3_To = 0;

                if (nMaxColumn % 3 == 0)
                {
                    nColSpan1_From = 1;
                    nColSpan1_To = nColSpan1_From + nMaxColumn / 3;

                    nColSpan2_From = nColSpan1_To + 1;
                    nColSpan2_To = nColSpan2_From + nMaxColumn / 3;

                    nColSpan3_From = nColSpan2_To + 1;
                    nColSpan3_To = nMaxColumn;
                }
                else
                {
                    nColSpan1_From = 1;
                    nColSpan1_To = nColSpan1_From + (nMaxColumn - nMaxColumn % 3) / 3;

                    nColSpan2_From = nColSpan1_To + 1;
                    nColSpan2_To = nColSpan2_From + (nMaxColumn - nMaxColumn % 3) / 3;

                    nColSpan3_From = nColSpan2_To + 1;
                    nColSpan3_To = nMaxColumn;
                }

                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=DTAE_WISE_ATTENDACE.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }
        #endregion Date Wise Attendance XL

        #region Weekly Working Hour XL
        public void PrintWeeklyWorkingHourXL(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sGroupIDs, string sBlockIDs, double ts)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            string sSql = "SELECT * FROM View_AttendanceDaily WHERE AttendanceDate BETWEEN '" + DateFrom.ToString("dd MMM yyyy") + "' AND '" + DateTo.ToString("dd MMM yyyy") + "' ";
            if (sEmployeeIDs != "")
            {
                sSql += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (sBusinessUnitIds != "")
            {
                sSql = sSql + " AND BusinessUnitID IN(" + sLocationID + ")";
            }
            if (sLocationID != "")
            {
                sSql = sSql + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIds != "")
            {
                sSql += " AND DepartmentID IN(" + sDepartmentIds + ")";
            }
            if (sDesignationIds != "")
            {
                sSql += " AND DesignationID IN(" + sDesignationIds + ")";
            }
            if (sSalarySchemeIDs != "")
            {
                sSql += " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
            }
            if (!string.IsNullOrEmpty(sGroupIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sGroupIDs + "))";
            }
            if (!string.IsNullOrEmpty(sBlockIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sBlockIDs + "))";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }
            oAttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oAttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            int nColumns = 0;
            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("WeeklyWorkingHour");
                sheet.Name = "WeeklyWorkingHour";

                sheet.Column(2).Width = 8;//SL
                sheet.Column(3).Width = 20;//CODE
                sheet.Column(4).Width = 20;//NAME
                sheet.Column(5).Width = 25;//DEPARTMENT
                sheet.Column(6).Width = 25;//DESIGNATION
                sheet.Column(7).Width = 12;//JOINING

                nColumns = 8;

                for (nColumns = 8; nColumns < 43; nColumns++)
                {
                    sheet.Column(nColumns).Width = 11; //Week
                }

                nMaxColumn = nColumns;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn]; cell.Merge = true; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn]; cell.Merge = true; cell.Value = "WEEKLY WORKING HOUR"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "CODE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "NAME"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "DEPARTMENT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex]; cell.Merge = true;
                cell.Value = "JOINING"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                DateTime TempStartTime = DateTime.Now;
                TempStartTime = DateFrom;

                colIndex = 7;
                while (TempStartTime <= DateTo)
                {
                    cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex = colIndex + 5]; cell.Merge = true;
                    cell.Value = TempStartTime.ToString("dd MMM yyyy"); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    TempStartTime = TempStartTime.AddDays(1);
                }
                TempStartTime = DateFrom;
                colIndex = 8;
                rowIndex++;
                while (TempStartTime <= DateTo)
                {
                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = "SHIFT"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = "IN"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = "OUT"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = "SHIFT Hr"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = "OT Hr"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = "GROSS WH"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    TempStartTime = TempStartTime.AddDays(1);
                }
                rowIndex++;

                int nSL = 0;
                while (oAttendanceDailys.Count > 0)
                {
                    List<AttendanceDaily> oTempAttendanceDailys = new List<AttendanceDaily>();
                    oTempAttendanceDailys = oAttendanceDailys.Where(x => x.EmployeeID == oAttendanceDailys[0].EmployeeID).ToList();

                    if (oTempAttendanceDailys.Count > 0)
                    {
                        nSL++;
                        colIndex = 2;
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = nSL.ToString(); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oTempAttendanceDailys[0].EmployeeCode; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oTempAttendanceDailys[0].EmployeeName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oTempAttendanceDailys[0].DepartmentName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oTempAttendanceDailys[0].DesignationName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oTempAttendanceDailys[0].JoiningDateInString; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        TempStartTime = DateFrom;
                        while (TempStartTime <= DateTo)
                        {
                            List<AttendanceDaily> oTempADs = new List<AttendanceDaily>();
                            oTempADs = oTempAttendanceDailys.Where(x => x.AttendanceDate == TempStartTime).ToList();

                            if (oTempADs.Count > 0)
                            {
                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = oTempADs[0].HRM_ShiftName; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = oTempADs[0].InTimeInString; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = oTempADs[0].OutTimeInString; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = Global.MinInHourMin(oTempADs[0].TotalWorkingHourInMinute - oTempADs[0].OverTimeInMinute); cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = Global.MinInHourMin(oTempADs[0].OverTimeInMinute); ; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = Global.MinInHourMin(oTempADs[0].TotalWorkingHourInMinute); ; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                            else
                            {
                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = oTempADs[0].HRM_ShiftName; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = oTempADs[0].InTimeInString; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = oTempADs[0].OutTimeInString; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = Global.MinInHourMin(oTempADs[0].TotalWorkingHourInMinute - oTempADs[0].OverTimeInMinute); cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = Global.MinInHourMin(oTempADs[0].OverTimeInMinute); ; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = Global.MinInHourMin(oTempADs[0].TotalWorkingHourInMinute); ; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                            TempStartTime = TempStartTime.AddDays(1);
                        }
                        rowIndex++;
                    }
                    oAttendanceDailys.RemoveAll(x => x.EmployeeID == oTempAttendanceDailys[0].EmployeeID);
                }

                //signature
                rowIndex = rowIndex + 4;
                int nColSpan1_From = 0;
                int nColSpan2_From = 0;
                int nColSpan3_From = 0;
                int nColSpan1_To = 0;
                int nColSpan2_To = 0;
                int nColSpan3_To = 0;

                if (nMaxColumn % 3 == 0)
                {
                    nColSpan1_From = 1;
                    nColSpan1_To = nColSpan1_From + nMaxColumn / 3;

                    nColSpan2_From = nColSpan1_To + 1;
                    nColSpan2_To = nColSpan2_From + nMaxColumn / 3;

                    nColSpan3_From = nColSpan2_To + 1;
                    nColSpan3_To = nMaxColumn;
                }
                else
                {
                    nColSpan1_From = 1;
                    nColSpan1_To = nColSpan1_From + (nMaxColumn - nMaxColumn % 3) / 3;

                    nColSpan2_From = nColSpan1_To + 1;
                    nColSpan2_To = nColSpan2_From + (nMaxColumn - nMaxColumn % 3) / 3;

                    nColSpan3_From = nColSpan2_To + 1;
                    nColSpan3_To = nMaxColumn;
                }

                cell = sheet.Cells[rowIndex, nColSpan1_From, rowIndex + 3, nColSpan1_To]; cell.Merge = true; cell.Value = "____________________\nPrepared By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, nColSpan2_From, rowIndex + 3, nColSpan2_To]; cell.Merge = true; cell.Value = "______________________\nChecked By APM/PM"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, nColSpan3_From, rowIndex + 3, nMaxColumn]; cell.Merge = true; cell.Value = "______________________\nApproved By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;


                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=WEEKLY_WORKING_HOUR.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }
        #endregion Date Wise Attendance XL

        #region  Working Hour
        public void PrintWorkingHour(string sParam, double ts)
        {
            List<WorkingHour> oWorkingHours = new List<WorkingHour>();
            oWorkingHours = WorkingHour.GetsWorkingHour(sParam, ((User)(Session[SessionInfo.CurrentUser])).UserID);


            DateTime dtDateFrom = Convert.ToDateTime(sParam.Split('~')[5]);
            DateTime dtDateTo = Convert.ToDateTime(sParam.Split('~')[6]);

            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("WorkingHour");
                sheet.Name = "WorkingHour";

                sheet.Column(2).Width = 6;//SL
                sheet.Column(3).Width = 15;//SHIFT
                sheet.Column(4).Width = 15;//TE
                sheet.Column(5).Width = 15;//TP
                sheet.Column(6).Width = 15;//TA
                sheet.Column(7).Width = 15;//TL
                sheet.Column(8).Width = 15;//NP
                sheet.Column(9).Width = 15;//OTP
                sheet.Column(10).Width = 20;//NW
                sheet.Column(11).Width = 20;//OTWH
                sheet.Column(12).Width = 20;//TOTALW

                nMaxColumn = 12;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn]; cell.Merge = true; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn]; cell.Merge = true; cell.Value = "WORKING HOUR(" + (dtDateFrom == dtDateTo ? dtDateFrom.ToString("dd MMM yyyy") : (dtDateFrom.ToString("dd MMM yyyy") + " To " + dtDateTo.ToString("dd MMM yyyy"))) + ")"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "Shift"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "Total Employee"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "Total Present"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "Total Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "Total Leave"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "Normal Present"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "OT Present"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "Normal WH"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "OT WH"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "Total WH"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;

                int nSL = 0;
                int nTotalEmployee = 0;
                double nTotalPresent = 0;
                double nTotalAbsent = 0;
                double nTotalLeave = 0;
                double nNormalPresent = 0;
                double nOTPresent = 0;
                int nNormalWorkingHourInMin = 0;
                int nOTWorkingHourInMin = 0;
                int nTotalWorkingHourInmin = 0;

                foreach (WorkingHour oItem in oWorkingHours)
                {
                    nSL++;
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = nSL; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.ShiftName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.TotalEmployee; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.TotalPresent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.TotalAbsent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.TotalLeave; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.NormalPresent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.OTPresent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.NormalWorkingHourST; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.OTWorkingHourST; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.TotalWorkingHourST; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;


                    nTotalEmployee = nTotalEmployee + oItem.TotalEmployee;
                    nTotalPresent = nTotalPresent + oItem.TotalPresent;
                    nTotalAbsent = nTotalAbsent + oItem.TotalAbsent;
                    nTotalLeave = nTotalLeave + oItem.TotalLeave;
                    nNormalPresent = nNormalPresent + oItem.NormalPresent;
                    nOTPresent = nOTPresent + oItem.OTPresent;
                    nNormalWorkingHourInMin = nNormalWorkingHourInMin + oItem.NormalWorkingHourInMinute;
                    nOTWorkingHourInMin = nOTWorkingHourInMin + oItem.OTWorkingHourInMinute;
                    nTotalWorkingHourInmin = nTotalWorkingHourInmin + oItem.TotalWorkingHourInMinute;

                }

                // Total

                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex, rowIndex, 3]; cell.Merge = true;
                cell.Value = "Total"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                colIndex = colIndex + 2;
                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = nTotalEmployee; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = nTotalPresent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = nTotalAbsent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = nTotalLeave; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = nNormalPresent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = nOTPresent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = Global.MinInHourMin(nNormalWorkingHourInMin); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = Global.MinInHourMin(nOTWorkingHourInMin); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = Global.MinInHourMin(nTotalWorkingHourInmin); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;


                //signature
                rowIndex = rowIndex + 4;
                int nColSpan1_From = 0;
                int nColSpan2_From = 0;
                int nColSpan3_From = 0;
                int nColSpan1_To = 0;
                int nColSpan2_To = 0;
                int nColSpan3_To = 0;

                if (nMaxColumn % 3 == 0)
                {
                    nColSpan1_From = 1;
                    nColSpan1_To = nColSpan1_From + nMaxColumn / 3;

                    nColSpan2_From = nColSpan1_To + 1;
                    nColSpan2_To = nColSpan2_From + nMaxColumn / 3;

                    nColSpan3_From = nColSpan2_To + 1;
                    nColSpan3_To = nMaxColumn;
                }
                else
                {
                    nColSpan1_From = 1;
                    nColSpan1_To = nColSpan1_From + (nMaxColumn - nMaxColumn % 3) / 3;

                    nColSpan2_From = nColSpan1_To + 1;
                    nColSpan2_To = nColSpan2_From + (nMaxColumn - nMaxColumn % 3) / 3;

                    nColSpan3_From = nColSpan2_To + 1;
                    nColSpan3_To = nMaxColumn;
                }

                cell = sheet.Cells[rowIndex, nColSpan1_From, rowIndex + 3, nColSpan1_To]; cell.Merge = true; cell.Value = "____________________\nPrepared By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, nColSpan2_From, rowIndex + 3, nColSpan2_To]; cell.Merge = true; cell.Value = "______________________\nChecked By APM/PM"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, nColSpan3_From, rowIndex + 3, nMaxColumn]; cell.Merge = true; cell.Value = "______________________\nApproved By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;


                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=WORKING_HOUR.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }
        #endregion  Wise Attendance

        #region Att. Summary F2
        public void PrintAttendanceSummary_F2_XL(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sWorkingStatus, string sGroupIDs, string sBlockIDs, double ts)
        {
            List<MonthlyAttendanceReport> oMonthlyAttendanceReports = new List<MonthlyAttendanceReport>();
            oMonthlyAttendanceReports = MonthlyAttendanceReport.Gets(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, sWorkingStatus, sGroupIDs, sBlockIDs, 0, 0, "", "", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<MonthlyAttendance_Leave> oMonthlyAttendance_Leaves = new List<MonthlyAttendance_Leave>();
            oMonthlyAttendance_Leaves = MonthlyAttendance_Leave.Gets(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, sWorkingStatus, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<MonthlyAttendanceReport> oTempMonthlyAttendanceReports = new List<MonthlyAttendanceReport>();
            oMonthlyAttendanceReports.ForEach(x => oTempMonthlyAttendanceReports.Add(x));

            List<MonthlyAttendance_Leave> oDistinctLeaves = new List<MonthlyAttendance_Leave>();
            oDistinctLeaves = oMonthlyAttendance_Leaves.GroupBy(x => x.LeaveName).Select(x => x.First()).OrderBy(x => x.LeaveID).ToList();

            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 1;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("BONUS List");
                sheet.Name = "BONUS LIST";

                sheet.Column(2).Width = 6; //SL
                sheet.Column(3).Width = 15; //EmployeeCode
                sheet.Column(4).Width = 30; //EmployeeName
                sheet.Column(5).Width = 20; //DesignationName
                sheet.Column(6).Width = 15; //Education

                int n = 0;
                for (n = 7; n < 7 + oDistinctLeaves.Count; n++)
                {
                    sheet.Column(n).Width = 6; //LEAVES
                }

                sheet.Column(n++).Width = 10; //EOutdays
                sheet.Column(n++).Width = 10; //EOutMins
                sheet.Column(n++).Width = 10; //Latedays
                sheet.Column(n++).Width = 10; //LateMins
                sheet.Column(n++).Width = 10; //ExcesMins
                sheet.Column(n++).Width = 10; //Absent
                sheet.Column(n++).Width = 10; //Present
                sheet.Column(n++).Width = 20; //Dis. Action
                sheet.Column(n++).Width = 20; //remark

                nMaxColumn = n - 1;

                List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
                string BUIDs = string.Join(",", oMonthlyAttendanceReports.Select(p => p.BusinessUnitID).Distinct().ToList());
                if (BUIDs != "")
                { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

                cell = sheet.Cells[rowIndex, 2];
                cell = sheet.Cells[rowIndex, 2]; cell.Value = ""; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex = rowIndex + 1;

                oMonthlyAttendanceReports = oMonthlyAttendanceReports.OrderBy(x => x.BusinessUnitID).ThenBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ToList();
                while (oMonthlyAttendanceReports.Count > 0)
                {
                    var oResults = oMonthlyAttendanceReports.Where(x => x.BusinessUnitID == oMonthlyAttendanceReports[0].BusinessUnitID && x.LocationName == oMonthlyAttendanceReports[0].LocationName && x.DepartmentName == oMonthlyAttendanceReports[0].DepartmentName).ToList();
                    List<BusinessUnit> oTempBusinessUnits = new List<BusinessUnit>();
                    BusinessUnit oBusinessUnit = new BusinessUnit();
                    oTempBusinessUnits = oBusinessUnits.Where(x => x.BusinessUnitID == oMonthlyAttendanceReports[0].BusinessUnitID).ToList();
                    oBusinessUnit = oTempBusinessUnits.Count > 0 ? oTempBusinessUnits[0] : new BusinessUnit();

                    this.AttSummaryReportHeaderXL_F2(ref  sheet, ref  cell, ref  rowIndex, ref  colIndex, nMaxColumn, oBusinessUnit, DateFrom.ToString("dd MMM yyyy"), DateTo.ToString("dd MMM yyyy"));
                    this.AttSummaryColumnSetup_F2(ref  sheet, ref  cell, ref fill, ref border, ref rowIndex, ref colIndex, nMaxColumn, oMonthlyAttendanceReports[0], oDistinctLeaves);
                    this.AttSummaryBodySetup_F2(ref  sheet, ref  cell, ref fill, ref border, ref rowIndex, ref colIndex, nMaxColumn, oResults, oMonthlyAttendance_Leaves, oDistinctLeaves);

                    oMonthlyAttendanceReports.RemoveAll(x => x.BusinessUnitID == oResults[0].BusinessUnitID && x.LocationName == oResults[0].LocationName && x.DepartmentName == oResults[0].DepartmentName);
                }

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=AttSummaryList.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        public void AttSummaryReportHeaderXL_F2(ref ExcelWorksheet sheet, ref ExcelRange cell, ref int rowIndex, ref int colIndex, int nMaxColumn, BusinessUnit oBusinessUnit, string sDateFrom, string sDateTo)
        {
            rowIndex = rowIndex + 1;

            cell = sheet.Cells[rowIndex, 2];
            cell = sheet.Cells[rowIndex, 2]; cell.Value = oBusinessUnit.Name; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            rowIndex = rowIndex + 1;

            cell = sheet.Cells[rowIndex, 2];
            cell = sheet.Cells[rowIndex, 2]; cell.Value = oBusinessUnit.Address; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            rowIndex = rowIndex + 1;

            cell = sheet.Cells[rowIndex, 2];
            cell = sheet.Cells[rowIndex, 2]; cell.Value = "Att. Summary From " + sDateFrom + " to " + sDateTo; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            rowIndex = rowIndex + 1;
        }

        public void AttSummaryColumnSetup_F2(ref ExcelWorksheet sheet, ref ExcelRange cell, ref ExcelFill fill, ref OfficeOpenXml.Style.Border border, ref int rowIndex, ref int colIndex, int nMaxColumn, MonthlyAttendanceReport oMonthlyAttendanceReport, List<MonthlyAttendance_Leave> oDistinctLeaves)
        {
            colIndex = 2;

            cell = sheet.Cells[rowIndex, 2];
            cell.Value = "Unit-" + oMonthlyAttendanceReport.LocationName; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

            cell = sheet.Cells[rowIndex, nMaxColumn];
            cell.Value = "Department-" + oMonthlyAttendanceReport.DepartmentName; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

            rowIndex++;

            colIndex = 2;
            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "SL"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Employee ID"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Name"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Designation"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Education"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            if (oDistinctLeaves.Count > 0)
            {
                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex = colIndex + oDistinctLeaves.Count - 1]; cell.Merge = true; cell.Value = "Leave Information"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex = colIndex + 1;
            }

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex = colIndex + 6]; cell.Merge = true; cell.Value = "Attendance Information"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            colIndex = colIndex + 1;
            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Dis. Action"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Remarks"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            rowIndex++;

            colIndex = 7;

            foreach (MonthlyAttendance_Leave oitem in oDistinctLeaves)
            {
                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = oitem.LeaveName; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            }

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "E. Out Days"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "E. Out Mins."; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Late Days"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Late Mins"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Excess Mins"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Absent"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Present"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            rowIndex++;
        }

        public void AttSummaryBodySetup_F2(ref ExcelWorksheet sheet, ref ExcelRange cell, ref ExcelFill fill, ref OfficeOpenXml.Style.Border border, ref int rowIndex, ref int colIndex, int nMaxColumn, List<MonthlyAttendanceReport> oMonthlyAttendanceReports, List<MonthlyAttendance_Leave> oMonthlyAttendance_Leaves, List<MonthlyAttendance_Leave> oDistinctLeaves)
        {
            int nSL = 0;

            foreach (MonthlyAttendanceReport oItem in oMonthlyAttendanceReports)
            {
                nSL++;
                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Education; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                foreach (MonthlyAttendance_Leave oDistinctLeave in oDistinctLeaves)
                {
                    List<MonthlyAttendance_Leave> oTempMonthlyAtts = new List<MonthlyAttendance_Leave>();
                    oTempMonthlyAtts = oMonthlyAttendance_Leaves.Where(x => x.EmployeeID == oItem.EmployeeID && x.LeaveID == oDistinctLeave.LeaveID).ToList();
                    int nEnjoyed = 0;
                    nEnjoyed = oTempMonthlyAtts.Count > 0 ? oTempMonthlyAtts[0].Enjoyed : 0;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nEnjoyed; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EarlyOutDays; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EarlyOutMins; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.LateDays; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.LateMins; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.ExcessMins; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.AbsentDay; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.PresentDay; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DisAction; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
            }
        }

        #endregion Att. Summary F2

        #region Att. Summary F3
        public void PrintAttendanceSummary_F3_XL(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sWorkingStatus, string sGroupIDs, string sBlockIDs, double ts)
        {
            List<MonthlyAttendanceReport> oMonthlyAttendanceReports = new List<MonthlyAttendanceReport>();
            oMonthlyAttendanceReports = MonthlyAttendanceReport.Gets_F3(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, sWorkingStatus, sGroupIDs, sBlockIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<MonthlyAttendance_Leave> oMonthlyAttendance_Leaves = new List<MonthlyAttendance_Leave>();
            oMonthlyAttendance_Leaves = MonthlyAttendance_Leave.Gets(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, sWorkingStatus, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<MonthlyAttendanceReport> oTempMonthlyAttendanceReports = new List<MonthlyAttendanceReport>();
            oMonthlyAttendanceReports.ForEach(x => oTempMonthlyAttendanceReports.Add(x));

            List<MonthlyAttendance_Leave> oDistinctLeaves = new List<MonthlyAttendance_Leave>();
            oDistinctLeaves = oMonthlyAttendance_Leaves.GroupBy(x => x.LeaveName).Select(x => x.First()).OrderBy(x => x.LeaveID).ToList();

            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 1;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("BONUS List");
                sheet.Name = "BONUS LIST";

                sheet.Column(2).Width = 6; //SL
                sheet.Column(3).Width = 15; //EmployeeCode
                sheet.Column(4).Width = 30; //EmployeeName
                sheet.Column(5).Width = 20; //DepartmentName
                sheet.Column(6).Width = 20; //DesignationName

                sheet.Column(7).Width = 20; //Joining Date
                sheet.Column(8).Width = 20; //Confirmation Date
                sheet.Column(9).Width = 20; //Service Year
                sheet.Column(10).Width = 20; //Employee Type
                sheet.Column(11).Width = 20; //Employee Category
                sheet.Column(12).Width = 20; //Reporting Person

                sheet.Column(13).Width = 15; //Education

                int n = 0;
                for (n = 14; n < 14 + oDistinctLeaves.Count; n++)
                {
                    sheet.Column(n).Width = 6; //LEAVES
                }

                sheet.Column(n++).Width = 10; //Half/Short Leave
                sheet.Column(n++).Width = 10; //EOutdays
                sheet.Column(n++).Width = 10; //EOutMins
                sheet.Column(n++).Width = 10; //Latedays
                sheet.Column(n++).Width = 10; //LateMins
                sheet.Column(n++).Width = 10; //Absent
                sheet.Column(n++).Width = 10; //Present

                sheet.Column(n++).Width = 10; //CWD(total working day)
                sheet.Column(n++).Width = 10; //NOTMins
                sheet.Column(n++).Width = 10; //HOTMins
                sheet.Column(n++).Width = 10; //NightAll

                sheet.Column(n++).Width = 20; //Dis. Action
                sheet.Column(n++).Width = 20; //remark
                sheet.Column(n++).Width = 20; //Status

                nMaxColumn = n - 1;

                List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
                string BUIDs = string.Join(",", oMonthlyAttendanceReports.Select(p => p.BusinessUnitID).Distinct().ToList());
                if (BUIDs != "")
                { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

                cell = sheet.Cells[rowIndex, 2];
                cell = sheet.Cells[rowIndex, 2]; cell.Value = ""; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex = rowIndex + 1;

                oMonthlyAttendanceReports = oMonthlyAttendanceReports.OrderBy(x => x.BusinessUnitID).ThenBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ToList();
                //while (oMonthlyAttendanceReports.Count > 0)
                //{
                //    var oResults = oMonthlyAttendanceReports.Where(x => x.BusinessUnitID == oMonthlyAttendanceReports[0].BusinessUnitID && x.LocationName == oMonthlyAttendanceReports[0].LocationName && x.DepartmentName == oMonthlyAttendanceReports[0].DepartmentName).ToList();
                List<BusinessUnit> oTempBusinessUnits = new List<BusinessUnit>();
                BusinessUnit oBusinessUnit = new BusinessUnit();
                oTempBusinessUnits = oBusinessUnits.Where(x => x.BusinessUnitID == oMonthlyAttendanceReports[0].BusinessUnitID).ToList();
                oBusinessUnit = oTempBusinessUnits.Count > 0 ? oTempBusinessUnits[0] : new BusinessUnit();

                this.AttSummaryReportHeaderXL_F3(ref  sheet, ref  cell, ref  rowIndex, ref  colIndex, nMaxColumn, oBusinessUnit, DateFrom.ToString("dd MMM yyyy"), DateTo.ToString("dd MMM yyyy"));
                this.AttSummaryColumnSetup_F3(ref  sheet, ref  cell, ref fill, ref border, ref rowIndex, ref colIndex, nMaxColumn, oMonthlyAttendanceReports[0], oDistinctLeaves);
                this.AttSummaryBodySetup_F3(ref  sheet, ref  cell, ref fill, ref border, ref rowIndex, ref colIndex, nMaxColumn, oMonthlyAttendanceReports, oMonthlyAttendance_Leaves, oDistinctLeaves);

                //    oMonthlyAttendanceReports.RemoveAll(x => x.BusinessUnitID == oResults[0].BusinessUnitID && x.LocationName == oResults[0].LocationName && x.DepartmentName == oResults[0].DepartmentName);
                //}

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=AttSummaryList.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        public void AttSummaryReportHeaderXL_F3(ref ExcelWorksheet sheet, ref ExcelRange cell, ref int rowIndex, ref int colIndex, int nMaxColumn, BusinessUnit oBusinessUnit, string sDateFrom, string sDateTo)
        {
            rowIndex = rowIndex + 1;

            cell = sheet.Cells[rowIndex, 2];
            cell = sheet.Cells[rowIndex, 2]; cell.Value = oBusinessUnit.Name; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            rowIndex = rowIndex + 1;

            cell = sheet.Cells[rowIndex, 2];
            cell = sheet.Cells[rowIndex, 2]; cell.Value = oBusinessUnit.Address; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            rowIndex = rowIndex + 1;

            cell = sheet.Cells[rowIndex, 2];
            cell = sheet.Cells[rowIndex, 2]; cell.Value = "Att. Summary From " + sDateFrom + " to " + sDateTo; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            rowIndex = rowIndex + 1;
        }

        public void AttSummaryColumnSetup_F3(ref ExcelWorksheet sheet, ref ExcelRange cell, ref ExcelFill fill, ref OfficeOpenXml.Style.Border border, ref int rowIndex, ref int colIndex, int nMaxColumn, MonthlyAttendanceReport oMonthlyAttendanceReport, List<MonthlyAttendance_Leave> oDistinctLeaves)
        {
            //colIndex = 2;

            //cell = sheet.Cells[rowIndex, 2, rowIndex, 5]; cell.Merge = true;
            //cell.Value = "Unit-" + oMonthlyAttendanceReport.LocationName; cell.Style.Font.Bold = true;
            //cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

            //cell = sheet.Cells[rowIndex, nMaxColumn - 4, rowIndex, nMaxColumn]; cell.Merge = true;
            //cell.Value = "Department-" + oMonthlyAttendanceReport.DepartmentName; cell.Style.Font.Bold = true;
            //cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

            //rowIndex++;

            colIndex = 2;
            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "SL"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Employee ID"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Name"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Department"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Designation"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Joining Date"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Confirmation Date"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Service Year"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Employee Type"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Employee CateGory"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Reporting Person"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Education"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex = colIndex + oDistinctLeaves.Count - 1 + 1]; cell.Merge = true; cell.Value = "Leave Information"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            colIndex = colIndex + 1;
            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex = colIndex + 9]; cell.Merge = true; cell.Value = "Attendance Information"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            colIndex = colIndex + 1;
            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Dis. Action"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Remarks"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Employee Status"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            rowIndex++;

            colIndex = 14;

            foreach (MonthlyAttendance_Leave oitem in oDistinctLeaves)
            {
                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = oitem.LeaveName; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            }

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Half/Short L"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "E. Out Days"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "E. Out Mins."; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Late Days"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Late Mins"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Absent"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Present"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "TWD"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Normal OT Hr"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Holiday OT Hr"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Night All."; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            rowIndex++;
        }

        public void AttSummaryBodySetup_F3(ref ExcelWorksheet sheet, ref ExcelRange cell, ref ExcelFill fill, ref OfficeOpenXml.Style.Border border, ref int rowIndex, ref int colIndex, int nMaxColumn, List<MonthlyAttendanceReport> oMonthlyAttendanceReports, List<MonthlyAttendance_Leave> oMonthlyAttendance_Leaves, List<MonthlyAttendance_Leave> oDistinctLeaves)
        {
            int nSL = 0;

            foreach (MonthlyAttendanceReport oItem in oMonthlyAttendanceReports)
            {
                nSL++;
                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.ConfirmationDateInString; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                DateTime TempDateOfJoin = oItem.JoiningDate;
                TempDateOfJoin = TempDateOfJoin.AddDays(1);

                DateDifference dateDifference = new DateDifference(oItem.LastWorkingDate, TempDateOfJoin);

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = dateDifference.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeType; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCategoryInString; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.ReportingPerson; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Education; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (MonthlyAttendance_Leave oDistinctLeave in oDistinctLeaves)
                {
                    List<MonthlyAttendance_Leave> oTempMonthlyAtts = new List<MonthlyAttendance_Leave>();
                    oTempMonthlyAtts = oMonthlyAttendance_Leaves.Where(x => x.EmployeeID == oItem.EmployeeID && x.LeaveID == oDistinctLeave.LeaveID).ToList();
                    int nEnjoyed = 0;
                    nEnjoyed = oTempMonthlyAtts.Count > 0 ? oTempMonthlyAtts[0].Enjoyed : 0;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nEnjoyed.ToString(); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.LeaveHalfShortSt.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EarlyOutDays.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EarlyOutMins.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.LateDays.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.LateMins.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.AbsentDay.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.PresentDay.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CWD.ToString(); cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Global.MinInHourMin(oItem.NOTMin); cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Global.MinInHourMin(oItem.HOTMin); ; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NightAllDaySt.ToString(); cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DisActionSt.ToString(); cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.WorkingStatusInString.ToString(); cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
            }
        }

        #endregion Att. Summary F2

        #region Excel
        public void ExcelDailyAttendance_LocationWise(string sParam, double nts)
        {
            DateTime paramDate;

            string Date = sParam.Split('~')[0];

            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];
            string sChkType = sParam.Split('~')[7];
            string format = sParam.Split('~')[8];
            int CriteriaType = Convert.ToInt32(sParam.Split('~')[9]);
            string StartInTime = sParam.Split('~')[10];
            string EndInTime = sParam.Split('~')[11];
            string StartOutTime = sParam.Split('~')[12];
            string EndOutTime = sParam.Split('~')[13];
            int StartLate = Convert.ToInt32(sParam.Split('~')[14]);
            int EndLate = Convert.ToInt32(sParam.Split('~')[15]);
            int StartEarly = Convert.ToInt32(sParam.Split('~')[16]);
            int EndEarly = Convert.ToInt32(sParam.Split('~')[17]);
            string Remark = sParam.Split('~')[18];
            bool IsRemark = Convert.ToBoolean(sParam.Split('~')[19]);
            string GroupIDs = sParam.Split('~')[20];
            string BlockIDs = sParam.Split('~')[21];

            sFormat = format;

            DateTime dStartInTime;
            DateTime dEndInTime;
            DateTime dStartOutTime;
            DateTime dEndOutTime;

            DateTime dStartLate;
            DateTime dEndLate;
            DateTime dStartEarly;
            DateTime dEndEarly;

            _oAttendanceDaily = new AttendanceDaily();
            string sSQL = "";
            string sMsg = "";

            sSQL = "SELECT * FROM View_DailyAttendanceReport WHERE AttendanceID <>0 AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=1)";
            sSQL += " AND AttendanceDate ='" + Date + "'";
            if (sBusinessUnitIds != "")
            {
                sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSQL = sSQL + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIDs != "")
            {
                sSQL += " AND DepartmentID IN(" + sDepartmentIDs + ")";
            }
            if (sDesignationIDs != "")
            {
                sSQL += " AND DesignationID IN(" + sDesignationIDs + ")";
            }
            if (sEmployeeIDs != "")
            {
                sSQL += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (ShiftIds != "")
            {
                sSQL = sSQL + " AND ShiftID IN(" + ShiftIds + ")";
            }

            if (sChkType == "Present")
            {
                sSQL += " AND (CAST(InTime AS TIME(0))!='00:00:00' OR CAST(OutTime AS TIME(0))!='00:00:00' OR IsOSD=1)";
            }

            if (sChkType == "Absent")
            {
                sSQL += " AND (CAST(InTime AS TIME(0))='00:00:00'AND CAST(OutTime AS TIME(0))='00:00:00') AND LeaveHeadID=0 AND IsDayOff=0 AND IsHoliday=0 AND IsOSD!=1";
            }
            if (sChkType == "Dayoff")
            {
                sSQL += " AND IsDayOff=1";
            }
            if (sChkType == "Holiday")
            {
                sSQL += " AND IsHoliday=1";
            }
            if (sChkType == "Late")
            {
                sSQL += " AND LateArrivalMinute>0";
            }

            if (sChkType == "Early")
            {
                sSQL += " AND EarlyDepartureMinute>0";
            }
            if (sChkType == "OT")
            {
                sSQL += " AND OverTimeInMinute>0";
            }
            if (sChkType == "NoWork")
            {
                sSQL += " AND IsNoWork=1";
            }
            if (sChkType == "Leave")
            {
                sSQL += " AND LeaveHeadID>0";
            }
            if (sChkType == "NOT")//No Out Time
            {
                sSQL += " AND (CAST(InTime AS TIME(0))!='00:00:00'AND CAST(OutTime AS TIME(0))='00:00:00')";
            }
            if (IsRemark)
            {
                sSQL += " AND (Remark IS NOT NULL OR Remark <> '')";
            }
            if (!string.IsNullOrEmpty(Remark))
            {
                sSQL += " AND Remark LIKE '%" + Remark + "%'";
            }
            //if (!string.IsNullOrEmpty(GroupIDs))
            //{
            //    sSQL += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + GroupIDs + "))";
            //}
            if (!string.IsNullOrEmpty(BlockIDs))
            {
                sSQL += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + BlockIDs + "))";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSQL = sSQL + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }

            DateTime d;

            //dStartInTime = Convert.ToDateTime(StartInTime);
            if (DateTime.TryParse(StartInTime, out d)) { dStartInTime = d; } else { dStartInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartInTime.Second);

            dStartInTime = paramDate;

            //dEndInTime = Convert.ToDateTime(EndInTime);
            if (DateTime.TryParse(EndInTime, out d)) { dEndInTime = d; } else { dEndInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndInTime.Second);
            dEndInTime = paramDate;

            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            if (DateTime.TryParse(StartOutTime, out d)) { dStartOutTime = d; } else { dStartOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartOutTime.Second);
            dStartOutTime = paramDate;

            //dEndOutTime = Convert.ToDateTime(EndOutTime);
            if (DateTime.TryParse(EndOutTime, out d)) { dEndOutTime = d; } else { dEndOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndOutTime.Second);
            dEndOutTime = paramDate;


            if (CriteriaType == 1)
            {

                if (StartInTime != "00:00:00" && EndInTime != "00:00:00")
                {
                    sSQL += " AND LTRIM(RIGHT(CONVERT(VARCHAR(16), InTime, 121),5)) BETWEEN " + "'"+StartInTime+"'" + " AND " + "'" + EndInTime+"'";
                }

                if (StartOutTime != "00:00:00" && EndOutTime != "00:00:00")
                {
                    sSQL += " AND LTRIM(RIGHT(CONVERT(VARCHAR(16), OutTime, 121),5)) BETWEEN " + "'" + StartOutTime + "'" + " AND " + "'" + EndOutTime + "'";
                }
                if (StartLate > 0 || EndLate > 0)
                {
                    sSQL += " AND LateArrivalMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartLate + "')" + " AND " + "CONVERT(varchar(50),'" + EndLate + "')";
                }
                if (StartEarly > 0 || EndEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartEarly + "')" + " AND " + "CONVERT(varchar(50),'" + EndEarly + "')";
                }
            }
            if (CriteriaType == 2)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND LTRIM(RIGHT(CONVERT(VARCHAR(16), InTime, 121),5)) = " + "'" + StartInTime + "'";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND LTRIM(RIGHT(CONVERT(VARCHAR(16), OutTime, 121),5)) = " + "'" + StartOutTime + "'";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND LateArrivalMinute  = " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute  = " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }
            if (CriteriaType == 3)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND LTRIM(RIGHT(CONVERT(VARCHAR(16), InTime, 121),5)) < " + "'" + StartInTime + "'";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND LTRIM(RIGHT(CONVERT(VARCHAR(16), OutTime, 121),5)) < " + "'" + StartOutTime + "'";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND LateArrivalMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartLate - 1) + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartEarly - 1) + "')";
                }
            }
            if (CriteriaType == 4)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND LTRIM(RIGHT(CONVERT(VARCHAR(16), InTime, 121),5)) > " + "'" + StartInTime + "'";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND LTRIM(RIGHT(CONVERT(VARCHAR(16), OutTime, 121),5)) > " + "'" + StartOutTime + "'";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND LateArrivalMinute  > " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute  > " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }

            //}
            sSQL += " ORDER BY Code";
            sMsg = sChkType;



            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            oAttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<EmployeeGroup> oEmployeeGroups = new List<EmployeeGroup>();
            if (!string.IsNullOrEmpty(GroupIDs))
            {
                oEmployeeGroups = EmployeeGroup.Gets("SELECT * FROM View_EmployeeGroup AS HH WHERE HH.EmployeeTypeID IN (" + GroupIDs + ")", (int)Session[SessionInfo.currentUserID]);                
                oAttendanceDailys = oAttendanceDailys.Where(oAttDaily => oEmployeeGroups.Any(EO => oAttDaily.EmployeeID == EO.EmployeeID)).ToList();
            }
            _oAttendanceDaily.AttendanceDailys = oAttendanceDailys;
            

            string EmpIDs = string.Join(",", _oAttendanceDaily.AttendanceDailys.Where(x => x.AttendanceID > 0).Select(p => p.EmployeeID).Distinct().ToList());
            List<EmployeeSalaryStructure> oEmployeeSalaryStructures = new List<EmployeeSalaryStructure>();
            if (_oAttendanceDaily.AttendanceDailys.Count > 0)
            {
                oEmployeeSalaryStructures = EmployeeSalaryStructure.Gets("SELECT * FROM View_EmployeeSalaryStructure WHERE EmployeeID IN(" + EmpIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oAttendanceDaily.Company = oCompanys.First();
            _oAttendanceDaily.ErrorMessage = sMsg;


            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", _oAttendanceDaily.AttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            bool bView = false;
            List<AuthorizationRoleMapping> oARMs = new List<AuthorizationRoleMapping>();
            oARMs = AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.EmployeeSalaryStructure).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]);
            if (oARMs.Count > 0) { bView = true; }

            int nMaxColumn = 0;
            int nStartCol = 1, nEndCol = 13;
            int colIndex = 1;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;
            string makeFormat = "";


            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Location Wise Daily Attendance");
                sheet.Name = "LocationWiseDailyAttendace";

                int n = 1;
                sheet.Column(n++).Width = 6; //SL
                sheet.Column(n++).Width = 15; //CODE
                sheet.Column(n++).Width = 25; //NAME
                sheet.Column(n++).Width = 20; //DSIGNATION
                sheet.Column(n++).Width = 20; //DOJ
                if (bView) { sheet.Column(n++).Width = 20; } //GROSS
                sheet.Column(n++).Width = 20; //Shift
                sheet.Column(n++).Width = 10; //IN TIME
                sheet.Column(n++).Width = 10; //OUT TIME
                sheet.Column(n++).Width = 10; //Total Hour
                sheet.Column(n++).Width = 10; //LATE(Hr)
                sheet.Column(n++).Width = 10; //EARLY LEAVING(Hr)
                sheet.Column(n++).Width = 15; //DESCTIPTION
                sheet.Column(n++).Width = 10; //OT(Hr)
                sheet.Column(n++).Width = 15; //REMARK

                nMaxColumn = n;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header
                //sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                //cell = sheet.Cells[rowIndex, 2]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                //cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                cell = sheet.Cells[rowIndex, 3]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;

                //sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                //cell = sheet.Cells[rowIndex, 2]; cell.Value = "Date : " + Date; cell.Style.Font.Bold = true;
                //cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                cell = sheet.Cells[rowIndex, 3]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = "Date : " + Date; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;


                //sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                //cell = sheet.Cells[rowIndex, 2]; cell.Value = "Location : " + _oAttendanceDaily.LocationName; cell.Style.Font.Bold = true;
                //cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                //rowIndex = rowIndex + 2;
                #endregion

                #region Table Body
                int nSL = 0;

                var LocWise = _oAttendanceDaily.AttendanceDailys.GroupBy(x => x.LocationID).Select(grp => new
                {
                    LocationID = grp.Key,
                    LocationName = grp.First().LocationName,
                    Result = grp
                }).ToList().OrderBy(x => x.LocationName);

                foreach (var data in LocWise)
                {
                    nSL = 0;
                    colIndex = 1;

                    //cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn];
                    cell = sheet.Cells[rowIndex, 2];
                    cell.Style.Font.Bold = true; cell.Value = "Location : " + data.LocationName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;

                    #region Table Header 02
                    colIndex = 1;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "CODE"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "NAME"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Date Of Join"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    if (bView)
                    {
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "GROSS"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SHIFT"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "IN TIME"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OUT TIME"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total (Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "LATE(Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "EARLY LEAVING(Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "DESCTIPTION"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT(Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "REMARKS"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;
                    #endregion





                    foreach (var oItem in data.Result)
                    {
                        //foreach (AttendanceDaily oItem in _oAttendanceDaily.AttendanceDailys)
                        //{
                        nSL++;
                        colIndex = 1;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (bView)
                        {
                            List<EmployeeSalaryStructure> oEmpSSs = new List<EmployeeSalaryStructure>();
                            oEmpSSs = oEmployeeSalaryStructures.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();

                            double nGross = 0;
                            if (oEmpSSs.Count > 0) { nGross = oEmpSSs[0].GrossAmount; }

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nGross; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0.00";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.HRM_ShiftName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (sFormat == "twelve")
                        {
                            makeFormat = oItem.InTimeInStringAMPM;
                        }
                        else makeFormat = oItem.InTimeInString;


                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = makeFormat; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (sFormat == "twelve")
                        {
                            makeFormat = oItem.OutTimeInStringAMPM;
                        }
                        else makeFormat = oItem.OutTimeInString;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = makeFormat; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.TotalWorkingHourSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.LateArrivalHourSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EarlyDepartureHrSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.AttStatusInString; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTHrSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Remark; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex++;

                        if (oItem.OverTimeInMinute > 0)
                        {
                            OT = OT + oItem.OverTimeInMinute;
                        }
                        if (oItem.EarlyDepartureMinute > 0) EarlyLeaving++;
                        if (oItem.LateArrivalMinute > 0) Late++;
                        if (oItem.IsLeave == true) Leave++;
                        if (oItem.IsNoWork == true) NoWork++;
                        if (oItem.IsDayOff == true) DayOff++;
                        if (oItem.IsHoliday == true) Holiday++;
                        if (oItem.OutTimeInString == "-") NoOutTime++;
                        if ((oItem.InTimeInString != "-" || oItem.OutTimeInString != "-" || oItem.IsOSD == true) && oItem.IsLeave == false && oItem.IsHoliday == false) Present++;
                        if (oItem.InTimeInString == "-" && oItem.OutTimeInString == "-" && oItem.IsLeave == false && oItem.IsHoliday == false && oItem.IsDayOff == false && oItem.IsOSD == false) Absent++;

                    }

                    rowIndex++;
                    rowIndex++;
                    rowIndex++;

                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "Present "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = Present; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;

                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "Absent "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = Absent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "Dayoff "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = DayOff; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "Holiday "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = Holiday; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;

                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "Late "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = Late; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;

                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "EarlyLeaving "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = EarlyLeaving; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "OT "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    int nHour = (OT / 60);
                    int nMin = (OT % 60);
                    string sOTHourAndMin = "";
                    if (nHour > 0)
                    {
                        sOTHourAndMin = nHour.ToString() + " H,";
                    }
                    if (nMin > 0)
                    {
                        sOTHourAndMin = sOTHourAndMin + nMin.ToString() + " M,";
                    }
                    if (sOTHourAndMin.Length > 0)
                    {
                        sOTHourAndMin = sOTHourAndMin.Remove(sOTHourAndMin.Length - 1, 1);
                    }
                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = sOTHourAndMin; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "No Work "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = NoWork; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "Leave "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = Leave; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "No Out Time "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = NoOutTime; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;

                }
                #endregion


                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=LocationWiseDailyAttendance.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        public void ExcelDailyAttendance_DepartmentWise(string sParam, double nts)
        {
            //string Date = sParam.Split('~')[0];

            DateTime paramDate;
            string Date = sParam.Split('~')[0];
            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];
            string sChkType = sParam.Split('~')[7];
            string format = sParam.Split('~')[8];
            int CriteriaType = Convert.ToInt32(sParam.Split('~')[9]);
            string StartInTime = sParam.Split('~')[10];
            string EndInTime = sParam.Split('~')[11];
            string StartOutTime = sParam.Split('~')[12];
            string EndOutTime = sParam.Split('~')[13];
            int StartLate = Convert.ToInt32(sParam.Split('~')[14]);
            int EndLate = Convert.ToInt32(sParam.Split('~')[15]);
            int StartEarly = Convert.ToInt32(sParam.Split('~')[16]);
            int EndEarly = Convert.ToInt32(sParam.Split('~')[17]);
            string Remark = sParam.Split('~')[18];
            bool IsRemark = Convert.ToBoolean(sParam.Split('~')[19]);
            string GroupIDs = sParam.Split('~')[20];
            string BlockIDs = sParam.Split('~')[21];


            sFormat = format;

            DateTime dStartInTime;
            DateTime dEndInTime;
            DateTime dStartOutTime;
            DateTime dEndOutTime;

            DateTime dStartLate;
            DateTime dEndLate;
            DateTime dStartEarly;
            DateTime dEndEarly;

            _oAttendanceDaily = new AttendanceDaily();
            string sSQL = "";
            string sMsg = "";

            sSQL = "SELECT * FROM View_AttendanceDaily WHERE AttendanceID <>0 AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=1)";
            //if (sAttID != "") { sSQL += " WHERE AttendanceID IN(" + sAttID + ")"; }
            //else
            //{
            sSQL += " AND AttendanceDate ='" + Date + "'";
            if (sBusinessUnitIds != "")
            {
                sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSQL = sSQL + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIDs != "")
            {
                sSQL += " AND DepartmentID IN(" + sDepartmentIDs + ")";
            }
            if (sDesignationIDs != "")
            {
                sSQL += " AND DesignationID IN(" + sDesignationIDs + ")";
            }
            if (sEmployeeIDs != "")
            {
                sSQL += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (ShiftIds != "")
            {
                sSQL = sSQL + " AND ShiftID IN(" + ShiftIds + ")";
            }

            if (sChkType == "Present")
            {
                sSQL += " AND (CAST(InTime AS TIME(0))!='00:00:00' OR CAST(OutTime AS TIME(0))!='00:00:00' OR IsOSD=1)";
            }

            if (sChkType == "Absent")
            {
                sSQL += " AND (CAST(InTime AS TIME(0))='00:00:00'AND CAST(OutTime AS TIME(0))='00:00:00') AND LeaveHeadID=0 AND IsDayOff=0 AND IsHoliday=0 AND IsOSD!=1";
            }
            if (sChkType == "Dayoff")
            {
                sSQL += " AND IsDayOff=1";
            }
            if (sChkType == "Holiday")
            {
                sSQL += " AND IsHoliday=1";
            }
            if (sChkType == "Late")
            {
                sSQL += " AND LateArrivalMinute>0";
            }

            if (sChkType == "Early")
            {
                sSQL += " AND EarlyDepartureMinute>0";
            }
            if (sChkType == "OT")
            {
                sSQL += " AND OverTimeInMinute>0";
            }
            if (sChkType == "NoWork")
            {
                sSQL += " AND IsNoWork=1";
            }
            if (sChkType == "Leave")
            {
                sSQL += " AND LeaveHeadID>0";
            }
            if (sChkType == "NOT")//No Out Time
            {
                sSQL += " AND (CAST(InTime AS TIME(0))!='00:00:00'AND CAST(OutTime AS TIME(0))='00:00:00')";
            }
            if (IsRemark)
            {
                sSQL += " AND (Remark IS NOT NULL OR Remark <> '')";
            }
            if (!string.IsNullOrEmpty(Remark))
            {
                sSQL += " AND Remark LIKE '%" + Remark + "%'";
            }
            if (!string.IsNullOrEmpty(GroupIDs))
            {
                sSQL += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + GroupIDs + "))";
            }
            if (!string.IsNullOrEmpty(BlockIDs))
            {
                sSQL += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + BlockIDs + "))";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSQL = sSQL + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }

            //dStartInTime = Convert.ToDateTime(StartInTime);
            //dEndInTime = Convert.ToDateTime(EndInTime);
            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            //dEndOutTime = Convert.ToDateTime(EndOutTime);

            DateTime d;

            //dStartInTime = Convert.ToDateTime(StartInTime);
            if (DateTime.TryParse(StartInTime, out d)) { dStartInTime = d; } else { dStartInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartInTime.Second);

            dStartInTime = paramDate;

            //dEndInTime = Convert.ToDateTime(EndInTime);
            if (DateTime.TryParse(EndInTime, out d)) { dEndInTime = d; } else { dEndInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndInTime.Second);
            dEndInTime = paramDate;

            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            if (DateTime.TryParse(StartOutTime, out d)) { dStartOutTime = d; } else { dStartOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartOutTime.Second);
            dStartOutTime = paramDate;

            //dEndOutTime = Convert.ToDateTime(EndOutTime);
            if (DateTime.TryParse(EndOutTime, out d)) { dEndOutTime = d; } else { dEndOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndOutTime.Second);
            dEndOutTime = paramDate;

            if (CriteriaType == 1)
            {

                if (StartInTime != "00:00:00" && EndInTime != "00:00:00")
                {
                    sSQL += " AND CAST(InTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00" && EndOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(OutTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0 || EndLate > 0)
                {
                    sSQL += " AND  LateArrivalMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartLate + "')" + " AND " + "CONVERT(varchar(50),'" + EndLate + "')";
                }
                if (StartEarly > 0 || EndEarly > 0)
                {
                    sSQL += " AND  EarlyDepartureMinute   BETWEEN " + "CONVERT(varchar(50),'" + StartEarly + "')" + " AND " + "CONVERT(varchar(50),'" + EndEarly + "')";
                }
            }
            if (CriteriaType == 2)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(InTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(OutTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND  LateArrivalMinute   = " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND  EarlyDepartureMinute   = " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }
            if (CriteriaType == 3)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(InTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(OutTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND LateArrivalMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartLate - 1) + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartEarly - 1) + "')";
                }
            }
            if (CriteriaType == 4)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(InTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(OutTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND LateArrivalMinute  > " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND EarlyDepartureMinute  > " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }

            //}
            sSQL += " ORDER BY Code";
            sMsg = sChkType;

            _oAttendanceDaily.AttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            string EmpIDs = string.Join(",", _oAttendanceDaily.AttendanceDailys.Where(x => x.AttendanceID > 0).Select(p => p.EmployeeID).Distinct().ToList());
            List<EmployeeSalaryStructure> oEmployeeSalaryStructures = new List<EmployeeSalaryStructure>();
            if (_oAttendanceDaily.AttendanceDailys.Count > 0)
            {
                oEmployeeSalaryStructures = EmployeeSalaryStructure.Gets("SELECT * FROM View_EmployeeSalaryStructure WHERE EmployeeID IN(" + EmpIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oAttendanceDaily.Company = oCompanys.First();
            _oAttendanceDaily.ErrorMessage = sMsg;


            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", _oAttendanceDaily.AttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            bool bView = false;
            List<AuthorizationRoleMapping> oARMs = new List<AuthorizationRoleMapping>();
            oARMs = AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.EmployeeSalaryStructure).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]);
            if (oARMs.Count > 0) { bView = true; }

            int nMaxColumn = 0;
            int nStartCol = 1, nEndCol = 13;
            int colIndex = 1;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;


            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Location Wise Daily Attendance");
                sheet.Name = "LocationWiseDailyAttendace";

                int n = 1;
                sheet.Column(n++).Width = 6; //SL
                sheet.Column(n++).Width = 15; //CODE
                sheet.Column(n++).Width = 25; //NAME
                sheet.Column(n++).Width = 20; //DSIGNATION
                if (bView) { sheet.Column(n++).Width = 20; } //GROSS
                sheet.Column(n++).Width = 20; //SHIFT
                sheet.Column(n++).Width = 10; //IN TIME
                sheet.Column(n++).Width = 10; //OUT TIME
                sheet.Column(n++).Width = 10; //Total Hour
                sheet.Column(n++).Width = 10; //LATE(Hr)
                sheet.Column(n++).Width = 10; //EARLY LEAVING(Hr)
                sheet.Column(n++).Width = 15; //DESCTIPTION
                sheet.Column(n++).Width = 10; //OT(Hr)
                sheet.Column(n++).Width = 15; //REMARK

                nMaxColumn = n;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header
                //sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                //cell = sheet.Cells[rowIndex, 2]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                //cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //fill = cell.Style.Fill;

                cell = sheet.Cells[rowIndex, 3]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                rowIndex = rowIndex + 1;

                //sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                //cell = sheet.Cells[rowIndex, 2]; cell.Value = "Date : " + Date; cell.Style.Font.Bold = true;
                //cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //fill = cell.Style.Fill;

                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Date : " + Date; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;

                #endregion

                #region Table Body
                int nSL = 0;

                var deptWise = _oAttendanceDaily.AttendanceDailys.GroupBy(x => x.DepartmentID).Select(grp => new
                {
                    DepartmentID = grp.Key,
                    DepartmentName = grp.First().DepartmentName,
                    Result = grp
                }).ToList().OrderBy(x => x.DepartmentName);

                foreach (var data in deptWise)
                {
                    nSL = 0;
                    colIndex = 1;
                    string makeFormat = "";

                    //cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn];
                    cell = sheet.Cells[rowIndex, 2];
                    cell.Style.Font.Bold = true; cell.Value = "Department : " + data.DepartmentName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;
                    #region Table Header 02
                    colIndex = 1;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "CODE"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "NAME"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    if (bView)
                    {
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "GROSS"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SHIFT"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "IN TIME"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OUT TIME"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total (Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "LATE(Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "EARLY LEAVING(Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "DESCTIPTION"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT(Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "REMARKS"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;
                    #endregion

                    foreach (var oItem in data.Result)
                    {
                        nSL++;
                        colIndex = 1;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (bView)
                        {
                            List<EmployeeSalaryStructure> oEmpSSs = new List<EmployeeSalaryStructure>();
                            oEmpSSs = oEmployeeSalaryStructures.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();

                            double nGross = 0;
                            if (oEmpSSs.Count > 0) { nGross = oEmpSSs[0].GrossAmount; }

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nGross; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0.00";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.HRM_ShiftName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (sFormat == "twelve")
                        {
                            makeFormat = oItem.InTimeInStringAMPM;
                        }
                        else makeFormat = oItem.InTimeInString;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = makeFormat; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (sFormat == "twelve")
                        {
                            makeFormat = oItem.OutTimeInStringAMPM;
                        }
                        else makeFormat = oItem.OutTimeInString;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = makeFormat; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.TotalWorkingHourSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.LateArrivalHourSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EarlyDepartureHrSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.AttStatusInString; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTHrSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Remark; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex++;
                        if (oItem.OverTimeInMinute > 0) OT++;
                        if (oItem.EarlyDepartureMinute > 0) EarlyLeaving++;
                        if (oItem.LateArrivalMinute > 0) Late++;
                        if (oItem.IsLeave == true) Leave++;
                        if (oItem.IsNoWork == true) NoWork++;
                        if (oItem.OutTimeInString == "-") NoOutTime++;
                        if (oItem.IsDayOff == true) DayOff++;
                        if (oItem.IsHoliday == true) Holiday++;
                        if ((oItem.InTimeInString != "-" || oItem.OutTimeInString != "-" || oItem.IsOSD == true) && oItem.IsLeave == false && oItem.IsHoliday == false) Present++;
                        if (oItem.InTimeInString == "-" && oItem.OutTimeInString == "-" && oItem.IsLeave == false && oItem.IsHoliday == false && oItem.IsDayOff == false && oItem.IsOSD == false) Absent++;

                    }
                    rowIndex++;
                }

                rowIndex++;
                rowIndex++;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Present "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = Present; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Absent "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = Absent; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Dayoff "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = DayOff; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Holiday "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = Holiday; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Late "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = Late; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "EarlyLeaving "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = EarlyLeaving; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "OT "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = OT; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "No Work "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = NoWork; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Leave "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = Leave; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "No Out Time "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = NoOutTime; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                #endregion


                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=DepartmentWiseDailyAttendance.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        public System.Drawing.Image GetImage(byte[] Image)
        {
            if (Image != null)
            {
                string fileDirectory = Server.MapPath("~/Content/Image.jpg");
                if (System.IO.File.Exists(fileDirectory))
                {
                    System.IO.File.Delete(fileDirectory);
                }

                MemoryStream m = new MemoryStream(Image);
                System.Drawing.Image img = System.Drawing.Image.FromStream(m);
                img.Save(fileDirectory, ImageFormat.Jpeg);
                return img;

            }
            else
            {
                return null;
            }
        }
        #endregion

        #region ExtraSearching_XL
        public void ExtraSearching_XL(string sParam, double ts)
        {

            DateTime StartDate = Convert.ToDateTime(sParam.Split('~')[0]);
            DateTime EndDate = Convert.ToDateTime(sParam.Split('~')[1]);

            int CriteriaType = Convert.ToInt32(sParam.Split('~')[8]);
            DateTime StartInTime = Convert.ToDateTime(sParam.Split('~')[9]);
            DateTime EndInTime = Convert.ToDateTime(sParam.Split('~')[10]);
            DateTime StartOutTime = Convert.ToDateTime(sParam.Split('~')[11]);
            DateTime EndOutTime = Convert.ToDateTime(sParam.Split('~')[12]);
            int StartLate = Convert.ToInt32(sParam.Split('~')[13]);
            int EndLate = Convert.ToInt32(sParam.Split('~')[14]);
            int StartEarly = Convert.ToInt32(sParam.Split('~')[15]);
            int EndEarly = Convert.ToInt32(sParam.Split('~')[16]);
            int StartDaysCount = Convert.ToInt32(sParam.Split('~')[17]);
            int EndDaysCount = Convert.ToInt32(sParam.Split('~')[18]);

            List<AttendanceWithExtraSearching> oAttendanceWithExtraSearchings = new List<AttendanceWithExtraSearching>();
            oAttendanceWithExtraSearchings = AttendanceWithExtraSearching.Gets(sParam, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("AttendanceRecord");
                sheet.Name = "AttendanceRecord";

                sheet.Column(2).Width = 8;//SL
                sheet.Column(3).Width = 20;//CODE
                sheet.Column(4).Width = 20;//NAME
                sheet.Column(5).Width = 20;//BU
                sheet.Column(6).Width = 20;//DEPARTMENT
                sheet.Column(7).Width = 20;//DESIGNATION
                sheet.Column(8).Width = 20;//JOINING
                sheet.Column(9).Width = 20;//Gross
                sheet.Column(10).Width = 20;//Date
                sheet.Column(11).Width = 20;//Total Days


                nMaxColumn = 11;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, 2, rowIndex, 2]; cell.Merge = true; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 2, rowIndex, 2]; cell.Merge = true; cell.Value = "Attendance Record"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = sheet.Cells[rowIndex, 2, rowIndex, 2]; cell.Merge = true; cell.Value = "Date Range : " + StartDate.ToString("dd MMM yyyy") + " To " + EndDate.ToString("dd MMM yyyy"); cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;


                string criteria = "Searching Criteria : ";

                if (CriteriaType == 1)
                {
                    if (StartInTime.ToString("HH:mm") != "00:00:00" && StartInTime.ToString("HH:mm") != "00:00:00")
                    { criteria += "InTime between " + StartInTime.ToString("HH:mm") + " and " + EndInTime.ToString("HH:mm"); }
                    if (StartOutTime.ToString("HH:mm") != "00:00:00" && StartOutTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " OutTime between " + StartOutTime.ToString("HH:mm") + " and " + EndOutTime.ToString("HH:mm"); }
                    if (StartLate > 0 && EndLate > 0)
                    { criteria += " Late between " + StartLate.ToString() + " and " + EndLate.ToString(); }
                    if (StartEarly > 0 && EndEarly > 0)
                    { criteria += " Early between " + StartEarly.ToString() + " and " + EndEarly.ToString(); }
                    if (StartDaysCount > 0 && EndDaysCount > 0)
                    { criteria += " Total Day between " + StartDaysCount.ToString() + " and " + EndDaysCount.ToString(); }
                }
                if (CriteriaType == 2)
                {
                    if (StartInTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " InTime = " + StartInTime.ToString("HH:mm"); }
                    if (StartOutTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " OutTime = " + StartOutTime.ToString("HH:mm"); }
                    if (StartLate > 0)
                    { criteria += " Late = " + StartLate.ToString() + " min. "; }
                    if (StartEarly > 0)
                    { criteria += " Early = " + StartEarly.ToString() + " min. "; }
                    if (StartDaysCount > 0)
                    { criteria += " Total Day = " + StartDaysCount.ToString() + " min. "; }
                }

                if (CriteriaType == 3)
                {
                    if (StartInTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " InTime : Before " + StartInTime.ToString("HH:mm"); }
                    if (StartOutTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " OutTime :  Before " + StartOutTime.ToString("HH:mm"); }
                    if (StartLate > 0)
                    { criteria += " Late : Less" + StartLate.ToString() + " min. "; }
                    if (StartEarly > 0)
                    { criteria += " Early : Less" + StartEarly.ToString() + " min. "; }
                    if (StartDaysCount > 0)
                    { criteria += " Total Day : Less " + StartDaysCount.ToString() + " min. "; }
                }

                if (CriteriaType == 4)
                {
                    if (StartInTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " InTime : After " + StartInTime.ToString("HH:mm"); }
                    if (StartOutTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " OutTime :  After " + StartOutTime.ToString("HH:mm"); }
                    if (StartLate > 0)
                    { criteria += " Late : Greater" + StartLate.ToString() + " min. "; }
                    if (StartEarly > 0)
                    { criteria += " Early : Greater" + StartEarly.ToString() + " min. "; }
                    if (StartDaysCount > 0)
                    { criteria += " Total Day : Greater" + StartDaysCount.ToString() + " min. "; }
                }


                colIndex = 2;
                cell = sheet.Cells[rowIndex, 2, rowIndex, 2]; cell.Merge = true; cell.Value = criteria; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 12; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;

                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "CODE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "NAME"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "BUSINESS UNIT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "DEPARTMENT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "JOINING"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "PRESENT GROSS"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "DATE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "TOTAL DAYS"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex+=2;

                int nSL = 0;
                foreach (AttendanceWithExtraSearching oItem in oAttendanceWithExtraSearchings.OrderBy(x=>x.EmployeeCode).ToList())
                {
                    nSL++;
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = nSL.ToString(); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.BusinessUnitName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = Global.MillionFormat(oItem.PresentGross); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.AttDates; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.TotalDays; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;
                }

                //signature
                //rowIndex = rowIndex + 4;
                //int nColSpan1_From = 0;
                //int nColSpan2_From = 0;
                //int nColSpan3_From = 0;
                //int nColSpan1_To = 0;
                //int nColSpan2_To = 0;
                //int nColSpan3_To = 0;

                //if (nMaxColumn % 3 == 0)
                //{
                //    nColSpan1_From = 1;
                //    nColSpan1_To = nColSpan1_From + nMaxColumn / 3;

                //    nColSpan2_From = nColSpan1_To + 1;
                //    nColSpan2_To = nColSpan2_From + nMaxColumn / 3;

                //    nColSpan3_From = nColSpan2_To + 1;
                //    nColSpan3_To = nMaxColumn;
                //}
                //else
                //{
                //    nColSpan1_From = 1;
                //    nColSpan1_To = nColSpan1_From + (nMaxColumn - nMaxColumn % 3) / 3;

                //    nColSpan2_From = nColSpan1_To + 1;
                //    nColSpan2_To = nColSpan2_From + (nMaxColumn - nMaxColumn % 3) / 3;

                //    nColSpan3_From = nColSpan2_To + 1;
                //    nColSpan3_To = nMaxColumn;
                //}

                //cell = sheet.Cells[rowIndex, nColSpan1_From, rowIndex + 3, nColSpan1_To]; cell.Merge = true; cell.Value = "____________________\nPrepared By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                //cell = sheet.Cells[rowIndex, nColSpan2_From, rowIndex + 3, nColSpan2_To]; cell.Merge = true; cell.Value = "______________________\nChecked By APM/PM"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                //cell = sheet.Cells[rowIndex, nColSpan3_From, rowIndex + 3, nMaxColumn]; cell.Merge = true; cell.Value = "______________________\nApproved By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;


                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=AttendanceRecord.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }
        #endregion ExtraSearching_XL

        #region Att. Ratio XL
        public void ExcelAttRatioSummary(string sParam, double nts)
        {


            DateTime paramDate;
            string Date = sParam.Split('~')[0];
            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];

            List<AttendanceRatioReport> oAttendanceRatioReports = new List<AttendanceRatioReport>();
            oAttendanceRatioReports = AttendanceRatioReport.Gets(paramDate, sBusinessUnitIds, sLocationID, sDepartmentIDs, sDesignationIDs, sEmployeeIDs, ShiftIds, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<AttendanceRatioReport> oAttRRShifts = new List<AttendanceRatioReport>();
            oAttRRShifts = oAttendanceRatioReports.GroupBy(x => x.ShiftID).Select(g => g.First()).ToList();

            List<AttendanceRatioReport> oAttDepts = new List<AttendanceRatioReport>();
            oAttDepts = oAttendanceRatioReports.GroupBy(x => x.DepartmentID).Select(g => g.First()).ToList();

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);


            int nMaxColumn = 0;
            int colIndex = 1;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;


            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Attendance Summary");
                sheet.Name = "Attendance Summary";

                int n = 1;
                sheet.Column(n++).Width = 6; //SL
                sheet.Column(n++).Width = 30; //NAME

                foreach (AttendanceRatioReport oItem in oAttRRShifts)
                {
                    sheet.Column(n++).Width = 15; //EMp Total
                    sheet.Column(n++).Width = 15; //Total Present
                    sheet.Column(n++).Width = 15; //OT Present
                    sheet.Column(n++).Width = 15; //Absent Leave
                }
                sheet.Column(n++).Width = 15; //EMp Total
                sheet.Column(n++).Width = 15; //Total Present
                sheet.Column(n++).Width = 15; //OT Present
                sheet.Column(n++).Width = 15; //Absent Leave

                sheet.Column(n++).Width = 15; //Absent Ratio

                sheet.Column(n++).Width = 15; //Permanent
                sheet.Column(n++).Width = 15; //Probationary
                sheet.Column(n++).Width = 15; //Contractual

                sheet.Column(n++).Width = 15; //New join
                sheet.Column(n++).Width = 15; //Lefty


                nMaxColumn = n;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header


                cell = sheet.Cells[rowIndex, 3]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oCompanys.Count > 0 ? oCompanys[0].Name : ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                rowIndex = rowIndex + 1;



                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Date : " + Date; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;

                #endregion

                #region Table Body
                int nSL = 0;


                colIndex = 1;
                #region Table Header 02
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SHIFT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                colIndex = 1;
                rowIndex = rowIndex + 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (AttendanceRatioReport oItem in oAttRRShifts)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.ShiftName; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                }

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total Summary"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                colIndex = 1;
                rowIndex = rowIndex + 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Department"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (AttendanceRatioReport oItem in oAttRRShifts)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Emp. Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total Present"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Present"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Absent+Leave"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Emp. Total"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total Present"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Present"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Absent+Leave"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Department Wise Absent Ratio"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Permanent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Probationary"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Contractual"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "New Joining"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Left"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
                #endregion

                foreach (var data in oAttDepts)
                {
                    nSL++;
                    colIndex = 1;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.DepartmentName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    foreach (AttendanceRatioReport oItem in oAttRRShifts)
                    {
                        List<AttendanceRatioReport> oItems = new List<AttendanceRatioReport>();
                        oItems = oAttendanceRatioReports.Where(x => (x.DepartmentID == data.DepartmentID && x.ShiftID == oItem.ShiftID)).ToList();
                        if (oItems.Count > 0)
                        {
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItems[0].EmpTotal; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItems[0].TotalPresent; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItems[0].OTPresent; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItems[0].AbsentLeave; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        else
                        {
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    int EmpTotal = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.EmpTotal);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = EmpTotal; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    int TotalPresent = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.TotalPresent);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalPresent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    int OTPresent = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.OTPresent);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = OTPresent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    int AbsentLeave = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.AbsentLeave);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = AbsentLeave; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    double Ratio = Convert.ToDouble(AbsentLeave) * 100 / Convert.ToDouble(EmpTotal);

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Global.MillionFormat(Ratio); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                    int Permanent = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.Permanent);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Permanent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    int Probationary = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.Probationary);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Probationary; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    int Contractual = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.Contractual);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Contractual; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                    int New = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.New);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = New; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    int Lefty = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.Lefty);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Lefty; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    rowIndex++;
                }

                colIndex = 1;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (AttendanceRatioReport oItem in oAttRRShifts)
                {
                    List<AttendanceRatioReport> oItems = new List<AttendanceRatioReport>();
                    oItems = oAttendanceRatioReports.Where(x => x.ShiftID == oItem.ShiftID).ToList();
                    if (oItems.Count > 0)
                    {
                        int EmpTotal = oItems.Sum(x => x.EmpTotal);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = EmpTotal; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        int TotalPresent = oItems.Sum(x => x.TotalPresent);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalPresent; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        int OTPresent = oItems.Sum(x => x.OTPresent);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = OTPresent; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        int AbsentLeave = oItems.Sum(x => x.AbsentLeave);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = AbsentLeave; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }
                    else
                    {
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }

                int GTEmpTotal = oAttendanceRatioReports.Sum(x => x.EmpTotal);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTEmpTotal; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                int GTTotalPresent = oAttendanceRatioReports.Sum(x => x.TotalPresent);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTTotalPresent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                int GTOTPresent = oAttendanceRatioReports.Sum(x => x.OTPresent);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTOTPresent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                int GTAbsentLeave = oAttendanceRatioReports.Sum(x => x.AbsentLeave);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTAbsentLeave; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                double GTRatio = Convert.ToDouble(GTAbsentLeave) * 100 / Convert.ToDouble(GTEmpTotal);

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Global.MillionFormat(GTRatio); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                int GTPermanent = oAttendanceRatioReports.Sum(x => x.Permanent);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTPermanent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                int GTProbationary = oAttendanceRatioReports.Sum(x => x.Probationary);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTProbationary; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                int GTContractual = oAttendanceRatioReports.Sum(x => x.Contractual);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTContractual; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                int GTNew = oAttendanceRatioReports.Sum(x => x.New);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTNew; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                int GTLefty = oAttendanceRatioReports.Sum(x => x.Lefty);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTLefty; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                colIndex = 1;
                rowIndex++;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Shift Wise Absent Ratio"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (AttendanceRatioReport oItem in oAttRRShifts)
                {
                    List<AttendanceRatioReport> oItems = new List<AttendanceRatioReport>();
                    oItems = oAttendanceRatioReports.Where(x => x.ShiftID == oItem.ShiftID).ToList();
                    if (oItems.Count > 0)
                    {
                        int EmpTotal = oItems.Sum(x => x.EmpTotal);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        int AbsentLeave = oItems.Sum(x => x.AbsentLeave);

                        double Ratio = Convert.ToDouble(AbsentLeave) * 100 / Convert.ToDouble(EmpTotal);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Global.MillionFormat(Ratio); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }
                    else
                    {
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #endregion


                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=DepartmentWiseShiftWiseAttSummary.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }



        public void ExcelAttRatioSummaryF2(string sParam, double nts)
        {


            DateTime paramDate;
            string Date = sParam.Split('~')[0];
            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];

            List<AttendanceMonitoring> oAttendanceMonitorings = new List<AttendanceMonitoring>();
            oAttendanceMonitorings = AttendanceMonitoring.Gets(sBusinessUnitIds, sDepartmentIDs, sDepartmentIDs, sDesignationIDs, ShiftIds, "", paramDate, "", ((User)(Session[SessionInfo.CurrentUser])).UserID);



            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);


            var AttendanceMonitorings = oAttendanceMonitorings.GroupBy(x => new { x.DepartmentID }, (key, grp) => new
            {
                LocationName = grp.First().LocationName,
                DepartmentID = key.DepartmentID,
                DesignationID = grp.First().DesignationID,
                DepartmentName = grp.First().DepartmentName,
                ExistsPerson = grp.Sum(x => x.Exists),
                TotalPresent = grp.Sum(x => x.Present),
                TotalAbsent = grp.Sum(x => x.Absent),
                AttList = grp
            }).OrderBy(x => x.DepartmentName).ToList();


            var AttendanceMonitoringsForDeptWise = oAttendanceMonitorings.GroupBy(x => new { x.DepartmentID }, (key, grp) => new AttendanceMonitoring
            {
                LocationName = grp.First().LocationName,
                DepartmentID = key.DepartmentID,
                DepartmentName = grp.First().DepartmentName,
                Exists = grp.Sum(x => x.Exists),
                Present = grp.Sum(x => x.Present),
                Absent = grp.Sum(x => x.Absent),
                Leave = grp.Sum(x => x.Leave),
                HoliDay = grp.Sum(x => x.HoliDay) + grp.Sum(x => x.DayOff),
                Percent = (grp.Sum(x => Convert.ToDouble(x.Absent)) * 100) / grp.Sum(x => Convert.ToDouble(x.Exists))

            }).OrderBy(x => x.DepartmentName).ToList();



            var AttendanceMonitoringsForDesignationWise = oAttendanceMonitorings.GroupBy(x => new { x.DesignationID }, (key, grp) => new AttendanceMonitoring
            {
                LocationName = grp.First().LocationName,
                DesignationID = key.DesignationID,
                DesignationName = grp.First().DesignationName,
                Exists = grp.Sum(x => x.Exists),
                Present = grp.Sum(x => x.Present),
                Absent = grp.Sum(x => x.Absent),
                Leave = grp.Sum(x => x.Leave),
                HoliDay = grp.Sum(x => x.HoliDay) + grp.Sum(x => x.DayOff),
                Percent = (grp.Sum(x => Convert.ToDouble(x.Absent)) * 100) / grp.Sum(x => Convert.ToDouble(x.Exists))
            }).OrderBy(x => x.DesignationName).ToList();


            List<string> oDeptName = new List<string>();
            List<int> nTotal = new List<int>();
            List<int> nPresent = new List<int>();
            List<int> nAbsent = new List<int>();
            int counter = 0;

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oAttendanceMonitorings.Select(p => p.BUID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            int nMaxColumn = 0;
            int colIndex = 1;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;


            OfficeOpenXml.Style.Border border;


            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Attendance Summary");
                sheet.Name = "Attendance Summary";

                int n = 1;
                sheet.Column(n++).Width = 6; //SL
                sheet.Column(n++).Width = 25; //Designation
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                nMaxColumn = n;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header


                cell = sheet.Cells[rowIndex, 3]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? (oCompanys.Count > 0 ? oCompanys[0].Name : "") : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                rowIndex = rowIndex + 1;



                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Date : " + Date; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;

                #endregion

                #region Table Body
                int nSL = 0;
                foreach (var oItem in AttendanceMonitorings)
                {



                    colIndex = 1;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn - 1]; cell.Value = "Department: " + oItem.DepartmentName + ", " + oItem.LocationName; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; ;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    colIndex = 1;
                    rowIndex += 1;


                    cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex]; cell.Value = "SL"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex]; cell.Value = "Designation"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "Exist"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 3;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "Present"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 3;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "Absent"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 3;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "Late"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 3;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "Early Leave"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 3;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "Leave"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 3;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "DayOff/Holiday"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    colIndex = 3;
                    rowIndex += 1;


                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    var List = oItem.AttList.GroupBy(x => new { x.DesignationID }, (key, grp) => new AttendanceMonitoring
                    {
                        DepartmentID = grp.First().DepartmentID,
                        DepartmentName = grp.First().DepartmentName,

                        DesignationName = grp.First().DesignationName,
                        MaleExistPerson = grp.Sum(x => x.MaleExistPerson),
                        FemaleExistPerson = grp.Sum(x => x.FemaleExistPerson),

                        MalePresent = grp.Sum(x => x.MalePresent),
                        FemalePresent = grp.Sum(x => x.FemalePresent),

                        MaleAbsent = grp.Sum(x => x.MaleAbsent),
                        FemaleAbsent = grp.Sum(x => x.FemaleAbsent),

                        MaleLate = grp.Sum(x => x.MaleLate),
                        FemaleLate = grp.Sum(x => x.FemaleLate),

                        MaleEarlyLeave = grp.Sum(x => x.MaleEarlyLeave),
                        FemaleEarlyLeave = grp.Sum(x => x.FemaleEarlyLeave),

                        MaleLeave = grp.Sum(x => x.MaleLeave),
                        FemaleLeave = grp.Sum(x => x.FemaleLeave),

                        MaleDayOff = grp.Sum(x => x.MaleDayOff),
                        FemaleDayOff = grp.Sum(x => x.FemaleDayOff),


                    }).OrderBy(x => x.DesignationName).ToList();

                    rowIndex += 1;
                    foreach (var data in List)
                    {


                        colIndex = 1;

                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = ++nSL;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.DesignationName;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;

                        //1
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleExistPerson;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.FemaleExistPerson;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleExistPerson + data.FemaleExistPerson;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        //2
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MalePresent;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.FemalePresent;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MalePresent + data.FemalePresent;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        //3
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleAbsent;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.FemaleAbsent;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleAbsent + data.FemaleAbsent;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        //4
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleLate;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.FemaleLate;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleLate + data.FemaleLate;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        //5
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleEarlyLeave;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.FemaleEarlyLeave;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleEarlyLeave + data.FemaleEarlyLeave;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        //6
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleLeave;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.FemaleLeave;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleLeave + data.FemaleLeave;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        //7
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleDayOff;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleDayOff;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleDayOff + data.MaleDayOff;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;

                        nTotal.Add(data.MaleExistPerson + data.FemaleExistPerson);
                        nPresent.Add(data.MalePresent + data.FemalePresent);
                        nAbsent.Add(data.MaleAbsent + data.FemaleAbsent);

                        rowIndex += 1;

                    }
                    nSL = 0;

                }
                rowIndex += 1;
                rowIndex += 1;
                colIndex = 2;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 6]; cell.Value = "Department Wise"; cell.Merge = true; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Gray); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Department Name"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Man Power"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Present"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Leave"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Holiday/Dayoff"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Absent(%)"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                
                rowIndex += 1;

                double PercentDept = 0.0;
                int TotalExist = 0, TotalPresent = 0, TotalAbsent = 0, TotalLeave = 0, TotalHoliday = 0;
                foreach (var item in AttendanceMonitoringsForDeptWise)
                {
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.DepartmentName;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Exists;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    TotalExist += item.Exists;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Present;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    TotalPresent += item.Present;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Absent;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    TotalAbsent += item.Absent;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Leave;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    TotalLeave += item.Leave;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.HoliDay;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    TotalHoliday += item.HoliDay;

                    PercentDept += item.Percent;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = Math.Round(item.Percent, 2) + "%";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    rowIndex += 1;
                    counter++;

                }
                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = TotalExist; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = TotalPresent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = TotalAbsent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = TotalLeave; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = TotalHoliday; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = Math.Round((Convert.ToDouble((TotalAbsent * 100)) / TotalExist), 2) + "%"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                rowIndex++;

                //designationwise
                counter = 0;
                rowIndex += 1;
                rowIndex += 1;
                colIndex = 2;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 6]; cell.Value = "Designation Wise"; cell.Merge = true; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Gray); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Designation Name"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Man Power"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Present"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Leave"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Holiday/Dayoff"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Absent(%)"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                
                rowIndex += 1;

                double PercentDesg = 0.0;
                int desTotalExist = 0, desTotalPresent = 0, desTotalAbsent = 0, desTotalLeave = 0, desTotalHoliday = 0;
                foreach (var item in AttendanceMonitoringsForDesignationWise)
                {
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.DesignationName;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Exists;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    desTotalExist += item.Exists;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Present;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    desTotalPresent += item.Present;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Absent;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    desTotalAbsent += item.Absent;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Leave;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    desTotalLeave += item.Leave;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.HoliDay;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    desTotalHoliday += item.HoliDay;

                    PercentDesg += item.Percent;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = Math.Round(item.Percent, 2) + "%";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    rowIndex += 1;
                    counter++;

                }
                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = desTotalExist; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = desTotalPresent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = desTotalAbsent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = desTotalLeave; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = desTotalHoliday; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = Math.Round((Convert.ToDouble((desTotalAbsent * 100)) / desTotalExist), 2) + "%"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                rowIndex++;


                #endregion





                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=AttendanceSunnryF2.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }
        #endregion

        #region AttendanceSummary XL
        public void AttendanceSummaryXL(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sGroupIDs, string sBlockIDs, double ts)
        {
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();

            string sSql = "SELECT * FROM View_AttendanceDaily WHERE AttendanceDate BETWEEN '" + DateFrom.ToString("dd MMM yyyy") + "' AND '" + DateTo.ToString("dd MMM yyyy") + "' ";
            if (sEmployeeIDs != "")
            {
                sSql += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (sBusinessUnitIds != "")
            {
                sSql = sSql + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSql = sSql + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIds != "")
            {
                sSql += " AND DepartmentID IN(" + sDepartmentIds + ")";
            }
            if (sDesignationIds != "")
            {
                sSql += " AND DesignationID IN(" + sDesignationIds + ")";
            }
            if (sSalarySchemeIDs != "")
            {
                sSql += " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
            }
            if (!string.IsNullOrEmpty(sGroupIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sGroupIDs + "))";
            }
            if (!string.IsNullOrEmpty(sBlockIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sBlockIDs + "))";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }
            oAttendanceDaily.AttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily.ErrorMessage = DateFrom.ToString() + "," + DateTo.ToString();

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily.Company = oCompanys.First();
            oAttendanceDaily.Company.CompanyLogo = GetCompanyLogo(oAttendanceDaily.Company);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oAttendanceDaily.AttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            AttendanceDaily _oAttendanceDaily = new AttendanceDaily();
            List<AttendanceDaily> _oAttendanceDailys = new List<AttendanceDaily>();
            Company _oCompany = new Company();
            DateTime _sStartDate = DateTime.Now;
            DateTime _sEndDate = DateTime.Now;

            _oAttendanceDailys = oAttendanceDaily.AttendanceDailys.OrderBy(x => x.EmployeeCode).ToList();
            _oCompany = oAttendanceDaily.Company;
            _sStartDate = Convert.ToDateTime(oAttendanceDaily.ErrorMessage.Split(',')[0]);
            _sEndDate = Convert.ToDateTime(oAttendanceDaily.ErrorMessage.Split(',')[1]);


            int nMaxColumn = 0;
            int colIndex = 1;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;


            int _ColSpan1 = 0;
            int _nMonthCycle = 0;
            int _nColumns = 0;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Attendance Summary");
                sheet.Name = "Attendance Summary";

                if (_sStartDate.Month == _sEndDate.Month)
                {
                    _ColSpan1 = (_sEndDate.Day - _sStartDate.Day + 1) * 2;
                }
                else
                {
                    _ColSpan1 = (DateTime.DaysInMonth(_sStartDate.Year, _sStartDate.Month) - Convert.ToInt32(_sStartDate.Day) + 1) * 2;
                }

                TimeSpan diff = _sEndDate - _sStartDate;
                _nMonthCycle = diff.Days + 1;
                _nColumns = _nMonthCycle * 2 + 4;

                int n = 1;
                sheet.Column(1).Width = 8;
                sheet.Column(2).Width = 15;
                sheet.Column(3).Width = 23;
                sheet.Column(4).Width = 25;

                for (int i = 5; i < _nColumns; i++)
                {
                    sheet.Column(i).Width = 12;
                }
                sheet.Column(_nColumns++).Width = 10;
                sheet.Column(_nColumns++).Width = 10;
                sheet.Column(_nColumns++).Width = 10;
                sheet.Column(_nColumns++).Width = 10;
                sheet.Column(_nColumns++).Width = 10;
                sheet.Column(_nColumns++).Width = 10;
                sheet.Column(_nColumns++).Width = 10;
                sheet.Column(_nColumns++).Width = 10;
                sheet.Column(_nColumns++).Width = 10;


                nMaxColumn = _nColumns;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header


                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? (oCompanys.Count > 0 ? oCompanys[0].Name : "") : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 18;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 1;


                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? (oCompanys.Count > 0 ? oCompanys[0].Address : "") : oBusinessUnits[0].Address; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 12;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 1;


                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Attendance Summery"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 15;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "From " + _sStartDate.ToString("dd MMM yyyy") + " To " + _sEndDate.ToString("dd MMM yyyy"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 15;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 2;

                #endregion

                #region Header
                colIndex = 1;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Card No"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Name"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Designation"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                int col = (colIndex - 1) + _ColSpan1;
                cell = sheet.Cells[rowIndex, colIndex, rowIndex, col]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = _sStartDate.ToString("MMM"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex = col + 1;

                int multipleMonthCol = (colIndex - 1) + _sEndDate.Day * 2;
                if (_sStartDate.Month != _sEndDate.Month)
                {
                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, multipleMonthCol]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = _sEndDate.ToString("MMM"); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    colIndex = multipleMonthCol + 1;
                }
                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "PD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Off"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "HD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "LD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Half/Short L"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Total"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "TD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "OT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex += 1;

                DateTime dStartDate = _sStartDate;
                int sCol = 5;
                int eCol = 0;
                colIndex = 5;
                while (dStartDate <= _sEndDate)
                {
                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, ++colIndex]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = dStartDate.Day; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    dStartDate = dStartDate.AddDays(1);

                }
                rowIndex += 1;

                colIndex = 5;
                dStartDate = _sStartDate;
                while (dStartDate <= _sEndDate)
                {
                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "In Out"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "OT"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    dStartDate = dStartDate.AddDays(1);

                }
                rowIndex += 1;


                #endregion

                #region Table Body
                int nCount = 0;
                int nWorkingDay = 0;
                int nHDay = 0;
                int nDayOff = 0;
                int nLDay = 0;
                int nSHLDay = 0;
                int nTWDay = 0;
                int nOTH = 0;
                int nOTM = 0;
                int nAbsent = 0;

                while (_oAttendanceDailys.Count > 0)
                {
                    List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
                    oAttendanceDailys = _oAttendanceDailys.Where(x => x.EmployeeID == _oAttendanceDailys[0].EmployeeID).OrderBy(x => x.AttendanceDate).ToList();
                    //BodyMake(oAttendanceDailys.OrderBy(x => x.AttendanceDate).ToList());

                    nWorkingDay = 0;
                    nHDay = 0;
                    nLDay = 0;
                    nTWDay = 0;
                    nOTH = 0;
                    nOTM = 0;
                    nAbsent = 0;
                    nDayOff = 0;
                    if (oAttendanceDailys.Count > 0)
                    {
                        nCount++;
                        colIndex = 1;

                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = true; cell.Value = nCount; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = true; cell.Value = oAttendanceDailys[0].EmployeeCode; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = true; cell.Value = oAttendanceDailys[0].EmployeeName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = true; cell.Value = oAttendanceDailys[0].DesignationName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                        dStartDate = _sStartDate;
                        while (dStartDate <= _sEndDate)
                        {
                            bool bFlag = false;

                            foreach (AttendanceDaily oADItem in oAttendanceDailys)
                            {

                                if (dStartDate == oADItem.AttendanceDate)
                                {
                                    bFlag = true;
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsLeave == false && oADItem.IsNoWork == false && oADItem.IsHoliday == false)
                                    {

                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = oADItem.InTimeInString + "-" + oADItem.OutTimeInString; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nWorkingDay++;
                                    }
                                    else if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsLeave == false && oADItem.IsNoWork == true && oADItem.IsHoliday == false)
                                    {
                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = "NW(" + oADItem.InTimeInString + "-" + oADItem.OutTimeInString + ")"; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                        nWorkingDay++;
                                    }
                                    else if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == true && oADItem.IsLeave == false && oADItem.IsNoWork == false && oADItem.IsHoliday == false)
                                    {
                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = "DO(" + oADItem.InTimeInString + "-" + oADItem.OutTimeInString + ")"; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                        nDayOff++;
                                    }
                                    else if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsLeave == false && oADItem.IsNoWork == false && oADItem.IsHoliday == true)
                                    {
                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = "HD(" + oADItem.InTimeInString + "-" + oADItem.OutTimeInString + ")"; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nHDay++;
                                    }
                                    else if (oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-" && oADItem.IsOSD == false && oADItem.IsDayOff == false && oADItem.IsLeave == false && oADItem.IsNoWork == false && oADItem.IsHoliday == false)
                                    {
                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = "A"; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                        nAbsent++;
                                    }
                                    else if (oADItem.IsDayOff == true && oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-")
                                    {
                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = "DO"; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                        nDayOff++;
                                    }
                                    else if (oADItem.IsLeave == true && oADItem.LeaveType == EnumLeaveType.Full)
                                    {
                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = "L"; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = ""; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                        nLDay++;
                                    }
                                    else if (oADItem.IsLeave == true && oADItem.LeaveType == EnumLeaveType.Short || oADItem.LeaveType == EnumLeaveType.Half)
                                    {
                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = "S/H L"; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = ""; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                        nSHLDay++;
                                        nWorkingDay++;
                                    }
                                    else if (oADItem.IsHoliday == true)
                                    {
                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = "HD"; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                        nHDay++;
                                    }
                                    else
                                    {
                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = "N/A"; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;
                                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                    }
                                    nOTM += oADItem.OverTimeInMinute;
                                    break;
                                }

                            }
                            if (!bFlag)
                            {
                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = "N/A"; cell.Style.Font.Bold = false;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = ""; cell.Style.Font.Bold = false;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                nAbsent++;
                            }
                            dStartDate = dStartDate.AddDays(1);
                        }
                    }

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = nWorkingDay; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = nAbsent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = nDayOff; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = nHDay; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = nLDay; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = nSHLDay; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = (nWorkingDay + nDayOff + nHDay + nLDay); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = _nMonthCycle; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = ((nOTM / 60).ToString()).Split('.')[0] + ":" + (nOTM % 60); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex += 1;


                    _oAttendanceDailys.RemoveAll(x => x.EmployeeID == oAttendanceDailys[0].EmployeeID);

                }

                #endregion


                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=AttendanceSummary.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }

        }
        #endregion

        #region bridgeabsent
        [HttpGet]
        public void MakeBridgeAbsent(string sAttendanceDate, bool bOperation, bool bIsLeaveBefore, bool bIsLeaveAfter, bool bIsAbsentBefore, bool bIsAbsentAfter, bool bIsHolidayBefore, bool bIsHolidayAfter, bool bIsDayOffBefore, bool bIsDayOffAfter, string BUIDs, string LocIDs, string DepartmentIDs, string DesignationIDs, bool IsComp)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            oAttendanceDailys = AttendanceDaily.MakeAbsent(sAttendanceDate, bOperation, bIsLeaveBefore, bIsLeaveAfter, bIsAbsentBefore, bIsAbsentAfter, bIsHolidayBefore, bIsHolidayAfter, bIsDayOffBefore, bIsDayOffAfter, BUIDs, LocIDs, DepartmentIDs, DesignationIDs, IsComp, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BusinessUnitIDs = string.Join(",", oAttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BusinessUnitIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BusinessUnitIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            int nDays = 0;
            int nColumns = 0;
            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("DTAE WISE ATTENDACE");
                sheet.Name = "DTAE WISE ATTENDACE";

                DateTime AttDate = Convert.ToDateTime(sAttendanceDate);

                DateTime DateFrom = new DateTime(1950, 1, 1);
                DateTime DateTo = new DateTime(1950, 1, 1);

                DateFrom = AttDate.AddDays(-1);
                DateTo = AttDate.AddDays(1);

                int ColSpan1 = 0;
                if (DateFrom.Month == DateTo.Month)
                {
                    ColSpan1 = DateTo.Day - DateFrom.Day + 1 + 6;
                }
                else
                {
                    ColSpan1 = DateTime.DaysInMonth(DateFrom.Year, DateFrom.Month) - Convert.ToInt32(DateFrom.Day) + 1 + 1 + 5;
                }

                TimeSpan diff = DateTo - DateFrom;
                nDays = diff.Days + 1;
                nColumns = nDays + 6;

                sheet.Column(2).Width = 8; //SL
                sheet.Column(3).Width = 30; //NAME
                sheet.Column(4).Width = 20; //CODE
                sheet.Column(5).Width = 28; //DEPARTMENT
                sheet.Column(6).Width = 28; //DESIGNATION

                for (int i = 7; i <= nColumns; i++)
                {
                    sheet.Column(i).Width = 8;
                }


                nMaxColumn = nColumns;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, 2]; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 2]; cell.Value = "DTAE WISE ATTENDACE"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = sheet.Cells[rowIndex + 1, colIndex++];
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "NAME"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "CODE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "DEPARTMENT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = DateFrom.ToString("MMM"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                if (DateFrom.Month != DateTo.Month)
                {
                    ColSpan1 = ColSpan1 + DateTo.Day;
                    cell = sheet.Cells[rowIndex, ColSpan1 + 1]; cell.Value = DateTo.ToString("MMM"); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                rowIndex = rowIndex + 1;
                colIndex = 7;
                DateTime dStartDate = DateFrom;
                while (dStartDate <= DateTo)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = dStartDate.Day.ToString(); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    dStartDate = dStartDate.AddDays(1);
                }

                int nCount = 0;
                int nWorkingDay = 0;
                int nHDay = 0;
                int nDODay = 0;
                int nLDay = 0;
                int nSHLDay = 0;
                int nOTM = 0;
                int nAbsent = 0;
                int nLateArrivalMinute = 0;
                int nEarlyDepartureMinute = 0;

                while (oAttendanceDailys.Count > 0)
                {
                    nWorkingDay = 0;
                    nHDay = 0;
                    nDODay = 0;
                    nSHLDay = 0;
                    nLDay = 0;
                    nOTM = 0;
                    nAbsent = 0;
                    nLateArrivalMinute = 0;
                    nEarlyDepartureMinute = 0;

                    List<AttendanceDaily> oAttDailys = new List<AttendanceDaily>();
                    oAttDailys = oAttendanceDailys.Where(x => x.EmployeeID == oAttendanceDailys[0].EmployeeID).OrderBy(x => x.AttendanceDate).ToList();

                    if (oAttDailys.Count > 0)
                    {
                        nCount++;
                        rowIndex = rowIndex + 1;
                        colIndex = 2;
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = nCount.ToString(); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].EmployeeName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].EmployeeCode; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DepartmentName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DesignationName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        dStartDate = DateFrom;
                        while (dStartDate <= DateTo)
                        {
                            bool bFlag = false;
                            foreach (AttendanceDaily oADItem in oAttDailys)
                            {
                                if (dStartDate == oADItem.AttendanceDate)
                                {
                                    bFlag = true;

                                    cell = sheet.Cells[rowIndex, colIndex++];
                                    cell.Value = oADItem.AttStatusInStringInShort; cell.Style.Font.Bold = true;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsHoliday == false && oADItem.IsLeave == false && oADItem.IsNoWork == false)
                                    {
                                        nWorkingDay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsHoliday == false && oADItem.IsLeave == false && oADItem.IsNoWork == true)
                                    {
                                        nWorkingDay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsHoliday == true)
                                    {
                                        nHDay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == true)
                                    {
                                        nDODay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.LateArrivalMinute > 0)
                                    {
                                        nLateArrivalMinute++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.EarlyDepartureMinute > 0)
                                    {
                                        nEarlyDepartureMinute++;
                                    }
                                    if (oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-" && oADItem.IsOSD == false && oADItem.IsDayOff == false && oADItem.IsLeave == false && oADItem.IsHoliday == false)
                                    {
                                        nAbsent++;
                                    }
                                    if (oADItem.IsHoliday == true && oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-")
                                    {
                                        nHDay++;
                                    }
                                    if (oADItem.IsDayOff == true && oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-")
                                    {
                                        nDODay++;
                                    }
                                    if (oADItem.IsLeave == true && oADItem.LeaveType == EnumLeaveType.Full)
                                    {
                                        nLDay++;
                                    }
                                    if (oADItem.IsLeave == true && oADItem.LeaveType == EnumLeaveType.Short || oADItem.LeaveType == EnumLeaveType.Half)
                                    {
                                        nSHLDay++;
                                        nWorkingDay++;
                                    }
                                    nOTM += oADItem.OverTimeInMinute;
                                    break;
                                }
                            }
                            if (!bFlag)
                            {
                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = "N/A"; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                nAbsent++;
                            }
                            dStartDate = dStartDate.AddDays(1);
                        }

                    }
                    oAttendanceDailys.RemoveAll(x => x.EmployeeID == oAttDailys[0].EmployeeID);
                }

                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=CheckAbsentList.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }

        }


        #endregion

        #region UploadManualAttendance
        private List<AttendanceDaily> GetAttFromExcel(HttpPostedFileBase PostedFile)
        {
            DataSet ds = new DataSet();
            DataRowCollection oRows = null;
            string fileExtension = "";
            string fileDirectory = "";
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();
            AttendanceDaily oAttendanceDailyT = new AttendanceDaily();
            if (PostedFile.ContentLength > 0)
            {
                fileExtension = System.IO.Path.GetExtension(PostedFile.FileName);
                if (fileExtension == ".xls" || fileExtension == ".xlsx")
                {
                    fileDirectory = Server.MapPath("~/Content/") + PostedFile.FileName;
                    if (System.IO.File.Exists(fileDirectory))
                    {
                        System.IO.File.Delete(fileDirectory);
                    }
                    PostedFile.SaveAs(fileDirectory);
                    string excelConnectionString = string.Empty;
                    //connection String for xls file format.
                    //excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileDirectory + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                    excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileDirectory + ";Extended Properties=\"Excel 12.0;HDR=No;IMEX=1\"";
                    ////excelConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + fileDirectory + ";Extended Properties=\"Excel 8.0;HDR=Yes;IMEX=2\"";

                    //Create Connection to Excel work book and add oledb namespace
                    OleDbConnection excelConnection = new OleDbConnection(excelConnectionString);
                    excelConnection.Open();
                    DataTable dt = new DataTable();

                    dt = excelConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    if (dt == null)
                    {
                        return null;
                    }
                    excelConnection.Close();
                    String[] excelSheets = new String[dt.Rows.Count];
                    int t = 0;
                    //excel data saves in temp file here.
                    foreach (DataRow row in dt.Rows)
                    {
                        excelSheets[t] = row["TABLE_NAME"].ToString();
                        t++;
                    }
                    OleDbConnection excelConnection1 = new OleDbConnection(excelConnectionString);

                    string query = string.Format("Select * from [{0}]", excelSheets[0]);
                    using (OleDbDataAdapter dataAdapter = new OleDbDataAdapter(query, excelConnection1))
                    {
                        dataAdapter.Fill(ds);
                    }
                    oRows = ds.Tables[0].Rows;

                    IFormatProvider culture = new System.Globalization.CultureInfo("en-US", true);

                    string sAtt = "";
                    DateTime tempDT = new DateTime(1950, 01, 01);
                    DateTime tempTime = new DateTime(1950, 01, 01);
                    DateTime tempTimeFinal = new DateTime(1950, 01, 01);
                    oAttendanceDailyT.AttendanceDate = Convert.ToDateTime(oRows[1][2]);
                   

                    for (int i = 1; i < oRows.Count; i++)
                    {
                        oAttendanceDaily = new AttendanceDaily();
                        oAttendanceDaily.EmployeeCode = Convert.ToString(oRows[i][0] == DBNull.Value ? "NU" : oRows[i][0]);
                        int j = 1;
                        sAtt = "";
                        sAtt = Convert.ToString(oRows[i][j] == DBNull.Value ? "NU" : oRows[i][j]);
                        j++;

                        //InDate
                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNUInDate = true;
                        }
                        else
                        {
                            string sDate = Convert.ToString(oRows[i][j]);
                            //tempDT = DateTime.ParseExact(sDate, "dd MMM yyyy", null);
                            tempDT = Convert.ToDateTime(sDate);
                        }
                        j++;

                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNUInTime = true;
                        }
                        else
                        {
                            string sDate = Convert.ToString(oRows[i][j] == DBNull.Value ? "" : oRows[i][j]);
                            if (sDate == "0" || sDate == "-" || sDate == "")
                            {
                                sDate = "00:00";
                            }
                            TimeSpan ts = new TimeSpan(Convert.ToInt32(sDate.Split(':')[0]), Convert.ToInt32(sDate.Split(':')[1]), 0);
                            tempTime = tempTime.Date + ts;
                            tempTimeFinal = new DateTime(tempDT.Year, tempDT.Month, tempDT.Day, tempTime.Hour, tempTime.Minute, tempTime.Second);

                        }
                        if (IsNUInDate == true && IsNUInTime == true)
                        {
                            oAttendanceDaily.InTime = new DateTime(1950, 01, 01);
                        }
                        else
                        {
                            oAttendanceDaily.InTime = new DateTime(tempDT.Year, tempDT.Month, tempDT.Day, tempTimeFinal.Hour, tempTimeFinal.Minute, tempTimeFinal.Second);
                        }
                        j++;

                        //OutDate
                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNUOutDate = true;
                        }
                        else
                        {
                            string sDate = Convert.ToString(oRows[i][j]);
                            //tempDT = DateTime.ParseExact(sDate, "dd MMM yyyy", null);
                            tempDT = Convert.ToDateTime(sDate);
                        }
                        j++;
                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNUOutTime = true;
                        }
                        else
                        {
                            string sDate = Convert.ToString(oRows[i][j] == DBNull.Value ? "" : oRows[i][j]);
                            if (sDate == "0" || sDate == "-" || sDate == "")
                            {
                                sDate = "00:00";
                            }
                            TimeSpan ts = new TimeSpan(Convert.ToInt32(sDate.Split(':')[0]), Convert.ToInt32(sDate.Split(':')[1]), 0);
                            tempTime = tempTime.Date + ts;
                            tempTimeFinal = new DateTime(tempDT.Year, tempDT.Month, tempDT.Day, tempTime.Hour, tempTime.Minute, tempTime.Second);
                        }
                        if (IsNUOutDate == true && IsNUOutTime == true)
                        {
                            oAttendanceDaily.OutTime = new DateTime(1950, 01, 01);
                        }
                        else
                        {
                            oAttendanceDaily.OutTime = new DateTime(tempDT.Year, tempDT.Month, tempDT.Day, tempTimeFinal.Hour, tempTimeFinal.Minute, tempTimeFinal.Second);
                        }
                        j++;

                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNULate = true;
                        }
                        else
                        {
                            oAttendanceDaily.LateArrivalMinute = Convert.ToInt32(oRows[i][j]);
                        }
                        j++;
                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNUEarly = true;
                        }
                        else
                        {
                            oAttendanceDaily.EarlyDepartureMinute = Convert.ToInt32(oRows[i][j]);
                        }
                        j++;
                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNUOT = true;
                        }
                        else
                        {
                            oAttendanceDaily.OverTimeInMinute = Convert.ToInt32(oRows[i][j]);
                        }
                        j++;
                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNURemark = true;
                        }
                        else
                        {
                            oAttendanceDaily.Remark = Convert.ToString(oRows[i][j] == DBNull.Value ? "NU" : oRows[i][j]);
                        }
                        j++;

                        oAttendanceDaily.ErrorMessage = sAtt;
                        Debug.WriteLine(oAttendanceDailys.Count);
                        oAttendanceDailys.Add(oAttendanceDaily);
                    }
                    if (System.IO.File.Exists(fileDirectory))
                    {
                        System.IO.File.Delete(fileDirectory);
                    }
                    foreach (AttendanceDaily ADs in oAttendanceDailys)
                    {
                        ADs.AttendanceDate = oAttendanceDailyT.AttendanceDate;
                    }
                }
                else
                {
                    throw new Exception("File not supported");
                }
            }
            return oAttendanceDailys;
        }

        [HttpPost]
        public ActionResult View_UploadAttendance(HttpPostedFileBase fileAtts)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            List<AttendanceDaily> oADs = new List<AttendanceDaily>();
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();
            try
            {
                if (fileAtts == null) { throw new Exception("File not Found"); }
                oAttendanceDailys = this.GetAttFromExcel(fileAtts);

                if (oAttendanceDailys.Count() <= 0)
                    throw new Exception("Nothing found to Upload");

                oADs = AttendanceDaily.UploadAttXL(oAttendanceDailys, IsNUInTime, IsNUOutTime, IsNULate, IsNUEarly, IsNUInDate, IsNUOutDate, IsNUOT, IsNURemark, false, ((User)Session[SessionInfo.CurrentUser]).UserID);
                if (oADs.Count > 0)
                {
                    int nRowIndex = 2, nStartCol = 2, nEndCol = 2;
                    ExcelRange cell;
                    OfficeOpenXml.Style.Border border;
                    ExcelFill fill;
                    int colIndex = 1;
                    int rowIndex = 2;

                    using (var excelPackage = new ExcelPackage())
                    {
                        excelPackage.Workbook.Properties.Author = "ESimSol";
                        excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                        var sheet = excelPackage.Workbook.Worksheets.Add("Error List");
                        sheet.Name = "Error List";

                        int n = 1;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 25;

                        colIndex = 1;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Code"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "InDateTime"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OutDateTime"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Late"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Early"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Remark"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Error"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        rowIndex += 1;
                        foreach (AttendanceDaily oItem in oADs)
                        {
                            colIndex = 1;
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompInTimeInString; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompOutTimeInString; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompLateArrivalMinute; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompEarlyDepartureMinute; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompOverTimeInMinute; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Remark; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.ErrorMessage; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            rowIndex += 1;
                        }

                        Response.ClearContent();
                        Response.BinaryWrite(excelPackage.GetAsByteArray());
                        Response.AddHeader("content-disposition", "attachment; filename=ErrorList.xlsx");
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.Flush();
                        Response.End();
                    }
                }
            }
            catch (Exception ex)
            {
                ViewBag.FeedBack = ex.Message;
                ViewBag.FeedBackText = "Unsuccessful";
            }
            ViewBag.FeedBackText = "successful";
            return View(new AttendanceDaily());
        }

        public void DownloadFormat()
        {
            int nRowIndex = 2, nStartCol = 2, nEndCol = 2;
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;
            ExcelFill fill;
            int colIndex = 1;
            int rowIndex = 1;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Format Downlaod");
                sheet.Name = "Format Downlaod";

                int n = 1;
                sheet.Column(n++).Width = 13;//code
                sheet.Column(n++).Width = 13;//status
                sheet.Column(n++).Width = 13;//indate
                sheet.Column(n++).Width = 13;//intime
                sheet.Column(n++).Width = 13;//outdate
                sheet.Column(n++).Width = 13;//outtime
                sheet.Column(n++).Width = 13;//late
                sheet.Column(n++).Width = 13;//early
                sheet.Column(n++).Width = 13;//OT
                sheet.Column(n++).Width = 13;//Remark

                sheet.Column(n++).Width = 13;//blank
                sheet.Column(n++).Width = 13;//blank
                sheet.Column(n++).Width = 13;//blank

                sheet.Column(n++).Width = 20;//
                sheet.Column(n++).Width = 20;//
                sheet.Column(n++).Width = 30;//

                colIndex = 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Date"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "25-Sep-17"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                rowIndex++;

                colIndex = 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Code"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Status"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "InDate"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "InTime"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OutDate"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OutTime"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Late"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Early"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Remark"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, 14]; cell.Value = "Legend"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 15]; cell.Value = "If Holiday, No effect"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex += 1;

                colIndex = 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "10001"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "P"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "25/9/2017"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "8:20"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "25/9/2017"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "16:10"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "10"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "20"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "40"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Remark"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, 14]; cell.Value = "A"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 15]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 14]; cell.Value = "P"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 15]; cell.Value = "Present"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 16]; cell.Value = "Must Enter in time and out time"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;


                cell = sheet.Cells[rowIndex, 14]; cell.Value = "OFF"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 15]; cell.Value = "Dayoff"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 14, rowIndex, 16]; cell.Value = "For leave use short name of leave head"; cell.Style.Font.Bold = true; cell.Merge = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
                cell = sheet.Cells[rowIndex, 14, rowIndex, 16]; cell.Value = "NU=Not Update"; cell.Style.Font.Bold = true; cell.Merge = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=Format.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        #endregion

        #region WorkingHour

        public void ExcelWorkingHour(string sParam, double nts)
        {


            DateTime paramDate;
            string Date = sParam.Split('~')[0];
            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];

            List<WorkingHourReport> oWorkingHourReports = new List<WorkingHourReport>();
            oWorkingHourReports = WorkingHourReport.Gets(paramDate, sBusinessUnitIds, sLocationID, sDepartmentIDs, sDesignationIDs, sEmployeeIDs, ShiftIds, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            var data = oWorkingHourReports.GroupBy(x => new { x.LocationName }, (key, grp) => new
            {
                LocationName = key.LocationName,
                Results = grp.ToList()
            });

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);


            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;


            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("LINE WISE WORKING HOUR");
                sheet.Name = "LINE WISE WORKING HOUR";

                int n = 2;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 25;

                nMaxColumn = n-1;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oCompanys.Count > 0 ? oCompanys[0].Name : ""; cell.Merge= true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 15;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
                colIndex = 2;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = "Line Wise Working Hours"; cell.Merge = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 12;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                rowIndex++;
                colIndex = 2;

                foreach (var oItem in data)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "LOCATION"; fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "LINE"; fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "08 Hours"; fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "09 Hours"; fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "10 Hours"; fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "11 Hours"; fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "12 Hours"; fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "12.30 Hours"; fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "13 Hours"; fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "Total"; fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "Bonus W.Hours"; fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;
                    colIndex = 2;


                    cell = sheet.Cells[rowIndex, colIndex, rowIndex + oItem.Results.Count() - 1, colIndex]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    cell.Style.Font.Bold = false; cell.Value = oItem.LocationName; cell.Merge = true;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    colIndex = 2;
                    foreach (var obj in oItem.Results)
                    {
                        colIndex = 2;
                        int nTotal = 0;

                        colIndex++;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = false; cell.Value = obj.BlockName;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                       
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = false; cell.Value = obj.Hour8; 
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        nTotal += obj.Hour8;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = false; cell.Value = obj.Hour9; 
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        nTotal += obj.Hour9;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = false; cell.Value = obj.Hour10;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        nTotal += obj.Hour10;

                        cell = sheet.Cells[rowIndex,colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = false; cell.Value = obj.Hour11; 
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        nTotal += obj.Hour11;

                        cell = sheet.Cells[rowIndex,  colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = false; cell.Value = obj.Hour12; 
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        nTotal += obj.Hour12;

                        cell = sheet.Cells[rowIndex,colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = false; cell.Value = obj.Hour12P5; 
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        nTotal += obj.Hour12P5;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = false; cell.Value = obj.Hour13; 
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        nTotal += obj.Hour13;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = false; cell.Value = nTotal;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = false; cell.Value = ""; 
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex++;
                    }
                    rowIndex++;
                    colIndex = 2;

                }


                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=LINE_WISE_WORKING_HOUR.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }
        #endregion

        public void AttendanceSummaryF4XL(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sWorkingStatus, string sGroupIDs, string sBlockIDs, string sRemarks, double ts)
        {
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();

            //string sSql = "SELECT * FROM View_AttendanceDaily WHERE AttendanceDate BETWEEN '" + DateFrom.ToString("dd MMM yyyy") + "' AND '" + DateTo.ToString("dd MMM yyyy") + "' ";
            //if (sEmployeeIDs != "")
            //{
            //    sSql += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            //}
            //if (sBusinessUnitIds != "")
            //{
            //    sSql = sSql + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            //}
            //if (sLocationID != "")
            //{
            //    sSql = sSql + " AND LocationID IN(" + sLocationID + ")";
            //}
            //if (sDepartmentIds != "")
            //{
            //    sSql += " AND DepartmentID IN(" + sDepartmentIds + ")";
            //}
            //if (sDesignationIds != "")
            //{
            //    sSql += " AND DesignationID IN(" + sDesignationIds + ")";
            //}
            //if (sSalarySchemeIDs != "")
            //{
            //    sSql += " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
            //}
            //if (sWorkingStatus == "Active")
            //{
            //    sSql += " AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=1)";
            //}
            //if (sWorkingStatus == "InActive")
            //{
            //    sSql += " AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=0)";
            //}
            //if (!string.IsNullOrEmpty(sGroupIDs))
            //{
            //    sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sGroupIDs + "))";
            //}
            //if (!string.IsNullOrEmpty(sBlockIDs))
            //{
            //    sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sBlockIDs + "))";
            //}
            //if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            //{
            //    sSql = sSql + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            //}
            oAttendanceDaily.AttendanceDailys = AttendanceDaily.GetsRecord(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, "", sGroupIDs, sBlockIDs, 0, 0, "", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily.ErrorMessage = DateFrom.ToString() + "," + DateTo.ToString();

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily.Company = oCompanys.First();
            oAttendanceDaily.Company.CompanyLogo = GetCompanyLogo(oAttendanceDaily.Company);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oAttendanceDaily.AttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }



            List<MonthlyAttendanceReport> oMonthlyAttendanceReports = new List<MonthlyAttendanceReport>();
            oMonthlyAttendanceReports = MonthlyAttendanceReport.Gets(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, "", sGroupIDs, sBlockIDs, 0, 0, "", sRemarks, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<MonthlyAttendance_Leave> oMonthlyAttendance_Leaves = new List<MonthlyAttendance_Leave>();
            oMonthlyAttendance_Leaves = MonthlyAttendance_Leave.Gets(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, "", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<MonthlyAttendanceReport> oTempMonthlyAttendanceReports = new List<MonthlyAttendanceReport>();
            oMonthlyAttendanceReports.ForEach(x => oTempMonthlyAttendanceReports.Add(x));

            List<MonthlyAttendance_Leave> oDistinctLeaves = new List<MonthlyAttendance_Leave>();
            oDistinctLeaves = oMonthlyAttendance_Leaves.GroupBy(x => x.LeaveName).Select(x => x.First()).OrderBy(x => x.LeaveID).ToList();



            AttendanceDaily _oAttendanceDaily = new AttendanceDaily();
            List<AttendanceDaily> _oAttendanceDailys = new List<AttendanceDaily>();
            Company _oCompany = new Company();
            DateTime _sStartDate = DateTime.Now;
            DateTime _sEndDate = DateTime.Now;

            //_oAttendanceDailys = oAttendanceDaily.AttendanceDailys.OrderBy(x => x.EmployeeCode).ToList();
            _oAttendanceDailys = oAttendanceDaily.AttendanceDailys.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ToList();
            _oCompany = oAttendanceDaily.Company;
            _sStartDate = Convert.ToDateTime(oAttendanceDaily.ErrorMessage.Split(',')[0]);
            _sEndDate = Convert.ToDateTime(oAttendanceDaily.ErrorMessage.Split(',')[1]);


            int nMaxColumn = 0;
            int colIndex = 1;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;


            int _ColSpan1 = 0;
            int _nMonthCycle = 0;
            int _nColumns = 0;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Attendance Summary");
                sheet.Name = "Attendance Summary";

                if (_sStartDate.Month == _sEndDate.Month)
                {
                    _ColSpan1 = (_sEndDate.Day - _sStartDate.Day + 1) * 2;
                }
                else
                {
                    _ColSpan1 = (DateTime.DaysInMonth(_sStartDate.Year, _sStartDate.Month) - Convert.ToInt32(_sStartDate.Day) + 1) * 2;
                }

                TimeSpan diff = _sEndDate - _sStartDate;
                _nMonthCycle = diff.Days + 1;
                _nColumns = _nMonthCycle * 2 + 5;

                int n = 1;
                sheet.Column(1).Width = 8;
                sheet.Column(2).Width = 15;
                sheet.Column(3).Width = 23;
                sheet.Column(4).Width = 25;


                sheet.Column(5).Width = 15;
                sheet.Column(6).Width = 15;
                sheet.Column(7).Width = 15;
                sheet.Column(8).Width = 15;
                sheet.Column(9).Width = 15;
                sheet.Column(10).Width = 15;


                for (n = 11; n < 11 + oDistinctLeaves.Count; n++)
                {
                    sheet.Column(n).Width = 6; //LEAVES
                }
                n = 11 + oDistinctLeaves.Count;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;
                sheet.Column(n++).Width = 15;

                for (int i = 11 + oDistinctLeaves.Count + 6; i < _nColumns; i++)
                {
                    sheet.Column(i).Width = 12;
                }
                _nColumns += n-5 ;
                sheet.Column(_nColumns++).Width = 10;
                sheet.Column(_nColumns++).Width = 50;


                nMaxColumn = _nColumns;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header


                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? (oCompanys.Count > 0 ? oCompanys[0].Name : "") : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 18;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 1;


                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? (oCompanys.Count > 0 ? oCompanys[0].Address : "") : oBusinessUnits[0].Address; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 12;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 1;


                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Attendance Summery"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 15;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "From " + _sStartDate.ToString("dd MMM yyyy") + " To " + _sEndDate.ToString("dd MMM yyyy"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 15;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 2;

                #endregion

                #region Header
                colIndex = 1;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Card No"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Name"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Designation"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Join Date"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Total Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Present Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "DayOff"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Holidays"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Absent Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                colIndex = 11;
                foreach (MonthlyAttendance_Leave oitem in oDistinctLeaves)
                {
                    cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Merge = true; cell.Value = oitem.LeaveName; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Leave Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Early Out Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Early Out Mins"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Late Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Late Mins"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "EWD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                int col = (colIndex - 1) + _ColSpan1;
                cell = sheet.Cells[rowIndex, colIndex, rowIndex, col]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = _sStartDate.ToString("MMM"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex = col + 1;

                int multipleMonthCol = (colIndex - 1) + _sEndDate.Day * 2;
                if (_sStartDate.Month != _sEndDate.Month)
                {
                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, multipleMonthCol]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = _sEndDate.ToString("MMM"); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    colIndex = multipleMonthCol + 1;
                }
                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Total OT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 2, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Remark With Count"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex += 1;

                DateTime dStartDate = _sStartDate;
                colIndex = 11 + oDistinctLeaves.Count + 6;
                while (dStartDate <= _sEndDate)
                {
                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, ++colIndex]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = dStartDate.Day; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    dStartDate = dStartDate.AddDays(1);

                }
                rowIndex += 1;

                colIndex = 11 + oDistinctLeaves.Count + 6;
                dStartDate = _sStartDate;
                while (dStartDate <= _sEndDate)
                {
                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "In Out"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    cell.Style.Font.Bold = true; cell.Value = "OT"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    dStartDate = dStartDate.AddDays(1);

                }
                rowIndex += 1;


                #endregion

                #region Table Body
                int nCount = 0;
                int nOTM = 0;
                int nPresentDays = 0;
                int nDayoffs = 0;
                int nHolidays = 0;
                int nAbsents = 0;
                int nLeaveDays = 0;
                int nEarlyOutDays = 0;
                int nEarlyOutMins = 0;
                int nLateDays = 0;
                int nLateMins = 0;


                oMonthlyAttendanceReports = oMonthlyAttendanceReports.OrderBy(x => x.BusinessUnitID).ThenBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x=>x.EmployeeCode).ToList();
                while (oMonthlyAttendanceReports.Count > 0)
                {
                    var oResults = oMonthlyAttendanceReports.Where(x => x.BusinessUnitID == oMonthlyAttendanceReports[0].BusinessUnitID && x.LocationName == oMonthlyAttendanceReports[0].LocationName && x.DepartmentName == oMonthlyAttendanceReports[0].DepartmentName).ToList();
                    List<BusinessUnit> oTempBusinessUnits = new List<BusinessUnit>();
                    BusinessUnit oBusinessUnit = new BusinessUnit();
                    oTempBusinessUnits = oBusinessUnits.Where(x => x.BusinessUnitID == oMonthlyAttendanceReports[0].BusinessUnitID).ToList();
                    oBusinessUnit = oTempBusinessUnits.Count > 0 ? oTempBusinessUnits[0] : new BusinessUnit();

                    List<AttendanceDaily> oAtts = new List<AttendanceDaily>();
                    oAtts = _oAttendanceDailys.Where(x => oResults.Select(p => p.EmployeeID).Contains(x.EmployeeID)).ToList();

                    cell = sheet.Cells[rowIndex, 1];
                    cell.Value = "Unit Name: " + oResults.FirstOrDefault().LocationName + " , Department Name: " + oResults.FirstOrDefault().DepartmentName;
                    cell.Style.Font.Bold = true; cell.Style.Font.Size = 12;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    this.DataManipulationSummaryF4XL(ref  sheet, ref  cell, ref fill, ref border, ref rowIndex, ref colIndex, nMaxColumn, oResults, oMonthlyAttendance_Leaves, oDistinctLeaves, oAtts, _sStartDate, _sEndDate);

                    oMonthlyAttendanceReports.RemoveAll(x => x.BusinessUnitID == oResults[0].BusinessUnitID && x.LocationName == oResults[0].LocationName && x.DepartmentName == oResults[0].DepartmentName);
                }


                //oMonthlyAttendanceReports = oMonthlyAttendanceReports.OrderBy(x => x.BusinessUnitID).ThenBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ToList();

                //while (oMonthlyAttendanceReports.Count > 0)
                //{
                //    var oResults = oMonthlyAttendanceReports.Where(x => x.BusinessUnitID == oMonthlyAttendanceReports[0].BusinessUnitID && x.LocationName == oMonthlyAttendanceReports[0].LocationName && x.DepartmentName == oMonthlyAttendanceReports[0].DepartmentName).ToList();
                //    var oAtts = _oAttendanceDailys.Where(x => oResults.Select(p => p.EmployeeID).Contains(x.EmployeeID)).ToList();

                //    cell = sheet.Cells[rowIndex, 1, rowIndex, 4];
                //    cell.Value = "Unit Name: " + oResults.FirstOrDefault().LocationName + " , Department Name: " + oResults.FirstOrDefault().DepartmentName;
                //    cell.Style.Font.Bold = true; cell.Style.Font.Size = 12;
                //    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                //    rowIndex++;

                //    this.DataManipulationSummaryF4XL(ref rowIndex, ref sheet, ref cell, ref border, oResults, oAtts, oMonthlyAttendance_Leaves, oDistinctLeaves, _sStartDate, _sEndDate);

                //    rowIndex++;
                //    oMonthlyAttendanceReports.RemoveAll(x => x.BusinessUnitID == oResults[0].BusinessUnitID && x.LocationName == oResults[0].LocationName && x.DepartmentName == oResults[0].DepartmentName);
                //}

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=AttendanceSummary.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        public void DataManipulationSummaryF4XL(ref ExcelWorksheet sheet, ref ExcelRange cell, ref ExcelFill fill, ref OfficeOpenXml.Style.Border border, ref int rowIndex, ref int colIndex, int nMaxColumn, List<MonthlyAttendanceReport> oMonthlyAttendanceReports, List<MonthlyAttendance_Leave> oMonthlyAttendance_Leaves, List<MonthlyAttendance_Leave> oDistinctLeaves, List<AttendanceDaily> oAttendanceDailys, DateTime _sStartDate, DateTime _sEndDate)
        {
            int nOTM = 0;
            int nDayoffs = 0;
            int nPresentDays = 0;
            int nHolidays = 0;
            int nAbsents = 0;
            int nLeaveDays = 0;
            int nEarlyOutDays = 0;
            int nEarlyOutMins = 0;
            int nLateDays = 0;
            int nLateMins = 0;
            int nCount = 0;
            DateTime dStartDate = DateTime.Now;

            int nSL = 0;
            foreach (MonthlyAttendanceReport oItem in oMonthlyAttendanceReports)
            {
                nCount++;
                colIndex = 1;
                nOTM = 0;



                //nPresentDays = oAttendanceDailys.Where(x => x.EmployeeID == oItem.EmployeeID).FirstOrDefault().;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = nCount; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //--
                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = (_sEndDate - _sStartDate).TotalDays + 1; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Present day
                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.PresentDay; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.DayOFF; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.HoliDay; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.AbsentDay; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                foreach (MonthlyAttendance_Leave oDistinctLeave in oDistinctLeaves)
                {
                    List<MonthlyAttendance_Leave> oTempMonthlyAtts = new List<MonthlyAttendance_Leave>();
                    oTempMonthlyAtts = oMonthlyAttendance_Leaves.Where(x => x.EmployeeID == oItem.EmployeeID && x.LeaveID == oDistinctLeave.LeaveID).ToList();
                    int nEnjoyed = 0;
                    nEnjoyed = oTempMonthlyAtts.Count > 0 ? oTempMonthlyAtts[0].Enjoyed : 0;
                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Value = nEnjoyed; cell.Style.Font.Bold = false;

                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.Leave; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.EarlyOutDays; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.EarlyOutMins; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.LateDays; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.LateMins; cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = (oItem.PresentDay + oItem.HoliDay + oItem.DayOFF + oItem.Leave); cell.Style.Font.Bold = true;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                List<AttendanceDaily> oAtts = new List<AttendanceDaily>();
                oAtts = oAttendanceDailys.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();
                string sRemarkWithCount = "";

                dStartDate = _sStartDate;
                while (dStartDate <= _sEndDate)
                {
                    bool bFlag = false;

                    foreach (AttendanceDaily oADItem in oAtts)
                    {
                        if (dStartDate == oADItem.AttendanceDate)
                        {
                            bFlag = true;
                            if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsLeave == false && oADItem.IsNoWork == false && oADItem.IsHoliday == false)
                            {

                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = oADItem.InTimeInString + "-" + oADItem.OutTimeInString; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            }
                            else if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsLeave == false && oADItem.IsNoWork == true && oADItem.IsHoliday == false)
                            {
                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = "NW(" + oADItem.InTimeInString + "-" + oADItem.OutTimeInString + ")"; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                            }
                            else if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == true && oADItem.IsLeave == false && oADItem.IsNoWork == false && oADItem.IsHoliday == false)
                            {
                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = "DO(" + oADItem.InTimeInString + "-" + oADItem.OutTimeInString + ")"; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            }
                            else if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsLeave == false && oADItem.IsNoWork == false && oADItem.IsHoliday == true)
                            {
                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = "HD(" + oADItem.InTimeInString + "-" + oADItem.OutTimeInString + ")"; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                            }
                            else if (oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-" && oADItem.IsOSD == false && oADItem.IsDayOff == false && oADItem.IsLeave == false && oADItem.IsNoWork == false && oADItem.IsHoliday == false)
                            {
                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = "A"; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            }
                            else if (oADItem.IsDayOff == true && oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-")
                            {
                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = "DO"; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            }
                            else if (oADItem.IsLeave == true && oADItem.LeaveType == EnumLeaveType.Full)
                            {
                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = "L"; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = ""; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            }
                            else if (oADItem.IsLeave == true && oADItem.LeaveType == EnumLeaveType.Short || oADItem.LeaveType == EnumLeaveType.Half)
                            {
                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = "S/H L"; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = ""; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            }
                            else if (oADItem.IsHoliday == true)
                            {
                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = "HD"; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            }
                            else
                            {
                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = "N/A"; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                cell.Style.Font.Bold = true; cell.Value = oADItem.OTHrSt; cell.Style.Font.Bold = false;

                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                            }
                            nOTM += oADItem.OverTimeInMinute;
                            break;
                        }

                    }
                    if (!bFlag)
                    {
                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = true; cell.Value = "N/A"; cell.Style.Font.Bold = false;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        cell.Style.Font.Bold = true; cell.Value = ""; cell.Style.Font.Bold = false;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }
                    dStartDate = dStartDate.AddDays(1);
                }
                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = ((nOTM / 60).ToString()).Split('.')[0] + ":" + (nOTM % 60); cell.Style.Font.Bold = false;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oItem.RemarkWithCount; cell.Style.Font.Bold = false;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
            }
        }

                #endregion


        public void ExcelManPower(string sParam, double nts)
        {



            //string sBusinessUnitIds = sParam.Split('~')[0];

            //List<Employee> oEmployees = new List<Employee>();
            //oEmployees = Employee.GetsManPower(sBusinessUnitIds, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            DateTime paramDate;
            string Date = sParam.Split('~')[0];
            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];
            int ReportLayout =Convert.ToInt16(sParam.Split('~')[7]);
            string SqlQuery = "";
                #region BusinessUnit
                if (sBusinessUnitIds != "")
                {
                    Global.TagSQL(ref SqlQuery);
                    SqlQuery = SqlQuery + " DRP.BusinessUnitID IN(" + sBusinessUnitIds + ")";
                }
                #endregion
                #region Location
                if (sLocationID != "")
                {
                    Global.TagSQL(ref SqlQuery);
                    SqlQuery = SqlQuery + " DRP.LocationID IN(" + sLocationID + ")";
                }
                #endregion
                #region Designation
                if (sDesignationIDs != "")
                {
                    Global.TagSQL(ref SqlQuery);
                    SqlQuery = SqlQuery + " DRD.DesignationID IN(" + sDesignationIDs + ")";
                }
                #endregion
                #region Department
                if (sDepartmentIDs != "")
                {
                    Global.TagSQL(ref SqlQuery);
                    SqlQuery = SqlQuery + " DRP.DepartmentID IN(" + sDepartmentIDs + ")";
                }
                #endregion
                //string SqlQuery, DateTime AttendanceDate, int ReportLayout
            //List<AttendanceMonitoring> oAttendanceMonitorings = new List<AttendanceMonitoring>();
            //oAttendanceMonitorings = AttendanceMonitoring.Gets(sBusinessUnitIds, sDepartmentIDs, sDepartmentIDs, sDesignationIDs, ShiftIds, "", paramDate, "", ((User)(Session[SessionInfo.CurrentUser])).UserID);
                Company oCompany = new Company();
                try
                {
                    DataSet oDataSet = AttendanceMonitoring.GetsManPower(SqlQuery, paramDate, ReportLayout, (int)Session[SessionInfo.currentUserID]);
                    oCompany = oCompany.Get(1, (int)Session[SessionInfo.currentUserID]);
                    if(ReportLayout==8)///8 For Designation Wise
                    {
                        this.DesignationWiseManPowerXL(oDataSet, oCompany, paramDate);
                    }
                    if (ReportLayout == 6)///6 For Department Wise
                    {
                        this.DepartmentWiseManPowerXL(oDataSet, oCompany, paramDate);
                    }
                    if (ReportLayout == 7)/// For Location Wise
                    {
                        this.LocationWiseManPowerXL(oDataSet, oCompany, paramDate);
                    }
                }

                catch (Exception ex)
                {
                    #region Errormessage
                    ExcelRange cell;
                    using (var excelPackage = new ExcelPackage())
                    {
                        excelPackage.Workbook.Properties.Author = "ESimSol";
                        excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                        var sheet = excelPackage.Workbook.Worksheets.Add("ManPower Report");
                        sheet.Name = "ManPower Report";

                        cell = sheet.Cells[2, 2, 2, 5]; cell.Merge = true; cell.Value = ex.Message; cell.Style.Font.Bold = true;
                        cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        Response.ClearContent();
                        Response.BinaryWrite(excelPackage.GetAsByteArray());
                        Response.AddHeader("content-disposition", "attachment; filename=ManPower_Report.xlsx");
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.Flush();
                        Response.End();
                    }
                    #endregion
                }

            #region PreviousCode
            //var AttendanceMonitoringsBU = oAttendanceMonitorings.GroupBy(x => new { x.BUName }, (key, grp) => new
            //{
            //    BUName = key.BUName,
            //    LocationName = grp.First().LocationName,
            //    ExistsPerson = grp.Sum(x => x.Exists),
            //    TotalPresent = grp.Sum(x => x.Present),
            //    TotalAbsent = grp.Sum(x => x.Absent),
            //    Percent = (grp.Sum(x => Convert.ToDouble(x.Absent)) * 100) / grp.Sum(x => Convert.ToDouble(x.Exists)),
            //    AttListBU = grp
            //}).OrderBy(x => x.BUName).ToList();

            //var AttendanceMonitorings = oAttendanceMonitorings.GroupBy(x => new { x.LocationName }, (key, grp) => new
            //{
            //    LocationName = key.LocationName,
            //    DesignationID = grp.First().DesignationID,
            //    DepartmentName = grp.First().DepartmentName,
            //    ExistsPerson = grp.Sum(x => x.Exists),
            //    TotalPresent = grp.Sum(x => x.Present),
            //    TotalAbsent = grp.Sum(x => x.Absent),
            //    Percent = (grp.Sum(x => Convert.ToDouble(x.Absent)) * 100) / grp.Sum(x => Convert.ToDouble(x.Exists)),
            //    AttList = grp
            //}).OrderBy(x => x.LocationName).ToList();


            //var AttendanceMonitoringsForDeptWise = oAttendanceMonitorings.GroupBy(x => new { x.DepartmentID }, (key, grp) => new AttendanceMonitoring
            //{
            //    LocationName = grp.First().LocationName,
            //    DepartmentID = key.DepartmentID,
            //    DepartmentName = grp.First().DepartmentName,
            //    Exists = grp.Sum(x => x.Exists),
            //    Present = grp.Sum(x => x.Present),
            //    Absent = grp.Sum(x => x.Absent),
            //    Leave = grp.Sum(x => x.Leave),
            //    HoliDay = grp.Sum(x => x.HoliDay) + grp.Sum(x => x.DayOff),
            //    Percent = (grp.Sum(x => Convert.ToDouble(x.Absent)) * 100) / grp.Sum(x => Convert.ToDouble(x.Exists))

            //}).OrderBy(x => x.DepartmentName).ToList();



            //var AttendanceMonitoringsForDesignationWise = oAttendanceMonitorings.GroupBy(x => new { x.LocationName }, (key, grp) => new 
            //{
            //    LocationName = key.LocationName,
            //    DesignationName = grp.First().DesignationName,
            //    Exists = grp.Sum(x => x.Exists),
            //    Present = grp.Sum(x => x.Present),
            //    Absent = grp.Sum(x => x.Absent),
            //    Leave = grp.Sum(x => x.Leave),
            //    HoliDay = grp.Sum(x => x.HoliDay) + grp.Sum(x => x.DayOff),
            //    Percent = (grp.Sum(x => Convert.ToDouble(x.Absent)) * 100) / grp.Sum(x => Convert.ToDouble(x.Exists)),
            //    AttListDesg = grp
            //}).OrderBy(x => x.LocationName).ToList();


            //List<string> oDeptName = new List<string>();
            //List<int> nTotal = new List<int>();
            //List<int> nPresent = new List<int>();
            //List<int> nAbsent = new List<int>();
            //int counter = 0;




            //List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            //string BUIDs = string.Join(",", oAttendanceMonitorings.Select(p => p.BUID).Distinct().ToList());
            //if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

            ////var Emps = oEmployees.GroupBy(x => new { x.LocationName }, (key, grp) => new
            ////{
            ////    LocationName = grp.First().LocationName,
            ////    DesignationID = grp.First().DesignationID,
            ////    DepartmentName = grp.First().DepartmentName,
            ////    Male = grp.Sum(x => x.Male),
            ////    Female = grp.Sum(x => x.Female),
            ////    EmpList = grp
            ////}).OrderBy(x => x.LocationName).ToList();


            ////var EmpsDeptWise = Emps.GroupBy(x => new { x.DepartmentName }, (key, grp) => new Employee
            ////{
            ////    LocationName = grp.First().LocationName,
            ////    DepartmentName = grp.First().DepartmentName,
            ////    Male = grp.Sum(x => x.Male),
            ////    Female = grp.Sum(x => x.Female),
            ////    TotalManPower = grp.Sum(x => x.Male) + grp.Sum(x => x.Female)

            ////}).OrderBy(x => x.DepartmentName).ToList();



            //int nMaxColumn = 0;
            //int colIndex = 1;
            //int rowIndex = 2;
            //ExcelRange cell;
            //ExcelFill fill;
            //OfficeOpenXml.Style.Border border;


            //using (var excelPackage = new ExcelPackage())
            //{
            //    excelPackage.Workbook.Properties.Author = "ESimSol";
            //    excelPackage.Workbook.Properties.Title = "Export from ESimSol";
            //    var sheet = excelPackage.Workbook.Worksheets.Add("Manpower Summary");
            //    sheet.Name = "Attendance Summary";

            //    int n = 1;
            //    sheet.Column(n++).Width = 6; //SL
            //    sheet.Column(n++).Width = 30; //DEPT NAME
            //    sheet.Column(n++).Width = 12; //MALE
            //    sheet.Column(n++).Width = 12; //FEMALE
            //    sheet.Column(n++).Width = 12; //MAN POWER
            //    sheet.Column(n++).Width = 12; //present
            //    sheet.Column(n++).Width = 12; //absent
            //    sheet.Column(n++).Width = 12; //leave
            //    sheet.Column(n++).Width = 12; //holiday/dayoff
            //    sheet.Column(n++).Width = 12; //Percent
            //    nMaxColumn = n;

            //    Company oCompany = new Company();
            //    oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            //    oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);


            //    cell = sheet.Cells[rowIndex, 3]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //    cell.Style.Font.Bold = true; cell.Value = oBusinessUnits.Count == 1 ? oBusinessUnits[0].Name : oCompanys[0].Name; cell.Style.Font.Bold = true;
            //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
            //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //    rowIndex = rowIndex + 1;

            //    int nSL = 0;

            //    rowIndex += 1;
            //    cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn-1]; cell.Value = "Department Wise Report"; cell.Style.Font.Bold = true; cell.Merge = true;
            //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.LightGray); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //    rowIndex++;
            //    int nTotalMale = 0;
            //    int nTotalFemale = 0;
            //    int nTotalManPower = 0;
            //    int nTotalPresent = 0;
            //    int nTotalAbsent = 0;
            //    int nTotalLeave = 0;
            //    int nTotalDayOff = 0;

            //    foreach (var oItem in AttendanceMonitorings)
            //    {
            //        nTotalMale = 0;
            //        nTotalFemale = 0;
            //        nTotalManPower = 0;
            //        nTotalPresent = 0;
            //        nTotalAbsent = 0;
            //        nTotalLeave = 0;
            //        nTotalDayOff = 0;
            //        colIndex = 1;

            //        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 1]; cell.Value = "Location: " + oItem.LocationName; cell.Style.Font.Bold = true; cell.Merge = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        rowIndex = rowIndex + 1;
            //        colIndex = 1;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Department Name"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Male"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Female"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Man Power"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Present"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Leave"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Holiday/Dayoff"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Percent"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        rowIndex = rowIndex + 1;
            //        colIndex = 1;

            //        var List = oItem.AttList.GroupBy(x => new { x.DepartmentName }, (key, grp) => new AttendanceMonitoring
            //        {
            //            DepartmentID = grp.First().DepartmentID,
            //            DepartmentName = grp.First().DepartmentName,

            //            DesignationName = grp.First().DesignationName,

            //            MaleExistPerson = grp.Sum(x => x.MaleExistPerson),
            //            FemaleExistPerson = grp.Sum(x => x.FemaleExistPerson),

            //            MalePresent = grp.Sum(x => x.MalePresent),
            //            FemalePresent = grp.Sum(x => x.FemalePresent),

            //            MaleAbsent = grp.Sum(x => x.MaleAbsent),
            //            FemaleAbsent = grp.Sum(x => x.FemaleAbsent),

            //            MaleLeave = grp.Sum(x => x.MaleLeave),
            //            FemaleLeave = grp.Sum(x => x.FemaleLeave),

            //            MaleDayOff = grp.Sum(x => x.MaleDayOff),
            //            FemaleDayOff = grp.Sum(x => x.FemaleDayOff),
            //        }).OrderBy(x => x.DepartmentName).ToList();
            //        foreach (var data in List)
            //        {


            //            colIndex = 1;

            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ++nSL;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.DepartmentName;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalMale += data.MaleExistPerson;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleExistPerson;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalFemale += data.FemaleExistPerson;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.FemaleExistPerson;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalManPower += data.MaleExistPerson + data.FemaleExistPerson; ;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleExistPerson + data.FemaleExistPerson;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalPresent += data.MalePresent + data.FemalePresent;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MalePresent + data.FemalePresent;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalAbsent += data.MaleAbsent + data.FemaleAbsent;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleAbsent + data.FemaleAbsent;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalLeave += data.MaleLeave + data.FemaleLeave;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleLeave + data.FemaleLeave;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalDayOff += data.MaleDayOff + data.FemaleDayOff;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleDayOff + data.FemaleDayOff;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble((data.MaleAbsent + data.FemaleAbsent) * 100) / Convert.ToDouble((data.MaleExistPerson + data.FemaleExistPerson)), 2) + "%";
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        
                        
            //            rowIndex++;

            //            nTotal.Add(data.MaleExistPerson + data.FemaleExistPerson);
            //            nPresent.Add(data.MalePresent + data.FemalePresent);
            //            nAbsent.Add(data.MaleAbsent + data.FemaleAbsent);
            //        }
            //        nSL = 0;
            //        colIndex = 2;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Grand Total"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalMale; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalFemale; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalManPower; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalPresent; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalAbsent; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalLeave; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalDayOff; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.Percent, 2) + "%"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    
            //        rowIndex += 2;
            //    }

            //    rowIndex += 3;

            //    rowIndex += 1;
            //    colIndex = 1;
            //    cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn-1]; cell.Value = "Unit Wise Manpower Report"; cell.Style.Font.Bold = true; cell.Merge = true;
            //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.LightGray); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                

            //    nTotalMale = 0;
            //    nTotalFemale = 0;
            //    nTotalManPower = 0;
            //    nTotalPresent = 0;
            //    nTotalAbsent = 0;
            //    nTotalLeave = 0;
            //    nTotalDayOff = 0;

            //    foreach (var oItem in AttendanceMonitoringsBU)
            //    {
            //        nTotalMale = 0;
            //        nTotalFemale = 0;
            //        nTotalManPower = 0;
            //        nTotalPresent = 0;
            //        nTotalAbsent = 0;
            //        nTotalLeave = 0;
            //        nTotalDayOff = 0;
            //        rowIndex = rowIndex + 1;
            //        colIndex = 1;

            //        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 1]; cell.Value = "Location: " + oItem.BUName; cell.Style.Font.Bold = true; cell.Merge = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        rowIndex = rowIndex + 1;
            //        colIndex = 1;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Location Name"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Male"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Female"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Man Power"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Present"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Leave"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Holiday/Dayoff"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Percent"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        rowIndex = rowIndex + 1;
            //        colIndex = 1;

            //        var List = oItem.AttListBU.GroupBy(x => new { x.LocationName }, (key, grp) => new AttendanceMonitoring
            //        {
            //            BUName = grp.First().BUName,
            //            LocationName = key.LocationName,


            //            MaleExistPerson = grp.Sum(x => x.MaleExistPerson),
            //            FemaleExistPerson = grp.Sum(x => x.FemaleExistPerson),

            //            MalePresent = grp.Sum(x => x.MalePresent),
            //            FemalePresent = grp.Sum(x => x.FemalePresent),

            //            MaleAbsent = grp.Sum(x => x.MaleAbsent),
            //            FemaleAbsent = grp.Sum(x => x.FemaleAbsent),

            //            MaleLeave = grp.Sum(x => x.MaleLeave),
            //            FemaleLeave = grp.Sum(x => x.FemaleLeave),

            //            MaleDayOff = grp.Sum(x => x.MaleDayOff),
            //            FemaleDayOff = grp.Sum(x => x.FemaleDayOff),
            //        }).OrderBy(x => x.LocationName).ToList();
            //        foreach (var data in List)
            //        {


            //            colIndex = 1;

            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ++nSL;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.LocationName;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalMale += data.MaleExistPerson;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleExistPerson;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalFemale += data.FemaleExistPerson;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.FemaleExistPerson;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalManPower += data.MaleExistPerson + data.FemaleExistPerson; ;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleExistPerson + data.FemaleExistPerson;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalPresent += data.MalePresent + data.FemalePresent;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MalePresent + data.FemalePresent;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalAbsent += data.MaleAbsent + data.FemaleAbsent;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleAbsent + data.FemaleAbsent;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalLeave += data.MaleLeave + data.FemaleLeave;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleLeave + data.FemaleLeave;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalDayOff += data.MaleDayOff + data.FemaleDayOff;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleDayOff + data.FemaleDayOff;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble((data.MaleAbsent + data.FemaleAbsent) * 100) / Convert.ToDouble((data.MaleExistPerson + data.FemaleExistPerson)), 2) + "%";
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



            //            rowIndex++;

            //            nTotal.Add(data.MaleExistPerson + data.FemaleExistPerson);
            //            nPresent.Add(data.MalePresent + data.FemalePresent);
            //            nAbsent.Add(data.MaleAbsent + data.FemaleAbsent);
            //        }
            //        nSL = 0;
            //        colIndex = 2;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Grand Total"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalMale; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalFemale; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalManPower; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalPresent; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalAbsent; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalLeave; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalDayOff; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.Percent, 2) + "%"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        rowIndex += 1;
            //    }


            //    rowIndex += 3;

            //    rowIndex += 1;
            //    colIndex = 1;
            //    cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn-1]; cell.Value = "Designation Wise Manpower Report"; cell.Style.Font.Bold = true; cell.Merge = true;
            //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.LightGray); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                
            //    nTotalMale = 0;
            //    nTotalFemale = 0;
            //    nTotalManPower = 0;
            //    nTotalPresent = 0;
            //    nTotalAbsent = 0;
            //    nTotalLeave = 0;
            //    nTotalDayOff = 0;

            //    foreach (var oItem in AttendanceMonitoringsForDesignationWise)
            //    {
            //        nTotalMale = 0;
            //        nTotalFemale = 0;
            //        nTotalManPower = 0;
            //        rowIndex = rowIndex + 1;
            //        colIndex = 1;

            //        cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 1]; cell.Value = "Location: " + oItem.LocationName; cell.Style.Font.Bold = true; cell.Merge = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        rowIndex = rowIndex + 1;
            //        colIndex = 1;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Designation Name"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Male"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Female"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Man Power"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Present"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Leave"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Holiday/Dayoff"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Percent"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        rowIndex = rowIndex + 1;
            //        colIndex = 1;
            //        var List = oItem.AttListDesg.GroupBy(x => new { x.DesignationName }, (key, grp) => new AttendanceMonitoring
            //        {
            //            LocationName = grp.First().LocationName,
            //            DesignationName = key.DesignationName,


            //            MaleExistPerson = grp.Sum(x => x.MaleExistPerson),
            //            FemaleExistPerson = grp.Sum(x => x.FemaleExistPerson),

            //            MalePresent = grp.Sum(x => x.MalePresent),
            //            FemalePresent = grp.Sum(x => x.FemalePresent),

            //            MaleAbsent = grp.Sum(x => x.MaleAbsent),
            //            FemaleAbsent = grp.Sum(x => x.FemaleAbsent),

            //            MaleLeave = grp.Sum(x => x.MaleLeave),
            //            FemaleLeave = grp.Sum(x => x.FemaleLeave),

            //            MaleDayOff = grp.Sum(x => x.MaleDayOff),
            //            FemaleDayOff = grp.Sum(x => x.FemaleDayOff),
            //        }).OrderBy(x => x.DesignationName).ToList();
            //        foreach (var data in List)
            //        {


            //            colIndex = 1;

            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ++nSL;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.DesignationName;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalMale += data.MaleExistPerson;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleExistPerson;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalFemale += data.FemaleExistPerson;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.FemaleExistPerson;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalManPower += data.MaleExistPerson + data.FemaleExistPerson; ;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleExistPerson + data.FemaleExistPerson;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalPresent += data.MalePresent + data.FemalePresent;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MalePresent + data.FemalePresent;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalAbsent += data.MaleAbsent + data.FemaleAbsent;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleAbsent + data.FemaleAbsent;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalLeave += data.MaleLeave + data.FemaleLeave;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleLeave + data.FemaleLeave;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            nTotalDayOff += data.MaleDayOff + data.FemaleDayOff;
            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.MaleDayOff + data.FemaleDayOff;
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble((data.MaleAbsent + data.FemaleAbsent) * 100) / Convert.ToDouble((data.MaleExistPerson + data.FemaleExistPerson)), 2) + "%";
            //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



            //            rowIndex++;

            //            nTotal.Add(data.MaleExistPerson + data.FemaleExistPerson);
            //            nPresent.Add(data.MalePresent + data.FemalePresent);
            //            nAbsent.Add(data.MaleAbsent + data.FemaleAbsent);
            //        }
            //        nSL = 0;
            //        colIndex = 2;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Grand Total"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalMale; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalFemale; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalManPower; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalPresent; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalAbsent; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalLeave; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalDayOff; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.Percent, 2) + "%"; cell.Style.Font.Bold = true;
            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //        rowIndex += 1;
            //    }






            //    Response.ClearContent();
            //    Response.BinaryWrite(excelPackage.GetAsByteArray());
            //    Response.AddHeader("content-disposition", "attachment; filename=ManPower summary.xlsx");
            //    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            //    Response.Flush();
            //    Response.End();
            //}
            #endregion

        }


        private void DesignationWiseManPowerXL(DataSet oDataSet, Company oCompany, DateTime paramDate)
        {
          
            DataTable oManPowerSummarys = oDataSet.Tables[0];

            #region Report Body
            int rowIndex = 2;
            int nMaxColumn = 0;
            int colIndex = 0;
            ExcelRange cell;
            Border border;
            ExcelFill fill;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("ManPower Report(Designation Wise)");
                sheet.Name = "ManPower Report(Designation Wise)";
                Dictionary<string, string> aLocationWiseSubTotals = new Dictionary<string, string>();
                Dictionary<string, string> aBUWiseSubTotals = new Dictionary<string, string>();
                Dictionary<string, string> aGrandTotals = new Dictionary<string, string>();
                int nPresentColIndex = 0, nTManPowerColIndex = 0;
                #region Declare Column
                colIndex = 0;
                sheet.View.FreezePanes(6, 1);
                sheet.Column(++colIndex).Width = 8;  //SL
                sheet.Column(++colIndex).Width = 28; //Department
                sheet.Column(++colIndex).Width = 15; //Designation
                sheet.Column(++colIndex).Width = 15; //Male
                sheet.Column(++colIndex).Width = 15;//Female
                sheet.Column(++colIndex).Width = 15;//ManPower
                sheet.Column(++colIndex).Width = 15;//Present
                sheet.Column(++colIndex).Width = 15;//Absent
                sheet.Column(++colIndex).Width = 15;//Leave
                sheet.Column(++colIndex).Width = 15;//HolidayDayoff
                sheet.Column(++colIndex).Width = 15;//Percent
                nMaxColumn = colIndex;
                #endregion

                #region Report Header
                cell = sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn]; cell.Merge = true; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn]; cell.Merge = true; cell.Style.Font.Bold = true; cell.Style.Font.Size = 15;
                cell.Value = "Daily Attendance Report Summary"; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex++;


                cell = sheet.Cells[rowIndex, nMaxColumn]; cell.Style.Font.Bold = false;
                cell.Value = paramDate.ToString("dd MMM yyyy"); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                rowIndex++;
                #endregion

                #region Column Header
                colIndex = 0;
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "SL"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Department"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Designation"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Man Power"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nTManPowerColIndex = colIndex;
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Present"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nPresentColIndex = colIndex;
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Absent"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Leave"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Holiday/Dayoff"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Present Percent(%)"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;


                #endregion

                #region Report Body
                int nCount = 0;
                string sStartCell = "", sEndCell = "";
                string sFormula = "";
                int nStartRow = 0, nEndRow = 0, nStartCol = 0, nTotalIndex = 0, nTempStartRow = 0, nTempEndRow = 0;
                string sDataColumn = "", sNumberFormat = ""; double nOrderQty = 0;
                nStartRow = rowIndex;
                string sBUName = "", sLocationName = "",sDepartmentName="";
                int nSubCount = 0;
                foreach (DataRow oManPowerSummary in oManPowerSummarys.Rows)
                {
                    nSubCount++;
                   
                    if (sBUName != Convert.ToString(oManPowerSummary["BUName"]) || sLocationName != Convert.ToString(oManPowerSummary["LocationName"]) || sDepartmentName != Convert.ToString(oManPowerSummary["DepartmentName"]))
                    {
                        if (nSubCount>1)
                        {

                            
                                #region Department Wise SubTotal
                                colIndex = 0;
                                //aGrandTotals.Add((aGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                                aLocationWiseSubTotals.Add((aLocationWiseSubTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                                aBUWiseSubTotals.Add((aBUWiseSubTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                                cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 2]; cell.Merge = true; cell.Value = "Department Wise Sub Total:"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                                sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                                rowIndex++;
                                #endregion


                             if (sLocationName != Convert.ToString(oManPowerSummary["LocationName"]) || sBUName != Convert.ToString(oManPowerSummary["BUName"]))
                            {

                                #region Location Wise Sub Total

                                colIndex = 0;
                                cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 2]; cell.Merge = true; cell.Value = "Location Wise Sub Total:"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                #region Formula
                                sFormula = "";
                                nTotalIndex = colIndex;
                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                                #region Formula
                                sFormula = "";

                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                                #region Formula
                                sFormula = "";

                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                                sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")" ; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = false;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                aLocationWiseSubTotals = new Dictionary<string, string>();
                                rowIndex++;
                                #endregion
                            }
                            if (sBUName != Convert.ToString(oManPowerSummary["BUName"]))
                            {

                                #region BU Wise Sub Total
                                colIndex = 0;
                                aGrandTotals.Add((aGrandTotals.Count + 1).ToString(), (rowIndex.ToString() + "," + (rowIndex).ToString()));
                                
                                cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 2]; cell.Merge = true; cell.Value = "BU Wise Sub Total:"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                #region Formula
                                sFormula = "";
                                nTotalIndex = colIndex;
                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                 
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                aBUWiseSubTotals = new Dictionary<string, string>();

                                sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")" ; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = false;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                rowIndex++;
                                #endregion
                            }
                           
                        }
                       
                        nStartRow = rowIndex+1;
                        colIndex = 0;
                        cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex+=2]; cell.Merge = true; cell.Value = "BU:" + oManPowerSummary["BUName"]+", Location:"+oManPowerSummary["LocationName"];  cell.Style.Font.Bold = true;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = border.Left.Style = ExcelBorderStyle.Thin;

                    

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        sBUName = Convert.ToString(oManPowerSummary["BUName"]);
                        sLocationName = Convert.ToString(oManPowerSummary["LocationName"]);
                        sDepartmentName = Convert.ToString(oManPowerSummary["DepartmentName"]);

                        rowIndex++;
                    }
                    colIndex = 0;
                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ++nCount; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToString(oManPowerSummary["DepartmentName"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.WrapText = true;


                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToString(oManPowerSummary["DesignationName"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.WrapText = true;

                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalMale"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";


                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalFemale"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";


                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalManPower"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";

                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalPresent"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";

                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalAbsent"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";

                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalLeave"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)"; 


                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalHolidayDayoff"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)"; 

                    sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                    sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                    nEndRow = rowIndex;
                    rowIndex++;

                }
                #endregion

                #region Department Wise SubTotal
                colIndex = 0;
                //aGrandTotals.Add((aGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                aLocationWiseSubTotals.Add((aLocationWiseSubTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                aBUWiseSubTotals.Add((aBUWiseSubTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 2]; cell.Merge = true; cell.Value = "Department Wise Sub Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                #endregion
                #region Location Wise Sub Total

                colIndex = 0;
                cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 2]; cell.Merge = true; cell.Value = "Location Wise Sub Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                #region Formula
                sFormula = "";
                nTotalIndex = colIndex;
                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                aLocationWiseSubTotals = new Dictionary<string, string>();
                rowIndex++;
                #endregion
                #region BU Wise Sub Total
                colIndex = 0;

                cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 2]; cell.Merge = true; cell.Value = "BU Wise Sub Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                aGrandTotals.Add((aGrandTotals.Count + 1).ToString(), (rowIndex.ToString() + "," + (rowIndex).ToString()));
                #region Formula
                sFormula = "";
                nTotalIndex = colIndex;
                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                aBUWiseSubTotals = new Dictionary<string, string>();

                sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                rowIndex++;
                #endregion
                #region Grand Total
            
                colIndex = 0;
                cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 2]; cell.Merge = true; cell.Value = "Grand Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";
                nTotalIndex = colIndex;
                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                rowIndex++;
             

                #endregion

                #region Designation Wise 2
                #region Summary Report
                Dictionary<string, string> abGrandTotals = new Dictionary<string, string>();
                aBUWiseSubTotals = new Dictionary<string, string>();
                aLocationWiseSubTotals = new Dictionary<string, string>();
                var sheet2 = excelPackage.Workbook.Worksheets.Add("Designation Wise 2");
                sheet2.Name = "Designation Wise 2";
                colIndex = 0;
                rowIndex = 2;
                int Shhet2MaxCol = 0;
                sheet2.View.FreezePanes(6, 1);
                sheet2.Column(++colIndex).Width = 23; //Department
                sheet2.Column(++colIndex).Width = 20; //Designation
                sheet2.Column(++colIndex).Width = 10; //Req ManPower
                sheet2.Column(++colIndex).Width = 15; //Total Strength
                sheet2.Column(++colIndex).Width = 15; //Present
                sheet2.Column(++colIndex).Width = 15; //Bartack
                sheet2.Column(++colIndex).Width = 15; //New Recruied
                sheet2.Column(++colIndex).Width = 10; //Total Present
                sheet2.Column(++colIndex).Width = 15; //Total Absent
                sheet2.Column(++colIndex).Width = 15; //Remark
                Shhet2MaxCol = colIndex;
                #region Report Header
                cell = sheet2.Cells[rowIndex, 2, rowIndex, Shhet2MaxCol]; cell.Merge = true; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex++;

                cell = sheet2.Cells[rowIndex, 2, rowIndex, Shhet2MaxCol]; cell.Merge = true; cell.Style.Font.Bold = true; cell.Style.Font.Size = 15;
                cell.Value = "Daily Attendance Report Summary"; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex++;


                cell = sheet2.Cells[rowIndex, Shhet2MaxCol]; cell.Style.Font.Bold = false;
                cell.Value = paramDate.ToString("dd MMM yyyy"); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                rowIndex++;
                #endregion

                #region Column Header
                colIndex = 0;
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Department"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Designation"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Required Manpower"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Total Strength"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Present"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Bartack"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "New Recruied"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Total Present"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Total Absent"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Remarks"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;


                #endregion

                #region Report Body
                int nNumRowSpan = 0;
                nSubCount = 0;
                sBUName = ""; sLocationName = ""; sDepartmentName = "";
                foreach (DataRow oManPowerSummary in oManPowerSummarys.Rows)
                {
                    nSubCount++;

                    if (sBUName != Convert.ToString(oManPowerSummary["BUName"]) || sLocationName != Convert.ToString(oManPowerSummary["LocationName"]) || sDepartmentName != Convert.ToString(oManPowerSummary["DepartmentName"]))
                    {
                        if (nSubCount > 1)//Skip Print Subtotal for the First time
                        {

                           
                                #region Department Wise SubTotal
                                colIndex = 0;
                              
                                
                                aLocationWiseSubTotals.Add((aLocationWiseSubTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                                aBUWiseSubTotals.Add((aBUWiseSubTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                                cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 1]; cell.Merge = true; cell.Value = "Department Wise Sub Total:"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                            
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value="" ; cell.Style.Font.Bold = false;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                                rowIndex++;
                                #endregion


                                if (sLocationName != Convert.ToString(oManPowerSummary["LocationName"]) || sBUName != Convert.ToString(oManPowerSummary["BUName"]))
                            {

                                #region Location Wise Sub Total

                                colIndex = 0;
                                cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 1]; cell.Merge = true; cell.Value = "Location Wise Sub Total:"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                #region Formula
                                sFormula = "";
                                nTotalIndex = colIndex;
                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                                #region Formula
                                sFormula = "";

                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                                #region Formula
                                sFormula = "";

                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aLocationWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                                aLocationWiseSubTotals = new Dictionary<string, string>();


             
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                                rowIndex++;
                                #endregion
                            }
                            if (sBUName != Convert.ToString(oManPowerSummary["BUName"]))
                            {

                                #region BU Wise Sub Total

                                colIndex = 0;
                                cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 1]; cell.Merge = true; cell.Value = "BU Wise Sub Total:"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                                abGrandTotals.Add((abGrandTotals.Count + 1).ToString(), (rowIndex.ToString() + "," + (rowIndex).ToString()));
                                #region Formula
                                sFormula = "";
                                nTotalIndex = colIndex;
                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                                aBUWiseSubTotals = new Dictionary<string, string>();

                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                                rowIndex++;
                                #endregion
                            }

                        }

                        nStartRow = rowIndex + 1;
                        colIndex = 0;
                        cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex, ++colIndex]; cell.Merge = true; cell.Value = "BU:" + oManPowerSummary["BUName"] + ", Location:" + oManPowerSummary["LocationName"]; cell.Style.Font.Bold = true;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = border.Left.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;


                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        nNumRowSpan = GetRowSpanCount(Convert.ToInt32(oManPowerSummary["DepartmentID"]), Convert.ToInt32(oManPowerSummary["LocationID"]), Convert.ToInt32(oManPowerSummary["BusinessUnitID"]), oManPowerSummarys);
                        sBUName = Convert.ToString(oManPowerSummary["BUName"]);
                        sLocationName = Convert.ToString(oManPowerSummary["LocationName"]);
                       // sDepartmentName = Convert.ToString(oManPowerSummary["DepartmentName"]);
                        rowIndex++;

                    }
                    colIndex = 0;


                    if (sDepartmentName != Convert.ToString(oManPowerSummary["DepartmentName"]))
                    {
                        sDepartmentName = Convert.ToString(oManPowerSummary["DepartmentName"]);
                        nNumRowSpan = nNumRowSpan > 0 ? nNumRowSpan - 1 : 0;
                        cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex + nNumRowSpan, colIndex]; cell.Merge = true; cell.Value = Convert.ToString(oManPowerSummary["DepartmentName"]); cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; border = cell.Style.Border;
                        border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.WrapText = true;
                    }
                    else
                    {
                        colIndex = 1;
                    }
                    //cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToString(oManPowerSummary["DepartmentName"]); cell.Style.Font.Bold = false;
                    //cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; border = cell.Style.Border;
                    //border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Medium;

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToString(oManPowerSummary["DesignationName"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.WrapText = true;

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["RequiredManPower"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalManPower"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalPresent"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["Bartack"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["NewRecruied"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    sStartCell = Global.GetExcelCellName(rowIndex, colIndex - 2);
                    sEndCell = Global.GetExcelCellName(rowIndex, colIndex - 1);

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + sStartCell + "+" + sEndCell + ")"; cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalAbsent"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToString(oManPowerSummary["Remark"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";
                  
                    nEndRow = rowIndex;
                    rowIndex++;
                   
                
                }
                #endregion
                #region Department Wise SubTotal
                colIndex = 0;
               // abGrandTotals.Add((abGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                aLocationWiseSubTotals.Add((aLocationWiseSubTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                aBUWiseSubTotals.Add((aBUWiseSubTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 1]; cell.Merge = true; cell.Value = "Department Wise Sub Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "";  cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                #endregion
                #region Location Wise Sub Total

                colIndex = 0;
                cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 1]; cell.Merge = true; cell.Value = "Location Wise Sub Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                #region Formula
                sFormula = "";
                nTotalIndex = colIndex;
                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aLocationWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aLocationWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aLocationWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;




                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                aLocationWiseSubTotals = new Dictionary<string, string>();
                rowIndex++;
                #endregion
                #region BU Wise Sub Total
                colIndex = 0;

                cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 1]; cell.Merge = true; cell.Value = "BU Wise Sub Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                abGrandTotals.Add((abGrandTotals.Count + 1).ToString(), (rowIndex.ToString() + "," + (rowIndex).ToString()));
                #region Formula
                sFormula = "";
                nTotalIndex = colIndex;
                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                aBUWiseSubTotals = new Dictionary<string, string>();


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                rowIndex++;
                #endregion
                #region Grand Total
                #region BU Wise Sub Total

                colIndex = 0;
                cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 1]; cell.Merge = true; cell.Value = "Grand Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                #region Formula
                sFormula = "";
                nTotalIndex = colIndex;
                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                rowIndex++;
                #endregion

                #endregion
                #endregion
                #endregion
                cell = sheet.Cells[1, 1, rowIndex + 3, nMaxColumn + 3];
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=ManPower Report(Designation Wise).xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }

        private void DepartmentWiseManPowerXL(DataSet oDataSet, Company oCompany, DateTime paramDate)
        {

            DataTable oManPowerSummarys = oDataSet.Tables[0];

            #region Report Body
            int rowIndex = 2;
            int nMaxColumn = 0;
            int colIndex = 0;
            ExcelRange cell;
            Border border;
            ExcelFill fill;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("ManPower Report(Department Wise)");
                sheet.Name = "ManPower Report(Department Wise)";
                Dictionary<string, string> aLocationWiseSubTotals = new Dictionary<string, string>();
                Dictionary<string, string> aBUWiseSubTotals = new Dictionary<string, string>();
                Dictionary<string, string> aGrandTotals = new Dictionary<string, string>();
                int nPresentColIndex = 0, nTManPowerColIndex = 0;
                #region Declare Column
                colIndex = 0;
                sheet.View.FreezePanes(6, 1);
                sheet.Column(++colIndex).Width = 8;  //SL
                sheet.Column(++colIndex).Width = 28; //Department
                sheet.Column(++colIndex).Width = 15; //Male
                sheet.Column(++colIndex).Width = 15;//Female
                sheet.Column(++colIndex).Width = 15;//ManPower
                sheet.Column(++colIndex).Width = 15;//Present
                sheet.Column(++colIndex).Width = 15;//Absent
                sheet.Column(++colIndex).Width = 15;//Leave
                sheet.Column(++colIndex).Width = 15;//HolidayDayoff
                sheet.Column(++colIndex).Width = 15;//Percent
                nMaxColumn = colIndex;
                #endregion

                #region Report Header
                cell = sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn]; cell.Merge = true; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn]; cell.Merge = true; cell.Style.Font.Bold = true; cell.Style.Font.Size = 15;
                cell.Value = "Daily Attendance Report Summary"; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex++;


                cell = sheet.Cells[rowIndex, nMaxColumn]; cell.Style.Font.Bold = false;
                cell.Value = paramDate.ToString("dd MMM yyyy"); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                rowIndex++;
                #endregion

                #region Column Header
                colIndex = 0;
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "SL"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Department"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;




                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Man Power"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nTManPowerColIndex = colIndex;
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Present"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nPresentColIndex = colIndex;
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Absent"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Leave"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Holiday/Dayoff"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Present Percent(%)"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;


                #endregion

                #region Report Body
                int nCount = 0;
                string sStartCell = "", sEndCell = "";
                string sFormula = "";
                int nStartRow = 0, nEndRow = 0, nStartCol = 0, nTotalIndex = 0, nTempStartRow = 0, nTempEndRow = 0;
                string sDataColumn = "", sNumberFormat = ""; double nOrderQty = 0;
                nStartRow = rowIndex;
                string sBUName = "", sLocationName = "", sDepartmentName = "";
                int nSubCount = 0;
                foreach (DataRow oManPowerSummary in oManPowerSummarys.Rows)
                {
                    nSubCount++;

                    if (sBUName != Convert.ToString(oManPowerSummary["BUName"]) || sLocationName != Convert.ToString(oManPowerSummary["LocationName"]))
                    {
                        if (nSubCount > 1)
                        {
                            #region Location Wise SubTotal
                            colIndex = 0;
                            aGrandTotals.Add((aGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                            aBUWiseSubTotals.Add((aBUWiseSubTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                            cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 1]; cell.Merge = true; cell.Value = "Location Wise Sub Total:"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                            sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                            cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                            rowIndex++;
                            #endregion


                           
                            if (sBUName != Convert.ToString(oManPowerSummary["BUName"]))
                            {

                                #region BU Wise Sub Total
                                colIndex = 0;

                                cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 1]; cell.Merge = true; cell.Value = "BU Wise Sub Total:"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                #region Formula
                                sFormula = "";
                                nTotalIndex = colIndex;
                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                aBUWiseSubTotals = new Dictionary<string, string>();

                                sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                                sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = false;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                rowIndex++;
                                #endregion
                            }

                        }

                        nStartRow = rowIndex + 1;
                        colIndex = 0;
                        cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, ++colIndex]; cell.Merge = true; cell.Value = "BU:" + oManPowerSummary["BUName"] + ", Location:" + oManPowerSummary["LocationName"]; cell.Style.Font.Bold = true;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = border.Left.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style =border.Right.Style = ExcelBorderStyle.Thin;


                        sBUName = Convert.ToString(oManPowerSummary["BUName"]);
                        sLocationName = Convert.ToString(oManPowerSummary["LocationName"]);

                        rowIndex++;
                    }
                    colIndex = 0;
                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ++nCount; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToString(oManPowerSummary["DepartmentName"]); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalMale"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";


                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalFemale"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";


                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalManPower"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";

                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalPresent"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";

                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalAbsent"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";

                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalLeave"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";


                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalHolidayDayoff"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";

                    sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                    sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                    nEndRow = rowIndex;
                    rowIndex++;

                }
                #endregion

                #region Location Wise SubTotal
                colIndex = 0;
                aGrandTotals.Add((aGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                aBUWiseSubTotals.Add((aBUWiseSubTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 1]; cell.Merge = true; cell.Value = "Location Wise Sub Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                #endregion
                #region BU Wise Sub Total
                colIndex = 0;

                cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 1]; cell.Merge = true; cell.Value = "BU Wise Sub Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                #region Formula
                sFormula = "";
                nTotalIndex = colIndex;
                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                aBUWiseSubTotals = new Dictionary<string, string>();

                sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                rowIndex++;
                #endregion
                #region Grand Total

                colIndex = 0;
                cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 1]; cell.Merge = true; cell.Value = "Grand Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                #region Formula
                sFormula = "";
                nTotalIndex = colIndex;
                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                rowIndex++;


                #endregion

                #region Department Wise 2
                #region Summary Report
                Dictionary<string, string> abGrandTotals = new Dictionary<string, string>();
                aBUWiseSubTotals = new Dictionary<string, string>();
                aLocationWiseSubTotals = new Dictionary<string, string>();
                var sheet2 = excelPackage.Workbook.Worksheets.Add("Department Wise 2");
                sheet2.Name = "Department Wise 2";
                colIndex = 0;
                rowIndex = 2;
                int Shhet2MaxCol = 0;
                sheet2.View.FreezePanes(6, 1);
                sheet2.Column(++colIndex).Width = 28; //Department
                sheet2.Column(++colIndex).Width = 10; //Req ManPower
                sheet2.Column(++colIndex).Width = 15; //Total Strength
                sheet2.Column(++colIndex).Width = 15; //Present
                sheet2.Column(++colIndex).Width = 15; //Bartack
                sheet2.Column(++colIndex).Width = 15; //New Recruied
                sheet2.Column(++colIndex).Width = 10; //Total Present
                sheet2.Column(++colIndex).Width = 15; //Total Absent
                sheet2.Column(++colIndex).Width = 15; //Remark
                Shhet2MaxCol = colIndex;
                #region Report Header
                cell = sheet2.Cells[rowIndex, 2, rowIndex, Shhet2MaxCol]; cell.Merge = true; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex++;

                cell = sheet2.Cells[rowIndex, 2, rowIndex, Shhet2MaxCol]; cell.Merge = true; cell.Style.Font.Bold = true; cell.Style.Font.Size = 15;
                cell.Value = "Daily Attendance Report Summary"; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex++;


                cell = sheet2.Cells[rowIndex, Shhet2MaxCol]; cell.Style.Font.Bold = false;
                cell.Value = paramDate.ToString("dd MMM yyyy"); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                rowIndex++;
                #endregion

                #region Column Header
                colIndex = 0;
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Department"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Required Manpower"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Total Strength"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Present"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Bartack"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "New Recruied"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Total Present"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Total Absent"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Remarks"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;


                #endregion

                #region Report Body
                int nNumRowSpan = 0;
                nSubCount = 0;
                sBUName = ""; sLocationName = ""; sDepartmentName = "";
                foreach (DataRow oManPowerSummary in oManPowerSummarys.Rows)
                {
                    nSubCount++;

                    if (sBUName != Convert.ToString(oManPowerSummary["BUName"]) || sLocationName != Convert.ToString(oManPowerSummary["LocationName"]))
                    {
                        if (nSubCount > 1)
                        {


                            #region Location Wise SubTotal
                            colIndex = 0;

                            abGrandTotals.Add((abGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                            aBUWiseSubTotals.Add((aBUWiseSubTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                            cell = sheet2.Cells[rowIndex, ++colIndex];  cell.Value = "Location Wise Sub Total:"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                            cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                            rowIndex++;
                            #endregion


                            if (sBUName != Convert.ToString(oManPowerSummary["BUName"]))
                            {

                                #region BU Wise Sub Total

                                colIndex = 0;
                                cell = sheet2.Cells[rowIndex, ++colIndex];  cell.Value = "BU Wise Sub Total:"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                                #region Formula
                                sFormula = "";
                                nTotalIndex = colIndex;
                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                #region Formula
                                sFormula = "";

                                if (aBUWiseSubTotals.Count > 0)
                                {
                                    nTotalIndex = nTotalIndex + 1;
                                    sFormula = "SUM(";
                                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                                    {
                                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                                    }
                                    if (sFormula.Length > 0)
                                    {
                                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                                    }
                                    sFormula = sFormula + ")";
                                }
                                else
                                {
                                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                                }
                                #endregion
                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "#,##,##0;(#,##,##0)";
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                                aBUWiseSubTotals = new Dictionary<string, string>();

                                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                                rowIndex++;
                                #endregion
                            }

                        }

                        nStartRow = rowIndex + 1;
                        colIndex = 0;
                        cell = sheet2.Cells[rowIndex, ++colIndex];  cell.Value = "BU:" + oManPowerSummary["BUName"] + ", Location:" + oManPowerSummary["LocationName"]; cell.Style.Font.Bold = true;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = border.Left.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;


                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = ExcelBorderStyle.Thin;

                        cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                        border = cell.Style.Border; border.Bottom.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        nNumRowSpan = GetRowSpanCount(Convert.ToInt32(oManPowerSummary["DepartmentID"]), Convert.ToInt32(oManPowerSummary["LocationID"]), Convert.ToInt32(oManPowerSummary["BusinessUnitID"]), oManPowerSummarys);
                        sBUName = Convert.ToString(oManPowerSummary["BUName"]);
                        sLocationName = Convert.ToString(oManPowerSummary["LocationName"]);
                        // sDepartmentName = Convert.ToString(oManPowerSummary["DepartmentName"]);
                        rowIndex++;

                    }
                    colIndex = 0;


                    if (sDepartmentName != Convert.ToString(oManPowerSummary["DepartmentName"]))
                    {
                        sDepartmentName = Convert.ToString(oManPowerSummary["DepartmentName"]);
                        nNumRowSpan = nNumRowSpan > 0 ? nNumRowSpan - 1 : 0;
                        cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex + nNumRowSpan, colIndex]; cell.Merge = true; cell.Value = Convert.ToString(oManPowerSummary["DepartmentName"]); cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; border = cell.Style.Border;
                        border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.WrapText = true;
                    }
                    else
                    {
                        colIndex = 1;
                    }
                    //cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToString(oManPowerSummary["DepartmentName"]); cell.Style.Font.Bold = false;
                    //cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; border = cell.Style.Border;
                    //border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Medium;

                

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["RequiredManPower"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalManPower"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalPresent"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["Bartack"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["NewRecruied"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    sStartCell = Global.GetExcelCellName(rowIndex, colIndex - 2);
                    sEndCell = Global.GetExcelCellName(rowIndex, colIndex - 1);

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + sStartCell + "+" + sEndCell + ")"; cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalAbsent"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";

                    nEndRow = rowIndex;
                    rowIndex++;


                }
                #endregion
                #region Location Wise SubTotal
                colIndex = 0;
                abGrandTotals.Add((abGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                aBUWiseSubTotals.Add((aBUWiseSubTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                cell = sheet2.Cells[rowIndex, ++colIndex];  cell.Value = "Location Wise Sub Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                #endregion
                #region BU Wise Sub Total
                colIndex = 0;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "BU Wise Sub Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                #region Formula
                sFormula = "";
                nTotalIndex = colIndex;
                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aBUWiseSubTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aBUWiseSubTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aBUWiseSubTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                aBUWiseSubTotals = new Dictionary<string, string>();


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                rowIndex++;
                #endregion
                #region Grand Total
                #region BU Wise Sub Total

                colIndex = 0;
                cell = sheet2.Cells[rowIndex, ++colIndex];  cell.Value = "Grand Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                #region Formula
                sFormula = "";
                nTotalIndex = colIndex;
                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                rowIndex++;
                #endregion

                #endregion
                #endregion
                #endregion
                cell = sheet.Cells[1, 1, rowIndex + 3, nMaxColumn + 3];
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=ManPower Report(Department Wise).xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }

        private void LocationWiseManPowerXL(DataSet oDataSet, Company oCompany, DateTime paramDate)
        {

            DataTable oManPowerSummarys = oDataSet.Tables[0];

            #region Report Body
            int rowIndex = 2;
            int nMaxColumn = 0;
            int colIndex = 0;
            ExcelRange cell;
            Border border;
            ExcelFill fill;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("ManPower Report(Location Wise)");
                sheet.Name = "ManPower Report(Location Wise)";
                Dictionary<string, string> aLocationWiseSubTotals = new Dictionary<string, string>();
                Dictionary<string, string> aBUWiseSubTotals = new Dictionary<string, string>();
                Dictionary<string, string> aGrandTotals = new Dictionary<string, string>();
                int nPresentColIndex = 0, nTManPowerColIndex = 0;
                #region Declare Column
                colIndex = 0;
                sheet.View.FreezePanes(6, 1);
                sheet.Column(++colIndex).Width = 8;  //SL
                sheet.Column(++colIndex).Width = 15; //BU
                sheet.Column(++colIndex).Width = 15; //Location
                sheet.Column(++colIndex).Width = 15; //Male
                sheet.Column(++colIndex).Width = 15;//Female
                sheet.Column(++colIndex).Width = 15;//ManPower
                sheet.Column(++colIndex).Width = 15;//Present
                sheet.Column(++colIndex).Width = 15;//Absent
                sheet.Column(++colIndex).Width = 15;//Leave
                sheet.Column(++colIndex).Width = 15;//HolidayDayoff
                sheet.Column(++colIndex).Width = 15;//Percent
                nMaxColumn = colIndex;
                #endregion

                #region Report Header
                cell = sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn]; cell.Merge = true; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn]; cell.Merge = true; cell.Style.Font.Bold = true; cell.Style.Font.Size = 15;
                cell.Value = "Daily Attendance Report Summary"; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex++;


                cell = sheet.Cells[rowIndex, nMaxColumn]; cell.Style.Font.Bold = false;
                cell.Value = paramDate.ToString("dd MMM yyyy"); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                rowIndex++;
                #endregion

                #region Column Header
                colIndex = 0;
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "SL"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "BU"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;




                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Location"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Man Power"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nTManPowerColIndex = colIndex;
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Present"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nPresentColIndex = colIndex;
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Absent"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Leave"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Holiday/Dayoff"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = "Present Percent(%)"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;


                #endregion

                #region Report Body
                int nCount = 0;
                string sStartCell = "", sEndCell = "";
                string sFormula = "";
                int nStartRow = 0, nEndRow = 0, nStartCol = 0, nTotalIndex = 0, nTempStartRow = 0, nTempEndRow = 0;
                string sDataColumn = "", sNumberFormat = ""; double nOrderQty = 0;
                nStartRow = rowIndex;
                string sBUName = "", sLocationName = "", sDepartmentName = "";
                int nSubCount = 0;
                foreach (DataRow oManPowerSummary in oManPowerSummarys.Rows)
                {
                    nSubCount++;

                    if (sBUName != Convert.ToString(oManPowerSummary["BUName"]))
                    {
                        if (nSubCount > 1)
                        {
                            #region Location Wise SubTotal
                            colIndex = 0;
                            aGrandTotals.Add((aGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                            cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 2]; cell.Merge = true; cell.Value = "BU Wise Sub Total:"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                            cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                            sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                            cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                            rowIndex++;
                            #endregion



                        }

                        nStartRow = rowIndex;

                        sBUName = Convert.ToString(oManPowerSummary["BUName"]);

                    }
                    colIndex = 0;
                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = ++nCount; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToString(oManPowerSummary["BUName"]); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToString(oManPowerSummary["LocationName"]); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalMale"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";


                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalFemale"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";


                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalManPower"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";

                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalPresent"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";

                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalAbsent"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";

                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalLeave"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";


                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalHolidayDayoff"]); cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";

                    sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                    sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                    cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                    nEndRow = rowIndex;
                    rowIndex++;

                }
                #endregion

                #region BU Wise SubTotal
                colIndex = 0;
                aGrandTotals.Add((aGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 2]; cell.Merge = true; cell.Value = "BU Wise Sub Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                #endregion
                #region Grand Total

                colIndex = 0;
                cell = sheet.Cells[rowIndex, ++colIndex, rowIndex, colIndex += 2]; cell.Merge = true; cell.Value = "Grand Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                #region Formula
                sFormula = "";
                nTotalIndex = colIndex;
                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                sStartCell = Global.GetExcelCellName(rowIndex, nTManPowerColIndex);
                sEndCell = Global.GetExcelCellName(rowIndex, nPresentColIndex);
                cell = sheet.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + "(" + sEndCell + "/" + sStartCell + ")" + "*" + 100 + ")"; cell.Style.Numberformat.Format = "##,##0;(##,##0)"; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                rowIndex++;


                #endregion

                #region Location Wise 2
                #region Summary Report
                Dictionary<string, string> abGrandTotals = new Dictionary<string, string>();
                Dictionary<string, string> aBUWiseSubTotals2 = new Dictionary<string, string>();
                var sheet2 = excelPackage.Workbook.Worksheets.Add("Location Wise 2");
                sheet2.Name = "Location Wise 2";
                colIndex = 0;
                rowIndex = 2;
                int Shhet2MaxCol = 0;
                sheet2.View.FreezePanes(6, 1);
                sheet2.Column(++colIndex).Width = 15; //BU
                sheet2.Column(++colIndex).Width = 15; //Location
                sheet2.Column(++colIndex).Width = 10; //Req ManPower
                sheet2.Column(++colIndex).Width = 15; //Total Strength
                sheet2.Column(++colIndex).Width = 15; //Present
                sheet2.Column(++colIndex).Width = 15; //Bartack
                sheet2.Column(++colIndex).Width = 15; //New Recruied
                sheet2.Column(++colIndex).Width = 10; //Total Present
                sheet2.Column(++colIndex).Width = 15; //Total Absent
                sheet2.Column(++colIndex).Width = 15; //Remark
                Shhet2MaxCol = colIndex;
                #region Report Header
                cell = sheet2.Cells[rowIndex, 2, rowIndex, Shhet2MaxCol]; cell.Merge = true; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex++;

                cell = sheet2.Cells[rowIndex, 2, rowIndex, Shhet2MaxCol]; cell.Merge = true; cell.Style.Font.Bold = true; cell.Style.Font.Size = 15;
                cell.Value = "Daily Attendance Report Summary"; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex++;


                cell = sheet2.Cells[rowIndex, Shhet2MaxCol]; cell.Style.Font.Bold = false;
                cell.Value = paramDate.ToString("dd MMM yyyy"); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                rowIndex++;
                #endregion

                #region Column Header
                colIndex = 0;
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "BU"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Location"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Required Manpower"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Total Strength"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Present"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Bartack"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "New Recruied"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Total Present"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Total Absent"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = "Remarks"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;


                #endregion

                #region Report Body
                int nNumRowSpan = 0;
                nSubCount = 0;
                sBUName = ""; sLocationName = ""; sDepartmentName = "";
                foreach (DataRow oManPowerSummary in oManPowerSummarys.Rows)
                {
                    nSubCount++;

                    if (sBUName != Convert.ToString(oManPowerSummary["BUName"]))
                    {
                        if (nSubCount > 1)
                        {


                            #region BU Wise SubTotal
                            colIndex = 0;

                            abGrandTotals.Add((abGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                            cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex, ++colIndex]; cell.Merge = true; cell.Value = "BU Wise Sub Total:"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                            sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                            sEndCell = Global.GetExcelCellName(rowIndex-1, colIndex);
                            cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; ; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                            cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                            border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                            rowIndex++;
                            #endregion

                        }

                        nStartRow = rowIndex;
                        colIndex = 0;
                    
                        nNumRowSpan = GetBUWiseRowSpanCount(Convert.ToInt32(oManPowerSummary["BusinessUnitID"]), oManPowerSummarys);
                    

                    }


                    if (sBUName != Convert.ToString(oManPowerSummary["BUName"]))
                    {

                        sBUName = Convert.ToString(oManPowerSummary["BUName"]);
                        nNumRowSpan = nNumRowSpan > 0 ? nNumRowSpan - 1 : 0;
                        cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex + nNumRowSpan, colIndex]; cell.Merge = true; cell.Value = Convert.ToString(oManPowerSummary["BUName"]); cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; border = cell.Style.Border;
                        border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.WrapText = true;
                    }
                    else
                    {
                        colIndex = 1;
                    }


                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToString(oManPowerSummary["LocationName"]); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["RequiredManPower"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalManPower"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalPresent"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["Bartack"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["NewRecruied"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    sStartCell = Global.GetExcelCellName(rowIndex, colIndex - 2);
                    sEndCell = Global.GetExcelCellName(rowIndex, colIndex - 1);

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = "(" + sStartCell + "+" + sEndCell + ")"; cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;


                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = Convert.ToInt32(oManPowerSummary["TotalAbsent"]); cell.Style.Font.Bold = false; cell.Style.Numberformat.Format = "##,###;(##,###)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                    border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; cell.Style.Numberformat.Format = "##,###;(##,###)";

                    nEndRow = rowIndex;
                    rowIndex++;


                }
                #endregion
                #region BU Wise SubTotal
                colIndex = 0;
                abGrandTotals.Add((abGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + (rowIndex - 1).ToString()));
                cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex, ++colIndex]; cell.Merge = true; cell.Value = "BU Wise Sub Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                sStartCell = Global.GetExcelCellName(nStartRow, ++colIndex);
                sEndCell = Global.GetExcelCellName(rowIndex - 1, colIndex);
                cell = sheet2.Cells[rowIndex, colIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Numberformat.Format = "##,###;(##,###)"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                #endregion
                #region Grand Total
                #region BU Wise Sub Total

                colIndex = 0;
                cell = sheet2.Cells[rowIndex, ++colIndex, rowIndex, ++colIndex]; cell.Merge = true; cell.Value = "Grand Total:"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                #region Formula
                sFormula = "";
                nTotalIndex = colIndex;
                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                #region Formula
                sFormula = "";

                if (abGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= abGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(abGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.Numberformat.Format = "##,###;(##,###)";
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet2.Cells[rowIndex, ++colIndex]; cell.Value = ""; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; border = cell.Style.Border;
                border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin;



                rowIndex++;
                #endregion

                #endregion
                #endregion
                #endregion
                cell = sheet.Cells[1, 1, rowIndex + 3, nMaxColumn + 3];
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=ManPower Report(Location Wise).xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }

        private int GetRowSpanCount(int nDeptID,int LocationID,int BUID, DataTable oManPowerSummarys)
        {
            int nRowSpanCount = 0;

            foreach (DataRow oManPowerSummary in oManPowerSummarys.Rows)
            {
                if (Convert.ToInt32(oManPowerSummary["DepartmentID"]) == nDeptID && Convert.ToInt32(oManPowerSummary["LocationID"]) == LocationID && Convert.ToInt32(oManPowerSummary["BusinessUnitID"]) == BUID)
                {
                    nRowSpanCount = nRowSpanCount + 1;
                }
            }
            return nRowSpanCount;
        }



        private int GetBUWiseRowSpanCount( int BUID, DataTable oManPowerSummarys)
        {
            int nRowSpanCount = 0;

            foreach (DataRow oManPowerSummary in oManPowerSummarys.Rows)
            {
                if (Convert.ToInt32(oManPowerSummary["BusinessUnitID"]) == BUID)
                {
                    nRowSpanCount = nRowSpanCount + 1;
                }
            }
            return nRowSpanCount;
        }
        public void ContinuousAbsentXL(string sParam, double nts)
        {
            //_oAttendanceDaily = new AttendanceDaily();
            //_oAttendanceDaily.AttendanceDailys = this.GetsDailyAbsent(sParam);

            DateTime dDateFrom = Convert.ToDateTime(sParam.Split('~')[0]);
            DateTime dDateTo = Convert.ToDateTime(sParam.Split('~')[1]);
            string sBusinessUnitIds = sParam.Split('~')[2];
            string sLocationIds = sParam.Split('~')[3];
            string sDepartmentIds = sParam.Split('~')[4];
            string sDesignationIds = sParam.Split('~')[5];
            bool bContinuousAbsent = Convert.ToBoolean(sParam.Split('~')[6]);
            int nDayCount = Convert.ToInt32(sParam.Split('~')[7]);

            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            _oAttendanceDailys = AttendanceDaily.GetsContinuousAbsent(dDateFrom, dDateTo, sBusinessUnitIds, sLocationIds, sDepartmentIds, sDesignationIds, nDayCount, ((User)(Session[SessionInfo.CurrentUser])).UserID);


            DateTime dtDateFrom = Convert.ToDateTime(sParam.Split('~')[0]);
            DateTime dtDateTo = Convert.ToDateTime(sParam.Split('~')[1]);


            int nMaxColumn = 0;
            int colIndex = 1;
            int rowIndex = 2;
            int nCount = 0;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Continuous Absent");
                sheet.Name = "Continuous Absent";

                int n = 1;
                sheet.Column(1).Width = 8;
                sheet.Column(2).Width = 15;
                sheet.Column(3).Width = 25;
                sheet.Column(4).Width = 30;
                sheet.Column(5).Width = 25;
                sheet.Column(6).Width = 25;
                sheet.Column(7).Width = 25;

                sheet.Column(8).Width = 25;
                sheet.Column(9).Width = 25;
                sheet.Column(10).Width = 25;
                sheet.Column(11).Width = 25;
                sheet.Column(12).Width = 25;


                nMaxColumn = 12;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header


                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 18;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 1;


                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oCompany.Address; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 12;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Continuous Absent From " + dtDateFrom.ToString("dd MMM yyyy") + " To " + dtDateTo.ToString("dd MMM yyyy"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 15;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 2;

                #endregion


                List<AttendanceDaily> oTempADs = new List<AttendanceDaily>();
                int nGrandTotal = 0;
                _oAttendanceDailys = _oAttendanceDailys.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ToList();
                _oAttendanceDailys.ForEach(x => oTempADs.Add(x));
                while (oTempADs.Count > 0)
                {
                    var oResults = new List<AttendanceDaily>();
                    oResults = oTempADs.Where(x => x.LocationID == oTempADs[0].LocationID && x.DepartmentID == oTempADs[0].DepartmentID).OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeCode).ToList();
                    nGrandTotal += oResults.Count();
                    ExcelContinuousAbsent(ref  sheet, ref  cell, ref fill, ref border, ref rowIndex, ref colIndex, nMaxColumn, oResults, dtDateFrom, dtDateTo);
                    oTempADs.RemoveAll(x => x.LocationID == oResults[0].LocationID && x.DepartmentID == oResults[0].DepartmentID);
                }

                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Grand Total: " + nGrandTotal; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 15;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex = rowIndex + 2;

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=ContinuousAbsent.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            
        }
        public void ExcelContinuousAbsent(ref ExcelWorksheet sheet, ref ExcelRange cell, ref ExcelFill fill, ref OfficeOpenXml.Style.Border border, ref int rowIndex, ref int colIndex, int nMaxColumn, List<AttendanceDaily> oADs, DateTime dtDateFrom, DateTime dtDateTo)
        {
            int nTotalAbsent = oADs.Count();

            colIndex = 1;
            cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value ="Location: " + oADs[0].LocationName + ", Department: "+oADs[0].DepartmentName; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 15;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            colIndex = 1;
            rowIndex++;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "SL"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Code"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Name"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "BusinessUnit"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Location"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Department"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Designation"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //
            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "DOJ"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Last punch date"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Absent From"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Absent Day Count"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Remarks"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            rowIndex++;

            int nCount = 0;
            foreach (AttendanceDaily oItem in oADs)
            {
                colIndex = 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = (++nCount); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.BUName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.LocationName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.LastPunchDateInString; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.AbsentFromInString; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.AbsentDayCount; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = ""; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
            }
            cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Total Absent: " + nTotalAbsent; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 15;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            rowIndex = rowIndex + 2;
        }



        public void DayWiseSalaryXL(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sWorkingStatus, string sGroupIDs, string sBlockIDs, double ts)
        {
            MonthlyAttendanceReport oMonthlyAttendanceReport = new MonthlyAttendanceReport();
            oMonthlyAttendanceReport.MonthlyAttendanceReports = MonthlyAttendanceReport.Gets(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, sWorkingStatus, sGroupIDs, sBlockIDs, 0, 0, "", "", ((User)(Session[SessionInfo.CurrentUser])).UserID);


            oMonthlyAttendanceReport.ErrorMessage = DateFrom.ToString("dd MMM yyyy") + " To " + DateTo.ToString("dd MMM yyyy");


            int nMaxColumn = 0;
            int colIndex = 1;
            int rowIndex = 2;
            int nCount = 0;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Continuous Absent");
                sheet.Name = "Continuous Absent";

                int n = 1;
                sheet.Column(1).Width = 8;
                sheet.Column(2).Width = 15;
                sheet.Column(3).Width = 25;
                sheet.Column(4).Width = 30;
                sheet.Column(5).Width = 25;
                sheet.Column(6).Width = 25;
                sheet.Column(7).Width = 25;


                sheet.Column(8).Width = 15;
                sheet.Column(9).Width = 10;
                sheet.Column(10).Width = 10;
                sheet.Column(11).Width = 10;
                sheet.Column(12).Width = 10;
                sheet.Column(13).Width = 10;
                sheet.Column(14).Width = 15;
                sheet.Column(15).Width = 15;

                nMaxColumn = 15;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header


                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 18;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 1;


                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oCompany.Address; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 12;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 1, rowIndex, nMaxColumn]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "DayWise Salary From " + oMonthlyAttendanceReport.ErrorMessage; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 15;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex = rowIndex + 2;

                #endregion


                int nGrandTotal = 0;
                oMonthlyAttendanceReport.MonthlyAttendanceReports = oMonthlyAttendanceReport.MonthlyAttendanceReports.OrderBy(x => x.LocationName).ToList();
                while (oMonthlyAttendanceReport.MonthlyAttendanceReports.Count > 0)
                {
                    List<MonthlyAttendanceReport> oTempMonthlyAttendanceReports = new List<MonthlyAttendanceReport>();
                    oTempMonthlyAttendanceReports = oMonthlyAttendanceReport.MonthlyAttendanceReports.Where(x => x.LocationName == oMonthlyAttendanceReport.MonthlyAttendanceReports[0].LocationName).OrderBy(x => x.EmployeeCode).ToList();
                    nGrandTotal += oTempMonthlyAttendanceReports.Count();
                    ExcelDayWiseSalary(ref  sheet, ref  cell, ref fill, ref border, ref rowIndex, ref colIndex, nMaxColumn, oTempMonthlyAttendanceReports, DateFrom, DateTo);
                    oMonthlyAttendanceReport.MonthlyAttendanceReports.RemoveAll(x => x.LocationName == oTempMonthlyAttendanceReports[0].LocationName);
                }

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=ContinuousAbsent.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            
        }
        public void ExcelDayWiseSalary(ref ExcelWorksheet sheet, ref ExcelRange cell, ref ExcelFill fill, ref OfficeOpenXml.Style.Border border, ref int rowIndex, ref int colIndex, int nMaxColumn, List<MonthlyAttendanceReport> oADs, DateTime dtDateFrom, DateTime dtDateTo)
        {

            colIndex = 1;
            cell = sheet.Cells[rowIndex, 1]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            cell.Style.Font.Bold = true;cell.Value = "Location: " + oADs[0].LocationName; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 15;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            colIndex = 1;
            rowIndex++;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "SL"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Code"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Name"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "BusinessUnit"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Location"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Department"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Designation"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Gross"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "SearchDay"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "PaymentDay"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "OTHr"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "OTRate"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "OTAmount"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "GrossBasedOnPresent"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = "Total"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            rowIndex++;

            int nCount = 0;
            foreach (MonthlyAttendanceReport oItem in oADs)
            {
                colIndex = 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = (++nCount); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.BUName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.LocationName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.GrossSalary; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = (dtDateTo-dtDateFrom).TotalDays+1; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                int nPaymentDay = (oItem.PresentDay + oItem.Leave + oItem.DayOFF + oItem.HoliDay);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = nPaymentDay; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.OT_Hr; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.OT_Rate; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = oItem.OT_Hr * oItem.OT_Rate; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                double nPaymentDaySalary = Math.Round(((oItem.GrossSalary / 30) * nPaymentDay), 2);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = nPaymentDaySalary; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                double Total = (oItem.GrossSalary / 30) * (oItem.PresentDay + oItem.Leave + oItem.DayOFF + oItem.HoliDay) + (oItem.OT_Hr * oItem.OT_Rate);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Merge = true; cell.Value = Math.Round(Total, 2); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
            }
            rowIndex = rowIndex + 2;
        }



        #region Attendence register
        public ActionResult ViewAttendenceRegisters(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            _oAttendanceDailys = new List<AttendanceDaily>();

            this.Session.Remove(SessionInfo.AuthorizationRolesMapping);
            this.Session.Add(SessionInfo.AuthorizationRolesMapping, AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.Attendance).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]));


            ViewBag.EmployeeTypes = EmployeeType.Gets("select * from EmployeeType where EmployeeGrouping=" + (int)EnumEmployeeGrouping.EmployeeType, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeCategorys = Enum.GetValues(typeof(EnumEmployeeCategory)).Cast<EnumEmployeeCategory>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.PrintType = EnumObject.jGets(typeof(EnumRoleOperationType)).Where(x => x.id == (int)EnumRoleOperationType.Monthly_Attendence_Report_ISP || x.id == (int)EnumRoleOperationType.Quarterly_Attendence_Report_ISP);
            string sSql = "SELECT * FROM BusinessUnit WHERE BusinessUnitID IN(SELECT BusinessUnitID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID<>0";
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " )";
            }
            sSql = sSql + ")";

            ViewBag.BusinessUnits = BusinessUnit.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));

            return View(_oAttendanceDailys);
        }
        public ActionResult SetSessionSearchCriteria(AttendenceRegister oAttendenceRegister)
        {
            this.Session.Remove(SessionInfo.ParamObj);
            this.Session.Add(SessionInfo.ParamObj, oAttendenceRegister);

            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(Global.SessionParamSetMessage);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        public ActionResult PrintAttendenceRegister(double ts)
        {
            AttendenceRegister oAttendenceRegister = new AttendenceRegister();
            string _sErrorMesage = "";
            
            try
            {
                _oAttendenceRegisters = new List<AttendenceRegister>();
                oAttendenceRegister = (AttendenceRegister)Session[SessionInfo.ParamObj];
                //string sSQL = this.GetSQL(oAttendenceRegister);

                DateTime DateFrom = Convert.ToDateTime(oAttendenceRegister.ErrorMessage.Split('~')[0]);
                DateTime DateTo = Convert.ToDateTime(oAttendenceRegister.ErrorMessage.Split('~')[1]);
                string sBusinessUnitIds = oAttendenceRegister.ErrorMessage.Split('~')[2];
                string sLocationID = oAttendenceRegister.ErrorMessage.Split('~')[3];
                string sDepartmentIds = oAttendenceRegister.ErrorMessage.Split('~')[4];
                string sDesignationIds = oAttendenceRegister.ErrorMessage.Split('~')[5];
                string sSalarySchemeIDs = oAttendenceRegister.ErrorMessage.Split('~')[6];
                string sGroupIDs = oAttendenceRegister.ErrorMessage.Split('~')[7];
                string sBlockIDs = oAttendenceRegister.ErrorMessage.Split('~')[8];
                string sEmployeeIDs = oAttendenceRegister.ErrorMessage.Split('~')[9];
                string ShiftIds = oAttendenceRegister.ErrorMessage.Split('~')[10];
                double nStartSalaryRange = Convert.ToDouble(oAttendenceRegister.ErrorMessage.Split('~')[11]);
                double nEndSalaryRange = Convert.ToDouble(oAttendenceRegister.ErrorMessage.Split('~')[12]);                
                string sWorkingStatus = oAttendenceRegister.ErrorMessage.Split('~')[13];                
                string sRemarks = oAttendenceRegister.ErrorMessage.Split('~')[14];
                _nLayout = Convert.ToInt32(oAttendenceRegister.ErrorMessage.Split('~')[15]);

                _sDateRange = DateFrom.ToString("dd MMM yyyy") + "  To  " + DateTo.ToString("dd MMM yyyy");

                _sTotalDays = ((DateTo - DateFrom).TotalDays + 1).ToString();
                //_nTotalDays = (DateTo - DateFrom).TotalDays;
                //if (_nTotalDays < 0) _nTotalDays *= -1;
                //if (_nTotalDays > 0) _nTotalDays++;
                _oAttendenceRegisters = AttendenceRegister.Gets(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, sWorkingStatus, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ShiftIds, sRemarks, (int)Session[SessionInfo.currentUserID]);
                if (_oAttendenceRegisters.Count <= 0)
                {
                    _sErrorMesage = "There is no data for print!";
                }
            }
            catch (Exception ex)
            {
                _oAttendenceRegisters = new List<AttendenceRegister>();
                _sErrorMesage = ex.Message;
            }

            if (_sErrorMesage == "")
            {
                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);
                //if (oAttendenceRegister.BUID > 0)
                //{
                //    BusinessUnit oBU = new BusinessUnit();
                //    oBU = oBU.Get(oAttendenceRegister.BUID, (int)Session[SessionInfo.currentUserID]);
                //    oCompany = GlobalObject.BUTOCompany(oCompany, oBU);
                //}

                rptAttendenceRegisters oReport = new rptAttendenceRegisters();
                byte[] abytes = oReport.PrepareReport(_oAttendenceRegisters, oCompany, _nLayout, _sDateRange, _sTotalDays);
                return File(abytes, "application/pdf");
                //return null;
            }
            else
            {
                rptErrorMessage oReport = new rptErrorMessage();
                byte[] abytes = oReport.PrepareReport(_sErrorMesage);
                return File(abytes, "application/pdf");
            }
        }

        //private string GetSQL(AttendenceRegister oAttendenceRegister)
        //{
        //    //string _sDateRange = "";
        //    string sSearchingData = oAttendenceRegister.ErrorMessage;
        //    EnumCompareOperator eAttendenceDate = (EnumCompareOperator)Convert.ToInt32(sSearchingData.Split('~')[0]);
        //    DateTime dAttendenceStartDate = Convert.ToDateTime(sSearchingData.Split('~')[1]);
        //    DateTime dAttendenceEndDate = Convert.ToDateTime(sSearchingData.Split('~')[2]);
        //    #region make date range
        //    if (eAttendenceDate == EnumCompareOperator.EqualTo)
        //    {
        //        _sDateRange = "QC Date: " + dAttendenceStartDate.ToString("dd MMM yyyy");
        //    }
        //    else if (eAttendenceDate == EnumCompareOperator.Between)
        //    {
        //        _sDateRange = "QC Date: " + dAttendenceStartDate.ToString("dd MMM yyyy") + " - To - " + dAttendenceEndDate.ToString("dd MMM yyyy");
        //    }
        //    else if (eAttendenceDate == EnumCompareOperator.NotEqualTo)
        //    {
        //        _sDateRange = "QC Date: Not Equal to " + dAttendenceStartDate.ToString("dd MMM yyyy");
        //    }
        //    else if (eAttendenceDate == EnumCompareOperator.GreaterThan)
        //    {
        //        _sDateRange = "QC Date: Greater Than " + dAttendenceStartDate.ToString("dd MMM yyyy");
        //    }
        //    else if (eAttendenceDate == EnumCompareOperator.SmallerThan)
        //    {
        //        _sDateRange = "QC Date: Smaller Than " + dAttendenceStartDate.ToString("dd MMM yyyy");
        //    }
        //    else if (eAttendenceDate == EnumCompareOperator.NotBetween)
        //    {
        //        _sDateRange = "QC Date: Not Between " + dAttendenceStartDate.ToString("dd MMM yyyy") + " - To - " + dAttendenceEndDate.ToString("dd MMM yyyy");
        //    }
        //    #endregion

        //    EnumCompareOperator eQCQty = (EnumCompareOperator)Convert.ToInt32(sSearchingData.Split('~')[3]);
        //    double nQCQtyStsrt = Convert.ToDouble(sSearchingData.Split('~')[4]);
        //    double nQCQtyEnd = Convert.ToDouble(sSearchingData.Split('~')[5]);

        //    EnumCompareOperator eRejectQty = (EnumCompareOperator)Convert.ToInt32(sSearchingData.Split('~')[6]);
        //    double nRejectQtyStsrt = Convert.ToDouble(sSearchingData.Split('~')[7]);
        //    double nRejectQtyEnd = Convert.ToDouble(sSearchingData.Split('~')[8]);

        //    string sSQLQuery = "", sWhereCluse = "", sGroupBy = "", sOrderBy = "";

        //    #region BusinessUnit
        //    if (oAttendenceRegister.BUID > 0)
        //    {
        //        Global.TagSQL(ref sWhereCluse);
        //        sWhereCluse = sWhereCluse + " BUID =" + oAttendenceRegister.BUID.ToString();
        //    }
        //    #endregion

        //    #region AttendenceNo
        //    if (oAttendenceRegister.QCNo != null && oAttendenceRegister.QCNo != "")
        //    {
        //        Global.TagSQL(ref sWhereCluse);
        //        sWhereCluse = sWhereCluse + " QCNo LIKE'%" + oAttendenceRegister.QCNo + "%'";
        //    }
        //    #endregion

        //    #region QCBy
        //    if (oAttendenceRegister.QCBy != 0)
        //    {
        //        Global.TagSQL(ref sWhereCluse);
        //        sWhereCluse = sWhereCluse + " QCBy =" + oAttendenceRegister.QCBy.ToString();
        //    }
        //    #endregion

        //    #region StoreID
        //    if (oAttendenceRegister.StoreID != 0)
        //    {
        //        Global.TagSQL(ref sWhereCluse);
        //        sWhereCluse = sWhereCluse + " StoreID =" + oAttendenceRegister.StoreID.ToString();
        //    }
        //    #endregion

        //    #region BuyerID
        //    if (oAttendenceRegister.BuyerID != 0)
        //    {
        //        Global.TagSQL(ref sWhereCluse);
        //        sWhereCluse = sWhereCluse + " BuyerID =" + oAttendenceRegister.BuyerID.ToString();
        //    }
        //    #endregion

        //    #region StyleNo
        //    if (oAttendenceRegister.StyleNo != null && oAttendenceRegister.StyleNo != "")
        //    {
        //        Global.TagSQL(ref sWhereCluse);
        //        sWhereCluse = sWhereCluse + " StyleNo LIKE'%" + oAttendenceRegister.StyleNo + "%'";
        //    }
        //    #endregion

        //    #region OrderRecapNo
        //    if (oAttendenceRegister.OrderRecapNo != null && oAttendenceRegister.OrderRecapNo != "")
        //    {
        //        Global.TagSQL(ref sWhereCluse);
        //        sWhereCluse = sWhereCluse + " OrderRecapNo LIKE'%" + oAttendenceRegister.OrderRecapNo + "%'";
        //    }
        //    #endregion

        //    #region Remarks
        //    if (oAttendenceRegister.Remarks != null && oAttendenceRegister.Remarks != "")
        //    {
        //        Global.TagSQL(ref sWhereCluse);
        //        sWhereCluse = sWhereCluse + " Remarks LIKE'%" + oAttendenceRegister.Remarks + "%'";
        //    }
        //    #endregion

        //    #region POWiseRemarks
        //    if (oAttendenceRegister.POWiseRemarks != null && oAttendenceRegister.POWiseRemarks != "")
        //    {
        //        Global.TagSQL(ref sWhereCluse);
        //        sWhereCluse = sWhereCluse + " POWiseRemarks LIKE'%" + oAttendenceRegister.POWiseRemarks + "%'";
        //    }
        //    #endregion


        //    #region QC Date
        //    if (eAttendenceDate != EnumCompareOperator.None)
        //    {
        //        if (eAttendenceDate == EnumCompareOperator.EqualTo)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " CONVERT(DATE,CONVERT(VARCHAR(12),QCDate,106)) = CONVERT(DATE, CONVERT(VARCHAR(12), '" + dAttendenceStartDate.ToString("dd MMM yyyy") + "', 106))";
        //        }
        //        else if (eAttendenceDate == EnumCompareOperator.NotEqualTo)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " CONVERT(DATE,CONVERT(VARCHAR(12),QCDate,106)) != CONVERT(DATE, CONVERT(VARCHAR(12), '" + dAttendenceStartDate.ToString("dd MMM yyyy") + "', 106))";
        //        }
        //        else if (eAttendenceDate == EnumCompareOperator.GreaterThan)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " CONVERT(DATE,CONVERT(VARCHAR(12),QCDate,106)) > CONVERT(DATE, CONVERT(VARCHAR(12), '" + dAttendenceStartDate.ToString("dd MMM yyyy") + "', 106))";
        //        }
        //        else if (eAttendenceDate == EnumCompareOperator.SmallerThan)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " CONVERT(DATE,CONVERT(VARCHAR(12),QCDate,106)) < CONVERT(DATE, CONVERT(VARCHAR(12), '" + dAttendenceStartDate.ToString("dd MMM yyyy") + "', 106))";
        //        }
        //        else if (eAttendenceDate == EnumCompareOperator.Between)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " CONVERT(DATE,CONVERT(VARCHAR(12),QCDate,106)) BETWEEN CONVERT(DATE, CONVERT(VARCHAR(12), '" + dAttendenceStartDate.ToString("dd MMM yyyy") + "', 106)) AND CONVERT(DATE, CONVERT(VARCHAR(12), '" + dAttendenceEndDate.ToString("dd MMM yyyy") + "', 106))";
        //        }
        //        else if (eAttendenceDate == EnumCompareOperator.NotBetween)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " CONVERT(DATE,CONVERT(VARCHAR(12),QCDate,106)) NOT BETWEEN CONVERT(DATE, CONVERT(VARCHAR(12), '" + dAttendenceStartDate.ToString("dd MMM yyyy") + "', 106)) AND CONVERT(DATE, CONVERT(VARCHAR(12), '" + dAttendenceEndDate.ToString("dd MMM yyyy") + "', 106))";
        //        }
        //    }
        //    #endregion

        //    #region QC Qty
        //    if (eQCQty != EnumCompareOperator.None)
        //    {
        //        if (eQCQty == EnumCompareOperator.EqualTo)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " QCQty = " + nQCQtyStsrt.ToString("0.00");
        //        }
        //        else if (eQCQty == EnumCompareOperator.NotEqualTo)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " QCQty != " + nQCQtyStsrt.ToString("0.00"); ;
        //        }
        //        else if (eQCQty == EnumCompareOperator.GreaterThan)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " QCQty > " + nQCQtyStsrt.ToString("0.00"); ;
        //        }
        //        else if (eQCQty == EnumCompareOperator.SmallerThan)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " QCQty < " + nQCQtyStsrt.ToString("0.00"); ;
        //        }
        //        else if (eQCQty == EnumCompareOperator.Between)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " QCQty BETWEEN " + nQCQtyStsrt.ToString("0.00") + " AND " + nQCQtyEnd.ToString("0.00");
        //        }
        //        else if (eQCQty == EnumCompareOperator.NotBetween)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " QCQty NOT BETWEEN " + nQCQtyStsrt.ToString("0.00") + " AND " + nQCQtyEnd.ToString("0.00");
        //        }
        //    }
        //    #endregion

        //    #region Reject Qty
        //    if (eRejectQty != EnumCompareOperator.None)
        //    {
        //        if (eRejectQty == EnumCompareOperator.EqualTo)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " RejectQty = " + nRejectQtyStsrt.ToString("0.00");
        //        }
        //        else if (eRejectQty == EnumCompareOperator.NotEqualTo)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " RejectQty != " + nRejectQtyStsrt.ToString("0.00"); ;
        //        }
        //        else if (eRejectQty == EnumCompareOperator.GreaterThan)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " RejectQty > " + nRejectQtyStsrt.ToString("0.00"); ;
        //        }
        //        else if (eRejectQty == EnumCompareOperator.SmallerThan)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " RejectQty < " + nRejectQtyStsrt.ToString("0.00"); ;
        //        }
        //        else if (eRejectQty == EnumCompareOperator.Between)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " RejectQty BETWEEN " + nRejectQtyStsrt.ToString("0.00") + " AND " + nRejectQtyEnd.ToString("0.00");
        //        }
        //        else if (eRejectQty == EnumCompareOperator.NotBetween)
        //        {
        //            Global.TagSQL(ref sWhereCluse);
        //            sWhereCluse = sWhereCluse + " RejectQty NOT BETWEEN " + nRejectQtyStsrt.ToString("0.00") + " AND " + nRejectQtyEnd.ToString("0.00");
        //        }
        //    }
        //    #endregion

        //    #region Report Layout
        //    if (oAttendenceRegister.ReportLayout == EnumReportLayout.DateWiseDetails)
        //    {
        //        sSQLQuery = ""; sGroupBy = ""; sOrderBy = "";
        //        sSQLQuery = "SELECT * FROM View_AttendenceRegister ";
        //        sOrderBy = " ORDER BY  QCDate, AttendenceID, AttendenceDetailID ASC";
        //    }

        //    else if (oAttendenceRegister.ReportLayout == EnumReportLayout.PartyWiseDetails)
        //    {
        //        sSQLQuery = ""; sGroupBy = ""; sOrderBy = "";
        //        sSQLQuery = "SELECT * FROM View_AttendenceRegister ";
        //        sOrderBy = " ORDER BY  BuyerName, AttendenceID, AttendenceDetailID ASC";
        //    }
        //    else if (oAttendenceRegister.ReportLayout == EnumReportLayout.Order_Wise_Details)
        //    {
        //        sSQLQuery = ""; sGroupBy = ""; sOrderBy = "";
        //        sSQLQuery = "SELECT * FROM View_AttendenceRegister ";
        //        sOrderBy = " ORDER BY  OrderRecapNo, AttendenceID, AttendenceDetailID ASC";
        //    }
        //    else if (oAttendenceRegister.ReportLayout == EnumReportLayout.Style_Wise_Details)
        //    {
        //        sSQLQuery = ""; sGroupBy = ""; sOrderBy = "";
        //        sSQLQuery = "SELECT * FROM View_AttendenceRegister ";
        //        sOrderBy = " ORDER BY  StyleNo, AttendenceID, AttendenceDetailID ASC";
        //    }
        //    else
        //    {
        //        sSQLQuery = ""; sGroupBy = ""; sOrderBy = "";
        //        sSQLQuery = "SELECT * FROM View_AttendenceRegister ";
        //        sOrderBy = " ORDER BY QCDate, AttendenceID, AttendenceDetailID ASC";
        //    }
        //    #endregion

        //    sSQLQuery = sSQLQuery + sWhereCluse + sGroupBy + sOrderBy;
        //    return sSQLQuery;
        //}

        //public void ExportToExcelAttendence()
        //{
        //    AttendenceRegister oAttendenceRegister = new AttendenceRegister();
        //    string _sErrorMesage = "";
        //    try
        //    {
        //        _oAttendenceRegisters = new List<AttendenceRegister>();
        //        oAttendenceRegister = (AttendenceRegister)Session[SessionInfo.ParamObj];
        //        string sSQL = this.GetSQL(oAttendenceRegister);
        //        _oAttendenceRegisters = AttendenceRegister.Gets(sSQL, (int)Session[SessionInfo.currentUserID]);
        //        if (_oAttendenceRegisters.Count <= 0)
        //        {
        //            _sErrorMesage = "There is no data for print!";
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        _oAttendenceRegisters = new List<AttendenceRegister>();
        //        _sErrorMesage = ex.Message;
        //    }

        //    if (_sErrorMesage == "")
        //    {
        //        Company _oCompany = new Company();
        //        _oCompany = _oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
        //        _oCompany.CompanyLogo = GetCompanyLogo(_oCompany);
        //        if (oAttendenceRegister.BUID > 0)
        //        {
        //            BusinessUnit oBU = new BusinessUnit();
        //            oBU = oBU.Get(oAttendenceRegister.BUID, (int)Session[SessionInfo.currentUserID]);
        //            _oCompany = GlobalObject.BUTOCompany(_oCompany, oBU);
        //        }

        //        double GrandTotalOrderQty = 0, GrandTotalQCPassQty = 0, GrandTotalRejectQty = 0;
        //        int count = 0, num = 0;
        //        double SubTotalOrderQty = 0, SubTotalQCPassQty = 0, SubTotalRejectQty = 0;
        //        double TotalOrderQty = 0, TotalQCPassQty = 0, TotalRejectQty = 0;
        //        string sQCNo = "";

        //        if (oAttendenceRegister.ReportLayout == EnumReportLayout.DateWiseDetails)
        //        {
        //            #region full excel
        //            int rowIndex = 2;
        //            ExcelRange cell;
        //            ExcelFill fill;
        //            OfficeOpenXml.Style.Border border;

        //            using (var excelPackage = new ExcelPackage())
        //            {
        //                excelPackage.Workbook.Properties.Author = "ESimSol";
        //                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
        //                var sheet = excelPackage.Workbook.Worksheets.Add("Date Wise GU QC Register(Details)");
        //                sheet.Name = "Date Wise QC Register(Details)";
        //                sheet.Column(2).Width = 5; //SL
        //                sheet.Column(3).Width = 10; //qc no
        //                sheet.Column(4).Width = 20; //qc by
        //                sheet.Column(5).Width = 25; //Store
        //                sheet.Column(6).Width = 20; //buyer
        //                sheet.Column(7).Width = 20; //Style
        //                sheet.Column(8).Width = 15; //PO
        //                sheet.Column(9).Width = 13; //Order qty
        //                sheet.Column(10).Width = 13; //QC qty
        //                sheet.Column(11).Width = 13; //Reject qty

        //                #region Report Header
        //                sheet.Cells[rowIndex, 2, rowIndex, 11].Merge = true;
        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = _oCompany.Name; cell.Style.Font.Bold = true;
        //                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //                rowIndex = rowIndex + 1;

        //                sheet.Cells[rowIndex, 2, rowIndex, 11].Merge = true;
        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = "Date Wise QC Register(Details)"; cell.Style.Font.Bold = true;
        //                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //                rowIndex = rowIndex + 1;

        //                sheet.Cells[rowIndex, 2, rowIndex, 11].Merge = true;
        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = _sDateRange; cell.Style.Font.Bold = true;
        //                cell.Style.Font.Size = 11; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //                rowIndex = rowIndex + 2;
        //                #endregion

        //                #region Column Header

        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = "#SL"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 3]; cell.Value = "QC No"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 4]; cell.Value = "QC By"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 5]; cell.Value = "Store"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 6]; cell.Value = "Buyer"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 7]; cell.Value = "Style No"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 8]; cell.Value = "PO/Recap No"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 9]; cell.Value = "Order Qty"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 10]; cell.Value = "QC Pass Qty"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 11]; cell.Value = "Reject Qty"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                rowIndex = rowIndex + 1;
        //                #endregion

        //                #region group by
        //                if (_oAttendenceRegisters.Count > 0)
        //                {
        //                    var data = _oAttendenceRegisters.GroupBy(x => new { x.QCDateInString }, (key, grp) => new  //, x.QCNo, x.QCByName, x.StoreName, x.BuyerName
        //                    {
        //                        QCDate = key.QCDateInString,
        //                        Results = grp.ToList() //All data
        //                    });
        //                #endregion

        //                    #region Report Data
        //                    GrandTotalOrderQty = 0; GrandTotalQCPassQty = 0; GrandTotalRejectQty = 0;

        //                    foreach (var oData in data)
        //                    {
        //                        cell = sheet.Cells[rowIndex, 2, rowIndex, 11]; cell.Merge = true; cell.Value = "QC Date : @ " + oData.QCDate; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                        rowIndex = rowIndex + 1;

        //                        count = 0; num = 0;
        //                        SubTotalOrderQty = 0; SubTotalQCPassQty = 0; SubTotalRejectQty = 0;
        //                        TotalOrderQty = 0; TotalQCPassQty = 0; TotalRejectQty = 0;

        //                        foreach (var oItem in oData.Results)
        //                        {
        //                            count++;
        //                            #region subtotal
        //                            if (sQCNo != "")
        //                            {
        //                                if (sQCNo != oItem.QCNo && count > 1)
        //                                {
        //                                    cell = sheet.Cells[rowIndex, 2, rowIndex, 8]; cell.Merge = true; cell.Value = "Sub Total : "; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                    cell = sheet.Cells[rowIndex, 9]; cell.Value = SubTotalOrderQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                    cell = sheet.Cells[rowIndex, 10]; cell.Value = SubTotalQCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                    cell = sheet.Cells[rowIndex, 11]; cell.Value = SubTotalRejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                    rowIndex = rowIndex + 1;
        //                                    SubTotalOrderQty = 0; SubTotalQCPassQty = 0; SubTotalRejectQty = 0;
        //                                }
        //                            }
        //                            #endregion

        //                            if (sQCNo != oItem.QCNo)
        //                            {
        //                                num++;
        //                                int rowCount = (oData.Results.Count(x => x.QCNo == oItem.QCNo) - 1);
        //                                cell = sheet.Cells[rowIndex, 2, rowIndex + rowCount, 2]; cell.Merge = true; cell.Value = num; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                cell = sheet.Cells[rowIndex, 3, rowIndex + rowCount, 3]; cell.Merge = true; cell.Value = oItem.QCNo; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                cell = sheet.Cells[rowIndex, 4, rowIndex + rowCount, 4]; cell.Merge = true; cell.Value = oItem.QCByName; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                cell = sheet.Cells[rowIndex, 5, rowIndex + rowCount, 5]; cell.Merge = true; cell.Value = oItem.StoreName; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                cell = sheet.Cells[rowIndex, 6, rowIndex + rowCount, 6]; cell.Merge = true; cell.Value = oItem.BuyerName; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            }
        //                            cell = sheet.Cells[rowIndex, 7]; cell.Merge = true; cell.Value = oItem.StyleNo; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 8]; cell.Merge = true; cell.Value = oItem.OrderRecapNo; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 9]; cell.Merge = true; cell.Value = oItem.TotalQuantity.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                            SubTotalOrderQty += oItem.TotalQuantity;
        //                            TotalOrderQty += oItem.TotalQuantity;
        //                            GrandTotalOrderQty += oItem.TotalQuantity;

        //                            cell = sheet.Cells[rowIndex, 10]; cell.Merge = true; cell.Value = oItem.QCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                            SubTotalQCPassQty += oItem.QCPassQty;
        //                            TotalQCPassQty += oItem.QCPassQty;
        //                            GrandTotalQCPassQty += oItem.QCPassQty;

        //                            cell = sheet.Cells[rowIndex, 11]; cell.Merge = true; cell.Value = oItem.RejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                            SubTotalRejectQty += oItem.RejectQty;
        //                            TotalRejectQty += oItem.RejectQty;
        //                            GrandTotalRejectQty += oItem.RejectQty;

        //                            rowIndex++;
        //                            sQCNo = oItem.QCNo;
        //                        }
        //                        #region subtotal
        //                        if (sQCNo != "")
        //                        {
        //                            cell = sheet.Cells[rowIndex, 2, rowIndex, 8]; cell.Merge = true; cell.Value = "Sub Total : "; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 9]; cell.Value = SubTotalOrderQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 10]; cell.Value = SubTotalQCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 11]; cell.Value = SubTotalRejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            rowIndex = rowIndex + 1;
        //                            SubTotalOrderQty = 0; SubTotalQCPassQty = 0; SubTotalRejectQty = 0;
        //                        }
        //                        #endregion

        //                        #region total
        //                        cell = sheet.Cells[rowIndex, 2, rowIndex, 8]; cell.Merge = true; cell.Value = "Date Wise Total : "; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        cell = sheet.Cells[rowIndex, 9]; cell.Value = TotalOrderQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        cell = sheet.Cells[rowIndex, 10]; cell.Value = TotalQCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        cell = sheet.Cells[rowIndex, 11]; cell.Value = TotalRejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        rowIndex = rowIndex + 1;
        //                        #endregion

        //                        cell = sheet.Cells[rowIndex, 2, rowIndex, 11]; cell.Merge = true; cell.Value = ""; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                        rowIndex = rowIndex + 1;
        //                    }

        //                    #region grand total
        //                    cell = sheet.Cells[rowIndex, 2, rowIndex, 8]; cell.Merge = true; cell.Value = "Grand Total : "; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    cell = sheet.Cells[rowIndex, 9]; cell.Value = GrandTotalOrderQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    cell = sheet.Cells[rowIndex, 10]; cell.Value = GrandTotalQCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    cell = sheet.Cells[rowIndex, 11]; cell.Value = GrandTotalRejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    rowIndex = rowIndex + 1;
        //                    #endregion

        //                    #endregion

        //                    Response.ClearContent();
        //                    Response.BinaryWrite(excelPackage.GetAsByteArray());
        //                    Response.AddHeader("content-disposition", "attachment; filename=Date_Wise_GU_QC_Register.xlsx");
        //                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        //                    Response.Flush();
        //                    Response.End();
        //                }

        //            }
        //            #endregion
        //        }
        //        else if (oAttendenceRegister.ReportLayout == EnumReportLayout.PartyWiseDetails)
        //        {
        //            #region full excel
        //            int rowIndex = 2;
        //            ExcelRange cell;
        //            ExcelFill fill;
        //            OfficeOpenXml.Style.Border border;

        //            using (var excelPackage = new ExcelPackage())
        //            {
        //                excelPackage.Workbook.Properties.Author = "ESimSol";
        //                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
        //                var sheet = excelPackage.Workbook.Worksheets.Add("Party Wise GU QC Register(Details)");
        //                sheet.Name = "Party Wise GU QC Register(Details)";
        //                sheet.Column(2).Width = 5; //SL
        //                sheet.Column(3).Width = 10; //qc no
        //                sheet.Column(4).Width = 20; //qc by
        //                sheet.Column(5).Width = 25; //Store
        //                sheet.Column(6).Width = 12; //qc date
        //                sheet.Column(7).Width = 20; //Style
        //                sheet.Column(8).Width = 15; //PO
        //                sheet.Column(9).Width = 13; //Order qty
        //                sheet.Column(10).Width = 13; //QC qty
        //                sheet.Column(11).Width = 13; //Reject qty

        //                #region Report Header
        //                sheet.Cells[rowIndex, 2, rowIndex, 11].Merge = true;
        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = _oCompany.Name; cell.Style.Font.Bold = true;
        //                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //                rowIndex = rowIndex + 1;

        //                sheet.Cells[rowIndex, 2, rowIndex, 11].Merge = true;
        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = "Party Wise QC Register(Details)"; cell.Style.Font.Bold = true;
        //                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //                rowIndex = rowIndex + 1;

        //                sheet.Cells[rowIndex, 2, rowIndex, 11].Merge = true;
        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = _sDateRange; cell.Style.Font.Bold = true;
        //                cell.Style.Font.Size = 11; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //                rowIndex = rowIndex + 2;
        //                #endregion

        //                #region Column Header

        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = "#SL"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 3]; cell.Value = "QC No"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 4]; cell.Value = "QC By"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 5]; cell.Value = "Store"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 6]; cell.Value = "QC Date"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 7]; cell.Value = "Style No"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 8]; cell.Value = "PO/Recap No"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 9]; cell.Value = "Order Qty"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 10]; cell.Value = "QC Pass Qty"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 11]; cell.Value = "Reject Qty"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                rowIndex = rowIndex + 1;
        //                #endregion

        //                #region group by
        //                if (_oAttendenceRegisters.Count > 0)
        //                {
        //                    var data = _oAttendenceRegisters.GroupBy(x => new { x.BuyerName }, (key, grp) => new  //, x.QCNo, x.QCByName, x.StoreName, x.BuyerName
        //                    {
        //                        buyerName = key.BuyerName,
        //                        Results = grp.ToList() //All data
        //                    });
        //                #endregion

        //                    #region Report Data
        //                    GrandTotalOrderQty = 0; GrandTotalQCPassQty = 0; GrandTotalRejectQty = 0;

        //                    foreach (var oData in data)
        //                    {
        //                        cell = sheet.Cells[rowIndex, 2, rowIndex, 11]; cell.Merge = true; cell.Value = "Party : @ " + oData.buyerName; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                        rowIndex = rowIndex + 1;

        //                        count = 0; num = 0;
        //                        SubTotalOrderQty = 0; SubTotalQCPassQty = 0; SubTotalRejectQty = 0;
        //                        TotalOrderQty = 0; TotalQCPassQty = 0; TotalRejectQty = 0;

        //                        foreach (var oItem in oData.Results)
        //                        {
        //                            count++;
        //                            #region subtotal
        //                            if (sQCNo != "")
        //                            {
        //                                if (sQCNo != oItem.QCNo && count > 1)
        //                                {
        //                                    cell = sheet.Cells[rowIndex, 2, rowIndex, 8]; cell.Merge = true; cell.Value = "Sub Total : "; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                    cell = sheet.Cells[rowIndex, 9]; cell.Value = SubTotalOrderQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                    cell = sheet.Cells[rowIndex, 10]; cell.Value = SubTotalQCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                    cell = sheet.Cells[rowIndex, 11]; cell.Value = SubTotalRejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                    rowIndex = rowIndex + 1;
        //                                    SubTotalOrderQty = 0; SubTotalQCPassQty = 0; SubTotalRejectQty = 0;
        //                                }
        //                            }
        //                            #endregion

        //                            if (sQCNo != oItem.QCNo)
        //                            {
        //                                num++;
        //                                int rowCount = (oData.Results.Count(x => x.QCNo == oItem.QCNo) - 1);
        //                                cell = sheet.Cells[rowIndex, 2, rowIndex + rowCount, 2]; cell.Merge = true; cell.Value = num; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                cell = sheet.Cells[rowIndex, 3, rowIndex + rowCount, 3]; cell.Merge = true; cell.Value = oItem.QCNo; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                cell = sheet.Cells[rowIndex, 4, rowIndex + rowCount, 4]; cell.Merge = true; cell.Value = oItem.QCByName; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                cell = sheet.Cells[rowIndex, 5, rowIndex + rowCount, 5]; cell.Merge = true; cell.Value = oItem.StoreName; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                                cell = sheet.Cells[rowIndex, 6, rowIndex + rowCount, 6]; cell.Merge = true; cell.Value = oItem.QCDateInString; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            }
        //                            cell = sheet.Cells[rowIndex, 7]; cell.Merge = true; cell.Value = oItem.StyleNo; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 8]; cell.Merge = true; cell.Value = oItem.OrderRecapNo; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 9]; cell.Merge = true; cell.Value = oItem.TotalQuantity.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                            SubTotalOrderQty += oItem.TotalQuantity;
        //                            TotalOrderQty += oItem.TotalQuantity;
        //                            GrandTotalOrderQty += oItem.TotalQuantity;

        //                            cell = sheet.Cells[rowIndex, 10]; cell.Merge = true; cell.Value = oItem.QCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                            SubTotalQCPassQty += oItem.QCPassQty;
        //                            TotalQCPassQty += oItem.QCPassQty;
        //                            GrandTotalQCPassQty += oItem.QCPassQty;

        //                            cell = sheet.Cells[rowIndex, 11]; cell.Merge = true; cell.Value = oItem.RejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                            SubTotalRejectQty += oItem.RejectQty;
        //                            TotalRejectQty += oItem.RejectQty;
        //                            GrandTotalRejectQty += oItem.RejectQty;

        //                            rowIndex++;
        //                            sQCNo = oItem.QCNo;
        //                        }
        //                        #region subtotal
        //                        if (sQCNo != "")
        //                        {
        //                            cell = sheet.Cells[rowIndex, 2, rowIndex, 8]; cell.Merge = true; cell.Value = "Sub Total : "; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 9]; cell.Value = SubTotalOrderQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 10]; cell.Value = SubTotalQCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 11]; cell.Value = SubTotalRejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            rowIndex = rowIndex + 1;
        //                            SubTotalOrderQty = 0; SubTotalQCPassQty = 0; SubTotalRejectQty = 0;
        //                        }
        //                        #endregion

        //                        #region total
        //                        cell = sheet.Cells[rowIndex, 2, rowIndex, 8]; cell.Merge = true; cell.Value = "Party Wise Total : "; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        cell = sheet.Cells[rowIndex, 9]; cell.Value = TotalOrderQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        cell = sheet.Cells[rowIndex, 10]; cell.Value = TotalQCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        cell = sheet.Cells[rowIndex, 11]; cell.Value = TotalRejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        rowIndex = rowIndex + 1;
        //                        #endregion

        //                        cell = sheet.Cells[rowIndex, 2, rowIndex, 11]; cell.Merge = true; cell.Value = ""; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                        rowIndex = rowIndex + 1;
        //                    }

        //                    #region grand total
        //                    cell = sheet.Cells[rowIndex, 2, rowIndex, 8]; cell.Merge = true; cell.Value = "Grand Total : "; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    cell = sheet.Cells[rowIndex, 9]; cell.Value = GrandTotalOrderQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    cell = sheet.Cells[rowIndex, 10]; cell.Value = GrandTotalQCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    cell = sheet.Cells[rowIndex, 11]; cell.Value = GrandTotalRejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    rowIndex = rowIndex + 1;
        //                    #endregion

        //                    #endregion

        //                    Response.ClearContent();
        //                    Response.BinaryWrite(excelPackage.GetAsByteArray());
        //                    Response.AddHeader("content-disposition", "attachment; filename=Party_Wise_GU_QC_Register.xlsx");
        //                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        //                    Response.Flush();
        //                    Response.End();
        //                }

        //            }
        //            #endregion
        //        }
        //        else if (oAttendenceRegister.ReportLayout == EnumReportLayout.Order_Wise_Details)
        //        {
        //            #region full excel
        //            int rowIndex = 2;
        //            ExcelRange cell;
        //            ExcelFill fill;
        //            OfficeOpenXml.Style.Border border;

        //            using (var excelPackage = new ExcelPackage())
        //            {
        //                excelPackage.Workbook.Properties.Author = "ESimSol";
        //                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
        //                var sheet = excelPackage.Workbook.Worksheets.Add("Order Wise GU QC Register(Details)");
        //                sheet.Name = "Order Wise GU QC Register(Details)";
        //                sheet.Column(2).Width = 5; //SL
        //                sheet.Column(3).Width = 10; //qc no
        //                sheet.Column(4).Width = 20; //qc by
        //                sheet.Column(5).Width = 12; //qc date
        //                sheet.Column(6).Width = 25; //Store
        //                sheet.Column(7).Width = 20; //buyer
        //                sheet.Column(8).Width = 20; //Style
        //                sheet.Column(9).Width = 13; //Order qty
        //                sheet.Column(10).Width = 13; //QC qty
        //                sheet.Column(11).Width = 13; //Reject qty

        //                #region Report Header
        //                sheet.Cells[rowIndex, 2, rowIndex, 11].Merge = true;
        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = _oCompany.Name; cell.Style.Font.Bold = true;
        //                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //                rowIndex = rowIndex + 1;

        //                sheet.Cells[rowIndex, 2, rowIndex, 11].Merge = true;
        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = "Order Wise QC Register(Details)"; cell.Style.Font.Bold = true;
        //                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //                rowIndex = rowIndex + 1;

        //                sheet.Cells[rowIndex, 2, rowIndex, 11].Merge = true;
        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = _sDateRange; cell.Style.Font.Bold = true;
        //                cell.Style.Font.Size = 11; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //                rowIndex = rowIndex + 2;
        //                #endregion

        //                #region Column Header

        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = "#SL"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 3]; cell.Value = "QC No"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 4]; cell.Value = "QC By"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 5]; cell.Value = "QC Date"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 6]; cell.Value = "Store"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 7]; cell.Value = "Buyer"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 8]; cell.Value = "Style"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 9]; cell.Value = "Order Qty"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 10]; cell.Value = "QC Pass Qty"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 11]; cell.Value = "Reject Qty"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                rowIndex = rowIndex + 1;
        //                #endregion

        //                #region group by
        //                if (_oAttendenceRegisters.Count > 0)
        //                {
        //                    var data = _oAttendenceRegisters.GroupBy(x => new { x.OrderRecapNo }, (key, grp) => new  //, x.QCNo, x.QCByName, x.StoreName, x.BuyerName
        //                    {
        //                        PO = key.OrderRecapNo,
        //                        Results = grp.ToList() //All data
        //                    });
        //                #endregion

        //                    #region Report Data
        //                    GrandTotalOrderQty = 0; GrandTotalQCPassQty = 0; GrandTotalRejectQty = 0;

        //                    foreach (var oData in data)
        //                    {
        //                        cell = sheet.Cells[rowIndex, 2, rowIndex, 11]; cell.Merge = true; cell.Value = "PO/Order No : @ " + oData.PO; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                        rowIndex = rowIndex + 1;

        //                        count = 0; num = 0;
        //                        SubTotalOrderQty = 0; SubTotalQCPassQty = 0; SubTotalRejectQty = 0;
        //                        TotalOrderQty = 0; TotalQCPassQty = 0; TotalRejectQty = 0;

        //                        foreach (var oItem in oData.Results)
        //                        {
        //                            count++;

        //                            cell = sheet.Cells[rowIndex, 2]; cell.Merge = true; cell.Value = count; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 3]; cell.Merge = true; cell.Value = oItem.QCNo; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 4]; cell.Merge = true; cell.Value = oItem.QCByName; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 5]; cell.Merge = true; cell.Value = oItem.QCDateInString; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 6]; cell.Merge = true; cell.Value = oItem.StoreName; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 7]; cell.Merge = true; cell.Value = oItem.BuyerName; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 8]; cell.Merge = true; cell.Value = oItem.StyleNo; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 9]; cell.Merge = true; cell.Value = oItem.TotalQuantity.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                            SubTotalOrderQty += oItem.TotalQuantity;
        //                            TotalOrderQty += oItem.TotalQuantity;
        //                            GrandTotalOrderQty += oItem.TotalQuantity;

        //                            cell = sheet.Cells[rowIndex, 10]; cell.Merge = true; cell.Value = oItem.QCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                            SubTotalQCPassQty += oItem.QCPassQty;
        //                            TotalQCPassQty += oItem.QCPassQty;
        //                            GrandTotalQCPassQty += oItem.QCPassQty;

        //                            cell = sheet.Cells[rowIndex, 11]; cell.Merge = true; cell.Value = oItem.RejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                            SubTotalRejectQty += oItem.RejectQty;
        //                            TotalRejectQty += oItem.RejectQty;
        //                            GrandTotalRejectQty += oItem.RejectQty;

        //                            rowIndex++;
        //                            sQCNo = oItem.QCNo;
        //                        }

        //                        #region total
        //                        cell = sheet.Cells[rowIndex, 2, rowIndex, 8]; cell.Merge = true; cell.Value = "Order Wise Total : "; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        cell = sheet.Cells[rowIndex, 9]; cell.Value = TotalOrderQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        cell = sheet.Cells[rowIndex, 10]; cell.Value = TotalQCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        cell = sheet.Cells[rowIndex, 11]; cell.Value = TotalRejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        rowIndex = rowIndex + 1;
        //                        #endregion

        //                        cell = sheet.Cells[rowIndex, 2, rowIndex, 11]; cell.Merge = true; cell.Value = ""; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                        rowIndex = rowIndex + 1;
        //                    }

        //                    #region grand total
        //                    cell = sheet.Cells[rowIndex, 2, rowIndex, 8]; cell.Merge = true; cell.Value = "Grand Total : "; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    cell = sheet.Cells[rowIndex, 9]; cell.Value = GrandTotalOrderQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    cell = sheet.Cells[rowIndex, 10]; cell.Value = GrandTotalQCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    cell = sheet.Cells[rowIndex, 11]; cell.Value = GrandTotalRejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    rowIndex = rowIndex + 1;
        //                    #endregion

        //                    #endregion

        //                    Response.ClearContent();
        //                    Response.BinaryWrite(excelPackage.GetAsByteArray());
        //                    Response.AddHeader("content-disposition", "attachment; filename=Order_Wise_GU_QC_Register.xlsx");
        //                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        //                    Response.Flush();
        //                    Response.End();
        //                }

        //            }
        //            #endregion
        //        }
        //        else if (oAttendenceRegister.ReportLayout == EnumReportLayout.Style_Wise_Details)
        //        {
        //            #region full excel
        //            int rowIndex = 2;
        //            ExcelRange cell;
        //            ExcelFill fill;
        //            OfficeOpenXml.Style.Border border;

        //            using (var excelPackage = new ExcelPackage())
        //            {
        //                excelPackage.Workbook.Properties.Author = "ESimSol";
        //                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
        //                var sheet = excelPackage.Workbook.Worksheets.Add("Style Wise GU QC Register(Details)");
        //                sheet.Name = "Style Wise GU QC Register(Details)";
        //                sheet.Column(2).Width = 5; //SL
        //                sheet.Column(3).Width = 10; //qc no
        //                sheet.Column(4).Width = 20; //qc by
        //                sheet.Column(5).Width = 12; //qc date
        //                sheet.Column(6).Width = 25; //Store
        //                sheet.Column(7).Width = 20; //buyer
        //                sheet.Column(8).Width = 20; //PO
        //                sheet.Column(9).Width = 13; //Order qty
        //                sheet.Column(10).Width = 13; //QC qty
        //                sheet.Column(11).Width = 13; //Reject qty

        //                #region Report Header
        //                sheet.Cells[rowIndex, 2, rowIndex, 11].Merge = true;
        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = _oCompany.Name; cell.Style.Font.Bold = true;
        //                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //                rowIndex = rowIndex + 1;

        //                sheet.Cells[rowIndex, 2, rowIndex, 11].Merge = true;
        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = "Style Wise QC Register(Details)"; cell.Style.Font.Bold = true;
        //                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //                rowIndex = rowIndex + 1;

        //                sheet.Cells[rowIndex, 2, rowIndex, 11].Merge = true;
        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = _sDateRange; cell.Style.Font.Bold = true;
        //                cell.Style.Font.Size = 11; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //                rowIndex = rowIndex + 2;

        //                #endregion

        //                #region Column Header

        //                cell = sheet.Cells[rowIndex, 2]; cell.Value = "#SL"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 3]; cell.Value = "QC No"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 4]; cell.Value = "QC By"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 5]; cell.Value = "QC Date"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 6]; cell.Value = "Store"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 7]; cell.Value = "Buyer"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 8]; cell.Value = "PO/Recap No"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 9]; cell.Value = "Order Qty"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 10]; cell.Value = "QC Pass Qty"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                cell = sheet.Cells[rowIndex, 11]; cell.Value = "Reject Qty"; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                rowIndex = rowIndex + 1;
        //                #endregion

        //                #region group by
        //                if (_oAttendenceRegisters.Count > 0)
        //                {
        //                    var data = _oAttendenceRegisters.GroupBy(x => new { x.StyleNo }, (key, grp) => new  //, x.QCNo, x.QCByName, x.StoreName, x.BuyerName
        //                    {
        //                        StyleNo = key.StyleNo,
        //                        Results = grp.ToList() //All data
        //                    });
        //                #endregion

        //                    #region Report Data
        //                    GrandTotalOrderQty = 0; GrandTotalQCPassQty = 0; GrandTotalRejectQty = 0;

        //                    foreach (var oData in data)
        //                    {
        //                        cell = sheet.Cells[rowIndex, 2, rowIndex, 11]; cell.Merge = true; cell.Value = "Style No : @ " + oData.StyleNo; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                        rowIndex = rowIndex + 1;

        //                        count = 0; num = 0;
        //                        SubTotalOrderQty = 0; SubTotalQCPassQty = 0; SubTotalRejectQty = 0;
        //                        TotalOrderQty = 0; TotalQCPassQty = 0; TotalRejectQty = 0;

        //                        foreach (var oItem in oData.Results)
        //                        {
        //                            count++;

        //                            cell = sheet.Cells[rowIndex, 2]; cell.Merge = true; cell.Value = count; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 3]; cell.Merge = true; cell.Value = oItem.QCNo; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 4]; cell.Merge = true; cell.Value = oItem.QCByName; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 5]; cell.Merge = true; cell.Value = oItem.QCDateInString; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 6]; cell.Merge = true; cell.Value = oItem.StoreName; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 7]; cell.Merge = true; cell.Value = oItem.BuyerName; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 8]; cell.Merge = true; cell.Value = oItem.OrderRecapNo; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                            cell = sheet.Cells[rowIndex, 9]; cell.Merge = true; cell.Value = oItem.TotalQuantity.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                            SubTotalOrderQty += oItem.TotalQuantity;
        //                            TotalOrderQty += oItem.TotalQuantity;
        //                            GrandTotalOrderQty += oItem.TotalQuantity;

        //                            cell = sheet.Cells[rowIndex, 10]; cell.Merge = true; cell.Value = oItem.QCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                            SubTotalQCPassQty += oItem.QCPassQty;
        //                            TotalQCPassQty += oItem.QCPassQty;
        //                            GrandTotalQCPassQty += oItem.QCPassQty;

        //                            cell = sheet.Cells[rowIndex, 11]; cell.Merge = true; cell.Value = oItem.RejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
        //                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                            SubTotalRejectQty += oItem.RejectQty;
        //                            TotalRejectQty += oItem.RejectQty;
        //                            GrandTotalRejectQty += oItem.RejectQty;

        //                            rowIndex++;
        //                            sQCNo = oItem.QCNo;
        //                        }

        //                        #region total
        //                        cell = sheet.Cells[rowIndex, 2, rowIndex, 8]; cell.Merge = true; cell.Value = "Style Wise Total : "; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        cell = sheet.Cells[rowIndex, 9]; cell.Value = TotalOrderQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        cell = sheet.Cells[rowIndex, 10]; cell.Value = TotalQCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        cell = sheet.Cells[rowIndex, 11]; cell.Value = TotalRejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                        rowIndex = rowIndex + 1;
        //                        #endregion

        //                        cell = sheet.Cells[rowIndex, 2, rowIndex, 11]; cell.Merge = true; cell.Value = ""; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
        //                        rowIndex = rowIndex + 1;
        //                    }

        //                    #region grand total
        //                    cell = sheet.Cells[rowIndex, 2, rowIndex, 8]; cell.Merge = true; cell.Value = "Grand Total : "; cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    cell = sheet.Cells[rowIndex, 9]; cell.Value = GrandTotalOrderQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    cell = sheet.Cells[rowIndex, 10]; cell.Value = GrandTotalQCPassQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    cell = sheet.Cells[rowIndex, 11]; cell.Value = GrandTotalRejectQty.ToString("#,##0.00;(#,##0.00)"); cell.Style.Font.Bold = true; cell.Style.WrapText = true;
        //                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
        //                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

        //                    rowIndex = rowIndex + 1;
        //                    #endregion

        //                    #endregion

        //                    Response.ClearContent();
        //                    Response.BinaryWrite(excelPackage.GetAsByteArray());
        //                    Response.AddHeader("content-disposition", "attachment; filename=Style_Wise_GU_QC_Register.xlsx");
        //                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        //                    Response.Flush();
        //                    Response.End();
        //                }

        //            }
        //            #endregion
        //        }
        //    }
        //}



        public ActionResult LateEarlySummary(string sSearchingData)
        {
            AttendenceRegister oAttendenceRegister = new AttendenceRegister();
            string _sErrorMesage = "";

            try
            {
                _oAttendenceRegisters = new List<AttendenceRegister>();

                DateTime DateFrom = Convert.ToDateTime(sSearchingData.Split('~')[0]);
                DateTime DateTo = Convert.ToDateTime(sSearchingData.Split('~')[1]);
                string sBusinessUnitIds = sSearchingData.Split('~')[2];
                string sLocationID = sSearchingData.Split('~')[3];
                string sDepartmentIds = sSearchingData.Split('~')[4];
                string sDesignationIds = sSearchingData.Split('~')[5];
                string sSalarySchemeIDs = sSearchingData.Split('~')[6];
                string sGroupIDs = sSearchingData.Split('~')[7];
                string sBlockIDs = sSearchingData.Split('~')[8];
                string sEmployeeIDs = sSearchingData.Split('~')[9];
                string ShiftIds = sSearchingData.Split('~')[10];
                double nStartSalaryRange = Convert.ToDouble(sSearchingData.Split('~')[11]);
                double nEndSalaryRange = Convert.ToDouble(sSearchingData.Split('~')[12]);
                string sWorkingStatus = sSearchingData.Split('~')[13];
                string sRemarks = sSearchingData.Split('~')[14];
                bool bIsMultipleMonth = Convert.ToBoolean(sSearchingData.Split('~')[15]);
                string sMonthIDs = sSearchingData.Split('~')[16];
                string sYearIDs = sSearchingData.Split('~')[17];

                _sDateRange = DateFrom.ToString("dd MMM yyyy") + "  To  " + DateTo.ToString("dd MMM yyyy");

                _sTotalDays = ((DateTo - DateFrom).TotalDays + 1).ToString();
                //_nTotalDays = (DateTo - DateFrom).TotalDays;
                //if (_nTotalDays < 0) _nTotalDays *= -1;
                //if (_nTotalDays > 0) _nTotalDays++;
                _oAttendenceRegisters = AttendenceRegister.GetsLateEarly(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, sWorkingStatus, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ShiftIds, sRemarks, bIsMultipleMonth, sMonthIDs, sYearIDs, (int)Session[SessionInfo.currentUserID]);
                if (_oAttendenceRegisters.Count <= 0)
                {
                    _sErrorMesage = "There is no data for print!";
                }
            }
            catch (Exception ex)
            {
                _oAttendenceRegisters = new List<AttendenceRegister>();
                _sErrorMesage = ex.Message;
            }

            if (_sErrorMesage == "")
            {
                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);
                //if (oAttendenceRegister.BUID > 0)
                //{
                //    BusinessUnit oBU = new BusinessUnit();
                //    oBU = oBU.Get(oAttendenceRegister.BUID, (int)Session[SessionInfo.currentUserID]);
                //    oCompany = GlobalObject.BUTOCompany(oCompany, oBU);
                //}

                rptLateEarlySummary oReport = new rptLateEarlySummary();
                byte[] abytes = oReport.PrepareReport(_oAttendenceRegisters, oCompany);
                return File(abytes, "application/pdf");
                //return null;
            }
            else
            {
                rptErrorMessage oReport = new rptErrorMessage();
                byte[] abytes = oReport.PrepareReport(_sErrorMesage);
                return File(abytes, "application/pdf");
            }
        }


        #endregion



    }


}
