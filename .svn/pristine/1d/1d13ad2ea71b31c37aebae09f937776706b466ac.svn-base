@{
    ViewBag.Title = "LotMixing List";
}

@model IEnumerable <ESimSol.BusinessObjects.LotMixing>

<div ng-app="LotMixingModule">
    <div ng-controller="LotMixingController">
        <div class="ui-grid-top-panel">
            <div class="container">
                <div class="form-inline">
                    <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="AdvanceSearch()" ng-hide="btnAdvSearch"> <span class="glyphicon glyphicon-search" aria-hidden="true"> Adv.Search</span></button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="add()" ng-hide="btnAdd"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> New</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="edit()" ng-hide="btnEdit"> <span class="glyphicon glyphicon-edit" aria-hidden="true"></span> Edit</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="delete()" ng-hide="btnDelete"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Delete</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="view()" ng-hide="btnView"> <span class="glyphicon glyphicon-list-alt" aria-hidden="true"></span> View</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Approve()" ng-hide="btnApprove"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Approve</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="UndoApprove()" ng-hide="btnUndoApprove"> <span class="glyphicon glyphicon-circle-arrow-down" aria-hidden="true"></span> Undo Approve</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Complete()" ng-hide="btnComplete"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Complete</button>
                    @*<button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Receive()" ng-hide="btnReceive"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Receive</button>*@
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PrintPreview()" > <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Preview</button>
                 </div>
            </div>
        </div>
        <div class="row" style="margin:2px; padding:0;">
            <div style="width:100%" ui-grid="gridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav class="grid ui-grid-selectable"></div>
        </div>
        
    </div>
</div>

<style type="text/css">

     .form-control{
        height:26px;
        padding:0px 6px;
        font-size:12px;
    }
    .grid {
        height: 530px;
        width: 99%;
    }

    .custom-pagination {
        margin-top: -15px;
        margin-bottom: -15px;
    }

    .spacing {
        padding-bottom: 5px;
    }
</style>

<script type="text/javascript">

    var pager =[];
    var _nBUID=0;
    var oAuthorizationRolesMapping =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.AuthorizationRolesMapping]));
    _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    var oLotMixings =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    var oRequisitionTypes =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.RequisitionTypes));
    _nBUID =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BUID));
    _nOptType =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.OptType));

    var oIssueStores =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.IssueStores));
    var oReceiveStores =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.ReceivedStores));

    var oCompareOperators = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.CompareOperators));

    sessionStorage.setItem('BUID',_nBUID);
    debugger;
    var  LotMixingModule = angular.module('LotMixingModule', ['ngAnimate', 'ui.bootstrap', 'ui.grid','ui.grid.selection', 'ui.grid.cellNav','ui.grid.resizeColumns','ms.service']);
    LotMixingModule.controller('LotMixingController', function ($scope, $http, $uibModal,$interval,$timeout,  $log, uiGridConstants, msModal, userSession,advanceSearch) {
        debugger;
        oLotMixings= (userSession.getData('LotMixings').length>0)? userSession.getData('LotMixings'):oLotMixings;
        $scope.CompareOperators= oCompareOperators;
        $scope.IssueStores=oIssueStores;
        $scope.ReceiveStores=oReceiveStores;
        $scope.RequisitionTypes=oRequisitionTypes;
        $scope.BUID=_nBUID;
        $scope.OptType=_nOptType;
        $scope.btnAdd = $scope.btnEdit = $scope.btnDelete = $scope.btnApprove= $scope.btnComplete =$scope.btnReceive = $scope.btnUndoApprove =false;

        $scope.gridOptions ={
            enableSorting: true,
            enableFullRowSelection: true,
            //enableRowHeaderSelection: false,
            enableSelectAll: false,
            multiSelect:false,
            enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,
            columnDefs: [
                {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'BUName', name: 'Unit Name', width: '15%' },
                { field: 'SLNoFull', name: 'SL No', width: '15%' },
                { field: 'CreateDateInString', name: 'Date', width:'15%', enableCellEdit: false },
                { field: 'PrepareByName', name: 'PrepareBy', width: '15%' },
                { field: 'ApproveByName', name: 'Approve By', width: '15%' },
                { field: 'CompleteByName', name: 'Compelte By', width: '15%' },
                //{ field: 'StatusSt', name: 'Status', width: '10%' },
            ],

            data:oLotMixings,

            onRegisterApi:function(gridApi)
            {
                $scope.gridApi = gridApi;
                $scope.gridApi.selection.clearSelectedRows();
                $scope.gridApi.core.refresh();
                debugger;
                if(oLotMixings.length>0 && userSession.getRowIndex()>=0)
                {
                    $scope.gridApi.grid.modifyRows(oLotMixings);
                    $scope.gridApi.selection.selectRow(oLotMixings[userSession.getRowIndex()]);
                    $scope.RowSelect(oLotMixings[userSession.getRowIndex()]);
                }
                $scope.gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                    $scope.RowSelect(row.entity ); });
                userSession.clear();
            }

        };
        $scope.RowSelect =  function (entity){
            debugger;

            if(entity.ApproveByID!=0 && entity.CompleteByID==0)//Approve_Only
            {  $scope.btnApprove=true;
                $scope.btnUndoApprove =false;
                $scope.btnComplete=false;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                $scope.btnReceive=true;
                CheckControll();
            }
            else if(entity.ApproveByID!=0 && entity.CompleteByID!=0)//Approve_&_Complete
            {
                $scope.btnApprove=true;
                $scope.btnUndoApprove =true;
                $scope.btnComplete=true;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                $scope.btnReceive=true;
                CheckControll();
            }
            else if(entity.ApproveByID==0)//Not_Approve
            {
                $scope.btnApprove=false;
                $scope.btnUndoApprove =true;
                $scope.btnComplete=true;
                $scope.btnEdit=false;
                $scope.btnDelete=false;
                $scope.btnReceive=true;
                CheckControll();
            }
        }

        $scope.singleFilter=function(renderableRows){

            var matcherName = new RegExp(angular.uppercase($scope.Name));
            var matcherOperationTypeST = new RegExp(angular.uppercase($scope.OperationTypeST));
            renderableRows.forEach( function( row ) {
                debugger;
                var match = false;
                if (angular.uppercase(row.entity['Name']).match(matcherName) && angular.uppercase(row.entity['OperationTypeST']).match(matcherOperationTypeST)){
                    match = true;
                }
                if ( !match ){
                    row.visible = false;
                }
            });
            return renderableRows;
        };

      
        $scope.AdvanceSearch=function()
        { 
            var oColumns = [];
            var  oColumn = { field: 'ProductName', name: 'ProductName',width: '45%', enableSorting: false  };oColumns.push(oColumn);
            oColumn = { field: 'ProductCategoryName', name: 'ProductCategoryName',width: '45%', enableSorting: false  };oColumns.push(oColumn);
            
            var paramObj_Model={
                obj:{ProductName: '@@ProductID', BUID:_nBUID},
                objName:'ProductName',
                url:_sBaseAddress+'/Product/SearchByProductBUWise',
                title:'Product List',
                multiSelect:true,
                columns:oColumns
            }
            //IssueStores:$scope.IssueStores
            var oElementList = [{ DisplayName: "SL No",  BOField: "SLNoFull",      InputType: 'text' },
                                { DisplayName: "Lot No",    BOField: "LotNo",       InputType: 'text' },
                                //{ DisplayName: "Issue Store",    BOField: "WorkingUnitID",       InputType: 'select', OptionList:oStatusList},
                                { DisplayName: "Product",  BOField: "ProductID",   InputType: 'picker', PickerObject:paramObj_Model },
                                //{ DisplayName: ["Yet To Forward (HO)","Yet To Forward (Buyer)"],  BOField: ["YetToHO","YetToBuyer"],   InputType: 'bool'},
                                { DisplayName: "Issue Store",    BOField: "WorkingUnitID",       InputType: 'select', OptionList:$scope.IssueStores, OptionValue:{id:'WorkingUnitID', Value:'OperationUnitName'}},
                                { DisplayName: "Create Date",BOField: "CreateDate",    InputType: 'date' },
                                { DisplayName: ["Yet To Approve","Yet To Complete"],  BOField: ["YetToApp","YetToComplete"],   InputType: 'bool'},

            ];
            var modalObj={
                size:'md',
                title:"Advance Search",
                url:_sBaseAddress+'/Home/AdvanceSearch',
                CompareOperators:oCompareOperators,
                HtmlElements:oElementList,
                isAdvanceSearch:true, // if TRUE: 'urlAdvanceSearch' should be define
                urlAdvanceSearch:_sBaseAddress + '/LotMixing/AdvSearch'
            }

            var modalInstance=advanceSearch.Instance(modalObj);
            modalInstance.result.then(function (result) 
            {
                console.log(result);
                $scope.gridOptions.data=result;
            }, function () 
            {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };


        $scope.add = function () {
            
            sessionStorage.setItem('BUID',_nBUID);
            sessionStorage.setItem("Operation", "New");
            sessionStorage.removeItem("SelectedRowIndex");
            sessionStorage.setItem("SelectedRowIndex",-1);
            sessionStorage.setItem("LotMixingHeader", "Add LotMixing");
            sessionStorage.setItem("LotMixings", JSON.stringify($scope.gridOptions.data));
            sessionStorage.setItem("LotMixing", JSON.stringify([]));
            sessionStorage.setItem("BackLink", window.location.href);

            var tsv=((new Date()).getTime())/1000;
            window.location.href = _sBaseAddress+ "/LotMixing/ViewLotMixing?id=0&buid="+_nBUID;
        };
        $scope.edit = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0)
            {
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApproveByID!=0)
            {
                alert("Please Select 'Initiaziled' Lot Mixing");  return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.LotMixingID==data[0].LotMixingID){
                    
                    sessionStorage.setItem('BUID',_nBUID);
                    sessionStorage.setItem("Operation", "Edit");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("LotMixingHeader", "Edit LotMixing");
                    sessionStorage.setItem("LotMixings", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("LotMixing", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/LotMixing/ViewLotMixing?id="+data[0].LotMixingID+"&buid="+_nBUID;
                }
            },$scope.gridOptions.data);
        };
        $scope.view = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.LotMixingID==data[0].LotMixingID){
                    
                    sessionStorage.setItem('BUID',_nBUID);
                    sessionStorage.setItem("Operation", "View");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("LotMixingHeader", "View LotMixing");
                    sessionStorage.setItem("LotMixings", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("LotMixing", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/LotMixing/ViewLotMixing?id="+data[0].LotMixingID+"&buid="+_nBUID;
                }
            },$scope.gridOptions.data);
        };
        $scope.delete = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'No item found to delete.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }

            if(data[0].ApproveByID!=0)
            {
                alert("Please Select 'Initiaziled' Lot Mixing");  return;
            }

            if (!confirm("Confirm to Delete?")) return ;

            $http.post(_sBaseAddress+ '/LotMixing/Delete',JSON.stringify(data[0])).then(
                            function (response) {
                                if(jQuery.parseJSON(response.data)=='Deleted'){
                                    angular.forEach($scope.gridOptions.data,function(value,index){
                                        if(value.LotMixingID==data[0].LotMixingID){
                                            $scope.gridOptions.data.splice(index,1);
                                        }
                                    },$scope.gridOptions.data);
                                    alert("Delete Successfully.");
                                }
                                else{
                                    alert(jQuery.parseJSON(response.data));
                                }
                            },
                            function (response) {alert(jQuery.parseJSON(response.data));}
                        );

        };

        $scope.Approve = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApproveByID!=0)
            {
                alert("Please Select 'Initiaziled' Lot Mixing"); return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.LotMixingID==data[0].LotMixingID){
                    sessionStorage.setItem('BUID',_nBUID);
                    sessionStorage.setItem("Operation", "Approve");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("LotMixingHeader", "Approve LotMixing");
                    sessionStorage.setItem("LotMixings", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("LotMixing", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/LotMixing/ViewLotMixing?id="+data[0].LotMixingID+"&buid="+_nBUID;
                }
            },$scope.gridOptions.data);
        };
        $scope.UndoApprove = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].CompleteByID!=0)
            {
                alert("Lot Mixing Is Already Not Completed"); return;
            }
            if(data[0].ApproveByID==0)
            {
                alert("Lot Mixing Yet Not Approved"); return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.LotMixingID==data[0].LotMixingID){
                    sessionStorage.setItem('BUID',_nBUID);
                    sessionStorage.setItem("Operation", "UndoApprove");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("LotMixingHeader", "UndoApprove LotMixing");
                    sessionStorage.setItem("LotMixings", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("LotMixing", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/LotMixing/ViewLotMixing?id="+data[0].LotMixingID+"&buid="+_nBUID;
                }
            },$scope.gridOptions.data);
        };
        $scope.Complete = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApproveByID==0)
            {
                alert("Lot Mixing Yet Not Approved");  return;
            }
            if(data[0].CompleteByID!=0)
            {
                alert("This Lot Mixing Is Already Completed");  return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.LotMixingID==data[0].LotMixingID){
                    sessionStorage.setItem('BUID',_nBUID);
                    sessionStorage.setItem("Operation", "Complete");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("LotMixingHeader", "Request LotMixing");
                    sessionStorage.setItem("LotMixings", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("LotMixing", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/LotMixing/ViewLotMixing?id="+data[0].LotMixingID+"&buid="+_nBUID;
                }
            },$scope.gridOptions.data);
        };
        $scope.Receive = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApproveByID==0 || ( data[0].CompletedByID==0) || data[0].ReceiveByID!=0)
            {
                alert("Lot Mixing Yet Not Approved Completed");  return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.LotMixingID==data[0].LotMixingID){
                    sessionStorage.setItem('BUID',_nBUID);
                    sessionStorage.setItem("Operation", "Receive");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("LotMixingHeader", "Request LotMixing");
                    sessionStorage.setItem("LotMixings", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("LotMixing", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/LotMixing/ViewLotMixing?id="+data[0].LotMixingID+"&buid="+_nBUID;
                }
            },$scope.gridOptions.data);
        };
        $scope.PrintPreview = function ()
        {
            var data = $scope.gridApi.selection.getSelectedRows();
            var oLotMixing = data[0];
            if(oLotMixing==null || oLotMixing.LotMixingID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            window.open(_sBaseAddress + '/LotMixing/LotMixingPreview?nLotMixingID='+oLotMixing.LotMixingID+"&nBUID="+$scope.BUID);
        };

        //button hide
        $scope.btnAdd = $scope.btnEdit = $scope.btnView = $scope.btnDelete = $scope.btnApprove= $scope.btnComplete =$scope.btnReceive = $scope.btnUndoApprove = $scope.btnAdvSearch = true ;
        //button show
        if(PermissionChecker('Add','LotMixing',oAuthorizationRolesMapping)){$scope.btnAdd = false; }
        if(PermissionChecker('Edit','LotMixing',oAuthorizationRolesMapping)){$scope.btnEdit = false;}
        if(PermissionChecker('View','LotMixing',oAuthorizationRolesMapping)){$scope.btnView = false;}
        if(PermissionChecker('Approved','LotMixing',oAuthorizationRolesMapping)){$scope.btnApprove = false;}
        if(PermissionChecker('Issued','LotMixing',oAuthorizationRolesMapping)){$scope.btnComplete = false;}
        if(PermissionChecker('Received','LotMixing',oAuthorizationRolesMapping)){$scope.btnReceive = false;}
        if(PermissionChecker('UndoRequest','LotMixing',oAuthorizationRolesMapping)){$scope.btnUndoApprove = false;}
        if(PermissionChecker('AdvSearch','LotMixing',oAuthorizationRolesMapping)){$scope.btnAdvSearch = false;}

        function CheckControll()
        {
            debugger;
            if($scope.btnAdd == false  && !PermissionChecker('Add','LotMixing',oAuthorizationRolesMapping))
            {$scope.btnAdd = true; }
            if($scope.btnEdit == false && !PermissionChecker('Edit','LotMixing',oAuthorizationRolesMapping))
            {$scope.btnEdit = true;}
            if($scope.btnView == false && !PermissionChecker('View','LotMixing',oAuthorizationRolesMapping))
            {$scope.btnView = true;}
            if($scope.btnApprove == false && !PermissionChecker('Approved','LotMixing',oAuthorizationRolesMapping))
            {$scope.btnApprove = true;}
            if($scope.btnDelete == false && !PermissionChecker('Delete','LotMixing',oAuthorizationRolesMapping))
            {$scope.btnDelete = true;}
            if($scope.btnComplete == false && !PermissionChecker('Issued','LotMixing',oAuthorizationRolesMapping))
            {$scope.btnComplete = true;}
            if($scope.btnReceive == false && !PermissionChecker('Received','LotMixing',oAuthorizationRolesMapping))
            {$scope.btnReceive = true;}
            if($scope.btnUndoApprove == false && !PermissionChecker('UndoRequest','LotMixing',oAuthorizationRolesMapping))
            {$scope.btnUndoApprove = true;}
            if($scope.btnAdvSearch == false && !PermissionChecker('AdvSearch','LotMixing',oAuthorizationRolesMapping))
            {$scope.btnAdvSearch = true;}
        }

    });
</script>
                       


              
