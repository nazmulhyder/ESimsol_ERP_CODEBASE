@{
    ViewBag.Title = "Payment";
}
@model ESimSol.BusinessObjects.TradingPayment
<div id="progbarParent" style="width:100%;height:100%;margin:0 auto;text-align:center; margin-left: auto;margin-right: auto;left: 0;right: 0;z-index: 1;">
    <div style="margin: 0px auto;margin-top: 251px;text-align:center;width:390px;">
        <label style="font-size:18px;">Please wait</label>
        <div id="progbar" style="width:100%;height:37px;"></div>
    </div>
</div>
<div id="winContactPersonnel" class="easyui-window" title="Add Contact Personeel" data-options="modal:true,closed:true,collapsible:false,minimizable:false,maximizable:false,closable:false">
    <div>
        <fieldset>
            <legend style="font-weight:bold"> Contact Personnel Informations : </legend>
            <table border="0" cellspacing="2" cellpadding="2" style="font-size:11px; font-weight:bold">
                <tr>
                    <td style="width:125px; text-align:right">
                        Name :
                    </td>

                    <td style="width:200px">
                        <input type="text" style="width: 200px;" id="txtCPName" />
                    </td>
                    <td style="width:50px"> </td>
                    <td style="width:125px; text-align:right">
                        Address :
                    </td>
                    <td style="width:300px">
                        <input type="text" style="width: 300px;" id="txtCPAddress" />
                    </td>
                </tr>
                <tr>
                    <td style="width:125px; text-align:right">
                        Phone :
                    </td>

                    <td style="width:200px">
                        <input type="text" style="width: 200px;" id="txtCPPhone" />
                    </td>
                    <td style="width:50px"> </td>
                    <td style="width:125px; text-align:right">
                        Email :
                    </td>
                    <td style="width:300px">
                        <input type="text" style="width: 300px;" id="txtCPEmail" />
                    </td>
                </tr>
                <tr>
                    <td style="width:125px; text-align:right">
                        Note :
                    </td>
                    <td colspan="4">
                        <input type="text" style="width: 690px;" id="txtCPNote" />
                    </td>
                </tr>
            </table>
        </fieldset>
    </div>
    <fieldset style="width:97%;height:8%; vertical-align:top;">
        <legend style="font-weight:bold"> Action : </legend>
        <table border="0" cellspacing="2" cellpadding="2" style="font-size:11px; font-weight:bold;">
            <tr>
                <td style="width:7%;text-align:right;">
                    <a id="btnSaveContactPersonnel" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="true">Save</a>
                    <a id="btnCloseContactPersonnel" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="true">Close</a>
                </td>

            </tr>
        </table>
    </fieldset>
</div>
<div class="menuMainCollectionTable">
    <div id="divTradingPayment" class="easyui-panel" title="Payment" style="font-family:Tahoma; text-align:center; height:89%; width:100%">
        <fieldset>
            <legend style="font-weight:bold">Basic Informations : </legend>
            <table border="0" cellspacing="1" cellpadding="1" style="font-size:11px; font-weight:bold">
                <tr>
                    <td style="width:10%; text-align:right">
                        MR No:
                    </td>
                    <td style="width:11%">
                        @Html.TextBoxFor(model => model.RefNo, new { style = "width: 95%;", id = "txtRefNo", disabled = "disabled" })
                    </td>
                    <td style="width:8%; text-align:right">
                        Curency :
                    </td>
                    <td style="width:10%">
                        @Html.DropDownListFor(model => model.CurrencyID, Model.Currencys.Select(x => new SelectListItem() { Text = x.CurrencyName, Value = x.CurrencyID.ToString() }), new { id = "cboCurrency", style = "width:85%; height:23px" })
                    </td>
                    <td style="width:11%; text-align:right">
                       Payment Date :
                    </td>
                    <td style="width:15%">
                        <input id="txtPaymentDate" type="text" style="width:100%;" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser" />
                    </td>
                    <td style="width:10%; text-align:right;font-weight:bold">
                        P. Method :
                    </td>
                    <td style="width:25%;font-size:11px">
                        <select id="cboPaymentMethod" style="height:23px; width:100%"></select>
                    </td>

                </tr>
                <tr>
                    <td style="width:10%; text-align:right; font-weight:bold">Contractor : </td>
                    <td style="width:29%; text-align:left" colspan="3">
                        @Html.TextBoxFor(model => model.ContractorName, new { style = "width: 80%;", id = "txtContractorName", placeholder = "Press enter with Contractor name" }) <input type="button" value="Pick" id="btnContractor" style="width:15%" />
                    </td>
                    <td style="width:11%; text-align:right">
                        C. Person :
                    </td>
                    <td style="width:15%">
                        <select id="cboContactPerson" style="width:70%; height:23px"></select>  <input type="button" value="Add" id="btnAddContactPersonnel" style="width:26%; text-align:center" />
                    </td>
                    <td style="width:10%; text-align:right;font-weight:bold">
                        <label id="lblAccountHeadCaption">Received By :</label>
                    </td>
                    <td style="width:25%;font-size:11px">
                        @Html.DropDownListFor(model => model.AccountHeadID, Model.ChartsOfAccounts.Select(x => new SelectListItem() { Text = x.AccountHeadName, Value = x.AccountHeadID.ToString() }), new { id = "cboAccountHead", style = "width:100%; height:23px" })
                    </td>
                </tr>
                <tr>
                    <td style="width:10%; text-align:right; font-weight:bold">Remarks : </td>
                    <td style="width:29%; text-align:left" colspan="3">
                        @Html.TextBoxFor(model => model.Note, new { style = "width: 96%;", id = "txtNote" })
                    </td>
                    <td style="width:11%; text-align:right">
                        A/C No :
                    </td>
                    <td style="width:15%">
                        <select id="cboAccountNo" style="width:98%; height:23px"></select>
                    </td>
                    <td style="width:10%; text-align:right;font-weight:bold">
                        Cheque No :
                    </td>
                    <td style="width:25%;font-size:11px">
                        @Html.TextBoxFor(model => model.ChequeNo, new { style = "width: 100%;", id = "txtChequeNo" })
                    </td>
                </tr>
            </table>
        </fieldset>
        <div style="margin-left:2px; height:330px; margin-left:2px; width:99.80%">
            <table id="tblTradingPaymentDetail" title="Invoice List" class="easyui-datagrid" style="width:100%;height:310px"
                   data-options="singleSelect: true, fitColumns:false, rownumbers:true,pagination:false,autoRowHeight:false,toolbar: '#toolbar',onClickRow: onClickRow ">
                <thead>
                    <tr>
                        <th field="InvoiceNo" width="140" align="left">Invoice No</th>
                        <th field="InvoiceDateSt" width="120" align="left">Invoice Date</th>
                        <th data-options="field:'Remarks',width:350,align:'left',editor:{type:'textbox'}">Remarks</th>
                        <th field="InvoiceAmount" width="120" align="right" formatter="formatPrice">Invoice Amount</th>
                        <th field="YetToTradingPayment" width="120" align="right" formatter="formatPrice">Yet To Payment</th>
                        <th data-options="field:'Amount',width:120,align:'right',editor:{type:'numberbox',options:{precision:2}}" formatter="formatPrice" align="right">Payment Amount</th>
                    </tr>
                </thead>
            </table>
            <div id="toolbar" style=" height:25px">
                <a id="btnPickInvoice" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-search" plain="true">Pick Invoice</a>
                <a id="btnRemove" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-remove" plain="true">Remove</a>
                <a id="btnRefresh" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-reload" plain="true">Refresh</a>
            </div>
            <div style="width:100%">
                <fieldset>
                    <table border="0" cellpadding="1" cellspacing="1" width="100%" style="font-size:11px; font-family:Tahoma; font-weight:bold">
                        <tr>
                            <td style="width:65%; text-align:left; vertical-align:middle">
                                <div id="divRegionSalesman" style="padding-left:10px;">
                                    <label id="lblSalesman"></label>
                                    <input type="text" id="txtSalesmanName" disabled />
                                    <span style="padding-left:10px"></span>
                                    <label id="lblCurrentBalance"></label>
                                    <input type="text" id="txtCurrentBalance" disabled style="text-align:right" />
                                </div>
                            </td>
                            <td style="width:15%; text-align:right"> Payment Amount : </td>
                            <td style="width:20%; text-align:right">
                                @Html.TextBoxFor(model => model.Amount, new { style = "width: 96%; text-align:right", id = "txtAmount", disabled = "disabled" })
                            </td>
                        </tr>
                    </table>
                </fieldset>
            </div>

        </div>
    </div>
    <fieldset>
        <legend style="font-weight: bold">Action : </legend>
        <table border="0" cellspacing="2" cellpadding="2" style="font-size: 11px; font-weight: bold; width:100%">
            <tr>
                <td style="width:83%; text-align:right"></td>
                <td style="width:17%;text-align:right;">
                    <a id="btnSave" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="true">Save</a>
                    <a id="btnClose" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="true">Close</a>
                </td>
            </tr>
        </table>
    </fieldset>
</div>



<script type="text/javascript">
    var _oTradingPayment=null;
    $(document).ready(function () {
        _oTradingPayment = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
        var nTradingPaymentBy = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.TradingPaymentBy));
        var oSalesmanBusinessUnit=@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.SalesmanBusinessUnit));
        var oPaymentMethods=@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.PaymentMethods));
        var oBankAccounts=@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BankAccounts));

        var nBUID  = parseInt(sessionStorage.getItem("BUID"));
        var nReferenceTypeInt  = parseInt(sessionStorage.getItem("ReferenceType"));

        $('#divRegionSalesman').data('SalesmanBusinessUnit', oSalesmanBusinessUnit);
        $('#divTradingPayment').data('BUID', nBUID);
        $('#divTradingPayment').data('ReferenceType', nReferenceTypeInt);
        $('#divTradingPayment').data('TradingPaymentBy', nTradingPaymentBy);
        $('#txtContractorName').data('ContractorID', _oTradingPayment.ContractorID);

        $("#cboPaymentMethod").icsLoadCombo({List:oPaymentMethods,OptionValue: 'id', DisplayText: 'Value'});
        $("#cboAccountNo").icsLoadCombo({List:oBankAccounts,OptionValue: 'BankAccountID', DisplayText: 'AccountWithBankName'});
        $('#txtAmount').icsCurrencyBox();
        $("#progbar").progressbar({ value: 0 });
        $("#progbarParent").hide();
        $('#txtPaymentDate').datebox('setValue', _oTradingPayment.PaymentDateSt);
        $('#txtAmount').val(icsFormatPrice(parseFloat(_oTradingPayment.Amount)));
        RefreshList(_oTradingPayment.TradingPaymentDetails);
        RefreshLayOut();
        if(nReferenceTypeInt===1)
        {
            $('#lblAccountHeadCaption').html("Received By :");
        }
        else
        {
            $('#lblAccountHeadCaption').html("Paid By :");
        }
        ChangePaymentMethod();
    });

    function updateProgress() {
        var value =$('#progbar').progressbar('getValue');
        if (value < 96){
            value += Math.floor(Math.random() * 10);
            $('#progbar').progressbar('setValue', value);
        }
    }

    function hideShow(miliseconds) {
        $("#progbarParent").hide();
    }

    function RefreshLayOut() {
        var sTradingPaymentHeader = sessionStorage.getItem("TradingPaymentHeader");
        if (sTradingPaymentHeader != "Add TradingPayment") {
            $('#txtContractorName').val(_oTradingPayment.ContractorName)
            $('#txtContractorName').css('color', 'blue');
            $('#txtContractorName').css('fontWeight', 'bold');
            LoadContactPerson(_oTradingPayment.ContractorID);
        }
        if (sTradingPaymentHeader === "View TradingPayment") {
            $("#txtRefNo").prop('disabled', true);
            $("#cboCurrency").prop('disabled', true);
            $("#txtPaymentDate").datebox({'disabled':true});
            $('#txtPaymentDate').datebox('setValue', _oTradingPayment.PaymentDateSt);
            $("#cboAccountHead").prop('disabled', true);
            $("#txtContractorName").prop('disabled', true);
            $("#btnContractor").prop('disabled', true);
            $("#cboContactPerson").prop('disabled', true);
            $("#btnAddContactPersonnel").prop('disabled', true);
            $("#cboPaymentMethod").prop('disabled', true);
            $("#cboAccountNo").prop('disabled', true);
            $("#txtNote,#txtChequeNo").prop('disabled', true);
            $("#btnPickInvoice").hide();
            $("#btnRemove").hide();
            $("#btnSave").hide();
        }

        if(parseInt($('#divTradingPayment').data('TradingPaymentBy'))==2){

            $('#cboAccountHead').prop('disabled', true);
            $('#cboPaymentMethod').prop('disabled', true);
            $('#cboAccountNo').prop('disabled', true);
            $('#txtChequeNo').prop('disabled', true);
            var oSalesmanBusinessUnit=$('#divRegionSalesman').data('SalesmanBusinessUnit');
            $('#divRegionSalesman').show();
            $('#lblSalesman').text("Salesman: ");
            $('#txtSalesmanName').val(oSalesmanBusinessUnit.SalesmanName);

            $('#lblCurrentBalance').text("Current Balance: ");
            $('#txtCurrentBalance').val(formatPrice(oSalesmanBusinessUnit.Balance));
        }
        else{
            $('#divRegionSalesman').hide();
            $('#divRegionSalesman label').text('');
            $('#divRegionSalesman input').val('');
        }
    }

    function ValidateInput() {
        var nBUID = parseInt($('#divTradingPayment').data('BUID'));
        if(nBUID===0)
        {
            alert("Invalid Business Unit!");
            return;
        }
        var nReferenceTypeInt = parseInt($('#divTradingPayment').data('ReferenceType'));
        if(nReferenceTypeInt===0)
        {
            alert("Invalid TradingPayment Type!");
            return;
        }
        if ($('#cboCurrency').val() === null ||  parseInt($('#cboCurrency').val()) <=0) {
            alert("Please select Currency!");
            $('#cboCurrency').focus();
            return false;
        }
        var txtPaymentDate = $('#txtPaymentDate').datebox('getValue');
        if (txtPaymentDate == null || txtPaymentDate == "") {
            alert("Please enter Invocie Date!");
            $('#txtPaymentDate').focus();
            return false;
        }
        if($('#cboAccountHead').val()===null || parseInt($('#cboAccountHead').val())<=0)
        {
            if(nReferenceTypeInt===1)
            {
                alert("Please slect Received By Account Head!");
            }
            else
            {
                alert("Please slect Paid By Account Head!");
            }
            $('#cboAccountHead').focus();
            return false;
        }
        var nContractorID = parseInt($('#txtContractorName').data('ContractorID'));
        if (nContractorID <= 0) {
            alert("Please select Contractor!");
            $('#txtContractorName').focus();
            return false;
        }

        if ($('#cboContactPerson').val() === null ||  parseInt($('#cboContactPerson').val()) <=0) {
            alert("Please select Contact Person!");
            $('#cboContactPerson').focus();
            return false;
        }
        if($('#cboPaymentMethod').val()===null || parseInt($('#cboPaymentMethod').val())<=0)
        {
            alert("Please slect TradingPayment Method!");
            $('#cboPaymentMethod').focus();
            return false;
        }

        if(parseInt($('#cboPaymentMethod').val())!=1)
        {
            if(parseInt($("#cboAccountNo").val())<=0)
            {
                alert("Please select A/C No!");
                $('#cboAccountNo').focus();
                return false;
            }
            if($.trim($('#txtChequeNo').val())==="")
            {
                alert("Please Enter Check Name!");
                $('#txtChequeNo').focus();
                return false;
            }
        }

        var oTradingPaymentDetails = $('#tblTradingPaymentDetail').datagrid('getRows');
        if (oTradingPaymentDetails == null || oTradingPaymentDetails.length <= 0) {
            alert("Please enter at least one item!");
            return false;
        }
        for (var i = 0; i < oTradingPaymentDetails.length; i++) {
            if (parseFloat(oTradingPaymentDetails[i].Amount) <= 0) {
                alert("Please TradingPayment Amount for Invoice No : " + oTradingPaymentDetails[i].InvoiceNo);
                return false;
            }
            if (parseFloat(oTradingPaymentDetails[i].Amount)> parseFloat(oTradingPaymentDetails[i].YetToTradingPayment)) {
                alert("TradingPayment Amount Must be less than or equal yet to TradingPayment amount for Invoice No : " + oTradingPaymentDetails[i].InvoiceNo);
                return false;
            }
        }
        var nAmount =parseFloat(icsRemoveComma($('#txtAmount').val()));
        if (nAmount <= 0) {
            alert("Please enter TradingPayment Amount!");
            $('#txtAmount').focus();
            return false;
        }

        if(parseInt($('#divTradingPayment').data('TradingPaymentBy'))==2){

            var oSalesmanBusinessUnit=$('#divRegionSalesman').data('SalesmanBusinessUnit');
            if(parseFloat(nAmount)> parseFloat(oSalesmanBusinessUnit.Balance)){
                alert("Insufficient amount. Your cash amount is "+ formatPrice(parseFloat(oSalesmanBusinessUnit.Balance)));
                return false;
            }
        }
        return true;
    }

    function RefreshObject() {
        var oTradingPayment = {
            TradingPaymentID: _oTradingPayment.TradingPaymentID,
            BUID : parseInt($('#divTradingPayment').data('BUID')),
            ContractorID: parseInt($('#txtContractorName').data('ContractorID')),
            ContactPersonnelID: parseInt($('#cboContactPerson').val()),
            AccountHeadID : parseInt($('#cboAccountHead').val()),
            RefNo : $.trim($('#txtRefNo').val()),
            PaymentDate : $('#txtPaymentDate').datebox('getValue'),
            EncashmentDate : $('#txtPaymentDate').datebox('getValue'),
            PaymentMethodInt : parseInt($('#cboPaymentMethod').val()),
            CurrencyID : parseInt($('#cboCurrency').val()),
            Amount : parseFloat(icsRemoveComma($('#txtAmount').val())),
            ReferenceTypeInt : parseInt($('#divTradingPayment').data('ReferenceType')),
            TradingPaymentStatusInt : _oTradingPayment.TradingPaymentStatusInt,
            ApprovedBy : _oTradingPayment.ApprovedBy,
            ApprovedDate : _oTradingPayment.ApprovedDateSt,
            Note : $.trim($('#txtNote').val()),
            ChequeNo : $.trim($('#txtChequeNo').val()),
            AccountID : parseInt($('#cboAccountNo').val()),
            //SalesManID : parseInt($('#divRegionSalesman').data('SalesmanBusinessUnit').SalesmanID),
            TradingPaymentDetails : $('#tblTradingPaymentDetail').datagrid('getRows')
        };
        return oTradingPayment;
    }

    $("#btnSave").click(function () {
        endEditing();
        if (!ValidateInput()) return;
        var oTradingPayment = RefreshObject();
        $.ajax({
            type: "POST",
            dataType: "json",
            url: sessionStorage.getItem("BaseAddress")+  "/TradingPayment/Save",
            traditional: true,
            data: JSON.stringify(oTradingPayment),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                oTradingPayment = jQuery.parseJSON(data);
                if (oTradingPayment.TradingPaymentID > 0) {
                    alert("Data Saved sucessfully");
                    var oTradingPayments = sessionStorage.getItem("TradingPayments");
                    var nIndex = parseInt(sessionStorage.getItem("SelectedRowIndex"));
                    if (oTradingPayments != null) {
                        oTradingPayments = jQuery.parseJSON(oTradingPayments);
                    }
                    else {
                        oTradingPayments = [];
                    }
                    if (nIndex != -1) {
                        oTradingPayments[nIndex] = oTradingPayment;
                    }
                    else {
                        sessionStorage.setItem("SelectedRowIndex", oTradingPayments.length);
                        oTradingPayments.push(oTradingPayment);
                    }
                    sessionStorage.setItem("TradingPayments", JSON.stringify(oTradingPayments));
                    window.location.href = sessionStorage.getItem("BackLink");
                }
                else {
                    alert(oTradingPayment.ErrorMessage);
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });
    });

    $("#btnClose").click(function () {
        window.location.href = sessionStorage.getItem("BackLink");
    });

    function RefreshSummery() {
        var nAmount = 0;
        var oTradingPaymentDetails = $('#tblTradingPaymentDetail').datagrid('getRows');
        for (var i = 0; i < oTradingPaymentDetails.length; i++) {
            nAmount = nAmount + parseFloat(oTradingPaymentDetails[i].Amount);
        }
        $('#txtAmount').val(icsFormatPrice(nAmount));
    }

    $("#btnRemove").click(function () {
        var oTradingPaymentDetail = $('#tblTradingPaymentDetail').datagrid('getSelected');
        if (oTradingPaymentDetail == null) {
            alert("Please select a item from list!");
            return;
        }
        var conf = confirm("Confirm to delete?");
        if (conf == false) return;

        endEditing();
        var SelectedRowIndex = $('#tblTradingPaymentDetail').datagrid('getRowIndex', oTradingPaymentDetail);
        $('#tblTradingPaymentDetail').datagrid('deleteRow', SelectedRowIndex);

        var oTradingPaymentDetails = $('#tblTradingPaymentDetail').datagrid('getRows');
        RefreshList(oTradingPaymentDetails);
    });

    function RefreshList(oTradingPaymentDetails) {
        data = oTradingPaymentDetails;
        data = { "total": "" + data.length + "", "rows": data };
        $('#tblTradingPaymentDetail').datagrid('loadData', data);
        RefreshSummery();
    }

    $("#btnRefresh").click(function () {
        endEditing();
        data = $('#tblTradingPaymentDetail').datagrid('getRows');
        data = { "total": "" + data.length + "", "rows": data };
        $('#tblTradingPaymentDetail').datagrid('loadData', data);
        RefreshSummery();
    });

    $('#cboPaymentMethod').change(function(e){
        ChangePaymentMethod();
    });

    function ChangePaymentMethod()
    {
        //EnumPaymentMethod : None = 0, Cash = 1, Cheque = 2, DemandDraft = 3, PayOrder = 4, BankAdvice = 5, LC = 6
        var nPaymentMethod =   parseInt($('#cboPaymentMethod').val());
        if(nPaymentMethod===1)
        {
            $("#cboAccountNo,#txtChequeNo").prop('disabled', true);
            $("#txtChequeNo").val('');
            $("#cboAccountNo").val(0);
        }
        else
        {
            $("#cboAccountNo,#txtChequeNo").prop('disabled', false);
        }
    }

    function RefreshGrid() {
        endEditing();
        data = $('#tblTradingPaymentDetail').datagrid('getRows');
        data = { "total": "" + data.length + "", "rows": data };
        $('#tblTradingPaymentDetail').datagrid('loadData', data);
        RefreshSummery();
    }

    var editIndex = undefined;
    function endEditing() {
        if (editIndex == undefined) { return true }
        if ($('#tblTradingPaymentDetail').datagrid('validateRow', editIndex)) {
            $('#tblTradingPaymentDetail').datagrid('endEdit', editIndex);
            $('#tblTradingPaymentDetail').datagrid('selectRow', editIndex);
            RefreshSummery();
            editIndex = undefined;
            return true;
        } else {
            return false;
        }
    }

    function onClickRow(index) {

        if (editIndex != index) {
            if (endEditing()) {
                $('#tblTradingPaymentDetail').datagrid('selectRow', index)
                        .datagrid('beginEdit', index);
                editIndex = index;
            } else {
                $('#tblTradingPaymentDetail').datagrid('selectRow', editIndex);
            }
        }
    }

    ///Contractor Pick
    $("#txtContractorName").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) // Enter Press
        {
            var nContractorType = 0;
            if(parseInt($('#divTradingPayment').data('ReferenceType'))===1 || parseInt($('#divTradingPayment').data('ReferenceType'))===3)
            {
                nContractorType = 2;
            }
            else
            {
                nContractorType = 1;
            }

            var nBUID = $('#divTradingPayment').data('BUID');
            var oContractor = { Params: nContractorType + '~' + $.trim($('#txtContractorName').val())+'~'+ nBUID };//here 2 is Contractor
            var obj = {
                BaseAddress: sessionStorage.getItem("BaseAddress"),
                Object: oContractor,
                ControllerName: "Contractor",
                ActionName: "ContractorSearchByNameType",
                IsWinClose: false
            };
            $("#progbar").progressbar({ value: 0 });
            $("#progbarParent").show();
            var intervalID = setInterval(updateProgress, 250);
            $.icsDataGets(obj, function (response) {
                clearInterval(intervalID);
                $("#progbarParent").hide();
                if (response.status && response.objs.length > 0) {
                    if (response.objs[0].ContractorID > 0) {
                        var tblColums = []; var oColumn = { field: "Name", title: "Name", width: 200, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "Address", title: "Address", width: 120, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "Email", title: "Email", width: 90, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "ShortName", title: "Short Name", width: 90, align: "left" }; tblColums.push(oColumn);
                        var oPickerParam = {
                            winid: 'winContractors',
                            winclass: 'clsContractor',
                            winwidth: 600,
                            winheight: 460,
                            tableid: 'tblContractors',
                            tablecolumns: tblColums,
                            datalist: response.objs,
                            multiplereturn: false,
                            searchingbyfieldName: 'Name',
                            windowTittle: 'Contractor List'
                        };
                        $.icsPicker(oPickerParam);
                        IntializePickerbutton(oPickerParam);
                    }
                    else { alert(response.objs[0].ErrorMessage); }
                }else{
                    alert("Data Not Found.");
                    return;
                }
            });
        }
    });
    $("#btnContractor").click(function () {
        var nBUID = $('#divTradingPayment').data('BUID');
        var nContractorType = 0;
        if(parseInt($('#divTradingPayment').data('ReferenceType'))===1)
        {
            nContractorType = 2;
        }
        else
        {
            nContractorType = 1;
        }
        var oContractor = { Params: nContractorType+"~~"+nBUID };//here 2 Is Contractor
        var obj = {
            BaseAddress: sessionStorage.getItem("BaseAddress"),
            Object: oContractor,
            ControllerName: "Contractor",
            ActionName: "ContractorSearchByNameType",
            IsWinClose: false
        };
        $("#progbar").progressbar({ value: 0 });
        $("#progbarParent").show();
        var intervalID = setInterval(updateProgress, 250);
        $.icsDataGets(obj, function (response) {
            clearInterval(intervalID);
            $("#progbarParent").hide();
            if (response.status && response.objs.length > 0) {
                if (response.objs[0].ContractorID > 0) {
                    var tblColums = []; var oColumn = { field: "Name", title: "Name", width: 200, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "Address", title: "Address", width: 120, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "Email", title: "Email", width: 90, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "ShortName", title: "Short Name", width: 90, align: "left" }; tblColums.push(oColumn);
                    var oPickerParam = {
                        winid: 'winContractors',
                        winclass: 'clsContractor',
                        winwidth: 600,
                        winheight: 460,
                        tableid: 'tblContractors',
                        tablecolumns: tblColums,
                        datalist: response.objs,
                        multiplereturn: false,
                        searchingbyfieldName: 'Name',
                        windowTittle: 'Contractor List'
                    };
                    $.icsPicker(oPickerParam);
                    IntializePickerbutton(oPickerParam);
                }
                else { alert(response.objs[0].ErrorMessage); }
            }else{
                alert("Data Not Found.");
            }
        });

    });
    $('#txtContractorName').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 8) //backspace=8
        {
            $("#txtContractorName").removeClass("fontColorOfPickItem");
            $('#txtContractorName').data('ContractorID', 0);
        }
    });
    //End Contractor Picker

    //Contact Person
    $('#btnAddContactPersonnel').click(function(e){
        if (parseInt($('#txtContractorName').data('ContractorID')) <= 0)
        {
            alert("Please select Contractor!");
            $('#txtContractorName').focus();
            return;
        }
        $("#winContactPersonnel").icsWindow('open', "Add Contact Person");
        $("#winContactPersonnel input").not("input[type='button']").val("");
    });

    function ValidateInputContactPersonnel()
    {
        if($.trim($('#txtCPName').val())===null || $.trim($('#txtCPName').val())==="")
        {
            alert("Please enter name!");
            $('#txtCPName').focus();
            return false;
        }

        if($.trim($('#txtCPPhone').val())===null || $.trim($('#txtCPPhone').val())==="")
        {
            alert("Please enter Phone Number!");
            $('#txtCPPhone').focus();
            return false;
        }
        return true;
    }

    function RefreshObjectCP()
    {
        var oContactPersonnel= {
            ContactPersonnelID : 0,
            ContractorID : parseInt($('#txtContractorName').data('ContractorID')),
            Name : $("#txtCPName").val(),
            Address : $("#txtCPAddress").val(),
            Phone :$("#txtCPPhone").val(),
            Email : $("#txtCPEmail").val(),
            Note : $("#txtCPNote").val()
        };
        return oContactPersonnel;
    }

    $('#btnSaveContactPersonnel').click(function(e){
        if(!ValidateInputContactPersonnel()) return;
        var oContactPersonnel=RefreshObjectCP();
        $.ajax({
            type: "POST",
            dataType: "json",
            url : sessionStorage.getItem("BaseAddress")+  "/Contractor/SaveContactPersonnel",
            traditional: true,
            data:  JSON.stringify(oContactPersonnel),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                var oContactPersonnel = jQuery.parseJSON(data);
                if(parseInt(oContactPersonnel.ContactPersonnelID)>0)
                {
                    alert("Data Saved sucessfully");
                    $("#winContactPersonnel input").not("input[type='button']").val("");
                    $("#winContactPersonnel").icsWindow('close');
                    LoadContactPerson(parseInt(oContactPersonnel.ContractorID));
                }
                else {
                    alert(oContactPersonnel.ErrorMessage);
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });
    });

    $('#btnCloseContactPersonnel').click(function(e){
        $("#winContactPersonnel input").not("input[type='button']").val("");
        $("#winContactPersonnel").icsWindow('close');
    });
    //end contact person

    //Pick Invoice
    $("#btnPickInvoice").click(function () {
        var nBUID = parseInt($('#divTradingPayment').data('BUID'));
        if(nBUID===0)
        {
            alert("Invalid Business Unit!");
            return;
        }
        var nReferenceTypeInt = parseInt($('#divTradingPayment').data('ReferenceType'));
        if(nReferenceTypeInt===0)
        {
            alert("Invalid TradingPayment Type!");
            return;
        }
        var nContractorID = parseInt($('#txtContractorName').data('ContractorID'));
        if(nContractorID===0)
        {
            alert("Please select an party!");
            return;
        }
        var oTradingPayment =  {
            BUID: nBUID,
            ReferenceTypeInt:nReferenceTypeInt,
            ContractorID:nContractorID,
            TradingPaymentID:parseInt( _oTradingPayment.TradingPaymentID)
        };
        var obj = {
            BaseAddress: sessionStorage.getItem("BaseAddress"),
            Object: oTradingPayment,
            ControllerName: "TradingPayment",
            ActionName: "PickInvoice",
            IsWinClose: false
        };
        $.icsDataGets(obj, function (response) {
            debugger;
            if (response.status && response.objs.length > 0) {
                if (response.objs[0].ReferenceID > 0) {
                    var tblColums = [];
                    var oColumn = { field: "InvoiceNo", title: "Invoice No", width: 100, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "InvoiceDateSt", title: "Invoice Date", width: 80, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "InvoiceAmountSt", title: "Invoice Amount", width: 120, align: "right" }; tblColums.push(oColumn);
                    oColumn = { field: "YetToTradingPaymentSt", title: "Yet To Payment", width: 120, align: "right" }; tblColums.push(oColumn);
                    var oPickerParam = {
                        winid: 'winInvoicePicker',
                        winclass: 'clsInvoicePicker',
                        winwidth: 520,
                        winheight: 460,
                        tableid: 'tblInvoicePicker',
                        tablecolumns: tblColums,
                        datalist: response.objs,
                        multiplereturn: true,
                        searchingbyfieldName: 'InvoiceNo',
                        windowTittle: 'Invoice List'
                    };
                    $.icsPicker(oPickerParam);
                    IntializePickerbutton(oPickerParam);
                }
                else {
                    alert(response.objs[0].ErrorMessage);
                }

            }else{
                alert("Data Not Found.");
            }
        });

    });
    //End Invoice

    function IntializePickerbutton(oPickerobj) {
        $("#" + oPickerobj.winid).find("#btnOk").click(function () {
            //for Single Select
            SetPickerValueAssign(oPickerobj);
        });
        $(document).find('.' + oPickerobj.winclass).keydown(function (e) {
            if (e.which == 13)//enter=13
            {
                SetPickerValueAssign(oPickerobj);
            }
        });
    }

    function SetPickerValueAssign(oPickerobj) {
        var oreturnObj = null, oreturnobjs = [];
        if (oPickerobj.multiplereturn) {
            oreturnobjs = $('#' + oPickerobj.tableid).datagrid('getChecked');
        } else {
            oreturnObj = $('#' + oPickerobj.tableid).datagrid('getSelected');
        }
        $("#" + oPickerobj.winid).icsWindow("close");
        $("#" + oPickerobj.winid).remove();

        if (oPickerobj.winid === 'winContractors')
        {
            if (oreturnObj != null && parseInt(oreturnObj.ContractorID) > 0) {
                $('#txtContractorName').val(oreturnObj.Name);
                $('#txtContractorName').addClass('fontColorOfPickItem');
                $('#txtContractorName').data('ContractorID', parseInt(oreturnObj.ContractorID));
                LoadContactPerson(parseInt(oreturnObj.ContractorID));
                $('#txtContractorName').focus();
                RefreshList([]);
            }
        }
        else if (oPickerobj.winid == 'winInvoicePicker')
        {
            if (oreturnobjs != null && oreturnobjs.length > 0)
            {
                for(var i=0; i<oreturnobjs.length; i++)
                {
                    if(!IsInvoiceExists(parseInt(oreturnobjs[i].ReferenceID)))
                    {
                        $('#tblTradingPaymentDetail').datagrid('appendRow', oreturnobjs[i]);
                    }
                }
                RefreshSummery();
            }
        }
    }

    function IsInvoiceExists(nInvoiceID)
    {
        var oTradingPaymentDetails =$('#tblTradingPaymentDetail').datagrid('getRows');
        for(var i=0; i<oTradingPaymentDetails.length;i++)
        {
            if(parseInt(oTradingPaymentDetails[i].ReferenceID)===nInvoiceID)
            {
                return true;
            }
        }
        return false;
    }

    function LoadContactPerson(nContractorID) {
        var listItems = "";
        $("#cboContactPerson").empty();
        if (parseInt(nContractorID) > 0) {
            var oContractor = {
                ContractorID: nContractorID
            };
            $.ajax
            ({
                type: "POST",
                dataType: "json",
                url: sessionStorage.getItem("BaseAddress") + "/Contractor/GetContactPersonnels",
                data: JSON.stringify(oContractor),
                contentType: "application/json; charset=utf-8",
                success: function (data) {

                    var oContractorPersonals = jQuery.parseJSON(data);
                    if (oContractorPersonals.length > 0) {
                        for (var i = 0; i < oContractorPersonals.length; i++) {
                            listItems += "<option value='" + oContractorPersonals[i].ContactPersonnelID + "'>" + oContractorPersonals[i].Name + "</option>";
                        }
                        $("#cboContactPerson").html(listItems);
                        $("#cboContactPerson").val(_oTradingPayment.ContactPersonnelID);
                    }

                },
                error: function (xhr, status, error) {
                    alert(error);
                }

            });
        }
    }
</script>