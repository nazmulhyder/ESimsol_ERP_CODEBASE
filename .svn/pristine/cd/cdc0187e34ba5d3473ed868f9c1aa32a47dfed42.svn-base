<html>
@{
    ViewBag.Title = "Package Template";
}
<body>
@model ESimSol.BusinessObjects.PackageTemplate
  <div class="menuMainCollectionTable" ng-app="PackageTemplateApp" ng-controller="PackageTemplateController as PT" id="divPT">
        <div style="font-family:Tahoma;text-align:center;height:90%;" class="regionPT">
            <fieldset style="width:100%">
                <legend>Info :</legend>
                <div class="  col-md-12">
                    <div class="col-md-3 text-right"><label class="control-label"> Package No:</label></div>
                    <div class="col-md-3 text-left">
                        <input ng-model="PackageTemplate.PackageNo" class="form-control" disabled />
                    </div>
                    <div class="col-md-3 text-right"><label class="control-label"> Package Name:</label></div>
                    <div class="col-md-3 text-left">
                        <input ng-model="PackageTemplate.PackageName" class="form-control" />
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="col-md-3 text-right"><label class="control-label"> Note:</label></div>
                    <div class="col-md-9 text-left">
                        <input ng-model="PackageTemplate.Note" class="form-control" />
                    </div>
                </div>
            </fieldset>
            <div class="col-md-12">
                <div class="ui-grid-top-panel" style="text-align:left;">
                    <input type="text" ng-model="txtProductName" style="width:150px;" ng-keydown="SearchKeyProduct($event)" placeholder="Type Product Name & press Enter" />
                    <button type="button" id="btnAddPIDetail" class="btn btn-default btn-sm" aria-label="right Align" ng-click="AddDetail()"><span class="glyphicon glyphicon-plus" aria-hidden="true"> Add</span></button>
                    <button type="button" id="btnRemovePIDetail" class="btn btn-default btn-sm" aria-label="right Align" ng-click="RemoveDetail()"><span class="glyphicon glyphicon-remove" aria-hidden="true"> Remove</span></button>
                    <button type="button" id="btnRefreshPIDetail" class="btn btn-default btn-sm" aria-label="right Align" ng-click="RefreshPIDetail()"><span class="glyphicon glyphicon-refresh" aria-hidden="true"> Refresh</span></button>
                </div>
                <div style="width: 100%; height:356px;" ui-grid="gridOptionsDetail" ui-grid-selection ui-grid-edit ui-grid-resize-columns ui-grid-key-nav class="ui-grid-selectable"></div>
            </div>
         </div>
        <fieldset style="height:10%;">
                <legend>Action</legend>
                <div class="col-md-12 text-right">
                    <button type="button" ng-hide="btnSave" class="btn btn-sm" aria-label="Left Align" ng-click="Save()"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"> Save</span> </button>
                    <button type="button" id="btnclose" class="btn btn-sm" aria-label="Left Align" ng-click="Close()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"> Close</span> </button>
                </div>
            </fieldset>
</div>
</body>
</html>
<style type="text/css">
    .regionPT .form-horizontal .control-label {
        padding-top: 1px;
    }

    .regionPT .form-control {
        height: 23px;
        padding: 0px 4px;
        font-size: 12px;
    }

    .regionPT .col-md-12 {
        width: 100%;
        padding-right: 5px;
        padding-left: 5px;
        margin-bottom: 5px;
    }


    .regionPT .col-md-3 {
        width: 25%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionPT .col-md-9 {
        width: 75%;
        padding-right: 5px;
        padding-left: 5px;
    }


  

    .regionPT .input-group-addon {
        padding: 3px 6px;
    }


    .ui-grid-cell.ui-grid-disable-selection.ui-grid-row-header-cell {
        pointer-events: auto;
    }
</style>
<script type="text/javascript"> 

    debugger;     
     var sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));                  
     var oPackageTemplate =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model)); 
     var oPackageTemplateDetails =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.PackageTemplateDetails)); 
    
     var PackageTemplateApp = angular.module('PackageTemplateApp', ['ngAnimate', 'ui.bootstrap','ui.grid','ui.grid.selection','ui.grid.edit', 'ui.grid.rowEdit','ui.grid.cellNav','ms.service','uiKeyUpDown']);
     PackageTemplateApp.controller('PackageTemplateController', function ($scope,uiGridConstants, $http,$uibModal,$log,msModal,userSession,msGridControl) 
     {
         $scope.PackageTemplate = oPackageTemplate;
         $scope.PackageTemplate.BUID = sessionStorage.getItem('BUID');
         $scope.gridOptionsDetail = {
             showColumnFooter: true,
             multiSelect: false,
             enableRowSelection: true,
             enableSelectAll: false,
             enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,
             columnDefs: [
               { field: 'ProductName', name:'Item Description',cellClass: 'text-left', width:'70%',enableCellEdit:false },
               { field: 'Quantity', name: 'Qty/Pcs', width: '20%',align:'left',  cellClass: 'text-left',  enableSorting: false,enableCellEdit:true }
             ],
             data:oPackageTemplateDetails,
             onRegisterApi: function (gridApi)
             {
                 $scope.gridApiPackageDetails = gridApi;
                 gridApi.edit.on.afterCellEdit($scope,
                  function (rowEntity, colDef, newValue, oldValue)
                  {
                      debugger;
                      return rowEntity;
                  });
             }
         };


         $scope.SearchKeyProduct = function(e)
         {
             var code = (e.keyCode ? e.keyCode : e.which);
             if (code == 13)
             {
                 if($scope.txtProductName!="")
                 {
                     $scope.PickProduct();
                 }
             }else if (code == 8) //backspace=8
             {
                 //debugger;
                 $scope.ProductID = 0;
                 $scope.SelectedProduct =  null;
             }
         }
         $scope.PickProduct =  function()
         {
             var oProduct = {
                 ProductName:$.trim($scope.txtProductName),
                 ModuleNameInInt:118,//EnumModuleName : Package Template =118
                 ProductUsagesInInt:6,//EnumProductUsages : Accessoreis = 6
                 BUID:sessionStorage.getItem('BUID')
             };
             var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
             $http.post(sessionStorage.getItem('BaseAddress')+'/Product/GetProductsByBUModuleWithProductUse',$.param(oProduct), config).then(
                                 function (response)
                                 {
                                     var oColumns = [];
                                     var oColumn = { field: 'ProductCode', name: 'Code',width: '20%'  };oColumns.push(oColumn);
                                     oColumn = { field: 'ProductName', name: 'Product',width: '50%', enableSorting: false  };oColumns.push(oColumn);
                                     var results=jQuery.parseJSON(response.data);
                                     var modalObj={
                                         size:'md',
                                         modalcontroller:'ModalCommonListCtrl',
                                         appcontroller:'CostSheetController',
                                         objs:results,
                                         multiSelect:false,
                                         pickertitle:'Accessories List',
                                         searchingbyfieldName:'ProductName',
                                         columns:oColumns
                                     }
                                     var modalInstance=msModal.Instance(modalObj);
                                     modalInstance.result.then(function (result)
                                     {
                                         debugger;
                                         if(parseInt(result.ProductID)>0)
                                         {
                                             $scope.txtProductName = result.ProductName;
                                             $scope.SelectedProduct  = result;
                                         }
                                     }, function () {
                                         $log.info('Modal dismissed at: ' + new Date());
                                     });
                                 },
                                   function (response) { alert(jQuery.parseJSON(response.data).Message);}
                             );
         };
         $scope.AddDetail = function ()
         {
             debugger;
             if($scope.SelectedProduct== null || $scope.SelectedProduct =="")
             {
                 alert("Please Pick Prdouct");
                 return;
             }

             if(ICS_IsExist($scope.gridOptionsDetail.data,'ProductID',$scope.SelectedProduct.ProductID))
             {
                 alert("Already Exists");
                 return;
             }
             var oPTDetail ={
                 PackageTemplateDetailID :0,
                 PackageTemplateID :$scope.PackageTemplate.PackageTemplateID,
                 ProductID :$scope.SelectedProduct.ProductID,
                 Quantity : "",
                 ProductName :$scope.SelectedProduct.ProductName
             };
             $scope.gridOptionsDetail.data.push(oPTDetail);    
             $scope.SelectedProduct = null;
             $scope.txtProductName = "";
             
         };
         $scope.RemoveDetail = function ()
         {
             var oPTDetail = $scope.gridOptionsDetail.selection.getSelectedRows()[0];
             if(oPTDetail==null)
             {
                 alert("Select At least One item !");
                 return;
             }
             var SelectedRowIndex=$scope.gridOptionsDetail.data.indexOf(oPTDetail);
             if (!confirm("Confirm to Delete?")) return ;
             $scope.gridOptionsDetail.data.splice(SelectedRowIndex,1);
         }
         $scope.Save = function ()
         {
             debugger;
             if(!$scope.ValidateInput()) return;
             var  oPackageTemplate = $scope.PackageTemplate;
             oPackageTemplate.PackageTemplateDetails = $scope.gridOptionsDetail.data; 
             $.ajax({
                 type: "POST",
                 dataType: "json",            
                 url : sessionStorage.getItem('BaseAddress')+"/PackageTemplate/Save",
                 traditional: true,
                 data:  JSON.stringify(oPackageTemplate),
                 contentType: "application/json; charset=utf-8",
                 success: function (data) {
                     debugger;
                     var oPackageTemplate= jQuery.parseJSON(data);
                     if (oPackageTemplate.ErrorMessage=="") 
                     {                    
                         alert("Data Save Successfully!!");
                         var oPackageTemplates = sessionStorage.getItem("PackageTemplates");
                         var nIndex = parseInt(sessionStorage.getItem("SelectedRowIndex"));
                         if (oPackageTemplates != null) {
                             oPackageTemplates = jQuery.parseJSON(oPackageTemplates);
                         }
                         else {
                             oPackageTemplates = [];
                         }
                         if (nIndex != -1) {
                             oPackageTemplates[nIndex] = oPackageTemplate;
                         }
                         else {
                             sessionStorage.setItem("SelectedRowIndex", oPackageTemplates.length);
                             oPackageTemplates.push(oPackageTemplate);
                         }
                         sessionStorage.setItem("PackageTemplates", JSON.stringify(oPackageTemplates));
                         window.location.href = sessionStorage.getItem("BackLink");

                     }
                     else 
                     {
                         alert(oPackageTemplate.ErrorMessage);
                     }
                 },
                 error: function (xhr, status, error) 
                 {
                     alert(error);
                 }
             });
       
         }

         $scope.ValidateInput =function ()
         {
             debugger;
             if($scope.PackageName=="") 
             {
                 alert("Please type Package Name!"); 
                 $('#txtPackageName').focus(); 
                 return false; 
             }

             var oPTDetails = $scope.gridOptionsDetail.data;
             if(oPTDetails.length<=0)
             {
                 alert("Please Add at least one Product");
                 return false;
             }
             for (var i = 0;i<oPTDetails.length;i++)
             {
                 if(oPTDetails[i].Quantity=="" || oPTDetails[i].Quantity == null)
                 {
                     alert("Please Type Quantity for "+oPTDetails[i].ProductName);
                     return false;
                 }
             }
             return true;
         }


         if(sessionStorage.getItem("PackageTemplateHeader") == "View Package Template")
         {
             $("#divPT :input").prop('disabled', true);
             $('#btnclose').prop('disabled', false);
         }

         function RefreshDetail()
         {
             $scope.gridOptionsDetail.data = $scope.gridOptionsDetail.data;
         }
         $scope.Close =function()
         {
             window.location.href = sessionStorage.getItem("BackLink");
         }

 });

</script>