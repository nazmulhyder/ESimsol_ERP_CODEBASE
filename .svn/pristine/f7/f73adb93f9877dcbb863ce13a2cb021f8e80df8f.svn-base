 @{
     ViewBag.Title = "Commercial Bank Submission Encashment";
  }
<html>
<body>
    @model ESimSol.BusinessObjects.CommercialEncashment
<div style="font-family: Tahoma" class="menuMainCollectionTable">
    <fieldset>
        <legend style="font-weight: bold">Commercial Bank Submition Info : </legend>
        <table border="0" cellspacing="2" cellpadding="2" style="font-size: 11px; width:100%; font-weight: bold" >
            <tr>
                <td style="width:12%; text-align: right">
                    Master LC No :
                </td>
                <td style="width:48%;">
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                        <tr>
                            <td style="width:50%">@Html.TextBoxFor(model => model.MasterLCNo, new { style = "width: 100%;", id = "txtMasterLCNo", disabled = "disabled" })</td>
                            <td style="width:22%;text-align:right;">Bank Ref No:</td>
                            <td style="width:28%">@Html.TextBoxFor(model => model.BankRefNo, new { style = "width: 100%;", id = "txtBankRefNo", disabled = "disabled" })</td>
                        </tr>
                    </table>
                </td>
                <td style="width: 12%; text-align: right">
                    FDBP No:
                </td>
                <td style="width:28%">
                    @Html.TextBoxFor(model => model.FDBPNo, new { style = "width: 100%;", id = "txtFDBPNo", disabled = "disabled" })
                </td>
            </tr>
            <tr>
                <td style="width:12%; text-align: right">
                    Buyer Name :
                </td>
                <td style="width:48%;">
                    @Html.TextBoxFor(model => model.BuyerName, new { style = "width: 100%;", id = "txtBuyerName", disabled = "disabled" })
                </td>
                <td style="width: 12%; text-align: right">
                    Bank Name:
                </td>
                <td style="width:28%">
                    @Html.TextBoxFor(model => model.BankName, new { style = "width: 100%;", id = "txtBankName", disabled = "disabled" })
                </td>
            </tr>
            <tr>
                <td style="width:12%; text-align: right">
                    LC Value :
                </td>
                <td style="width:48%;">
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                        <tr>
                            <td style="width:3%">@Html.TextBoxFor(model => model.CurrencySymbol, new { style = "width: 100%;", id = "txtCurrencySymbol", disabled = "disabled" })</td>
                             <td style="width:15%">@Html.TextBoxFor(model => model.LCValue, new { style = "width: 100%;", id = "txtLCValue", disabled = "disabled"  })</td>
                            <td style="width:15%;text-align:right;">Issue Date:</td>
                            <td style="width:17%">@Html.TextBoxFor(model => model.BSIssueDateInString, new { style = "width: 100%;", id = "txtBSIssueDateInString", disabled = "disabled" })</td>
                            <td style="width:22%;text-align:right;">Bank Sub. dt :</td>
                            <td style="width:28%">@Html.TextBoxFor(model => model.SubmissionDateInString, new { style = "width: 100%;", id = "txtSubmissionDateInString", disabled = "disabled" })</td>
                        </tr>
                    </table>
                </td>
                <td style="width: 12%; text-align: right">
                    Purchase Value :
                </td>
                <td style="width:28%">
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                        <tr>
                            <td style="width:7%">@Html.TextBoxFor(model => model.CurrencySymbol, new { style = "width: 100%;", id = "txtCurrencySymbol", disabled = "disabled" })</td>
                            <td style="width:40%">@Html.TextBoxFor(model => model.PurchaseValue, new { style = "width: 100%;text-align:right", id = "txtPurchaseValue", disabled = "disabled" })</td>
                            <td style="width:5%">&nbsp;</td>
                            <td style="width:8%">@Html.TextBoxFor(model => model.BCurrencySymbol, new { style = "width: 100%;", id = "txtBCurrencySymbol", disabled = "disabled" })</td>
                            <td style="width:40%">@Html.TextBoxFor(model => model.PurchaseAmountBC, new { style = "width: 100%;text-align:right", id = "txtPurchaseAmountBC", disabled = "disabled" })</td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr>
                <td style="width:12%; text-align: right">
                    FDBP Receive Date:
                </td>
                <td style="width:48%;">
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                        <tr>
                            
                            <td style="width:18%">@Html.TextBoxFor(model => model.FDBPReceiveDateInString, new { style = "width: 100%;", id = "txtFDBPReceiveDateInString", disabled = "disabled" })</td>
                            <td style="width:15%;text-align:right;">Maturity dt:</td>
                            <td style="width:17%">@Html.TextBoxFor(model => model.MaturityDateInString, new { style = "width: 100%;", id = "txtMaturityDateInString", disabled = "disabled" })</td>
                            <td style="width:22%;text-align:right;">Realization Date:</td>
                            <td style="width:28%">@Html.TextBoxFor(model => model.RealizationDateInString, new { style = "width: 100%;", id = "txtRealizationDateInString", disabled = "disabled" })</td>
                        </tr>
                    </table>
                </td>
                <td style="width: 12%; text-align: right">
                    Rem. Balance:
                </td>
                <td style="width:28%">
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                        <tr>
                            <td style="width:7%">@Html.TextBoxFor(model => model.CurrencySymbol, new { style = "width: 100%;", id = "txtCurrencySymbol", disabled = "disabled" })</td>
                            <td style="width:40%">@Html.TextBoxFor(model => model.RemainingBalance, new { style = "width: 100%;text-align:right", id = "txtRemainingBalance", disabled = "disabled" })</td>
                            <td style="width:5%">&nbsp;</td>
                            <td style="width:8%">@Html.TextBoxFor(model => model.BCurrencySymbol, new { style = "width: 100%;", id = "txtBCurrencySymbol", disabled = "disabled" })</td>
                            <td style="width:40%">@Html.TextBoxFor(model => model.RemainingBalanceBC, new { style = "width: 100%;text-align:right", id = "txtRemainingBalanceBC", disabled = "disabled" })</td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>
    </fieldset>
    <fieldset>
        <table border="0" cellspacing="2" cellpadding="2" style="font-size: 11px; width:100%; font-weight: bold">
            <tr>
                <td style="width:8%;text-align:right;">BS Amount:</td>
                <td style="width:9%;text-align:left;">@Html.TextBoxFor(model => model.AmountInCurrency, new { style = "width: 100%;text-align:right", id = "txtAmountInCurrency", disabled = "disabled"})</td>
                <td style="width:8%;text-align:right;">CRate:</td>
                <td style="width:4%">@Html.TextBoxFor(model => model.CRate, new { style = "width: 100%;text-align:right", id = "txtCRate", disabled = "disabled" })</td>
                <td style="width:9%;text-align:right;">Amount(<label id="lblBaseCurrency">BDT</label>):</td>
                <td style="width:9%">@Html.TextBoxFor(model => model.BSAmountBC, new { style = "width: 100%;text-align:right", id = "txtBSAmountBCMain", disabled = "disabled" })</td>
                <td style="width:9%;text-align:right;">ForEx Loss</td>
                <td style="width:5%">@Html.TextBoxFor(model => model.GainLossCurrencySymbol, new { style = "width: 100%;text-align:center;", id = "txtGainLossCurrencySymbol", disabled = "disabled" })</td>
                <td style="width:10%;text-align:right;"><label id="lblLosGain">Loss</label> Amount:</td>
                <td style="width:9%">@Html.TextBoxFor(model => model.GainLossAmount, new { style = "width: 100%;text-align:right", id = "txtGainLossAmount", disabled = "disabled"})</td>
                <td style="width:9%;text-align:right;">Encash Date:</td>
                <td style="width:11%"><input id="txtEncashmentDate" type="text" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser" style="width: 100%;" /></td>
            </tr>
            <tr>
                <td style="width:8%;text-align:right;">Currency:</td>
                <td style="width:9%;text-align:left;"><select id="cboCurrency" style="width:100%" disabled></select></td>
                <td style="width:8%;text-align:right;">Encash Rate:</td>
                <td style="width:4%">@Html.TextBoxFor(model => model.EncashRate, new { style = "width: 100%;text-align:right", id = "txtEncashRate"})</td>
                <td style="width:9%;text-align:right;"> Amount(<label id="lblBaseCurrencyEncash">BDT</label>):</td>
                <td style="width:9%">@Html.TextBoxFor(model => model.AmountBC, new { style = "width: 100%;text-align:right", id = "txtAmountBC"})</td>
                <td style="width:9%;text-align:right;">Over-Due</td>
                <td style="width:5%">@Html.TextBoxFor(model => model.OverDueInCurrency, new { style = "width: 100%;text-align:right;", id = "txtOverDueInCurrency"})</td>
                <td style="width:10%;text-align:right;">OverDue(<label id="lblBaseCurrencyOver">BDT</label>):</td>
                <td style="width:9%">@Html.TextBoxFor(model => model.OverDueBC, new { style = "width: 100%;text-align:right", id = "txtOverDueBC", disabled = "disabled"})</td>
                <td style="width:9%;text-align:right;">Remarks:</td>
                <td style="width:11%">@Html.TextBoxFor(model => model.Remarks, new { style = "width: 100%;", id = "txtRemarks" })</td>
            </tr>
        </table>
</fieldset>

            <table border="0" width="100%">
                <tr>
                    <td style="width:50%">
                        <div style="width:100%">
                            <table id="tblBankAccount" title="Received Bank A/C" class="easyui-datagrid" style="width:100%;height:300px;" showfooter="true" data-options="singleSelect: true,fitColumns:false, rownumbers:true, pagination:false,  autoRowHeight:false, toolbar: '#toolbarCommercialEncashmentDetail',onClickRow:onClickRowBankAccount ">
                                <thead>
                                    <tr>
                                        <th field="BankAccountNo" width="25%" align="left">Bank Account</th>
                                        <th width="10%" align="right" formatter="formatPrice" data-options="field:'CRate',editor:{type:'numberbox',options:{precision:2}}">C.Rate</th>
                                        <th width="17%" formatter="formatPrice"  data-options="field:'AmountInCurrency',editor:{type:'numberbox',options:{precision:2}}" align="right">Amount</th>
                                        <th width="12%" align="left" field="CurrencySymbol"> Currency</th>
                                        <th width="30%" align="right" formatter="formatPrice" field="AmountBC">Amount(<label style="font-weight:normal;" id="lblBaseCurrencyBankAcc">BDT</label>)</th>
                                    </tr>
                                </thead>
                            </table>
                            <div id="toolbarCommercialEncashmentDetail">
                                <select id="cboBankAccount" style="width:160px"></select><select id="cboCurrencyBankAcc" style="width:80px"></select> <input type="text" id="txtCRateBankAccount" placeholder="CRate" class="number" value="1" style="width:50px;" />&nbsp;<input type="text" id="txtAmountInCurrencyBankAccount" placeholder="Amount" class="number" style="width:100px;" />
                                <a id="btnAddDetailBankAcc" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-add" plain="true"></a>
                                <a id="btnDeleteBankAcc" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-remove" plain="true"></a>
                                <a id="btnRefreshBankAcc" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-reload" onclick="RefreshBankAcc()" plain="true"></a>
                            </div>
                        </div>
                    </td>
                    <td style="width:50%">
                        <div style="width:100%">
                            <table id="tblBankCharge" title="Bank Charges" class="easyui-datagrid" style="width:100%;height:300px;" showfooter="true" data-options="singleSelect: true,fitColumns:false, rownumbers:true, pagination:false,  autoRowHeight:false, toolbar: '#toolbarBankCharge',onClickRow:onClickRowBankCharge ">
                                <thead>
                                    <tr>
                                        <th field="ExpenditureHeadName" width="25%" align="left">Expenditure Head</th>
                                        <th width="10%" align="right" formatter="formatPrice" data-options="field:'CRate',editor:{type:'numberbox',options:{precision:2}}">C.Rate</th>
                                        <th width="17%" formatter="formatPrice" data-options="field:'AmountInCurrency',editor:{type:'numberbox',options:{precision:2}}" align="right">Amount</th>
                                        <th width="12%" align="left" field="CurrencySymbol"> Currency</th>
                                        <th width="30%" align="right" formatter="formatPrice"  field="AmountBC">Amount(<label style="font-weight:normal;" id="lblBaseCurrencyBankChar">BDT</label>)</th>
                                    </tr>
                                </thead>
                            </table>
                            <div id="toolbarBankCharge">
                                <select id="cboBankCharge" style="width:160px"></select><select id="cboCurrencyBankCharge" style="width:80px"></select> <input type="text" id="txtCRateBankCharge" placeholder="CRate" class="number" value="1" style="width:50px;" />&nbsp;<input type="text" id="txtAmountInCurrencyBankCharge" placeholder="Amount" class="number" style="width:100px;" />
                                <a id="btnAddDetailBankCharge" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-add" plain="true"></a>
                                <a id="btnDeleteBankCharge" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-remove" plain="true"></a>
                                <a id="btnRefreshBankCharge" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-reload" onclick="RefreshBankCharge()" plain="true"></a>
                            </div>
                        </div>
                    </td>
                </tr>
            </table>
        @*</div>
    </div>*@
        <fieldset>
            <legend style="font-weight: bold">Action : </legend>
            <table border="0" cellspacing="2" cellpadding="2" style="font-size: 11px;width:100%; font-weight: bold">
                <tr>
                    <td style="width:10%; text-align:left">
                    </td>
                    <td style="width:20%; text-align:right;font-weight:bold;">Balance:</td>
                    <td style="width:10%; text-align:left">@Html.TextBoxFor(model => model.Balance, new { style = "width: 100%;", id = "txtBalance", disabled = "disabled", Class = "number" })</td>
                    <td style="width:30%; text-align:left"></td>
                    <td style="width:30%;text-align:right">
                        <a id="btnApprove" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-approved" plain="true">Approve</a>
                        <a id="btnSave" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="true">Commit</a>
                        <a id="btnClose" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="true">Close</a>
                    </td>
                </tr>
            </table>
        </fieldset>
    </div>
</body>
</html>
<script type="text/javascript">
    var _oCommercialEncashment =null;
    var _sBaseAddress="";
    var _oBankAccounts = [];
    $(document).ready(function () {
        //debugger;
        _sBaseAddress =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
        _oCommercialEncashment =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
        _oBankAccounts = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BankAccounts));
        var oCurrenncyList = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.CurrenncyList));
        var oExpenditureHeads =  @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.ExpenditureHeads));
        $("#cboCurrency,#cboCurrencyBankAcc,#cboCurrencyBankCharge").icsLoadCombo({List: oCurrenncyList, OptionValue: "CurrencyID",DisplayText: "CurrencyName", InitialValue:"--Select Currency--"});
        $('#cboCurrency').val(_oCommercialEncashment.GainLossCurrencyID);
        $("#cboBankAccount").icsLoadCombo({List: _oBankAccounts, OptionValue: "BankAccountID",DisplayText: "BankNameAccountNo", InitialValue:"--Select Bank Account--"});
        $("#cboBankCharge").icsLoadCombo({List: oExpenditureHeads, OptionValue: "ExpenditureHeadID",DisplayText: "Name", InitialValue:"--Select Bank Charge--"});
        $('#txtEncashmentDate').datebox('setValue', _oCommercialEncashment.EncashmentDateInString);
        $('#txtLCValue,#txtPurchaseValue,#txtPurchaseAmountBC,#txtRemainingBalance,#txtRemainingBalanceBC,#txtAmountInCurrency,#txtCRate,#txtBSAmountBCMain,#txtGainLossAmount,#txtEncashRate,#txtAmountBC,#txtOverDueInCurrency,#txtOverDueBC,#txtBalance,#txtAmountInCurrencyBankAccount,#txtAmountInCurrencyBankCharge').icsCurrencyBox(null, null, 2);
        RefreshControl();
        if(_oCommercialEncashment.CommercialEncashmentDetails.length>0)
        {
            var oBankAccountDetails = ICS_FindObjects(_oCommercialEncashment.CommercialEncashmentDetails,'ExpenditureHeadID',0);
            var oBankChargeDetails = ICS_FindObjects(_oCommercialEncashment.CommercialEncashmentDetails,'BankAccountID',0);

            DynamicRefreshList(oBankAccountDetails, 'tblBankAccount');
            DynamicRefreshList(oBankChargeDetails, 'tblBankCharge');
            RefreshFooter();
        }
        $('#btnApprove').hide();
        if(sessionStorage.getItem('EncashmentOperation')=="Approve")
        {
            $('#btnApprove').show();
            $('#btnSave').hide();
        }
        if(parseInt(_oCommercialEncashment.ApprovedBy)!=0)
        {
            $('#btnApprove,#btnSave').hide();
        }
        
    });

    function RefreshControl()
    {
        $('#txtLCValue').val(icsFormatPrice(_oCommercialEncashment.LCValue, null,2));
        $('#txtPurchaseValue').val(icsFormatPrice(_oCommercialEncashment.PurchaseValue, null,2));
        $('#txtPurchaseAmountBC').val(icsFormatPrice(_oCommercialEncashment.PurchaseAmountBC, null,2));
        $('#txtRemainingBalance').val(icsFormatPrice(_oCommercialEncashment.RemainingBalance, null,2));
        $('#txtRemainingBalanceBC').val(icsFormatPrice(_oCommercialEncashment.RemainingBalanceBC, null,2));
        $('#txtAmountInCurrency').val(icsFormatPrice(_oCommercialEncashment.AmountInCurrency, null,2));
        $('#txtCRate').val(icsFormatPrice(_oCommercialEncashment.CRate, null,2));
        $('#txtBSAmountBCMain').val(icsFormatPrice(_oCommercialEncashment.BSAmountBC, null,2));
        $('#txtGainLossAmount').val(icsFormatPrice(_oCommercialEncashment.GainLossAmount, null,2));
        $('#txtEncashRate').val(icsFormatPrice(_oCommercialEncashment.EncashRate, null,2));
        $('#txtAmountBC').val(icsFormatPrice(_oCommercialEncashment.AmountBC, null,2));
        $('#txtOverDueInCurrency').val(icsFormatPrice(_oCommercialEncashment.OverDueInCurrency, null,2));
        $('#txtOverDueBC').val(icsFormatPrice(_oCommercialEncashment.OverDueBC, null,2));
        $('#txtBalance').val(icsFormatPrice(_oCommercialEncashment.Balance, null,2));
        LossGainCalculation();
    }

    $('#txtAmountBC').change(function(){
        if(parseFloat($('#txtAmountBC').val())>0)
        {
            $('#txtEncashRate').val(icsFormatPrice((parseFloat(icsRemoveComma($('#txtAmountBC').val()))/parseFloat(icsRemoveComma($('#txtAmountInCurrency').val())))),null,2);
        }else{
            $('#txtEncashRate').val(0);
        }
      
        $('#txtPurchaseAmountBC').val(icsFormatPrice((parseFloat(icsRemoveComma($('#txtPurchaseValue').val()))*parseFloat(icsRemoveComma($('#txtEncashRate').val())))),null ,2);
        $('#txtRemainingBalanceBC').val(icsFormatPrice((parseFloat(icsRemoveComma($('#txtRemainingBalance').val()))*parseFloat(icsRemoveComma($('#txtEncashRate').val())))),null,2);
        $('#txtOverDueBC').val(icsFormatPrice(parseFloat(icsRemoveComma($('#txtOverDueInCurrency').val()))>0?(parseFloat(icsRemoveComma($('#txtOverDueInCurrency').val()))*parseFloat(icsRemoveComma($('#txtEncashRate').val()))):0),null,2);
        LossGainCalculation();
        BalanceCalculation();
    });

    function LossGainCalculation()
    {
        var nLossGainAmount = 0;
        if(parseFloat(icsRemoveComma($('#txtAmountBC').val()))>parseFloat(icsRemoveComma($('#txtBSAmountBCMain').val())))
        {
            nLossGainAmount = parseFloat(parseFloat(icsRemoveComma($('#txtAmountBC').val()))-parseFloat(icsRemoveComma($('#txtBSAmountBCMain').val())));
            $('#lblLosGain').html("Gain");//Gain
        }else
        {
            $('#lblLosGain').html("Loss");//Loss Part
            nLossGainAmount = parseFloat(parseFloat(icsRemoveComma($('#txtBSAmountBCMain').val()))-parseFloat(icsRemoveComma($('#txtAmountBC').val())));
        }
        $('#txtGainLossAmount').val(icsFormatPrice(nLossGainAmount,null,2));
    }

    $('#txtEncashRate,#txtOverDueInCurrency').change(function(){
        $('#txtAmountBC').val(icsFormatPrice(parseFloat(icsRemoveComma($('#txtEncashRate').val()))*parseFloat(icsRemoveComma($('#txtAmountInCurrency').val()))),null,2);
        $('#txtPurchaseAmountBC').val(icsFormatPrice(parseFloat(icsRemoveComma($('#txtPurchaseValue').val()))*parseFloat(icsRemoveComma($('#txtEncashRate').val()))),null,2);
        $('#txtRemainingBalanceBC').val(icsFormatPrice(parseFloat(icsRemoveComma($('#txtRemainingBalance').val()))*parseFloat(icsRemoveComma($('#txtEncashRate').val()))),null,2);
        $('#txtOverDueBC').val(icsFormatPrice(parseFloat(icsRemoveComma($('#txtOverDueInCurrency').val()))>0?(parseFloat(icsRemoveComma($('#txtOverDueInCurrency').val()))*parseFloat(icsRemoveComma($('#txtEncashRate').val()))):0),null,2);
        LossGainCalculation();
        BalanceCalculation();
    });
    
   

    function BalanceCalculation()
    {
        debugger;
        var nEnCashAmountBC = parseFloat(icsRemoveComma($('#txtAmountBC').val()));
        var nOverDueAmountBC = parseFloat(icsRemoveComma($('#txtOverDueBC').val()));

        var nBankAccountBC =$("#tblBankAccount").datagrid('getRows').length>0? parseFloat(ICS_TotalCalculation($("#tblBankAccount").datagrid('getRows'),'AmountBC')):0;
        var nExpenseBC =$("#tblBankCharge").datagrid('getRows').length>0? parseFloat(ICS_TotalCalculation($("#tblBankCharge").datagrid('getRows'),'AmountBC')):0;
        var nPurchaseBC = parseFloat(icsRemoveComma($('#txtPurchaseAmountBC').val()));
        //var nBankChargeBC = parseFloat(icsRemoveComma($('#txtBankChargeBC').val()));
        $('#txtBalance').val(icsFormatPrice(((nEnCashAmountBC+nOverDueAmountBC)-(nBankAccountBC+nExpenseBC+nPurchaseBC))),null,2);
    }
    $("#cboCurrencyBankAcc").change(function(){
        if($("#cboCurrencyBankAcc").val()>0)
        {
            if(_oCommercialEncashment.GainLossCurrencyID==parseInt($("#cboCurrencyBankAcc").val()))
            {
                $('#txtCRateBankAccount').val(1);
                $('#txtCRateBankAccount').attr('disabled',true);
            }else if(_oCommercialEncashment.LCCurrencyID==parseInt($("#cboCurrencyBankAcc").val())){
                $('#txtCRateBankAccount').val(icsRemoveComma($('#txtEncashRate').val()));
                $('#txtCRateBankAccount').attr('disabled',false);
            }else{
                $('#txtCRateBankAccount').val(0);
                $('#txtCRateBankAccount').attr('disabled',false);
            }
        }
    });
    $('#btnAddDetailBankAcc').click(function (e)
    {
        if($("#cboBankAccount").val()<=0){alert("Please Select Bank Account.");$("#cboBankAccount").focus();return;}
        if($("#cboCurrencyBankAcc").val()<=0){alert("Please Select Currency.");$("#cboCurrencyBankAcc").focus();return;}
        
        if(parseFloat(icsRemoveComma($("#txtCRateBankAccount").val()))<=0){alert("Convertion  Rate Should be Greater than 0.");$("#txtCRate").focus();return;}
        if(parseFloat(icsRemoveComma($("#txtAmountInCurrencyBankAccount").val()))<=0){alert("Amount  Should be Greater than 0.");$("#txtAmountInCurrencyBankAccount").focus();return;}
        if(ICS_FindObject($("#tblBankAccount").datagrid('getRows'),'BankAccountID',$("#cboBankAccount").val())){alert("Sorry, Selected Account Already Exist.");return}

      //  var oBankAccountObject = ICS_FindObject(_oBankAccounts,'BankAccountID',$("#cboBankAccount").val());
        var oCEDetail = {
            CommercialEncashmentDetailID : 0,
            CommercialEncashmentID :_oCommercialEncashment.CommercialEncashmentID,
            BankAccountID :$("#cboBankAccount").val(),
            AmountInCurrency :parseFloat(icsRemoveComma($("#txtAmountInCurrencyBankAccount").val())),
            CRate :parseFloat(icsRemoveComma($("#txtCRateBankAccount").val())),
            AmountBC :parseFloat(icsRemoveComma($("#txtCRateBankAccount").val())) *parseFloat(icsRemoveComma($("#txtAmountInCurrencyBankAccount").val())),
            CurrencyID :$("#cboCurrencyBankAcc").val(),
            CurrencySymbol:$("#cboCurrencyBankAcc option:selected").text(),
            BankAccountNo :$("#cboBankAccount option:selected").text(),
            };
        $('#tblBankAccount').datagrid('appendRow',oCEDetail);
        RefreshFooter();
        $("#cboBankAccount").val(0);
        $("#cboBankAccount").focus();
    });
    $("#btnDeleteBankAcc").click(function () {
        var oCEDetail = $('#tblBankAccount').datagrid('getSelected');
        if (oCEDetail == null) {
            alert("Invalid Selection!!! please select a valid Item!");
            return false;
        }
        if (!confirm("Confirm to Remove?")) return;
        var SelectedRowIndex = $('#tblBankAccount').datagrid('getRowIndex', oCEDetail);
        $('#tblBankAccount').datagrid('deleteRow',SelectedRowIndex);
        RefreshFooter();
        alert("Removed sucessfully");
        //RefreshBankAcc();
        editIndex = undefined;
    });

    function RefreshBankAcc()
    {
        endEditingBankAccount();
        var oBankAccounts = $('#tblBankAccount').datagrid('getRows');
        DynamicRefreshList(oBankAccounts, 'tblBankAccount');
    }

    function RefreshFooter()
    {
        var oBankAccountDetails = $('#tblBankAccount').datagrid('getRows');
        $('#tblBankAccount').datagrid('reloadFooter',[{BankAccountNo: 'Total', AmountInCurrency:ICS_TotalCalculation($("#tblBankAccount").datagrid('getRows'),'AmountInCurrency'),AmountBC:ICS_TotalCalculation($("#tblBankAccount").datagrid('getRows'),'AmountBC') }]);
        var oBankChargeDetails = $('#tblBankCharge').datagrid('getRows');
        $('#tblBankCharge').datagrid('reloadFooter',[{ExpenditureHeadName: 'Total', AmountInCurrency:ICS_TotalCalculation($("#tblBankCharge").datagrid('getRows'),'AmountInCurrency'),AmountBC:ICS_TotalCalculation($("#tblBankCharge").datagrid('getRows'),'AmountBC') }]);
        BalanceCalculation();
    }


 var editIndex = undefined;
 function endEditingBankAccount() {
     if (editIndex == undefined) { return true }
     if ($('#tblBankAccount').datagrid('validateRow', editIndex)) {
         $('#tblBankAccount').datagrid('endEdit', editIndex);
         $('#tblBankAccount').datagrid('selectRow', editIndex);
         var oCommercialEncashment = $('#tblBankAccount').datagrid('getSelected');
         debugger;
         if (oCommercialEncashment == null)
         {
             return;
         }
         oCommercialEncashment.AmountBC = parseFloat(oCommercialEncashment.AmountInCurrency)*parseFloat(oCommercialEncashment.CRate);
         $('#tblBankAccount').datagrid('updateRow', { index: editIndex, row: oCommercialEncashment });
         RefreshFooter();
         editIndex = undefined;
         return true;
     }
     else {
         return false;
     }
 }

 function onClickRowBankAccount(index) {

     if (editIndex != index) {
         if (endEditingBankAccount()) {
             $('#tblBankAccount').datagrid('selectRow', index).datagrid('beginEdit', index);
             var oCommercialEncashment= $('#tblBankAccount').datagrid('getSelected');
             editIndex = index;
         }
         else {
             $('#tblBankAccount').datagrid('selectRow', editIndex);
         }
     }
 }
 $("#cboCurrencyBankCharge").change(function(){
     if($("#cboCurrencyBankCharge").val()>0)
     {
         if(_oCommercialEncashment.GainLossCurrencyID==parseInt($("#cboCurrencyBankCharge").val()))
         {
             $('#txtCRateBankCharge').val(1);
             $('#txtCRateBankCharge').attr('disabled',true);
         }else if(_oCommercialEncashment.LCCurrencyID==parseInt($("#cboCurrencyBankCharge").val())){
             $('#txtCRateBankCharge').val(icsRemoveComma($('#txtEncashRate').val()));
             $('#txtCRateBankCharge').attr('disabled',false);
         }else{
             $('#txtCRateBankCharge').val(0);
             $('#txtCRateBankCharge').attr('disabled',false);
         }
     }
 });

 $('#btnAddDetailBankCharge').click(function (e)
 {
     if($("#cboBankCharge").val()<=0){alert("Please Select Bank Account.");$("#cboBankCharge").focus();return;}
     if($("#cboCurrencyBankCharge").val()<=0){alert("Please Select Currency.");$("#cboCurrencyBankCharge").focus();return;}
     if($("#txtCRateBankCharge").val()<=0){alert("Convertion  Rate Should be Greater than 0.");$("#txtCRate").focus();return;}
     if(parseFloat(icsRemoveComma($("#txtAmountInCurrencyBankCharge").val()))<=0){alert("Amount  Should be Greater than 0.");$("#txtAmountInCurrency").focus();return;}
     if(ICS_FindObject($("#tblBankCharge").datagrid('getRows'),'ExpenditureHeadID',$("#cboBankCharge").val())){alert("Sorry, Selected Charge Already Exist.");return}
     //  var oBankChargeountObject = ICS_FindObject(_oBankChargeounts,'BankChargeountID',$("#cboBankCharge").val());
     var oCEDetail = {
         CommercialEncashmentDetailID : 0,
         CommercialEncashmentID :_oCommercialEncashment.CommercialEncashmentID,
         ExpenditureHeadID :$("#cboBankCharge").val(),
         AmountInCurrency :parseFloat(icsRemoveComma($("#txtAmountInCurrencyBankCharge").val())),
         CRate :$("#txtCRateBankCharge").val(),
         AmountBC :parseFloat($("#txtCRateBankCharge").val()) *parseFloat(icsRemoveComma($("#txtAmountInCurrencyBankCharge").val())),
         CurrencyID :$("#cboCurrencyBankCharge").val(),
         CurrencySymbol:$("#cboCurrencyBankCharge option:selected").text(),
         ExpenditureHeadName :$("#cboBankCharge option:selected").text(),
     };
     $('#tblBankCharge').datagrid('appendRow',oCEDetail);
     RefreshFooter();
     $("#cboBankCharge").val(0);
     $("#cboBankCharge").focus();
 });
 $("#btnDeleteBankCharge").click(function () {
     var oCEDetail = $('#tblBankCharge').datagrid('getSelected');
     if (oCEDetail == null) {
         alert("Invalid Selection!!! please select a valid Item!");
         return false;
     }
     if (!confirm("Confirm to Remove?")) return;
     var SelectedRowIndex = $('#tblBankCharge').datagrid('getRowIndex', oCEDetail);
     $('#tblBankCharge').datagrid('deleteRow',SelectedRowIndex);
     RefreshFooter();
     alert("Removed sucessfully");
     //RefreshBankCharge();
     editIndexBankCharge = undefined;
 });

 function RefreshBankCharge()
 {
     endEditingBankCharge();
     var oBankChargeDetails = $('#tblBankCharge').datagrid('getRows');
     DynamicRefreshList(oBankChargeDetails, 'tblBankCharge');
 }

 var editIndexBankCharge = undefined;
 function endEditingBankCharge() {
     if (editIndexBankCharge == undefined) { return true }
     if ($('#tblBankCharge').datagrid('validateRow', editIndexBankCharge)) {
         $('#tblBankCharge').datagrid('endEdit', editIndexBankCharge);
         $('#tblBankCharge').datagrid('selectRow', editIndexBankCharge);
         var oCommercialEncashment = $('#tblBankCharge').datagrid('getSelected');
         debugger;
         if (oCommercialEncashment == null)
         {
             return;
         }
         oCommercialEncashment.AmountBC = parseFloat(oCommercialEncashment.AmountInCurrency)*parseFloat(oCommercialEncashment.CRate);
         $('#tblBankCharge').datagrid('updateRow', { index: editIndexBankCharge, row: oCommercialEncashment });
         RefreshFooter();
         editIndexBankCharge = undefined;
         return true;
     }
     else {
         return false;
     }
 }

 function onClickRowBankCharge(index) {

     if (editIndexBankCharge != index) {
         if (endEditingBankCharge()) {
             $('#tblBankCharge').datagrid('selectRow', index).datagrid('beginEdit', index);
             var oCommercialEncashment= $('#tblBankCharge').datagrid('getSelected');
             editIndexBankCharge = index;
         }
         else {
             $('#tblBankCharge').datagrid('selectRow', editIndexBankCharge);
         }
     }
 }
 function RefreshObject()
 {
     debugger;
     var bIsGain =  parseFloat(icsRemoveComma($('#txtAmountBC').val()))<parseFloat(icsRemoveComma($('#txtBSAmountBCMain').val()))?false:true;
     var oDetails = $('#tblBankAccount').datagrid('getRows');
     var oBankChareges = $('#tblBankCharge').datagrid('getRows');
     for(var i=0;i<oBankChareges.length;i++)
     {
         oDetails.push(oBankChareges[i]);
     }

     var oCommercialEncashment = {
         CommercialEncashmentID:_oCommercialEncashment.CommercialEncashmentID,
         CommercialBSID :_oCommercialEncashment.CommercialBSID,
         EncashmentDate:$('#txtEncashmentDate').datebox('getValue'),
         AmountInCurrency:parseFloat(icsRemoveComma($('#txtAmountInCurrency').val())),
         AmountBC:parseFloat(icsRemoveComma($('#txtAmountBC').val())),
         EncashRate:parseFloat(icsRemoveComma($('#txtEncashRate').val())),
         OverDueInCurrency:parseFloat(icsRemoveComma($('#txtOverDueInCurrency').val())),
         OverDueBC:parseFloat(icsRemoveComma($('#txtOverDueBC').val())),
         GainLossCurrencyID:$('#cboCurrency').val(),
         GainLossAmount:parseFloat(icsRemoveComma($('#txtGainLossAmount').val())),
         IsGain:bIsGain,
         PDeductionInCurrency:parseFloat(icsRemoveComma($('#txtPurchaseValue').val())),
         PDeductionBC:parseFloat(icsRemoveComma($('#txtPurchaseAmountBC').val())),
         Remarks: $("#txtRemarks").val(),
         CommercialEncashmentDetails:oDetails
     };
     return oCommercialEncashment;
 }
 function ValidateInput()
 {

     if(_oCommercialEncashment.CommercialBSID <=0) {
         alert("Please Select Commercial Bank Submission");
         return false;
     }
     if(parseFloat(icsRemoveComma($('#txtEncashRate').val()))<=0)
     {
         alert("Encash Rate Should be Greater then 0.");
         return false;
     }
     if(parseFloat(icsRemoveComma($('#txtAmountBC').val()))<=0)
     {
         alert("Amount Should be Greater then 0.");
         return false;
     }
     
     var oBankAccountDetails=$("#tblBankAccount").datagrid('getRows');
     if (!oBankAccountDetails || oBankAccountDetails.length<=0) 
     {
         alert("Please Add Bank Account.");
         return false;
     }
     for(var i = 0;i<oBankAccountDetails.length;i++)
     {
         if(parseFloat(oBankAccountDetails[i].AmountBC)<=0 )
         {
             alert("Amount Should be Greater than 0 for Bank Account ["+oBankAccountDetails[i].BankAccountNo+"]");
             return false;
         }
     }
     var nBalance = parseFloat(icsRemoveComma($('#txtBalance').val()));
     if(parseFloat(icsRemoveComma($('#txtBalance').val()))<=0)
     {
         nBalance = parseFloat(icsRemoveComma($('#txtBalance').val()))*-1;
     }
     if(nBalance>1)
     {
         alert("Sorry, Balance Should be 0 to 1.");
         return false;
     }
     //var nTotaAmountInCurrency = ICS_TotalCalculation($("#tblBankAccount").datagrid('getRows'),'AmountInCurrency');
     //if(parseFloat(nTotaAmountInCurrency)>parseFloat($("#txtPurchaseAmount").val()))
     //{
     //    alert("Purchase Amount and Total Bank Distribution Amount  Should be Equal.");
     //    return false;
     //}
     return true;
 }
 $('#btnSave').click(function (e) {
     debugger;
     endEditingBankCharge();
     endEditingBankAccount();
     if(!ValidateInput()) return false;
     var oCommercialEncashment = RefreshObject();
     $.ajax({
         type: "POST",
         dataType: "json",
         url : _sBaseAddress+"/CommercialBS/SaveCommercialEncashment",
         traditional: true,
         data:  JSON.stringify(oCommercialEncashment),
         contentType: "application/json; charset=utf-8",
         success: function (data) {
             debugger;
             var oCommercialEncashment= jQuery.parseJSON(data);
             if (oCommercialEncashment.ErrorMessage=="" || oCommercialEncashment.ErrorMessage==null)
             {
                 debugger;
                 alert("Successfully Saved Commercial EnCashment.");
                 var oCommercialBSs = sessionStorage.getItem("CommercialBSs");
                 var nIndex = parseInt(sessionStorage.getItem("SelectedRowIndex"));
                 if (oCommercialBSs != null)
                 {
                     oCommercialBSs = jQuery.parseJSON(oCommercialBSs);
                 }
                 else {
                     oCommercialBSs = [];
                 }
                 oCommercialBSs[nIndex] = oCommercialEncashment.CommercialBS;
                 sessionStorage.setItem("CommercialBSs", JSON.stringify(oCommercialBSs));
                 window.location.href = sessionStorage.getItem("BackLink");
             }else
             {
                 alert(oCommercialEncashment.ErrorMessage);
             }
         },
         error: function (xhr, status, error)
         {
             alert(error);
         }
     });

 });
 $('#btnApprove').click(function (e) {
    debugger;
    if(_oCommercialEncashment.CommercialEncashmentID<=0){alert("Without Save You Can't Approve.");return}
    if (!confirm("Confirm to Approve?")) return;
    $.ajax({
        type: "POST",
        dataType: "json",
        url : _sBaseAddress+"/CommercialBS/ApproveCommercialEncashment",
        traditional: true,
        data:  JSON.stringify(_oCommercialEncashment),
        contentType: "application/json; charset=utf-8",
        success: function (data) {
            debugger;
            var oCommercialEncashment= jQuery.parseJSON(data);
            if (oCommercialEncashment.ErrorMessage=="" || oCommercialEncashment.ErrorMessage==null)
            {
                debugger;
                alert("Successfully Approved Purchase Amount.");
                var oCommercialBSs = sessionStorage.getItem("CommercialBSs");
                var nIndex = parseInt(sessionStorage.getItem("SelectedRowIndex"));
                if (oCommercialBSs != null)
                {
                    oCommercialBSs = jQuery.parseJSON(oCommercialBSs);
                }
                else {
                    oCommercialBSs = [];
                }
                oCommercialBSs[nIndex] = oCommercialEncashment.CommercialBS;
                sessionStorage.setItem("CommercialBSs", JSON.stringify(oCommercialBSs));
                window.location.href = sessionStorage.getItem("BackLink");
            }else
            {
                alert(oCommercialEncashment.ErrorMessage);
            }
        },
        error: function (xhr, status, error)
        {
            alert(error);
        }
    });

});
 $('#btnClose').click(function (e) {
     window.location.href =sessionStorage.getItem("BackLink");
 });


</script>
