<html>
<head>
    <link href="@Url.Content("~/Content/CSS/icon.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/CSS/easyui.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/CSS/Pikerstyle.css")" rel="stylesheet" type="text/css" />

    <script src="@Url.Content("~/Scripts/jquery-1.7.1.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.ics.customize.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.easyui.min.js")" type="text/javascript"></script>

    <script src="@Url.Content("~/Scripts/jquery-ui.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/json2.js")" type="text/javascript"></script>

</head>
<body>

    @model ESimSol.BusinessObjects.DebitCreditSetup
    <div style="font-family:Tahoma">
        <table border="0" cellspacing="2" cellpadding="2">
            <tr>
                <td style="background-color:#CFB53B; text-align:center; width:820px; color:White">
                    <label id="lblHeaderName" style="font-size:15px; font-weight:bold; text-decoration:Underline; width:845px">Add Debit Setup</label>
                </td>
            </tr>
        </table>
        <fieldset style="height:200px; overflow:auto">
            <table border="0" cellspacing="5" style="font-size:12px;">
                <tr>
                    <td style="width:150px; text-align:right">Data Collection Query :</td>
                    <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.DataCollectionQuery, new { style = "width: 500px;font-size:12px", id = "txtDataCollectionQuery" })</td>
                </tr>
                <tr>
                    <td style="width:150px; text-align:right">Compare Column :</td>
                    <td style="width:505px; text-align:left">
                        <table border="0" cellpadding="0" cellspacing="2" style="font-size:12px;">
                            <tr>
                                <td style="width:200px; text-align:left">
                                    @Html.TextBoxFor(model => model.CompareColumn, new { style = "width: 200px;font-size:12px", id = "txtCompareColumn" })
                                </td>
                                <td style="width:150px; text-align:right">
                                    Account Head Type:
                                </td>
                                <td style="width:150px">
                                    <select id="cboAccountHeadType" style="width:155px;font-size:12" class="_ChangeAccountHead" />
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>

                <tr id="trFixedAcHead">
                    <td style="width:150px; text-align:right">Account Head:</td>
                    <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.AccountHeadName, new { style = "width: 502px;font-size:12", id = "txtFixedAccountHeadName", placeholder = "Type & Press Enter" })</td>
                </tr>
                <tr id="trDecidedAcHead">
                    <td style="width:150px; text-align:right">Account Head:</td>
                    <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.AccountHeadName, new { style = "width: 447px;font-size:12", id = "txtDecidedAccountHeadName", disabled = "disabled" }) <input type="button" id="btnDecidedAccountHeadName" style=" width:53px;" onclick="DecidedAccountHeadSetup()" value="SetUp" /></td>
                </tr>

                <tr id="trRefereneAcHead">
                    <td style="width:150px; text-align:right">Reference Column:</td>
                    <td style="width:505px; text-align:left">
                        <table border="0" cellpadding="0" cellspacing="0">
                            <tr>
                                <td style="width:265px; text-align:left;font-size:12px;">@Html.TextBoxFor(model => model.AccountHeadName, new { style = "width: 205px;font-size:12", id = "txtReferencAccountHeadName", disabled = "disabled" }) <input type="button" id="btnReferenceAccountHeadName" style=" width:53px;font-size:12px;" onclick="ReferenceAccountHeadSetup()" value="SetUp" /></td>
                                <td style="width:100px; text-align:right; font-size:12px;">Reference Type</td>
                                <td style="width:140px; text-align:left;font-size:12px;">
                                    @Html.DropDownListFor(model => model.ReferenceTypeInInt, Model.VoucherReferenceTypeObjs.Select(x => new SelectListItem() { Text = x.Value, Value = x.id.ToString() }), new { id = "cboReferenceType", style = "width:140px;" })
                            </tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td style="width:150px; text-align:right; font-size:10.8px">Account Head Mandatory:</td>
                    <td style="width:505px">
                        <table border="0" cellpadding="0" cellspacing="0" style="font-size:11px; font-weight:bold">
                            <tr>
                                <td style="width:50px"><input type="checkbox" id="chkMandatoryYes" onclick="if(this.checked){IsMandatoryYes()}else{IsMandatoryNo()}" />Yes </td>
                                <td style="width:50px"><input type="checkbox" id="chkMandatoryNo" onclick="if(this.checked){IsMandatoryNo()}else{IsMandatoryYes()}" />No</td>
                                <td style="width:420px; text-align:left">@Html.TextBoxFor(model => model.AccountHeadName, new { style = "width:355px;font-size:12", id = "txtDecidedAccountNameSetup", disabled = "disabled" }) <input type="button" id="btnDecidedAccountName" style=" width:53px;" onclick="DecidedAccountNameSetup()" value="SetUp" /></td>
                            </tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td style="width:150px; text-align:right">Currency Setup:</td>
                    <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.CurrencySetup, new { style = "width: 447px;font-size:12", id = "txtCurrencySetup", disabled = "disabled" }) <input type="button" id="btnCurrencySetup" style=" width:53px;" onclick="CurrencySetup()" value="SetUp" /></td>
                </tr>

                <tr>
                    <td style="width:150px; text-align:right">Conversion Rate Setup:</td>
                    <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.ConversionRateSetup, new { style = "width: 447px;font-size:12", id = "txtConversionRateSetup", disabled = "disabled" }) <input type="button" id="btnConversionRateSetup" style=" width:53px;" onclick="ConversionRateSetup()" value="SetUp" /></td>
                </tr>
                <tr>
                    <td style="width:150px; text-align:right">Amount Value:</td>
                    <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.AmountSetup, new { style = "width: 447px;font-size:12", id = "txtAmountSetup", disabled = "disabled" }) <input type="button" id="btnAmountSetup" style=" width:53px;" onclick="AmmountSetup()" value="SetUp" /></td>
                </tr>

                <tr>
                    <td style="width:150px; text-align:right">Narration Setup:</td>
                    <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.NarrationSetup, new { style = "width: 447px;font-size:12", id = "txtNarrationSetup", disabled = "disabled" }) <input type="button" id="btnNarrationSetup" style=" width:53px;" onclick="NarrationSetup()" value="SetUp" /></td>
                </tr>
            </table>
        </fieldset>

        <div class="easyui-tabs" style="width:693px;height:278px; margin-left:2px">
            <div title="Sub Ledger" style="padding:5px;">
                <table border="0" cellspacing="5" style="font-size:12px;">
                    <tr>
                        <td style="width:150px; text-align:right">Sub Ledger Effect:</td>
                        <td style="width:505px; text-align:left">
                            <input type="checkbox" id="chkBoxCostcCrtYes" onclick="CostCreateEffectYes()" /> Yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="checkbox" id="chkBoxCostcCrtNo" onclick="CostCreateEffectNo()" />No
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="checkbox" id="chkHasBillReference" /> Has Bill Reference
                            &nbsp;&nbsp;&nbsp;&nbsp; <input type="checkbox" id="chkHasChequeReference" /> Has Cheque Reference
                        </td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right; font-size:10px;">SQL for Cost Create Data:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.CostcenterDataSQL, new { style = "width: 505px;font-size:12", id = "txtCostcenterDataSQL" }) </td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Compare Columns:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.CostCenterCompareColumns, new { style = "width: 447px;font-size:12", id = "txtCostCenterCompareColumns" }) <input type="button" id="btnCostCenterCompareColumnsDBView" style=" width:53px;" onclick="CostCenterCompareColumnDBView()" value="DB View" /></td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">Cost Center:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.CostcenterSetup, new { style = "width: 447px;font-size:12", id = "txtCostcenterSetup", disabled = "disabled" }) <input type="button" id="btnCostcenterSetup" style=" width:53px;" onclick="CostcenterSetup()" value="SetUp" /></td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">Amount:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.CostCenterAmountSetup, new { style = "width: 447px;font-size:12", id = "txtCostCenterAmountSetup", disabled = "disabled" }) <input type="button" id="btnCostCenterAmountSetup" style=" width:53px;" onclick="CostCenterAmountSetup()" value="SetUp" /></td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Description:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.CostCenterDescriptionSetup, new { style = "width: 447px;font-size:12", id = "txtCostCenterDescriptionSetup", disabled = "disabled" }) <input type="button" id="btnCostCenterDescriptionSetup" style=" width:53px;" onclick="CostCenterDescriptionSetup()" value="Setup" /></td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Tranjaction Date:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.CostCenterDateSetup, new { style = "width: 447px;font-size:12", id = "txtCostCenterDateSetup", disabled = "disabled" }) <input type="button" id="btnCostCenterDateSetup" style=" width:53px;" onclick="CostCenterDateSetup()" value="Setup" /></td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Cost Center Category:</td>
                        <td style="width:505px; text-align:left">
                            <table border="0" cellspacing="0" cellpadding="0" style="font-size:12px">
                                <tr>
                                    <td style="width:200px">
                                        @Html.TextBoxFor(model => model.CostCenterCategorySetup, new { style = "width: 125px;font-size:12", id = "txtCostCenterCategorySetup", disabled = "disabled" }) <input type="button" id="btnCostCenterCategorySetup" style=" width:53px;" onclick="CostCenterCategorySetup()" value="Setup" />
                                    </td>
                                    <td style="width:150px; text-align:right">
                                        CC Ref. Type :
                                    </td>
                                    <td style="width:200px">
                                        @Html.DropDownListFor(model => model.CostCenterRefObjTypeInInt, Model.CostCenterReferenceTypeObjs.Select(x => new SelectListItem() { Text = x.Value, Value = x.id.ToString() }), new { id = "cboCostCenterRefObjType", style = "width:200px;" })
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">CC No Column :</td>
                        <td style="width:505px; text-align:left">
                            <table border="0" cellspacing="0" cellpadding="0" style="font-size:12px">
                                <tr>
                                    <td style="width:200px">
                                        @Html.TextBoxFor(model => model.CostCenterNoColumn, new { style = "width: 200px; font-size:12", id = "txtCostCenterNoColumn" })
                                    </td>
                                    <td style="width:150px; text-align:right">
                                        CCRef Obj Column:
                                    </td>
                                    <td style="width:200px">
                                        @Html.TextBoxFor(model => model.CostCenterRefObjColumn, new { style = "width: 200px; font-size:12", id = "txtCostCenterRefObjColumn" })
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>

            <div title="Voucher Bill" style="padding:5px;">
                <table border="0" cellspacing="5" style="font-size:12px;">
                    <tr>
                        <td style="width:150px; text-align:right">Voucher Bill Effect:</td>
                        <td style="width:505px; text-align:left"><input type="checkbox" id="chkBoxVoucherBillYes" onclick="VoucherBillEffectYes()" /> Yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="checkbox" id="chkBoxVoucherBillNo" onclick="VoucherBillEffectNo()" />No</td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right; font-size:10px;">SQL for Voucher Effect Data:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.VoucherBillDataSQL, new { style = "width: 505px;font-size:12", id = "txtVoucherBillDataSQL" }) </td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Compare Columns:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.VoucherBillCompareColumns, new { style = "width: 447px;font-size:12", id = "txtVoucherBillCompareColumns" }) <input type="button" id="btnVoucherBillCompareColumnsDBView" style=" width:53px;" onclick="VoucherBillCompareColumnDBView()" value="DB View" /></td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">Voucher Bill:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.VoucherBillSetup, new { style = "width: 447px;font-size:12", id = "txtVoucherBillSetup", disabled = "disabled" }) <input type="button" id="btnVoucherBillSetup" style=" width:53px;" onclick="VoucherBillSetup()" value="SetUp" /></td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">Amount:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.VoucherBillAmountSetup, new { style = "width: 447px;font-size:12", id = "txtVoucherBillAmountSetup", disabled = "disabled" }) <input type="button" id="btnVoucherBillAmountSetup" style=" width:53px;" onclick="VoucherBillAmountSetup()" value="SetUp" /></td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Description:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.VoucherBillDescriptionSetup, new { style = "width: 447px;font-size:12", id = "txtVoucherBillDescriptionSetup", disabled = "disabled" }) <input type="button" id="btnVoucherBillDescriptionSetup" style=" width:53px;" onclick="VoucherBillDescriptionSetup()" value="Setup" /></td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">Tranjaction Date:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.VoucherBillDateSetup, new { style = "width: 447px;font-size:12", id = "txtVoucherBillDateSetup", disabled = "disabled" }) <input type="button" id="btnVoucherBillDateSetup" style=" width:53px;" onclick="VoucherBillDateSetup()" value="Setup" /></td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Voucher Bill TrType:</td>
                        <td style="width:505px; text-align:left">
                            <table border="0" cellspacing="0" cellpadding="0" style="font-size:12px">
                                <tr>
                                    <td style="width:200px">
                                        @Html.DropDownListFor(model => model.VoucherBillTrTypeInInt, Model.VoucherBillTrTypeObjs.Select(x => new SelectListItem() { Text = x.Value, Value = x.id.ToString() }), new { id = "cboVoucherBillTrType", style = "width:200px;" })
                                    </td>
                                    <td style="width:150px; text-align:right">
                                        VB Ref. Type :
                                    </td>
                                    <td style="width:200px">
                                        @Html.DropDownListFor(model => model.VoucherBillRefObjTypeInInt, Model.VoucherBillReferenceTypeObjs.Select(x => new SelectListItem() { Text = x.Value, Value = x.id.ToString() }), new { id = "cboVoucherBillRefObjType", style = "width:200px;" })
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">VB No Column :</td>
                        <td style="width:505px; text-align:left">
                            <table border="0" cellspacing="0" cellpadding="0" style="font-size:12px">
                                <tr>
                                    <td style="width:200px">
                                        @Html.TextBoxFor(model => model.VoucherBillNoColumn, new { style = "width: 200px; font-size:12", id = "txtVoucherBillNoColumn" })
                                    </td>
                                    <td style="width:150px; text-align:right">
                                        VBRef Obj Column:
                                    </td>
                                    <td style="width:200px">
                                        @Html.TextBoxFor(model => model.VoucherBillRefObjColumn, new { style = "width: 200px; font-size:12", id = "txtVoucherBillRefObjColumn" })
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Bill Date :</td>
                        <td style="width:505px; text-align:left">
                            <table border="0" cellspacing="0" cellpadding="0" style="font-size:12px">
                                <tr>
                                    <td style="width:200px">
                                        @Html.TextBoxFor(model => model.BillDateSetup, new { style = "width: 135px; font-size:12", id = "txtBillDateSetup", disabled = "disabled" })<input type="button" id="btnBillDateSetup" style=" width:53px;" onclick="BillDateSetup()" value="Setup" />
                                    </td>
                                    <td style="width:150px; text-align:right">
                                        Bill Due Date:
                                    </td>
                                    <td style="width:200px">
                                        @Html.TextBoxFor(model => model.BillDueDateSetup, new { style = "width: 135px; font-size:12", id = "txtBillDueDateSetup", disabled = "disabled" })<input type="button" id="btnBillDueDateSetup" style=" width:53px;" onclick="BillDueDateSetup()" value="Setup" />
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </div>

            <div title="Inventory" style="padding:5px;">
                <table border="0" cellspacing="5" style="font-size:12px;">
                    <tr>
                        <td style="width:150px; text-align:right">Inventory Effect:</td>
                        <td style="width:505px; text-align:left"><input type="checkbox" id="chkBoxInventoryYes" onclick="InventoryEffectYes()" /> Yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="checkbox" id="chkBoxInventoryNo" onclick="InventoryEffectNo()" />No</td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right; font-size:10px;">SQL for Cost Create Data:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.InventoryDataSQL, new { style = "width: 505px;font-size:12", id = "txtInventoryDataSQL" }) </td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Compare Columns:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.InventoryCompareColumns, new { style = "width: 447px;font-size:12", id = "txtInventoryCompareColumns" }) <input type="button" id="btnInventoryCompareColumnsDBView" style=" width:53px;" onclick="InventoryCompareColumnDBView()" value="DB View" /></td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Working Unit:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.InventoryWorkingUnitSetup, new { style = "width: 447px;font-size:12", id = "txtInventoryWorkingUnitSetup", disabled = "disabled" }) <input type="button" id="btnInventoryWorkingUnitSetup" style=" width:53px;" onclick="InventoryWorkingUnitSetup()" value="SetUp" /></td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Inventory Product:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.InventoryProductSetup, new { style = "width: 447px;font-size:12", id = "txtInventoryProductSetup", disabled = "disabled" }) <input type="button" id="btnInventoryProductSetup" style=" width:53px;" onclick="InventoryProductSetup()" value="SetUp" /></td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">Qty:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.InventoryQtySetup, new { style = "width: 447px;font-size:12", id = "txtInventoryQtySetup", disabled = "disabled" }) <input type="button" id="btnInventoryQtySetup" style=" width:53px;" onclick="InventoryQtySetup()" value="SetUp" /></td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Measurement Unit:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.InventoryUnitSetup, new { style = "width: 447px;font-size:12", id = "txtInventoryUnitSetup", disabled = "disabled" }) <input type="button" id="btnInventoryUnitSetup" style=" width:53px;" onclick="InventoryUnitSetup()" value="SetUp" /></td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Unit Price:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.InventoryUnitPriceSetup, new { style = "width: 447px;font-size:12", id = "txtInventoryUnitPriceSetup", disabled = "disabled" }) <input type="button" id="btnInventoryUnitPriceSetup" style=" width:53px;" onclick="InventoryUnitPriceSetup()" value="SetUp" /></td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">Description:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.InventoryDescriptionSetup, new { style = "width: 447px;font-size:12", id = "txtInventoryDescriptionSetup", disabled = "disabled" }) <input type="button" id="btnInventoryDescriptionSetup" style=" width:53px;" onclick="InventoryDescriptionSetup()" value="Setup" /></td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">Tranjaction Date:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.InventoryDateSetup, new { style = "width: 447px;font-size:12", id = "txtInventoryDateSetup", disabled = "disabled" }) <input type="button" id="btnInventoryDateSetup" style=" width:53px;" onclick="InventoryDateSetup()" value="Setup" /></td>
                    </tr>
                </table>
            </div>

            <div title="Cheque Reference" style="padding:5px; width:700px;height:450px;">
                <table border="0" cellspacing="5" style="font-size:12px;">
                    <tr>
                        <td style="width:150px; text-align:right">Cheque Reference:</td>
                        <td style="width:505px; text-align:left"><input type="checkbox" id="chkBoxRefrncCrtYes" onclick="ChequeReferenceCreateYes()" /> Yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="checkbox" id="chkBoxRefrncCrtNo" onclick="ChequeReferenceCreateNo()" />No</td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">SQL for Raference Data:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.ChequeReferenceDataSQL, new { style = "width: 505px;font-size:12", id = "txtChequeReferenceDataSQL" }) </td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">Compare Columns:</td>
                        <td style="width:505px; text-align:left">
                            @Html.TextBoxFor(model => model.ChequeReferenceCompareColumns, new { style = "width: 310px;font-size:12", id = "txtChequeReferenceCompareColumns" })
                            Cheque Type : @Html.DropDownListFor(model => model.ChequeTypeInt, Model.ChequeTypeObjs.Select(x => new SelectListItem() { Text = x.Value, Value = x.id.ToString() }), new { id = "cboChequeType", style = "width:100px;" })

                        </td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Cheque Setup:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.ChequeSetup, new { style = "width: 447px;font-size:12", id = "txtChequeSetup", disabled = "disabled" }) <input type="button" id="btnChequeSetup" style=" width:53px;" onclick="ChequeSetup()" value="SetUp" /></td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Amount:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.ChequeReferenceAmountSetup, new { style = "width: 447px;font-size:12", id = "txtChequeReferenceAmountSetup", disabled = "disabled" }) <input type="button" id="btnChequeReferenceAmountSetup" style=" width:53px;" onclick="ChequeReferenceAmountSetup()" value="SetUp" /></td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Description:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.ChequeReferenceDescriptionSetup, new { style = "width: 447px;font-size:12", id = "txtChequeReferenceDescriptionSetup", disabled = "disabled" }) <input type="button" id="btnChequeReferenceDescriptionSetup" style=" width:53px;" onclick="ChequeReferenceDescriptionSetup()" value="Setup" /></td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">Tranjaction Date:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.ChequeReferenceDateSetup, new { style = "width: 447px;font-size:12", id = "txtChequeReferenceDateSetup", disabled = "disabled" }) <input type="button" id="btnChequeReferenceDateSetup" style=" width:53px;" onclick="ChequeReferenceDateSetup()" value="Setup" /></td>
                    </tr>
                </table>
            </div>

            <div title="Order Reference" style="padding:5px; width:700px;height:450px;">
                <table border="0" cellspacing="5" style="font-size:12px;">
                    <tr>
                        <td style="width:150px; text-align:right">Order Reference:</td>
                        <td style="width:505px; text-align:left"><input type="checkbox" id="chkBoxOrderRefYes" onclick="OrderReferenceCreateYes()" /> Yes&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="checkbox" id="chkBoxOrderRefNo" onclick="OrderReferenceCreateNo()" />No</td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">SQL for Raference Data:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.OrderReferenceDataSQL, new { style = "width: 505px;font-size:12", id = "txtOrderReferenceDataSQL" }) </td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">Compare Columns:</td>
                        <td style="width:505px; text-align:left">
                            @Html.TextBoxFor(model => model.OrderReferenceCompareColumns, new { style = "width: 505px;font-size:12", id = "txtOrderReferenceCompareColumns" })
                        </td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Order Setup:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.OrderReferenceSetup, new { style = "width: 447px;font-size:12", id = "txtOrderReferenceSetup", disabled = "disabled" }) <input type="button" id="btnOrderReferenceSetup" style=" width:53px;" onclick="OrderReferenceSetup()" value="SetUp" /></td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Amount:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.OrderAmountSetup, new { style = "width: 447px;font-size:12", id = "txtOrderAmountSetup", disabled = "disabled" }) <input type="button" id="btnOrderAmountSetup" style=" width:53px;" onclick="OrderAmountSetup()" value="SetUp" /></td>
                    </tr>
                    <tr>
                        <td style="width:150px; text-align:right">Remarks Setup:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.OrderRemarkSetup, new { style = "width: 447px;font-size:12", id = "txtOrderRemarkSetup", disabled = "disabled" }) <input type="button" id="btnOrderRemarkSetup" style=" width:53px;" onclick="OrderRemarkSetup()" value="Setup" /></td>
                    </tr>

                    <tr>
                        <td style="width:150px; text-align:right">Tranjaction Date:</td>
                        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.OrderDateSetup, new { style = "width: 447px;font-size:12", id = "txtOrderDateSetup", disabled = "disabled" }) <input type="button" id="btnOrderDateSetup" style=" width:53px;" onclick="OrderDateSetup()" value="Setup" /></td>
                    </tr>
                </table>
            </div>
        </div>

<table border="0" cellspacing="5" style="font-size:12px;">
    <tr>
        <td style="width:145px; text-align:right">Note:</td>
        <td style="width:505px; text-align:left">@Html.TextBoxFor(model => model.Note, new { style = "width: 535px;font-size:12", id = "txtNote" })</td>
    </tr>
</table>


<fieldset>
    <legend style="font-weight:bold"> Action : </legend>
    <table border="0" cellspacing="2" cellpadding="2" style="font-size:11px;width:670px; height:10px; font-weight:bold">
        <tr style="height:10px;">
            <td style="width:570px; text-align:right"></td>
            <td style="width:50px">
                <a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="true" onclick="Save()">Save</a>
            </td>
            <td style="width:50px">
                <a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="true" onclick="Close()">Close</a>
            </td>
        </tr>
    </table>
</fieldset>
</div>
</body>
</html>

<script type="text/javascript">

    var _oDebitCreditSetup=null;
    var _sBaseAddress="";
    var _objargumentName  ="";
    var _oDebitCreditSetups =[];
    var _eAccountHeadTypes = [];
    var _oDataCollectionSetups = [];
    var  _bIsDebit = false;    
    var _oAccountHeadSetup=null;
    var _oAccountNameSetup=null;
    var _oCurrencySetup=null;
    var _oConversionRateSetup=null;
    var _oVoucherAmountSetup =null;
    var _oNarrationSetups=[];
    var _oChequeSetup=null;
    var _oChequeReferenceAmountSetup=null;    
    var _oChequeReferenceDescriptionSetups=[];
    var _oChequeReferenceDateSetup =null;
    var _oOrderSetup=null;
    var _oOrderAmountSetup=null;    
    var _oOrderRemarkSetups=[];
    var _oOrderDateSetup =null;
    var _oCostCenterSetup =null;
    var _oCostCenterAmountSetup=null;
    var _oCostCenterDescriptionSetups=[];
    var _oCostCenterDateSetup =null;
    var _oVoucherBillSetup = null;
    var _oVoucherBillAmountSetup=null;
    var _oVoucherBillDescriptionSetups=[];
    var _oVoucherBillDateSetup =null;
    var _oBillDateSetup =null;
    var _oBillDueDateSetup =null;
    var _oInventoryWorkingUnitSetup =null;
    var _oInventoryProductSetup =null;
    var _oInventoryQtySetup=null;
    var _oInventoryUnitSetup =null;
    var _oInventoryUnitPriceSetup =null;
    var _oInventoryDescriptionSetups=[];
    var _oInventoryDateSetup =null;
    var _oCostCenterCategorySetup =null;    
    var obj = window.dialogArguments;
    $(document).ready(function () {
        debugger;
        _sBaseAddress =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
        _oDebitCreditSetup = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
        _eAccountHeadTypes = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.AccountHeadTypes));        
        _oDebitCreditSetup = obj.DebitCreditSetup;
        _bIsDebit = obj.IsDebit;
        _objargumentName =obj.Name;
        if(obj.Operation=== 'Edit')
        {
            _oDataCollectionSetups = _oDebitCreditSetup.DataCollectionSetups;
            _oAccountHeadSetup = GetSpecifiDataCollectionSet(6); //EnumDataSetupType : AccountHeadSetup = 6
            _oAccountNameSetup=GetSpecifiDataCollectionSet(30); //EnumDataSetupType : AccountNameSetup =30
            _oCurrencySetup = GetSpecifiDataCollectionSet(2);  // EnumDataSetupType : CurrencySetup = 2
            _oConversionRateSetup = GetSpecifiDataCollectionSet(3); //EnumDataSetupType : ConversionRateSetup = 3
            _oVoucherAmountSetup = GetSpecifiDataCollectionSet(7); //EnumDataSetupType : VoucherDetailAmountSetup = 7
            _oNarrationSetups = GetSpecifiDataCollectionSets(8); //EnumDataSetupType : VoucherDetailNarrationSetup = 8
            
            //Cheque
            _oChequeSetup = GetSpecifiDataCollectionSet(31); //EnumDataSetupType : ChequeSetup = 31
            _oChequeReferenceAmountSetup = GetSpecifiDataCollectionSet(9); //EnumDataSetupType : ChequeReferenceAmountSetup = 9
            _oChequeReferenceDescriptionSetups = GetSpecifiDataCollectionSets(10); //EnumDataSetupType : ChequeReferenceDescriptinSetup = 10
            _oChequeReferenceDateSetup = GetSpecifiDataCollectionSet(11); //EnumDataSetupType : ChequeReferenceDateSetup = 11

            //Order Reference
            _oOrderSetup = GetSpecifiDataCollectionSet(32); //EnumDataSetupType : OrderSetup = 32
            _oOrderAmountSetup = GetSpecifiDataCollectionSet(33); //EnumDataSetupType : OrderAmountSetup = 33
            _oOrderRemarkSetups = GetSpecifiDataCollectionSets(34); //EnumDataSetupType : OrderRemarkSetup = 34
            _oOrderDateSetup     = GetSpecifiDataCollectionSet(35); //EnumDataSetupType : OrderDateSetup = 35

            //Cost Center
            _oCostCenterSetup = GetSpecifiDataCollectionSet(12); //EnumDataSetupType : CostCenterSetup = 12
            _oCostCenterAmountSetup = GetSpecifiDataCollectionSet(13); //EnumDataSetupType : CostCenterAmountSetup = 13
            _oCostCenterDescriptionSetups = GetSpecifiDataCollectionSets(14); //EnumDataSetupType : CostCenterDescriptionSetup = 14
            _oCostCenterDateSetup = GetSpecifiDataCollectionSet(15); //EnumDataSetupType : CostCenterDateSetup = 15
            // Voucher Bill;
            _oVoucherBillSetup = GetSpecifiDataCollectionSet(16); //EnumDataSetupType : VoucherBillSetup = 16
            _oVoucherBillAmountSetup = GetSpecifiDataCollectionSet(17); //EnumDataSetupType : VoucherBillAmountSetup  = 17
            _oVoucherBillDescriptionSetups = GetSpecifiDataCollectionSets(18); //EnumDataSetupType : VoucherBillDescriptionSetup = 18
            _oVoucherBillDateSetup = GetSpecifiDataCollectionSet(19); //EnumDataSetupType : VoucherBillDateSetup = 19
            _oBillDateSetup = GetSpecifiDataCollectionSet(28); //EnumDataSetupType : BillDateSetup = 28
            _oBillDueDateSetup = GetSpecifiDataCollectionSet(29); //EnumDataSetupType : BillDueDateSetup = 29
            // Inventory
            _oInventoryWorkingUnitSetup = GetSpecifiDataCollectionSet(20); //EnumDataSetupType : InventoryWorkingUnitSetup = 20
            _oInventoryProductSetup = GetSpecifiDataCollectionSet(21); //EnumDataSetupType : InventoryProductSetup = 21
            _oInventoryQtySetup = GetSpecifiDataCollectionSet(22); //EnumDataSetupType : InventoryQtySetup = 22
            _oInventoryUnitSetup = GetSpecifiDataCollectionSet(23); //EnumDataSetupType : InventoryUnitSetup = 23
            _oInventoryUnitPriceSetup = GetSpecifiDataCollectionSet(24); //EnumDataSetupType : InventoryUnitPriceSetup = 24
            _oInventoryDescriptionSetups = GetSpecifiDataCollectionSets(25); //EnumDataSetupType : InventoryDescriptionSetup = 25
            _oInventoryDateSetup = GetSpecifiDataCollectionSet(26); //EnumDataSetupType : InventoryDateSetup = 26
            _oCostCenterCategorySetup = GetSpecifiDataCollectionSet(27); //EnumDataSetupType : CostCenterCategorySetup = 27

            if(_oDebitCreditSetup.IsChequeReferenceCreate)
            {
                document.getElementById('chkBoxRefrncCrtYes').checked=true;
                document.getElementById('chkBoxRefrncCrtNo').checked=false;
            }
            else
            {
                document.getElementById('chkBoxRefrncCrtYes').checked=false;
                document.getElementById('chkBoxRefrncCrtNo').checked=true;
            }

            if(_oDebitCreditSetup.IsOrderReferenceApply)
            {
                document.getElementById('chkBoxOrderRefYes').checked=true;
                document.getElementById('chkBoxOrderRefNo').checked=false;
            }
            else
            {
                document.getElementById('chkBoxOrderRefYes').checked=false;
                document.getElementById('chkBoxOrderRefNo').checked=true;
            }

            if(_oDebitCreditSetup.IsCostCenterCreate)
            {
                document.getElementById('chkBoxCostcCrtYes').checked=true;
                document.getElementById('chkBoxCostcCrtNo').checked=false;
            }
            else
            {
                document.getElementById('chkBoxCostcCrtYes').checked=false;
                document.getElementById('chkBoxCostcCrtNo').checked=true;
            }

            //Is Voucher bill Create
            if(_oDebitCreditSetup.IsVoucherBill)
            {
                document.getElementById('chkBoxVoucherBillYes').checked=true;
                document.getElementById('chkBoxVoucherBillNo').checked=false;
            }
            else
            {
                document.getElementById('chkBoxVoucherBillYes').checked=false;
                document.getElementById('chkBoxVoucherBillNo').checked=true;
            }
            // Is Inventory Create
            if(_oDebitCreditSetup.IsInventoryEffect)
            {
                document.getElementById('chkBoxInventoryYes').checked=true;
                document.getElementById('chkBoxInventoryNo').checked=false;
            }
            else
            {
                document.getElementById('chkBoxInventoryYes').checked=false;
                document.getElementById('chkBoxInventoryNo').checked=true;
            }
        }
        else
        {
            document.getElementById('chkBoxRefrncCrtYes').checked=true;
            document.getElementById('chkBoxCostcCrtYes').checked=true;
            document.getElementById('chkBoxVoucherBillYes').checked=true;
            document.getElementById('chkBoxInventoryYes').checked=true;
            document.getElementById('chkBoxOrderRefYes').checked=true;            
        }
        document.getElementById('lblHeaderName').innerHTML =_objargumentName;
        document.getElementById('trDecidedAcHead').style.display='none';
        document.getElementById('trRefereneAcHead').style.display='none';
        LoadAccountHeadTypes();        
        RefreshControl();

    });


    function RefreshControl()
    {
        if(_oDebitCreditSetup!=null)
        {
            $('#txtDataCollectionQuery').val(_oDebitCreditSetup.DataCollectionQuery);
            $('#txtCompareColumn').val(_oDebitCreditSetup.CompareColumn);
            if(parseInt(_oDebitCreditSetup.AccountHeadTypeInInt)===1)
            {
                document.getElementById('trDecidedAcHead').style.display='none';
                document.getElementById('trRefereneAcHead').style.display='none';
                document.getElementById('trFixedAcHead').style.display='';
                $("#txtFixedAccountHeadName").val(_oDebitCreditSetup.AccountHeadSetup);
            }else if(parseInt(_oDebitCreditSetup.AccountHeadTypeInInt)===2)
            {
                document.getElementById('trFixedAcHead').style.display='none';
                document.getElementById('trRefereneAcHead').style.display='none';
                document.getElementById('trDecidedAcHead').style.display='';
                _oDebitCreditSetup.FixedAccountHeadID = 0;
                $("#txtDecidedAccountHeadName").val(_oDebitCreditSetup.AccountHeadSetup);
            }else if(parseInt(_oDebitCreditSetup.AccountHeadTypeInInt)===3)
            {
                document.getElementById('trFixedAcHead').style.display='none';
                document.getElementById('trDecidedAcHead').style.display='none';
                document.getElementById('trRefereneAcHead').style.display='';
                _oDebitCreditSetup.FixedAccountHeadID = 0;
                $("#txtReferencAccountHeadName").val(_oDebitCreditSetup.AccountHeadSetup);
            }
            $("#txtCurrencySetup").val(_oDebitCreditSetup.CurrencySetup);
            $("#txtConversionRateSetup").val(_oDebitCreditSetup.ConversionRateSetup);
            $("#txtAmountSetup").val(_oDebitCreditSetup.AmountSetup);
            $("#txtNarrationSetup").val(_oDebitCreditSetup.NarrationSetup);

            //ChequeReference Part
            $("#txtChequeReferenceDataSQL").val(_oDebitCreditSetup.ChequeReferenceDataSQL);
            $("#txtChequeReferenceCompareColumns").val(_oDebitCreditSetup.ChequeReferenceCompareColumns);
            $("#cboChequeType").val(_oDebitCreditSetup.ChequeTypeInt);
            $("#txtChequeSetup").val(_oDebitCreditSetup.ChequeSetup);
            $("#txtChequeReferenceAmountSetup").val(_oDebitCreditSetup.ChequeReferenceAmountSetup);
            $("#txtChequeReferenceDescriptionSetup").val(_oDebitCreditSetup.ChequeReferenceDescriptionSetup);
            $("#txtChequeReferenceDateSetup").val(_oDebitCreditSetup.ChequeReferenceDateSetup);

            //OrderReference Part
            $("#txtOrderReferenceDataSQL").val(_oDebitCreditSetup.OrderReferenceDataSQL);
            $("#txtOrderReferenceCompareColumns").val(_oDebitCreditSetup.OrderReferenceCompareColumns);            
            $("#txtOrderReferenceSetup").val(_oDebitCreditSetup.OrderReferenceSetup);
            $("#txtOrderAmountSetup").val(_oDebitCreditSetup.OrderAmountSetup);
            $("#txtOrderRemarkSetup").val(_oDebitCreditSetup.OrderRemarkSetup);
            $("#txtOrderDateSetup").val(_oDebitCreditSetup.OrderDateSetup);

            //Cost Center Part            
            document.getElementById('chkHasBillReference').checked=_oDebitCreditSetup.HasBillReference;
            document.getElementById('chkHasChequeReference').checked=_oDebitCreditSetup.HasChequeReference;
            $("#txtCostcenterDataSQL").val(_oDebitCreditSetup.CostcenterDataSQL);
            $("#txtCostCenterCompareColumns").val(_oDebitCreditSetup.CostCenterCompareColumns);
            $("#txtCostcenterSetup").val(_oDebitCreditSetup.CostcenterSetup);
            $("#txtCostCenterAmountSetup").val(_oDebitCreditSetup.CostCenterAmountSetup);
            $("#txtCostCenterDescriptionSetup").val(_oDebitCreditSetup.CostCenterDescriptionSetup );
            $("#txtCostCenterDateSetup").val(_oDebitCreditSetup.CostCenterDateSetup);

            //Voucher Bill Part
            $("#txtVoucherBillDataSQL").val(_oDebitCreditSetup.VoucherBillDataSQL);
            $("#txtVoucherBillCompareColumns").val(_oDebitCreditSetup.VoucherBillCompareColumns);
            $("#txtVoucherBillSetup").val(_oDebitCreditSetup.VoucherBillSetup);
            $("#txtVoucherBillAmountSetup").val(_oDebitCreditSetup.VoucherBillAmountSetup);
            $("#txtVoucherBillDescriptionSetup").val(_oDebitCreditSetup.VoucherBillDescriptionSetup);
            $("#txtVoucherBillDateSetup").val(_oDebitCreditSetup.VoucherBillDateSetup);
            $("#txtBillDateSetup").val(_oDebitCreditSetup.BillDateSetup);
            $("#txtBillDueDateSetup").val(_oDebitCreditSetup.BillDueDateSetup);

            //Inventory Part
            $("#txtInventoryDataSQL").val(_oDebitCreditSetup.InventoryDataSQL);
            $("#txtInventoryCompareColumns").val(_oDebitCreditSetup.InventoryCompareColumns);
            $("#txtInventoryWorkingUnitSetup").val(_oDebitCreditSetup.InventoryWorkingUnitSetup);
            $("#txtInventoryProductSetup").val(_oDebitCreditSetup.InventoryProductSetup);
            $("#txtInventoryQtySetup").val(_oDebitCreditSetup.InventoryQtySetup);
            $("#txtInventoryUnitSetup").val(_oDebitCreditSetup.InventoryUnitSetup);
            $("#txtInventoryUnitPriceSetup").val(_oDebitCreditSetup.InventoryUnitPriceSetup);
            $("#txtInventoryDescriptionSetup").val(_oDebitCreditSetup.InventoryDescriptionSetup);
            $("#txtInventoryDateSetup").val(_oDebitCreditSetup.InventoryDateSetup);
                        
            $("#txtCostCenterCategorySetup").val(_oDebitCreditSetup.CostCenterCategorySetup);
            $("#cboCostCenterRefObjType").val(_oDebitCreditSetup.CostCenterRefObjTypeInInt);
            $("#txtCostCenterNoColumn").val(_oDebitCreditSetup.CostCenterNoColumn);
            $("#txtCostCenterRefObjColumn").val(_oDebitCreditSetup.CostCenterRefObjColumn);
            $("#cboVoucherBillTrType").val(_oDebitCreditSetup.VoucherBillTrTypeInInt);
            $("#cboVoucherBillRefObjType").val(_oDebitCreditSetup.VoucherBillRefObjTypeInInt);
            $("#txtVoucherBillNoColumn").val(_oDebitCreditSetup.VoucherBillNoColumn);
            $("#txtVoucherBillRefObjColumn").val(_oDebitCreditSetup.VoucherBillRefObjColumn);

            $("#txtNote").val(_oDebitCreditSetup.Note);

            if(_oDebitCreditSetup.IsMandatory===true)  
            {
                document.getElementById("chkMandatoryYes").checked=true;
                document.getElementById("chkMandatoryNo").checked=false;
            }
            else
            {
                document.getElementById("chkMandatoryYes").checked=false;
                document.getElementById("chkMandatoryNo").checked=true;
            }
        }
    }


    function LoadAccountHeadTypes()
    {
        $('#cboAccountHeadType').empty();
        var listItems = "";
        if(_eAccountHeadTypes.length>0)
        {
            for (i = 0; i < _eAccountHeadTypes.length; i++) {
                listItems += "<option value='" + _eAccountHeadTypes[i].id+"'>" + _eAccountHeadTypes[i].Value+"</option>";
            }
        }
        $("#cboAccountHeadType").html(listItems);
        $('#cboAccountHeadType').val(_oDebitCreditSetup.AccountHeadTypeInInt);
    }

    $('._ChangeAccountHead').change(function () {
        //debugger;
        var cboAccountHeadType =document.getElementById("cboAccountHeadType");
        var ncboAccountHeadType  = cboAccountHeadType.selectedIndex;
        if(parseInt(ncboAccountHeadType)<=1 )
        {
            document.getElementById('trDecidedAcHead').style.display='none';
            document.getElementById('trRefereneAcHead').style.display='none';
            document.getElementById('trFixedAcHead').style.display='';
            document.getElementById("txtDecidedAccountHeadName").value = '';
            document.getElementById("txtReferencAccountHeadName").value = '';
            _oDebitCreditSetup.ReferenceTypeInInt = 0;
            _oAccountHeadSetup = null;          
            _oAccountNameSetup=null;
        }else if(parseInt(ncboAccountHeadType)===2)
        {
            document.getElementById('trFixedAcHead').style.display='none';
            document.getElementById('trRefereneAcHead').style.display='none';
            document.getElementById('trDecidedAcHead').style.display='';
            _oDebitCreditSetup.FixedAccountHeadID = 0;
            _oDebitCreditSetup.ReferenceTypeInInt = 0;            
            document.getElementById("txtFixedAccountHeadName").value = '';
            document.getElementById("txtReferencAccountHeadName").value = '';
        }else if(parseInt(ncboAccountHeadType)===3)
        {
            document.getElementById('trFixedAcHead').style.display='none';
            document.getElementById('trDecidedAcHead').style.display='none';
            document.getElementById('trRefereneAcHead').style.display='';
            _oDebitCreditSetup.FixedAccountHeadID = 0;
            document.getElementById("txtFixedAccountHeadName").value = '';
            document.getElementById("txtDecidedAccountHeadName").value = '';
        }
    });


    function DecidedAccountHeadSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Account Head Setup";
        if(_oAccountHeadSetup !=null)
        {
            _oAccountHeadSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oAccountHeadSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oAccountHeadSetup.DataSetupTypeInInt =6;  // EnumDataSetupType: AccountHeadSetup = 6
        }
        else
        {
            var oAccountHeadSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 6, // EnumDataSetupType: AccountHeadSetup = 6
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oAccountHeadSetup=oAccountHeadSetup;
        }
        oParameter.DataCollectionSetup = _oAccountHeadSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oAccountHeadSetup=oDataCollectionSetup;
            document.getElementById("txtDecidedAccountHeadName").value= oDataCollectionSetup.SetupText;
        }
    }

    
    function DecidedAccountNameSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Account Name Setup";
        if(_oAccountNameSetup !=null)
        {
            _oAccountNameSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oAccountNameSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oAccountNameSetup.DataSetupTypeInInt =30;  // EnumDataSetupType: AccountNameSetup = 6
        }
        else
        {
            var oAccountNameSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 30, // EnumDataSetupType: AccountHeadSetup = 6
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oAccountNameSetup=oAccountNameSetup;
        }
        oParameter.DataCollectionSetup = _oAccountNameSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oAccountNameSetup=oDataCollectionSetup;
            document.getElementById("txtDecidedAccountNameSetup").value= oDataCollectionSetup.SetupText;
        }
    }

    function ReferenceAccountHeadSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Account Head Setup";
        if(_oAccountHeadSetup !=null)
        {
            _oAccountHeadSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oAccountHeadSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oAccountHeadSetup.DataSetupTypeInInt =6;  // EnumDataSetupType: AccountHeadSetup = 6
        }
        else
        {
            var oAccountHeadSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 6, // EnumDataSetupType: AccountHeadSetup = 6
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oAccountHeadSetup=oAccountHeadSetup;
        }
        oParameter.DataCollectionSetup = _oAccountHeadSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oAccountHeadSetup=oDataCollectionSetup;
            document.getElementById("txtReferencAccountHeadName").value= oDataCollectionSetup.SetupText;
        }
    }

    function CurrencySetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Currency Setup";
        if(_oCurrencySetup!=null)
        {
            _oCurrencySetup.DataReferenceID = _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oCurrencySetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2 
            _oCurrencySetup.DataSetupTypeInInt = 2; // EnumDataSetupType: CurrencySetup = 2
        }
        else
        {
            var oCurrencySetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2 
                DataSetupTypeInInt : 2, // EnumDataSetupType: CurrencySetup = 2
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oCurrencySetup=oCurrencySetup;
        }
        oParameter.DataCollectionSetup = _oCurrencySetup;       
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {               
            _oCurrencySetup=oDataCollectionSetup;
            document.getElementById("txtCurrencySetup").value= oDataCollectionSetup.SetupText;
        } 
    }

    function ConversionRateSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Currency Conversion Setup";
        if(_oConversionRateSetup!=null)
        {
            _oConversionRateSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oConversionRateSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2 
            _oConversionRateSetup.DataSetupTypeInInt = 3; // EnumDataSetupType: ConversionRateSetup = 3
        }
        else
        {
            var oConversionRateSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2 
                DataSetupTypeInInt : 3, // EnumDataSetupType: ConversionRateSetup = 3
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oConversionRateSetup=oConversionRateSetup;
        }
        oParameter.DataCollectionSetup = _oConversionRateSetup;       
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {               
            _oConversionRateSetup=oDataCollectionSetup;
            document.getElementById("txtConversionRateSetup").value= oDataCollectionSetup.SetupText;
        }
    }

    function AmmountSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Ammount Setup";
        if(_oVoucherAmountSetup !=null)
        {
            _oVoucherAmountSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oVoucherAmountSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oVoucherAmountSetup.DataSetupTypeInInt =7; // EnumDataSetupType: VoucherDetailAmountSetup = 7
        }
        else
        {
            var oVoucherAmountSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 7, // EnumDataSetupType: VoucherDetailAmountSetup = 7
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oVoucherAmountSetup= oVoucherAmountSetup;
        }
        oParameter.DataCollectionSetup = _oVoucherAmountSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oVoucherAmountSetup=oDataCollectionSetup;
            document.getElementById("txtAmountSetup").value= oDataCollectionSetup.SetupText;
        }
    }



    function NarrationSetup()
    {

        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Narration Setup";
        var oNarrationSetup = {
            DataCollectionSetupID : 0,
            DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            DataSetupTypeInInt : 8, // EnumDataSetupType: VoucherDetailNarrationSetup = 8
            QueryForValue : "",
            ReferenceValueFields : "",
            Note : "",
            DataCollectionSetups : _oNarrationSetups
        };
        oParameter.DataCollectionSetup = oNarrationSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetups?ts="+tsv;
        var oDataCollectionSetup= window.showModalDialog(url, oParameter, 'dialogHeight:515px;dialogWidth:620px;dialogLeft:350;dialogTop:100;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup != undefined)
        {
            if(oDataCollectionSetup != null)
            {
                _oNarrationSetups =  oDataCollectionSetup.DataCollectionSetups;
                document.getElementById("txtNarrationSetup").value= oDataCollectionSetup.SetupText;
            }
        }
    }

    function ChequeSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Cheque Setup";
        if(_oChequeSetup !=null)
        {
            _oChequeSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oChequeSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oChequeSetup.DataSetupTypeInInt =31; // EnumDataSetupType: ChequeSetup = 31
        }
        else
        {
            var oChequeSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 31, // EnumDataSetupType: ChequeSetup = 9
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oChequeSetup= oChequeSetup;
        }
        oParameter.DataCollectionSetup = _oChequeSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oChequeSetup=oDataCollectionSetup;
            document.getElementById("txtChequeSetup").value= oDataCollectionSetup.SetupText;
        }
    }

    function ChequeReferenceAmountSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure ChequeReference Ammount Setup";
        if(_oChequeReferenceAmountSetup !=null)
        {
            _oChequeReferenceAmountSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oChequeReferenceAmountSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oChequeReferenceAmountSetup.DataSetupTypeInInt =9; // EnumDataSetupType: ReferenceAmountSetup = 9
        }
        else
        {
            var oChequeReferenceAmountSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 9, // EnumDataSetupType: ReferenceAmountSetup = 9
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oChequeReferenceAmountSetup= oChequeReferenceAmountSetup;
        }
        oParameter.DataCollectionSetup = _oChequeReferenceAmountSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oChequeReferenceAmountSetup=oDataCollectionSetup;
            document.getElementById("txtChequeReferenceAmountSetup").value= oDataCollectionSetup.SetupText;
        }
    }
    
    function ChequeReferenceDescriptionSetup()
    {

        var oParameter = new Object();
        oParameter.Name = "Configure Voucher ChequeReference Description Setup";
        var oChequeReferenceDescriptionSetup = {
            DataCollectionSetupID : 0,
            DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            DataSetupTypeInInt : 10, // EnumDataSetupType: ReferenceDescriptinSetup = 10
            QueryForValue : "",
            ReferenceValueFields : "",
            Note : "",
            DataCollectionSetups : _oChequeReferenceDescriptionSetups
        };
        oParameter.DataCollectionSetup = oChequeReferenceDescriptionSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetups?ts="+tsv;
        var oDataCollectionSetup= window.showModalDialog(url, oParameter, 'dialogHeight:515px;dialogWidth:620px;dialogLeft:350;dialogTop:100;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup != undefined)
        {
            if(oDataCollectionSetup != null)
            {
                _oChequeReferenceDescriptionSetups =  oDataCollectionSetup.DataCollectionSetups;
                document.getElementById("txtChequeReferenceDescriptionSetup").value= oDataCollectionSetup.SetupText;
            }
        }
    }
    
    function ChequeReferenceDateSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher ChequeReference Date Setup";
        if(_oChequeReferenceDateSetup !=null)
        {
            _oChequeReferenceDateSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oChequeReferenceDateSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oChequeReferenceDateSetup.DataSetupTypeInInt =11; // EnumDataSetupType: ChequeReferenceDateSetup = 11
        }
        else
        {
            var oChequeReferenceDateSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 11, // EnumDataSetupType: ReferenceDateSetup = 11
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oChequeReferenceDateSetup = oChequeReferenceDateSetup;
        }
        oParameter.DataCollectionSetup = _oChequeReferenceDateSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oChequeReferenceDateSetup=oDataCollectionSetup;
            document.getElementById("txtChequeReferenceDateSetup").value= oDataCollectionSetup.SetupText;
        }
    }

    function OrderReferenceSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Order Setup";
        if(_oOrderSetup !=null)
        {
            _oOrderSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oOrderSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oOrderSetup.DataSetupTypeInInt =32; // EnumDataSetupType: OrderSetup = 32
        }
        else
        {
            var oOrderSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 32, // EnumDataSetupType: OrderSetup = 32
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oOrderSetup= oOrderSetup;
        }
        oParameter.DataCollectionSetup = _oOrderSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oOrderSetup=oDataCollectionSetup;
            document.getElementById("txtOrderReferenceSetup").value= oDataCollectionSetup.SetupText;
        }
    }

    function OrderAmountSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Order Ammount Setup";
        if(_oOrderAmountSetup !=null)
        {
            _oOrderAmountSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oOrderAmountSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oOrderAmountSetup.DataSetupTypeInInt =33; // EnumDataSetupType: OrderAmountSetup = 33
        }
        else
        {
            var oOrderAmountSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 33, // EnumDataSetupType: OrderAmountSetup = 33
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oOrderAmountSetup= oOrderAmountSetup;
        }
        oParameter.DataCollectionSetup = _oOrderAmountSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oOrderAmountSetup=oDataCollectionSetup;
            document.getElementById("txtOrderAmountSetup").value= oDataCollectionSetup.SetupText;
        }
    }
    
    function OrderRemarkSetup()
    {

        var oParameter = new Object();
        oParameter.Name = "Configure Order Remarks Setup";
        var oOrderRemarkSetup = {
            DataCollectionSetupID : 0,
            DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            DataSetupTypeInInt : 34, // EnumDataSetupType: OrderRemarkSetup = 34
            QueryForValue : "",
            ReferenceValueFields : "",
            Note : "",
            DataCollectionSetups : _oOrderRemarkSetups
        };
        oParameter.DataCollectionSetup = oOrderRemarkSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetups?ts="+tsv;
        var oDataCollectionSetup= window.showModalDialog(url, oParameter, 'dialogHeight:515px;dialogWidth:620px;dialogLeft:350;dialogTop:100;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup != undefined)
        {
            if(oDataCollectionSetup != null)
            {
                _oOrderRemarkSetups =  oDataCollectionSetup.DataCollectionSetups;
                document.getElementById("txtOrderRemarkSetup").value= oDataCollectionSetup.SetupText;
            }
        }
    }
    
    function OrderDateSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Order Date Setup";
        if(_oOrderDateSetup !=null)
        {
            _oOrderDateSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oOrderDateSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oOrderDateSetup.DataSetupTypeInInt =35; // EnumDataSetupType: OrderDateSetup = 35
        }
        else
        {
            var oOrderDateSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 35, // EnumDataSetupType: OrderDateSetup = 35
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oOrderDateSetup = oOrderDateSetup;
        }
        oParameter.DataCollectionSetup = _oOrderDateSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oOrderDateSetup=oDataCollectionSetup;
            document.getElementById("txtOrderDateSetup").value= oDataCollectionSetup.SetupText;
        }
    }
    
    function CostcenterSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Costcenter Setup";
        if(_oCostCenterSetup !=null)
        {
            _oCostCenterSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oCostCenterSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oCostCenterSetup.DataSetupTypeInInt =12; // EnumDataSetupType: CostCenterSetup = 12
        }
        else
        {
            var oCostCenterSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 12, // EnumDataSetupType: CostCenterSetup = 12
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oCostCenterSetup= oCostCenterSetup;
        }
        oParameter.DataCollectionSetup = _oCostCenterSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oCostCenterSetup=oDataCollectionSetup;
            document.getElementById("txtCostcenterSetup").value= oDataCollectionSetup.SetupText;
        }
    }


    function CostCenterAmountSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Costcenter Ammount Setup";
        if(_oCostCenterAmountSetup !=null)
        {
            _oCostCenterAmountSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oCostCenterAmountSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oCostCenterAmountSetup.DataSetupTypeInInt =13; // EnumDataSetupType: CostCenterAmountSetup = 13
        }
        else
        {
            var oCostCenterAmountSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 13, // EnumDataSetupType: CostCenterAmountSetup = 13
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oCostCenterAmountSetup= oCostCenterAmountSetup;
        }
        oParameter.DataCollectionSetup = _oCostCenterAmountSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oCostCenterAmountSetup=oDataCollectionSetup;
            document.getElementById("txtCostCenterAmountSetup").value= oDataCollectionSetup.SetupText;
        }
    }


    function CostCenterDescriptionSetup()
    {

        var oParameter = new Object();
        oParameter.Name = "Configure Cost Center Description Setup";
        var oCostCenterDescriptionSetup = {
            DataCollectionSetupID : 0,
            DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            DataSetupTypeInInt : 14, // EnumDataSetupType: CostCenterDescriptionSetup = 14
            QueryForValue : "",
            ReferenceValueFields : "",
            Note : "",
            DataCollectionSetups : _oCostCenterDescriptionSetups
        };
        oParameter.DataCollectionSetup = oCostCenterDescriptionSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetups?ts="+tsv;
        var oDataCollectionSetup= window.showModalDialog(url, oParameter, 'dialogHeight:515px;dialogWidth:620px;dialogLeft:350;dialogTop:100;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup != undefined)
        {
            if(oDataCollectionSetup != null)
            {
                _oCostCenterDescriptionSetups =  oDataCollectionSetup.DataCollectionSetups;
                document.getElementById("txtCostCenterDescriptionSetup").value= oDataCollectionSetup.SetupText;
            }
        }
    }


    function CostCenterDateSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Cost Center Setup";
        if(_oCostCenterDateSetup !=null)
        {
            _oCostCenterDateSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oCostCenterDateSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oCostCenterDateSetup.DataSetupTypeInInt =15; // EnumDataSetupType: CostCenterDateSetup = 15
        }
        else
        {
            var oCostCenterDateSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 15, // EnumDataSetupType: CostCenterDateSetup = 15
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oCostCenterDateSetup= oCostCenterDateSetup;
        }
        oParameter.DataCollectionSetup = _oCostCenterDateSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oCostCenterDateSetup=oDataCollectionSetup;
            document.getElementById("txtCostCenterDateSetup").value= oDataCollectionSetup.SetupText;
        }
    }

    //Voucher Bill setup

    function VoucherBillSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Bill Setup";
        if(_oVoucherBillSetup !=null)
        {
            _oVoucherBillSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oVoucherBillSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oVoucherBillSetup.DataSetupTypeInInt =16; // EnumDataSetupType: VoucherBillSetup = 16
        }
        else
        {
            var oVoucherBillSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 16, // EnumDataSetupType: VoucherBillSetup = 16
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oVoucherBillSetup= oVoucherBillSetup;
        }
        oParameter.DataCollectionSetup = _oVoucherBillSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oVoucherBillSetup=oDataCollectionSetup;
            document.getElementById("txtVoucherBillSetup").value= oDataCollectionSetup.SetupText;
        }
    }


    function VoucherBillAmountSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Bill Ammount Setup";
        if(_oVoucherBillAmountSetup !=null)
        {
            _oVoucherBillAmountSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oVoucherBillAmountSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oVoucherBillAmountSetup.DataSetupTypeInInt =17; // EnumDataSetupType: VoucherBillAmountSetup = 17
        }
        else
        {
            var oVoucherBillAmountSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 17, // EnumDataSetupType: VoucherBillAmountSetup = 17
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oVoucherBillAmountSetup= oVoucherBillAmountSetup;
        }
        oParameter.DataCollectionSetup = _oVoucherBillAmountSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oVoucherBillAmountSetup=oDataCollectionSetup;
            document.getElementById("txtVoucherBillAmountSetup").value= oDataCollectionSetup.SetupText;
        }
    }


    function VoucherBillDescriptionSetup()
    {

        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Bill Description Setup";
        var oVoucherBillDescriptionSetup = {
            DataCollectionSetupID : 0,
            DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            DataSetupTypeInInt : 18, // EnumDataSetupType: VoucherBillDescriptionSetup = 18
            QueryForValue : "",
            ReferenceValueFields : "",
            Note : "",
            DataCollectionSetups : _oVoucherBillDescriptionSetups
        };
        oParameter.DataCollectionSetup = oVoucherBillDescriptionSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetups?ts="+tsv;
        var oDataCollectionSetup= window.showModalDialog(url, oParameter, 'dialogHeight:515px;dialogWidth:620px;dialogLeft:350;dialogTop:100;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup != undefined)
        {
            if(oDataCollectionSetup != null)
            {
                _oVoucherBillDescriptionSetups =  oDataCollectionSetup.DataCollectionSetups;
                document.getElementById("txtVoucherBillDescriptionSetup").value= oDataCollectionSetup.SetupText;
            }
        }
    }


    function VoucherBillDateSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Bill Transaction Date Setup";
        if(_oVoucherBillDateSetup !=null)
        {
            _oVoucherBillDateSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oVoucherBillDateSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oVoucherBillDateSetup.DataSetupTypeInInt =19; // EnumDataSetupType: VoucherBillDateSetup = 19
        }
        else
        {
            var oVoucherBillDateSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 19, // EnumDataSetupType: VoucherBillDateSetup = 19
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oVoucherBillDateSetup= oVoucherBillDateSetup;
        }
        oParameter.DataCollectionSetup = _oVoucherBillDateSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oVoucherBillDateSetup=oDataCollectionSetup;
            document.getElementById("txtVoucherBillDateSetup").value= oDataCollectionSetup.SetupText;
        }
    }

    function BillDateSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Bill Date Setup";
        if(_oBillDateSetup !=null)
        {
            _oBillDateSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oBillDateSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oBillDateSetup.DataSetupTypeInInt =28; // EnumDataSetupType: BillDateSetup = 28
        }
        else
        {
            var oBillDateSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 28, // EnumDataSetupType: BillDateSetup = 28
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oBillDateSetup= oBillDateSetup;
        }
        oParameter.DataCollectionSetup = _oBillDateSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oBillDateSetup=oDataCollectionSetup;
            document.getElementById("txtBillDateSetup").value= oDataCollectionSetup.SetupText;
        }
    }

    function BillDueDateSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Voucher Bill Due Date Setup";
        if(_oBillDueDateSetup !=null)
        {
            _oBillDueDateSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oBillDueDateSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oBillDueDateSetup.DataSetupTypeInInt =29; // EnumDataSetupType: BillDueDateSetup = 29
        }
        else
        {
            var oBillDueDateSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 29, // EnumDataSetupType: BillDueDateSetup = 29
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oBillDueDateSetup= oBillDueDateSetup;
        }
        oParameter.DataCollectionSetup = _oBillDueDateSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oBillDueDateSetup=oDataCollectionSetup;
            document.getElementById("txtBillDueDateSetup").value= oDataCollectionSetup.SetupText;
        }
    }

    //Inventory Setup
    function InventoryWorkingUnitSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Inventory Setup";
        if(_oInventoryWorkingUnitSetup !=null)
        {
            _oInventoryWorkingUnitSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oInventoryWorkingUnitSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oInventoryWorkingUnitSetup.DataSetupTypeInInt =20; // EnumDataSetupType: InventoryWorkingUnitSetup = 20
        }
        else
        {
            var oInventoryWorkingUnitSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 20, // EnumDataSetupType: InventoryWorkingUnitSetup = 20
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oInventoryWorkingUnitSetup= oInventoryWorkingUnitSetup;
        }
        oParameter.DataCollectionSetup = _oInventoryWorkingUnitSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oInventoryWorkingUnitSetup=oDataCollectionSetup;
            document.getElementById("txtInventoryWorkingUnitSetup").value= oDataCollectionSetup.SetupText;
        }
    }
        
    function InventoryProductSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Inventory Setup";
        if(_oInventoryProductSetup !=null)
        {
            _oInventoryProductSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oInventoryProductSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oInventoryProductSetup.DataSetupTypeInInt =21; // EnumDataSetupType: InventoryProductSetup = 21
        }
        else
        {
            var oInventoryProductSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 21, // EnumDataSetupType: InventoryProductSetup = 21
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oInventoryProductSetup= oInventoryProductSetup;
        }
        oParameter.DataCollectionSetup = _oInventoryProductSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oInventoryProductSetup=oDataCollectionSetup;
            document.getElementById("txtInventoryProductSetup").value= oDataCollectionSetup.SetupText;
        }
    }
    
    function InventoryQtySetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Inventory Amount Setup";
        if(_oInventoryQtySetup !=null)
        {
            _oInventoryQtySetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oInventoryQtySetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oInventoryQtySetup.DataSetupTypeInInt =22; // EnumDataSetupType: InventoryQtySetup = 22
        }
        else
        {
            var oInventoryQtySetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 22, // EnumDataSetupType: InventoryQtySetup = 22
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oInventoryQtySetup= oInventoryQtySetup;
        }
        oParameter.DataCollectionSetup = _oInventoryQtySetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oInventoryQtySetup=oDataCollectionSetup;
            document.getElementById("txtInventoryQtySetup").value= oDataCollectionSetup.SetupText;
        }
    }
        
    function InventoryUnitSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Inventory Setup";
        if(_oInventoryUnitSetup !=null)
        {
            _oInventoryUnitSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oInventoryUnitSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oInventoryUnitSetup.DataSetupTypeInInt =23; // EnumDataSetupType: InventoryUnitSetup = 23
        }
        else
        {
            var oInventoryUnitSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 23, // EnumDataSetupType: InventoryUnitSetup = 23
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oInventoryUnitSetup= oInventoryUnitSetup;
        }
        oParameter.DataCollectionSetup = _oInventoryUnitSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oInventoryUnitSetup=oDataCollectionSetup;
            document.getElementById("txtInventoryUnitSetup").value= oDataCollectionSetup.SetupText;
        }
    }
        
    function InventoryUnitPriceSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Inventory Setup";
        if(_oInventoryUnitPriceSetup !=null)
        {
            _oInventoryUnitPriceSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oInventoryUnitPriceSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oInventoryUnitPriceSetup.DataSetupTypeInInt =24; // EnumDataSetupType: InventoryUnitPriceSetup = 24
        }
        else
        {
            var oInventoryUnitPriceSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 24, // EnumDataSetupType: InventoryUnitPriceSetup = 24
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oInventoryUnitPriceSetup= oInventoryUnitPriceSetup;
        }
        oParameter.DataCollectionSetup = _oInventoryUnitPriceSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oInventoryUnitPriceSetup=oDataCollectionSetup;
            document.getElementById("txtInventoryUnitPriceSetup").value= oDataCollectionSetup.SetupText;
        }
    }

    function InventoryDescriptionSetup()
    {

        var oParameter = new Object();
        oParameter.Name = "Configure Inventory Description Setup";
        var oInventoryDescriptionSetup = {
            DataCollectionSetupID : 0,
            DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            DataSetupTypeInInt : 25, // EnumDataSetupType: InventoryDescriptionSetup = 25
            QueryForValue : "",
            ReferenceValueFields : "",
            Note : "",
            DataCollectionSetups : _oInventoryDescriptionSetups
        };
        oParameter.DataCollectionSetup = oInventoryDescriptionSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetups?ts="+tsv;
        var oDataCollectionSetup= window.showModalDialog(url, oParameter, 'dialogHeight:515px;dialogWidth:620px;dialogLeft:350;dialogTop:100;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup != undefined)
        {
            if(oDataCollectionSetup != null)
            {
                _oInventoryDescriptionSetups =  oDataCollectionSetup.DataCollectionSetups;
                document.getElementById("txtInventoryDescriptionSetup").value= oDataCollectionSetup.SetupText;
            }
        }
    }


    function InventoryDateSetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure Inventory Date Setup";
        if(_oInventoryDateSetup !=null)
        {
            _oInventoryDateSetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oInventoryDateSetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oInventoryDateSetup.DataSetupTypeInInt =26; // EnumDataSetupType: InventoryDateSetup = 26
        }
        else
        {
            var oInventoryDateSetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 26, // EnumDataSetupType: InventoryDateSetup = 26
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oInventoryDateSetup= oInventoryDateSetup;
        }
        oParameter.DataCollectionSetup = _oInventoryDateSetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oInventoryDateSetup=oDataCollectionSetup;
            document.getElementById("txtInventoryDateSetup").value= oDataCollectionSetup.SetupText;
        }
    }

    function CostCenterCategorySetup()
    {
        //debugger;
        var oParameter = new Object();
        oParameter.Name = "Configure CostCenter Category Setup";
        if(_oCostCenterCategorySetup !=null)
        {
            _oCostCenterCategorySetup.DataReferenceID= _oDebitCreditSetup.DebitCreditSetupID; // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
            _oCostCenterCategorySetup.DataReferenceTypeInInt = 2; //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
            _oCostCenterCategorySetup.DataSetupTypeInInt =27; // EnumDataSetupType: CostCenterCategorySetup = 27
        }
        else
        {
            var oCostCenterCategorySetup = {
                DataCollectionSetupID : 0,
                DataReferenceID : _oDebitCreditSetup.DebitCreditSetupID, // DataReferenceID will be IntegrationSetupDetailID for Integration Detail; // DataReferenceID will be DebitCreditSetupID for DebitCreditSetupID
                DataReferenceTypeInInt : 2, //EnumDataReferenceType None = 0,IntegrationDetail = 1,  DebitCreditSetup = 2
                DataSetupTypeInInt : 27, // EnumDataSetupType: CostCenterCategorySetup = 26
                QueryForValue : "",
                ReferenceValueFields : "",
                Note : ""
            };
            _oCostCenterCategorySetup= oCostCenterCategorySetup;
        }
        oParameter.DataCollectionSetup = _oCostCenterCategorySetup;
        var tsv=((new Date()).getTime())/1000;
        var url = _sBaseAddress+"/IntegrationSetup/ViewDataCollectionSetup?ts="+tsv;
        var oDataCollectionSetup = window.showModalDialog(url, oParameter, 'dialogHeight:225px;dialogWidth:620px;dialogLeft:350;dialogTop:200;center:yes;resizable:yes;status:no;scroll:no');
        //debugger;
        if(oDataCollectionSetup!=null)
        {
            _oCostCenterCategorySetup=oDataCollectionSetup;
            document.getElementById("txtCostCenterCategorySetup").value= oDataCollectionSetup.SetupText;
        }
    }

    function GetSpecifiDataCollectionSet(nDataSetupTypeInInt)
    {

        if(_oDataCollectionSetups.length>0)
        {
            for(var i = 0;i<_oDataCollectionSetups.length;i++)
            {
                if(parseInt(_oDataCollectionSetups[i].DataSetupTypeInInt)=== parseInt(nDataSetupTypeInInt))
                {
                    return _oDataCollectionSetups[i];
                }
            }
        }
        return null;
    }


    function GetSpecifiDataCollectionSets(nDataSetupTypeInInt)
    {
        var oDataCollectionSetups = [];
        if(_oDataCollectionSetups.length>0)
        {
            for(var i = 0;i<_oDataCollectionSetups.length;i++)
            {
                if(parseInt(_oDataCollectionSetups[i].DataSetupTypeInInt)=== parseInt(nDataSetupTypeInInt))
                {
                    oDataCollectionSetups.push(_oDataCollectionSetups[i]);
                }
            }
        }
        return oDataCollectionSetups;
    }


    function ChequeReferenceCreateYes()
    {
        if(document.getElementById("chkBoxRefrncCrtYes").checked === true)
        {
            document.getElementById('txtChequeReferenceDataSQL').disabled = false;
            document.getElementById('txtChequeReferenceCompareColumns').disabled = false;            
            document.getElementById('cboChequeType').disabled = false;
            document.getElementById('btnChequeReferenceAmountSetup').disabled = false;
            document.getElementById('btnChequeReferenceDescriptionSetup').disabled = false;
            document.getElementById('btnChequeReferenceDateSetup').disabled = false;
            document.getElementById('chkBoxRefrncCrtNo').checked=false;
        }
    }

    function ChequeReferenceCreateNo()
    {
        if(document.getElementById("chkBoxRefrncCrtNo").checked === true)
        {
            document.getElementById('txtChequeReferenceDataSQL').value = "";
            document.getElementById('txtChequeReferenceCompareColumns').value = "";
            document.getElementById('cboChequeType').Val(0);
            document.getElementById('txtChequeSetup').value = "";
            document.getElementById('txtChequeReferenceAmountSetup').value = "";
            document.getElementById('txtChequeReferenceDescriptionSetup').value = "";
            document.getElementById('txtChequeReferenceDateSetup').value = "";
            _oChequeSetup=null;
            _oChequeReferenceAmountSetup=null;
            _oChequeReferenceDescriptionSetups=[];
            _oChequeReferenceDateSetup=null;

            document.getElementById('txtChequeReferenceDataSQL').disabled = true;
            document.getElementById('txtChequeReferenceCompareColumns').disabled = true;                                 
            document.getElementById('btnChequeSetup').disabled = true;
            document.getElementById('btnChequeReferenceAmountSetup').disabled = true;
            document.getElementById('btnChequeReferenceDescriptionSetup').disabled = true;
            document.getElementById('btnChequeReferenceDateSetup').disabled = true;
            document.getElementById('chkBoxRefrncCrtYes').checked=false;

        }
    }

    function OrderReferenceCreateYes()
    {
        if(document.getElementById("chkBoxOrderRefYes").checked === true)
        {
            document.getElementById('txtOrderReferenceDataSQL').disabled = false;
            document.getElementById('txtOrderReferenceCompareColumns').disabled = false;
            document.getElementById('btnOrderAmountSetup').disabled = false;
            document.getElementById('btnOrderRemarkSetup').disabled = false;
            document.getElementById('btnOrderDateSetup').disabled = false;
            document.getElementById('chkBoxOrderRefNo').checked=false;
        }
    }

    function OrderReferenceCreateNo()
    {
        if(document.getElementById("chkBoxOrderRefNo").checked === true)
        {
            document.getElementById('txtOrderReferenceDataSQL').value = "";
            document.getElementById('txtOrderReferenceCompareColumns').value = "";            
            document.getElementById('txtOrderReferenceSetup').value = "";
            document.getElementById('txtOrderAmountSetup').value = "";
            document.getElementById('txtOrderRemarkSetup').value = "";
            document.getElementById('txtOrderDateSetup').value = "";
            
            _oOrderSetup = null;
            _oOrderAmountSetup = null;
            _oOrderRemarkSetups = [];
            _oOrderDateSetup = null;

            document.getElementById('txtOrderReferenceDataSQL').disabled = true;
            document.getElementById('txtOrderReferenceCompareColumns').disabled = true;                                 
            document.getElementById('btnOrderReferenceSetup').disabled = true;
            document.getElementById('btnOrderAmountSetup').disabled = true;
            document.getElementById('btnOrderRemarkSetup').disabled = true;
            document.getElementById('btnOrderDateSetup').disabled = true;
            document.getElementById('chkBoxOrderRefYes').checked=false;

        }
    }

    function CostCreateEffectYes()
    {
        if(document.getElementById("chkBoxCostcCrtYes").checked === true)
        {
            document.getElementById('txtCostcenterDataSQL').disabled = false;
            document.getElementById('txtCostCenterCompareColumns').disabled = false;
            document.getElementById('btnCostCenterCompareColumnsDBView').disabled = false;
            document.getElementById('btnCostcenterSetup').disabled = false;
            document.getElementById('btnCostCenterAmountSetup').disabled = false;
            document.getElementById('btnCostCenterDescriptionSetup').disabled = false;
            document.getElementById('btnCostCenterDateSetup').disabled=false;            
            document.getElementById('btnCostCenterCategorySetup').disabled=false;            
            document.getElementById('cboCostCenterRefObjType').disabled=false;
            document.getElementById('txtCostCenterNoColumn').disabled=false;
            document.getElementById('txtCostCenterRefObjColumn').disabled=false;
            document.getElementById('chkBoxCostcCrtNo').checked=false;
        }
    }

    function CostCreateEffectNo()
    {
        if(document.getElementById("chkBoxCostcCrtNo").checked === true)
        {
            $('#txtCostcenterDataSQL').val("");
            $('#txtCostCenterCompareColumns').val("");
            $('#txtCostcenterSetup').val("");
            $('#txtCostCenterAmountSetup').val("");
            $('#txtCostCenterDescriptionSetup').val("");
            $('#txtCostCenterDateSetup').val("");
            $("#txtCostCenterCategorySetup").val("");
            $("#cboCostCenterRefObjType").val(0);
            $("#txtCostCenterNoColumn").val("");
            $("#txtCostCenterRefObjColumn").val("");
            _oCostCenterSetup=null;
            _oCostCenterAmountSetup=null;
            _oCostCenterDescriptionSetups=[];
            _oCostCenterDateSetup=null;

            document.getElementById('txtCostcenterDataSQL').disabled = true;
            document.getElementById('txtCostCenterCompareColumns').disabled = true;
            document.getElementById('btnCostCenterCompareColumnsDBView').disabled = true;
            document.getElementById('btnCostcenterSetup').disabled = true;
            document.getElementById('btnCostCenterAmountSetup').disabled = true;
            document.getElementById('btnCostCenterDescriptionSetup').disabled = true;
            document.getElementById('btnCostCenterDateSetup').disabled=true;
            document.getElementById('btnCostCenterCategorySetup').disabled=true;
            document.getElementById('cboCostCenterRefObjType').disabled=true;
            document.getElementById('txtCostCenterNoColumn').disabled=true;
            document.getElementById('txtCostCenterRefObjColumn').disabled=true;
            document.getElementById('chkBoxCostcCrtYes').checked=false;
        }
    }

    function VoucherBillEffectYes()
    {
        if(document.getElementById("chkBoxVoucherBillYes").checked === true)
        {
            document.getElementById('txtVoucherBillDataSQL').disabled = false;
            document.getElementById('txtVoucherBillCompareColumns').disabled = false;
            document.getElementById('btnVoucherBillCompareColumnsDBView').disabled = false;
            document.getElementById('btnVoucherBillSetup').disabled = false;
            document.getElementById('btnVoucherBillAmountSetup').disabled = false;
            document.getElementById('btnVoucherBillDescriptionSetup').disabled = false;
            document.getElementById('btnVoucherBillDateSetup').disabled=false;
            document.getElementById('btnBillDateSetup').disabled=false;
            document.getElementById('btnBillDueDateSetup').disabled=false;
            document.getElementById('cboVoucherBillTrType').disabled=false;
            document.getElementById('cboVoucherBillRefObjType').disabled=false;
            document.getElementById('txtVoucherBillNoColumn').disabled=false;
            document.getElementById('txtVoucherBillRefObjColumn').disabled=false;
            document.getElementById('chkBoxVoucherBillNo').checked=false;
        }
    }

    function VoucherBillEffectNo()
    {
        if(document.getElementById("chkBoxVoucherBillNo").checked === true)
        {
            $('#txtVoucherBillDataSQL').val("");
            $('#txtVoucherBillCompareColumns').val("");
            $('#txtVoucherBillSetup').val("");
            $('#txtVoucherBillAmountSetup').val("");
            $('#txtVoucherBillDescriptionSetup').val("");
            $('#txtVoucherBillDateSetup').val("");
            $('#txtBillDateSetup').val("");
            $('#txtBillDueDateSetup').val("");
            $("#cboVoucherBillTrType").val(0);
            $("#cboVoucherBillRefObjType").val(0);
            $("#txtVoucherBillNoColumn").val("");
            $("#txtVoucherBillRefObjColumn").val("");

            _oVoucherBillSetup=null;
            _oVoucherBillAmountSetup=null;
            _oVoucherBillDescriptionSetups=[];
            _oVoucherBillDateSetup=null;
            _oBillDateSetup=null;
            _oBillDueDateSetup=null;

            document.getElementById('txtVoucherBillDataSQL').disabled = true;
            document.getElementById('txtVoucherBillCompareColumns').disabled = true;
            document.getElementById('btnVoucherBillCompareColumnsDBView').disabled = true;
            document.getElementById('btnVoucherBillSetup').disabled = true;
            document.getElementById('btnVoucherBillAmountSetup').disabled = true;
            document.getElementById('btnVoucherBillDescriptionSetup').disabled = true;
            document.getElementById('btnVoucherBillDateSetup').disabled=true;
            document.getElementById('btnBillDateSetup').disabled=true;
            document.getElementById('btnBillDueDateSetup').disabled=true;
            document.getElementById('cboVoucherBillTrType').disabled=true;
            document.getElementById('cboVoucherBillRefObjType').disabled=true;
            document.getElementById('txtVoucherBillNoColumn').disabled=true;
            document.getElementById('txtVoucherBillRefObjColumn').disabled=true;
            document.getElementById('chkBoxVoucherBillYes').checked=false;
        }
    }

    function InventoryEffectYes()
    {
        if(document.getElementById("chkBoxInventoryYes").checked === true)
        {
            document.getElementById('txtInventoryDataSQL').disabled = false;
            document.getElementById('txtInventoryCompareColumns').disabled = false;
            document.getElementById('btnInventoryCompareColumnsDBView').disabled = false;
            document.getElementById('btnInventoryWorkingUnitSetup').disabled = false;
            document.getElementById('btnInventoryProductSetup').disabled = false;
            document.getElementById('btnInventoryQtySetup').disabled = false;
            document.getElementById('btnInventoryUnitSetup').disabled = false;
            document.getElementById('btnInventoryUnitPriceSetup').disabled = false;
            document.getElementById('btnInventoryDescriptionSetup').disabled = false;
            document.getElementById('btnInventoryDateSetup').disabled=false;
            document.getElementById('chkBoxInventoryNo').checked=false;
        }
    }

    function InventoryEffectNo()
    {
        if(document.getElementById("chkBoxInventoryNo").checked === true)
        {
            document.getElementById('txtInventoryDataSQL').value = "";
            document.getElementById('txtInventoryCompareColumns').value = "";
            document.getElementById('txtInventoryWorkingUnitSetup').value = "";
            document.getElementById('txtInventoryProductSetup').value = "";
            document.getElementById('txtInventoryQtySetup').value = "";
            document.getElementById('txtInventoryUnitSetup').value = "";
            document.getElementById('txtInventoryUnitPriceSetup').value = "";
            document.getElementById('txtInventoryDescriptionSetup').value = "";
            document.getElementById('txtInventoryDateSetup').value = "";
            _oInventoryWorkingUnitSetup=null;
            _oInventoryProductSetup=null;
            _oInventoryQtySetup=null;
            _oInventoryUnitSetup=null;
            _oInventoryUnitPriceSetup=null;
            _oInventoryDescriptionSetups=[];
            _oInventoryDateSetup=null;

            document.getElementById('txtInventoryDataSQL').disabled = true;
            document.getElementById('txtInventoryCompareColumns').disabled = true;
            document.getElementById('btnInventoryCompareColumnsDBView').disabled = true;
            document.getElementById('btnInventoryWorkingUnitSetup').disabled = true;
            document.getElementById('btnInventoryProductSetup').disabled = true;
            document.getElementById('btnInventoryQtySetup').disabled = true;
            document.getElementById('btnInventoryUnitSetup').disabled = true;
            document.getElementById('btnInventoryUnitPriceSetup').disabled = true;
            document.getElementById('btnInventoryDescriptionSetup').disabled = true;
            document.getElementById('btnInventoryDateSetup').disabled=true;
            document.getElementById('chkBoxInventoryYes').checked=false;
        }
    }

    function Save()
    {
        //debugger;
        if(!ValidateInput()) return;
        var oDebitCreditSetup=RefreshObject();
        window.returnValue= oDebitCreditSetup;
        window.close();
    }

    function ValidateInput()
    {
        //debugger;
        if($("#txtDataCollectionQuery").val() === null || $("#txtDataCollectionQuery").val() === "") 
        { 
            alert("Please Enter Data Collection Query!"); 
            $('#txtDataCollectionQuery').focus(); 
            return false; 
        }
        if($("#txtCompareColumn").val() === null || $("#txtCompareColumn").val() === "") 
        { 
            alert("Please Enter Compare Column!"); 
            $('#txtCompareColumn').focus(); 
            return false; 
        }
        var cboAccountHeadType =document.getElementById("cboAccountHeadType");
        var nAccountHeadType  = cboAccountHeadType.options[cboAccountHeadType.selectedIndex].value;
        if(parseInt(nAccountHeadType)<=0)
        {
            alert("Please Select Account Head");
            $('#cboAccountHeadType').focus();
            return false;
        }
        if(parseInt(nAccountHeadType)=== 1)
        {
            if(document.getElementById("txtFixedAccountHeadName").value==="" || document.getElementById("txtFixedAccountHeadName").value===null)
            {
                alert("Please Type Account Head!");
                $('#txtFixedAccountHeadName').focus();
                return false;
            }
        }
        else if(parseInt(nAccountHeadType)=== 2)
        {
            if(document.getElementById("txtDecidedAccountHeadName").value==="" || document.getElementById("txtDecidedAccountHeadName").value===null)
            {
                alert("Please pick Account Head!");
                $('#txtDecidedAccountHeadName').focus();
                return false;
            }
        }
        else if(parseInt(nAccountHeadType)=== 3)
        {
            var cboReferenceType =document.getElementById("cboReferenceType");
            var nReferenceType  = cboReferenceType.options[cboReferenceType.selectedIndex].value;
            if(nReferenceType<=0)
            {
                alert("Please add Reference Type");
                return false;
            }
            if(document.getElementById("txtReferencAccountHeadName").value==="" || document.getElementById("txtReferencAccountHeadName").value===null)
            {
                alert("Please Pick Reference Column Name!");
                $('#txtReferencAccountHeadName').focus();
                return false;
            }
        }
        if(document.getElementById("txtCurrencySetup").value===null || document.getElementById("txtCurrencySetup").value==="") 
        { 
            alert("Sorry, Currency Setup is empty!"); 
            $('#txtCurrencySetup').focus(); 
            return false; 
        }
        if(document.getElementById("txtConversionRateSetup").value===null || document.getElementById("txtConversionRateSetup").value==="") 
        { 
            alert("Sorry, Conversion Rate Setup is empty!"); 
            $('#txtConversionRateSetup').focus(); 
            return false; 
        }
        if(document.getElementById("txtAmountSetup").value==="" || document.getElementById("txtAmountSetup").value===null)
        {
            alert("Please Set Voucher Detail Amount Setup!");
            $('#txtAmountSetup').focus();
            return false;
        }
        if(document.getElementById("txtNarrationSetup").value==="" || document.getElementById("txtNarrationSetup").value===null)
        {
            alert("Please Set Voucher Detail Narration Setup!");
            $('#txtNarrationSetup').focus();
            return false;
        }

        if(document.getElementById("chkBoxRefrncCrtYes").checked === true)
        {
            if(document.getElementById("txtChequeReferenceDataSQL").value==="" || document.getElementById("txtChequeReferenceDataSQL").value===null)
            {
                alert("Please Type ChequeReference data SQL!");
                $('#txtChequeReferenceDataSQL').focus();
                return false;
            }            
            if(document.getElementById("txtChequeReferenceCompareColumns").value==="" || document.getElementById("txtChequeReferenceCompareColumns").value===null)
            {
                alert("Please Type ChequeReference Column Name!");
                $('#txtChequeReferenceCompareColumns').focus();
                return false;
            }
            if($('#cboChequeType').val() === null || parseInt($('#cboChequeType').val())<=0)
            {
                alert("Please Select Cheque Type!");
                $('#cboChequeType').focus();
                return false;
            }
            if(document.getElementById("txtChequeSetup").value==="" || document.getElementById("txtChequeSetup").value===null)
            {
                alert("Please Set Cheque Setup!");
                $('#txtChequeSetup').focus();
                return false;
            }
            if(document.getElementById("txtChequeReferenceAmountSetup").value==="" || document.getElementById("txtChequeReferenceAmountSetup").value===null)
            {
                alert("Please Set ChequeReference Amount Setup!");
                $('#txtChequeReferenceAmountSetup').focus();
                return false;
            }
            if(document.getElementById("txtChequeReferenceDescriptionSetup").value==="" || document.getElementById("txtChequeReferenceDescriptionSetup").value===null)
            {
                alert("Please Set ChequeReference Description Setup!");
                $('#txtChequeReferenceDescriptionSetup').focus();
                return false;
            }
            if(document.getElementById("txtChequeReferenceDateSetup").value==="" || document.getElementById("txtChequeReferenceDateSetup").value===null)
            {
                alert("Please Set ChequeReference Date Setup!");
                $('#txtChequeReferenceDateSetup').focus();
                return false;
            }
        }
        

        if(document.getElementById("chkBoxOrderRefYes").checked === true)
        {
            if(document.getElementById("txtOrderReferenceDataSQL").value==="" || document.getElementById("txtOrderReferenceDataSQL").value===null)
            {
                alert("Please Type Order data SQL!");
                $('#txtOrderReferenceDataSQL').focus();
                return false;
            }            
            if(document.getElementById("txtOrderReferenceCompareColumns").value==="" || document.getElementById("txtOrderReferenceCompareColumns").value===null)
            {
                alert("Please Type Order Column Name!");
                $('#txtOrderReferenceCompareColumns').focus();
                return false;
            }            
            if(document.getElementById("txtOrderReferenceSetup").value==="" || document.getElementById("txtOrderReferenceSetup").value===null)
            {
                alert("Please Set Order Setup!");
                $('#txtOrderReferenceSetup').focus();
                return false;
            }
            if(document.getElementById("txtOrderAmountSetup").value==="" || document.getElementById("txtOrderAmountSetup").value===null)
            {
                alert("Please Set Order Amount Setup!");
                $('#txtOrderAmountSetup').focus();
                return false;
            }
            if(document.getElementById("txtOrderRemarkSetup").value==="" || document.getElementById("txtOrderRemarkSetup").value===null)
            {
                alert("Please Set Order Remarks Setup!");
                $('#txtOrderRemarkSetup').focus();
                return false;
            }
            if(document.getElementById("txtOrderDateSetup").value==="" || document.getElementById("txtOrderDateSetup").value===null)
            {
                alert("Please Set Order Date Setup!");
                $('#txtOrderDateSetup').focus();
                return false;
            }
        }

        if(document.getElementById("chkBoxCostcCrtYes").checked === true)
        {
            if(document.getElementById("txtCostcenterDataSQL").value==="" || document.getElementById("txtCostcenterDataSQL").value===null)
            {
                alert("Please Type Cost Center data SQL!");
                $('#txtCostcenterDataSQL').focus();
                return false;
            }
            if(document.getElementById("txtCostCenterCompareColumns").value==="" || document.getElementById("txtCostCenterCompareColumns").value===null)
            {
                alert("Please Type Cost Center Column Name!");
                $('#txtCostCenterCompareColumns').focus();
                return false;
            }
            if(document.getElementById("txtCostcenterSetup").value==="" || document.getElementById("txtCostcenterSetup").value===null)
            {
                alert("Please Set Cost Center Setup!");
                $('#txtCostcenterSetup').focus();
                return false;
            }
            if(document.getElementById("txtCostCenterAmountSetup").value==="" || document.getElementById("txtCostCenterAmountSetup").value===null)
            {
                alert("Please Set Cost Center Amount Setup!");
                $('#txtCostCenterAmountSetup').focus();
                return false;
            }
            if(document.getElementById("txtCostCenterDescriptionSetup").value==="" || document.getElementById("txtCostCenterDescriptionSetup").value===null)
            {
                alert("Please Set Cost Center Description Setup!");
                $('#txtCostCenterDescriptionSetup').focus();
                return false;
            }
            if(document.getElementById("txtCostCenterDateSetup").value==="" || document.getElementById("txtCostCenterDateSetup").value===null)
            {
                alert("Please Set Cost Center Date Setup!");
                $('#txtCostCenterDateSetup').focus();
                return false;
            }
            
            if(document.getElementById("txtCostCenterCategorySetup").value==="" || document.getElementById("txtCostCenterCategorySetup").value===null)
            {
                alert("Please Set Cost Center Category Setup!");
                $('#txtCostCenterCategorySetup').focus();
                return false;
            }

            var cboCostCenterRefObjType =document.getElementById("cboCostCenterRefObjType");
            var nCostCenterRefObjType  = cboCostCenterRefObjType.options[cboCostCenterRefObjType.selectedIndex].value;
            if(parseInt(nCostCenterRefObjType)<=0)
            {
                alert("Please Select Cost Center Ref Obj Type!");
                $('#cboCostCenterRefObjType').focus();
                return false;
            }

            if(document.getElementById("txtCostCenterNoColumn").value==="" || document.getElementById("txtCostCenterNoColumn").value===null)
            {
                alert("Please Enter Cost Center No Column!");
                $('#txtCostCenterNoColumn').focus();
                return false;
            }

            if(document.getElementById("txtCostCenterRefObjColumn").value==="" || document.getElementById("txtCostCenterRefObjColumn").value===null)
            {
                alert("Please Enter Cost Center Ref Obj Column!");
                $('#txtCostCenterRefObjColumn').focus();
                return false;
            }            
            if(document.getElementById('chkHasBillReference').checked===true)
            {
                if(document.getElementById("chkBoxVoucherBillYes").checked === false)
                {
                    alert("Please Configure Subledger Bill Configure!");
                    $('#chkBoxVoucherBillYes').focus();
                    return false;
                }
            }
            if(document.getElementById('chkHasChequeReference').checked===true)
            {
                if(document.getElementById("chkBoxRefrncCrtYes").checked === false)
                {
                    alert("Please Configure Subledger Cheque Configure!");
                    $('#chkBoxRefrncCrtYes').focus();
                    return false;
                }
            }
        }
        //Voucher BILL CHEKCED
        if(document.getElementById("chkBoxVoucherBillYes").checked === true)
        {
            if(document.getElementById("txtVoucherBillDataSQL").value==="" || document.getElementById("txtVoucherBillDataSQL").value===null)
            {
                alert("Please Type Voucher Bill Reference data SQL!");
                $('#txtVoucherBillDataSQL').focus();
                return false;
            }
            if(document.getElementById("txtVoucherBillCompareColumns").value==="" || document.getElementById("txtVoucherBillCompareColumns").value===null)
            {
                alert("Please Type Voucher Bill Reference Column Name!");
                $('#txtVoucherBillCompareColumns').focus();
                return false;
            }
            if(document.getElementById("txtVoucherBillSetup").value==="" || document.getElementById("txtVoucherBillSetup").value===null)
            {
                alert("Please Set Voucher Bill Reference Setup!");
                $('#txtVoucherBillSetup').focus();
                return false;
            }
            if(document.getElementById("txtVoucherBillAmountSetup").value==="" || document.getElementById("txtVoucherBillAmountSetup").value===null)
            {
                alert("Please Set Voucher Bill Reference Amount Setup!");
                $('#txtVoucherBillAmountSetup').focus();
                return false;
            }
            if(document.getElementById("txtVoucherBillDescriptionSetup").value==="" || document.getElementById("txtVoucherBillDescriptionSetup").value===null)
            {
                alert("Please Set Voucher Bill Reference Description Setup!");
                $('#txtVoucherBillDescriptionSetup').focus();
                return false;
            }
            if(document.getElementById("txtVoucherBillDateSetup").value==="" || document.getElementById("txtVoucherBillDateSetup").value===null)
            {
                alert("Please Set Voucher Bill Transaction Date Setup!");
                $('#txtVoucherBillDateSetup').focus();
                return false;
            }
            if(document.getElementById("txtBillDateSetup").value==="" || document.getElementById("txtBillDateSetup").value===null)
            {
                alert("Please Set Voucher Bill Date Setup!");
                $('#txtBillDateSetup').focus();
                return false;
            }if(document.getElementById("txtBillDueDateSetup").value==="" || document.getElementById("txtBillDueDateSetup").value===null)
            {
                alert("Please Set Voucher Bill Due Date Setup!");
                $('#txtBillDueDateSetup').focus();
                return false;
            }
            var cboVoucherBillTrType =document.getElementById("cboVoucherBillTrType");
            var nVoucherBillTrType  = cboVoucherBillTrType.options[cboVoucherBillTrType.selectedIndex].value;
            if(parseInt(nVoucherBillTrType)<=0)
            {
                alert("Please Select Voucher Bill TrType!");
                $('#cboVoucherBillTrType').focus();
                return false;
            }

            var cboVoucherBillRefObjType =document.getElementById("cboVoucherBillRefObjType");
            var nVoucherBillRefObjType  = cboVoucherBillRefObjType.options[cboVoucherBillRefObjType.selectedIndex].value;
            if(parseInt(nVoucherBillRefObjType)<=0)
            {
                alert("Please Select Voucher Bill Ref Obj Type!");
                $('#cboVoucherBillRefObjType').focus();
                return false;
            }

            if(document.getElementById("txtVoucherBillNoColumn").value==="" || document.getElementById("txtVoucherBillNoColumn").value===null)
            {
                alert("Please Enter Voucher Bill No Column!");
                $('#txtVoucherBillNoColumn').focus();
                return false;
            }

            if(document.getElementById("txtVoucherBillRefObjColumn").value==="" || document.getElementById("txtVoucherBillRefObjColumn").value===null)
            {
                alert("Please Enter Voucher Bill Ref Obj Column!");
                $('#txtVoucherBillRefObjColumn').focus();
                return false;
            }
        }
        //Inventory Field Checked
        if(document.getElementById("chkBoxInventoryYes").checked === true)
        {
            if(document.getElementById("txtInventoryDataSQL").value==="" || document.getElementById("txtInventoryDataSQL").value===null)
            {
                alert("Please Type Inventory Effect data SQL!");
                $('#txtInventoryDataSQL').focus();
                return false;
            }
            if(document.getElementById("txtInventoryCompareColumns").value==="" || document.getElementById("txtInventoryCompareColumns").value===null)
            {
                alert("Please Type Inventory Effect Column Name!");
                $('#txtInventoryCompareColumns').focus();
                return false;
            }
            if(document.getElementById("txtInventoryWorkingUnitSetup").value==="" || document.getElementById("txtInventoryWorkingUnitSetup").value===null)
            {
                alert("Please Set Inventory Working Unit Setup!");
                $('#txtInventoryWorkingUnitSetup').focus();
                return false;
            }
            if(document.getElementById("txtInventoryProductSetup").value==="" || document.getElementById("txtInventoryProductSetup").value===null)
            {
                alert("Please Set Inventory Product Setup!");
                $('#txtInventoryProductSetup').focus();
                return false;
            }
            if(document.getElementById("txtInventoryQtySetup").value==="" || document.getElementById("txtInventoryQtySetup").value===null)
            {
                alert("Please Set Inventory Effect Qty Setup!");
                $('#txtInventoryQtySetup').focus();
                return false;
            }
            if(document.getElementById("txtInventoryUnitSetup").value==="" || document.getElementById("txtInventoryUnitSetup").value===null)
            {
                alert("Please Set Inventory Effect Unit Setup!");
                $('#txtInventoryUnitSetup').focus();
                return false;
            }
            if(document.getElementById("txtInventoryUnitPriceSetup").value==="" || document.getElementById("txtInventoryUnitPriceSetup").value===null)
            {
                alert("Please Set Inventory Effect Unit Price Setup!");
                $('#txtInventoryUnitPriceSetup').focus();
                return false;
            }
            if(document.getElementById("txtInventoryDescriptionSetup").value==="" || document.getElementById("txtInventoryDescriptionSetup").value===null)
            {
                alert("Please Set Inventory Effect Description Setup!");
                $('#txtInventoryDescriptionSetup').focus();
                return false;
            }
            if(document.getElementById("txtInventoryDateSetup").value==="" || document.getElementById("txtInventoryDateSetup").value===null)
            {
                alert("Please Set Inventory Effect Date Setup!");
                $('#txtInventoryDateSetup').focus();
                return false;
            }
        }
        return true;
    }

    function RefreshObject()
    {
        debugger;
        var cboAccountHeadType =document.getElementById("cboAccountHeadType");
        var nAccountHeadType  = cboAccountHeadType.options[cboAccountHeadType.selectedIndex].value;
        var sAccountHeadTypeInString =  cboAccountHeadType.options[cboAccountHeadType.selectedIndex].text;
        var sAccountHeadSetup = "";
        if(parseInt(nAccountHeadType)===1)
        {
            sAccountHeadSetup = $('#txtFixedAccountHeadName').val();
        }
        else if(parseInt(nAccountHeadType)===2)
        {
            sAccountHeadSetup = $('#txtDecidedAccountHeadName').val();
        }
        else if(parseInt(nAccountHeadType)===3)
        {
            sAccountHeadSetup = $('#txtReferencAccountHeadName').val();
        }

        var cboReferenceType =document.getElementById("cboReferenceType");
        var nReferenceType  = cboReferenceType.options[cboReferenceType.selectedIndex].value;

        //Cheque Reference
        var sIsReferenceCreate = "";
        var bIsReferenceCreate =  false;
        if(document.getElementById("chkBoxRefrncCrtYes").checked === true)
        {
            sIsReferenceCreate ="Yes";
            bIsReferenceCreate = true;
        }
        else
        {
            sIsReferenceCreate ="No";
            bIsReferenceCreate = false;
        }

        //Order Reference
        var sIsOrderReferenceApply = "";
        var bIsOrderReferenceApply =  false;
        if(document.getElementById("chkBoxOrderRefYes").checked === true)
        {
            sIsOrderReferenceApply ="Yes";
            bIsOrderReferenceApply = true;
        }
        else
        {
            sIsOrderReferenceApply ="No";
            bIsOrderReferenceApply = false;
        }

        //Cost Center Part
        var sCostCenterCreate = "";
        var bCostCenterCreate  = false;        
        var nCostCenterRefObjType  = 0;        
        var cboCostCenterRefObjType =document.getElementById("cboCostCenterRefObjType");
        if(document.getElementById("chkBoxCostcCrtYes").checked === true)
        {
            sCostCenterCreate = "Yes";
            bCostCenterCreate = true;            
            nCostCenterRefObjType  = cboCostCenterRefObjType.options[cboCostCenterRefObjType.selectedIndex].value;
        }
        else
        {
            sCostCenterCreate = "No";
            bCostCenterCreate = false;
        }

        // Voucher Bill Part
        var sVoucherBill = "";
        var bVoucherBillCreate  = false;
        var nVoucherBillTrType  = 0;
        var nVoucherBillRefObjType  = 0;
        var cboVoucherBillTrType =document.getElementById("cboVoucherBillTrType");        
        var cboVoucherBillRefObjType =document.getElementById("cboVoucherBillRefObjType");
        if(document.getElementById("chkBoxVoucherBillYes").checked === true)
        {
            sVoucherBill = "Yes";
            bVoucherBillCreate = true;
            nVoucherBillTrType  = cboVoucherBillTrType.options[cboVoucherBillTrType.selectedIndex].value;        
            nVoucherBillRefObjType  = cboVoucherBillRefObjType.options[cboVoucherBillRefObjType.selectedIndex].value;
        }
        else
        {
            sVoucherBill = "No";
            bVoucherBillCreate = false;
        }
        //Inventory Part
        var sInventoryEffect = "";
        var bInventoryEffect  = false;
        if(document.getElementById("chkBoxInventoryYes").checked === true)
        {
            sInventoryEffect = "Yes";
            bInventoryEffect = true;
        }
        else
        {
            sInventoryEffect = "No";
            bInventoryEffect = false;
        }

        var sTranjactionType = "";
        if(_bIsDebit === true )
        {
            sTranjactionType = "Debit";
        }
        else
        {
            sTranjactionType = "Credit";
        }

        var oDebitCreditSetup= {
            DebitCreditSetupID: _oDebitCreditSetup.DebitCreditSetupID,
            IntegrationSetupDetailID :_oDebitCreditSetup.IntegrationSetupDetailID,
            DataCollectionQuery :$.trim($('#txtDataCollectionQuery').val()),
            CompareColumn :$.trim($('#txtCompareColumn').val()),
            AccountHeadTypeInInt: nAccountHeadType,
            AccountHeadTypeInString : sAccountHeadTypeInString,
            FixedAccountHeadID : _oDebitCreditSetup.FixedAccountHeadID,
            AccountCode : _oDebitCreditSetup.AccountCode,
            AccountHeadName : _oDebitCreditSetup.AccountHeadName,
            AccountHeadSetup :sAccountHeadSetup,
            ReferenceTypeInInt :nReferenceType,
            CurrencySetup :$.trim($('#txtCurrencySetup').val()),
            ConversionRateSetup :$('#txtConversionRateSetup').val(),
            AmountSetup :$('#txtAmountSetup').val(),
            NarrationSetup :$('#txtNarrationSetup').val(),
            IsMandatory: document.getElementById("chkMandatoryYes").checked,
            IsChequeReferenceCreate:bIsReferenceCreate,
            IsChequeReferenceCreateInString:sIsReferenceCreate,
            IsDebit :_bIsDebit,
            TranjactionTypeInString:sTranjactionType,
            ChequeReferenceDataSQL :$('#txtChequeReferenceDataSQL').val(),
            ChequeReferenceCompareColumns :$('#txtChequeReferenceCompareColumns').val(),
            ChequeTypeInt : parseInt($('#cboChequeType').val()),
            ChequeSetup :$('#txtChequeSetup').val(),
            ChequeReferenceAmountSetup :$('#txtChequeReferenceAmountSetup').val(),
            ChequeReferenceDescriptionSetup :$('#txtChequeReferenceDescriptionSetup').val(),
            ChequeReferenceDateSetup :$('#txtChequeReferenceDateSetup').val(),            
            IsOrderReferenceApply:bIsOrderReferenceApply,
            IsOrderReferenceApplyInString:sIsOrderReferenceApply,            
            OrderReferenceDataSQL :$('#txtOrderReferenceDataSQL').val(),
            OrderReferenceCompareColumns :$('#txtOrderReferenceCompareColumns').val(),            
            OrderReferenceSetup :$('#txtOrderReferenceSetup').val(),
            OrderAmountSetup :$('#txtOrderAmountSetup').val(),
            OrderRemarkSetup :$('#txtOrderRemarkSetup').val(),
            OrderDateSetup :$('#txtOrderDateSetup').val(),
            IsCostCenterCreate :bCostCenterCreate,
            IsCostCenterCreateInString:sIsReferenceCreate,
            HasBillReference:document.getElementById('chkHasBillReference').checked,
            HasChequeReference:document.getElementById('chkHasChequeReference').checked,
            CostcenterDataSQL :$('#txtCostcenterDataSQL').val(),
            CostCenterCompareColumns :$('#txtCostCenterCompareColumns').val(),
            CostcenterSetup :$('#txtCostcenterSetup').val(),
            CostCenterAmountSetup :$('#txtCostCenterAmountSetup').val(),
            CostCenterDescriptionSetup :$('#txtCostCenterDescriptionSetup').val(),
            CostCenterDateSetup :$('#txtCostCenterDateSetup').val(),
            IsVoucherBill :bVoucherBillCreate,
            IsVoucherBillInString:sVoucherBill,
            VoucherBillDataSQL :$('#txtVoucherBillDataSQL').val(),
            VoucherBillCompareColumns :$('#txtVoucherBillCompareColumns').val(),
            VoucherBillSetup :$('#txtVoucherBillSetup').val(),
            VoucherBillTrTypeInInt : nVoucherBillTrType,
            VoucherBillAmountSetup :$('#txtVoucherBillAmountSetup').val(),
            VoucherBillDescriptionSetup :$('#txtVoucherBillDescriptionSetup').val(),
            VoucherBillDateSetup :$('#txtVoucherBillDateSetup').val(),
            BillDateSetup :$('#txtBillDateSetup').val(),
            BillDueDateSetup :$('#txtBillDueDateSetup').val(),
            IsInventoryEffect :bInventoryEffect,
            IsInventoryEffectInString:sInventoryEffect,
            InventoryDataSQL :$('#txtInventoryDataSQL').val(),
            InventoryCompareColumns :$('#txtInventoryCompareColumns').val(),
            InventoryWorkingUnitSetup :$('#txtInventoryWorkingUnitSetup').val(),
            InventoryProductSetup :$('#txtInventoryProductSetup').val(),
            InventoryQtySetup :$('#txtInventoryQtySetup').val(),
            InventoryUnitSetup :$('#txtInventoryUnitSetup').val(),
            InventoryUnitPriceSetup :$('#txtInventoryUnitPriceSetup').val(),
            InventoryDescriptionSetup :$('#txtInventoryDescriptionSetup').val(),
            InventoryDateSetup :$('#txtInventoryDateSetup').val(),
            CostCenterCategorySetup : $('#txtCostCenterCategorySetup').val(),
            CostCenterNoColumn : $('#txtCostCenterNoColumn').val(),
            CostCenterRefObjTypeInInt : nCostCenterRefObjType,
            CostCenterRefObjColumn : $('#txtCostCenterRefObjColumn').val(),
            VoucherBillNoColumn : $('#txtVoucherBillNoColumn').val(),
            VoucherBillRefObjTypeInInt : nVoucherBillRefObjType,
            VoucherBillRefObjColumn : $('#txtVoucherBillRefObjColumn').val(),
            Note :$('#txtNote').val(),
            DataCollectionSetups: GetDataCollectionSetups(bIsReferenceCreate, bCostCenterCreate, bVoucherBillCreate, bInventoryEffect, bIsOrderReferenceApply)
        };
        return oDebitCreditSetup;
    }

    function GetDataCollectionSetups(bIsReferenceCreate, bCostCenterCreate, bVoucherBillCreate, bInventoryEffect, bIsOrderReferenceApply)
    {
        var oDataCollectionSetups=[];
        oDataCollectionSetups.push(_oCurrencySetup);
        oDataCollectionSetups.push(_oConversionRateSetup);    
        oDataCollectionSetups.push(_oVoucherAmountSetup);
        if(_oAccountHeadSetup!=null)
        {
            oDataCollectionSetups.push(_oAccountHeadSetup);
        }
        if(_oAccountNameSetup!=null)
        {
            oDataCollectionSetups.push(_oAccountNameSetup);
        }
        for(var i=0; i< _oNarrationSetups.length; i++)
        {
            oDataCollectionSetups.push(_oNarrationSetups[i]);
        }

        if(bIsReferenceCreate)
        {
            oDataCollectionSetups.push(_oChequeSetup);
            oDataCollectionSetups.push(_oChequeReferenceAmountSetup);
            for(var i=0; i< _oChequeReferenceDescriptionSetups.length; i++)
            {
                oDataCollectionSetups.push(_oChequeReferenceDescriptionSetups[i]);
            }
            oDataCollectionSetups.push(_oChequeReferenceDateSetup);
        }

        if(bIsOrderReferenceApply)
        {
            oDataCollectionSetups.push(_oOrderSetup);
            oDataCollectionSetups.push(_oOrderAmountSetup);
            for(var i=0; i< _oOrderRemarkSetups.length; i++)
            {
                oDataCollectionSetups.push(_oOrderRemarkSetups[i]);
            }
            oDataCollectionSetups.push(_oOrderDateSetup);
        }

        if(bCostCenterCreate)
        {
            oDataCollectionSetups.push(_oCostCenterSetup);
            oDataCollectionSetups.push(_oCostCenterAmountSetup);
            for(var i=0; i< _oCostCenterDescriptionSetups.length; i++)
            {
                oDataCollectionSetups.push(_oCostCenterDescriptionSetups[i]);
            }
            oDataCollectionSetups.push(_oCostCenterDateSetup);
            oDataCollectionSetups.push(_oCostCenterCategorySetup);
        }
        if(bVoucherBillCreate)
        {
            oDataCollectionSetups.push(_oVoucherBillSetup);
            oDataCollectionSetups.push(_oVoucherBillAmountSetup);
            for(var i=0; i< _oVoucherBillDescriptionSetups.length; i++)
            {
                oDataCollectionSetups.push(_oVoucherBillDescriptionSetups[i]);
            }
            oDataCollectionSetups.push(_oVoucherBillDateSetup);
            oDataCollectionSetups.push(_oBillDateSetup);
            oDataCollectionSetups.push(_oBillDueDateSetup);
        }
        if(bInventoryEffect)
        {
            oDataCollectionSetups.push(_oInventoryWorkingUnitSetup);
            oDataCollectionSetups.push(_oInventoryProductSetup);
            oDataCollectionSetups.push(_oInventoryQtySetup);
            oDataCollectionSetups.push(_oInventoryUnitSetup);
            oDataCollectionSetups.push(_oInventoryUnitPriceSetup);
            for(var i=0; i< _oInventoryDescriptionSetups.length; i++)
            {
                oDataCollectionSetups.push(_oInventoryDescriptionSetups[i]);
            }
            oDataCollectionSetups.push(_oInventoryDateSetup);
        }
        return oDataCollectionSetups;
    }


    $('#txtFixedAccountHeadName').keypress(function (e) {
        ////debugger;
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code === 13) {
            var txtFixedAccountHeadName = document.getElementById('txtFixedAccountHeadName').value;
            if(txtFixedAccountHeadName!="")
            {
                ////debugger;
                var tsv=((new Date()).getTime())/1000;
                _oAccountHead=null;
                var oParameter = new Object();
                oParameter.EnteredText=txtFixedAccountHeadName;
                var url =_sBaseAddress+ "/ChartsOfAccount/ViewAccountsHead?sTemp="+txtFixedAccountHeadName+"&ts="+tsv;
                _oAccountHead = window.showModalDialog(url, oParameter, 'dialogHeight:270px;dialogWidth:383px;dialogLeft:520;dialogTop:310;center:yes;resizable:no;status:no;scroll:no');
                ////debugger;
                if(_oAccountHead !=null)
                {
                    if(parseInt(_oAccountHead.AccountHeadID)>0)
                    {
                        var txtFixedAccountHeadName=document.getElementById("txtFixedAccountHeadName");
                        txtFixedAccountHeadName.value=_oAccountHead.AccountHeadName;
                        txtFixedAccountHeadName.style.color="blue";
                        txtFixedAccountHeadName.style.fontWeight="bold";
                        _oDebitCreditSetup.FixedAccountHeadID = _oAccountHead.AccountHeadID;
                        _oDebitCreditSetup.AccountCode=_oAccountHead.AccountCode;
                        _oDebitCreditSetup.AccountHeadName=_oAccountHead.AccountHeadName;

                    }else
                    {
                        var txtFixedAccountHeadName=document.getElementById("txtFixedAccountHeadName");
                        txtFixedAccountHeadName.style.color="black";
                        txtFixedAccountHeadName.style.fontWeight="normal";
                        _oDebitCreditSetup.FixedAccountHeadID = 0;
                        _oDebitCreditSetup.AccountCode="";
                        _oDebitCreditSetup.AccountHeadName="";
                    }
                }
            }
        }

    });

    $('#txtFixedAccountHeadName').keydown(function (e) {
        ////debugger;
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code === 13 || code === 8) {
            var txtFixedAccountHeadName=document.getElementById("txtFixedAccountHeadName");
            txtFixedAccountHeadName.style.color="black";
            txtFixedAccountHeadName.style.fontWeight="normal";
            _oDebitCreditSetup.FixedAccountHeadID = 0;
            _oDebitCreditSetup.AccountCode="";
            _oDebitCreditSetup.AccountHeadName="";
        }

    });


    function Close()
    {

        window.close();
    }

    $(document).keydown(function(e) {
        //debugger;
        if(e.which === 27)//escape=27
        {
            //debugger;
            window.close();
        }
    });

    
    function IsMandatoryYes()
    {
        document.getElementById("chkMandatoryYes").checked=true;
        document.getElementById("chkMandatoryNo").checked=false;
    }
    function IsMandatoryNo()
    {
        document.getElementById("chkMandatoryYes").checked=false;
        document.getElementById("chkMandatoryNo").checked=true;
    }
</script>