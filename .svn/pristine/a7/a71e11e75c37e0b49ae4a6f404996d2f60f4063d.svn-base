<html>
<head>
    <link href="@Url.Content("~/Content/CSS/icon.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/CSS/easyui.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/CSS/Pikerstyle.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/jquery-1.7.1.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.ics.customize.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.easyui.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery-ui.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/json2.js")" type="text/javascript"></script>
</head>
<body>
    @model ESimSol.BusinessObjects.ProductPackingList
    <div style="font-family: Tahoma">
        <table border="0" cellspacing="2" cellpadding="2">
            <tr>
                <td style="background-color: #CFB53B; text-align: center; width: 400px; color: White">
                    <label id="lblHeaderName" style="font-size: 15px; font-weight: bold; text-decoration: Underline;
                        width: 380px">
                        Product Packing List
                    </label>
                </td>
            </tr>
        </table>
        <fieldset style="width: 385px; text-align: right">
            <table border="0">
                <tr>
                    <td style="width: 155px; font-size: 12px; font-family: Tahoma; text-align: left">
                        Parent:
                    </td>
                    <td style="width: 240px; text-align: left; color: Blue">
                        <label id="lblParentName" style="font-size: 12px; font-family: Tahoma; text-align: left">
                            Parent</label>
                    </td>
                </tr>
                <tr id="showcategory">
                    <td style="width: 155px; font-size: 12px; font-family: Tahoma; text-align: left">
                        Category:
                    </td>
                    <td style="width: 240px; text-align: left; color: Blue">
                        <label id="lblProductCategory" style="font-size: 12px; font-family: Tahoma; text-align: left">
                            Category</label>
                    </td>
                </tr>
                <tr id="Name">
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Name:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.TextBoxFor(model => model.Name, new { style = "width: 240px;", id = "txtName" })
                    </td>
                </tr>
                <tr id="ProductCategory">
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Product Category:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.TextBoxFor(model => model.ProductCategoryName, new { style = "width: 240px;", id = "txtProductCategoryName" })
                    </td>
                    <td style="visibility: hidden">@Html.TextBoxFor(model => model.ProductCategoryID, new { style = "width: 15px;", id = "txtProductCategoryID" })
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Note:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.TextBoxFor(model => model.Note, new { style = "width: 240px;", id = "txtNote" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr id="ChildQuantity">
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Child Quantity:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.TextBoxFor(model => model.ChildQuantity, new { style = "width: 240px;", id = "txtChildQuantity" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr id="lastlayer">
                    <td style="width: 0px; font-size: 13px; text-align: left">
                    </td>
                    <td style="width: 240px; text-align: left; font-family: Tahoma; font-size: 12px">
                        @Html.CheckBoxFor(model => model.IsLastLayer, new { id = "chkLastLayer", onClick = "chkIsLastLayer()" })
                        Last Layer
                    </td>
                </tr>
                <tr id="MeasurementLevel">
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Measurement Type:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        <label id="lblMeasurementUnit" style="font-size: 12px; font-family: Tahoma">
                            Measurement Unit</label>
                    </td>
                    <td>
                    </td>
                </tr>
                <tr id="MeasurementTypeEnum">
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Measurement Type:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.DropDownListFor(model => model.MeasurementUnitType, new SelectList(Enum.GetValues(typeof(ICS.Core.Utility.EnumUniteType))), new { id = "cboEnumUniteType", style = "width: 240px", @class = "_select_changeLT" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr id="MeasurementUnit">
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Measurement Unit:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.DropDownListFor(model => model.MeasurementUnitID, Model.MeasurementUnits.Select(x => new SelectListItem() { Text = x.UnitName, Value = x.MeasurementUnitID.ToString() }), new { id = "MeasurementUnitcbo", style = "width: 240px;" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr id="MeasurementUnitValue">
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Measurement Value:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.TextBoxFor(model => model.MUValue, new { style = "width: 240px;", id = "txtMeasurementUnitValue" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        @Html.HiddenFor(model => model.ParentID)
                        @Html.HiddenFor(model => model.PPLID)
                        @Html.HiddenFor(model => model.ProductCategoryID)
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                    </td>
                </tr>
            </table>
        </fieldset>
        <tr style="height: 50px">
            <td style="width: 500px">
                <table>
                    <tr>
                    </tr>
                    <tr>
                    </tr>
                    <tr>
                        <td style="width: 80px; text-align: right">
                        </td>
                        <td style="width: 80px; text-align: right">
                        </td>
                        <td style="width: 65px; text-align: right">
                        </td>
                        <td style="width: 80px; text-align: right">
                            <input type="button" value="Save" id="btnSave" style="width: 70px;" />
                        </td>
                        <td style="width: 80px; text-align: right">
                            <input type="button" value="Cancel" id="btnCancel" style="width: 70px;" />
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </div>
</body>
</html>
<script type="text/javascript">


var _MeasurementUnit;
var _ActionName;
var objmodel;

$(document).ready(function () {
    //debugger; 
    
    objmodel =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model)); 
    _MeasurementUnits = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.MeasurementUnits));
        
    var obj = window.dialogArguments;
    _ActionName = obj.Name;
    
    if( _ActionName == "Save")
    {
        debugger;
        SaveLayout();
    }
    
    if( _ActionName == "Edit")
    {
        EditLayout(); 
    } 

    LoadMeasurementUnit(); 
    NumberTextLock();   
    
    $("#txtProductCategoryName")[0].value = 'Press Enter'; 
     

document.getElementById("chkLastLayer").checked = false;  
             

}); // End of Ready Function



function SaveLayout()
{
    debugger;
//If root no category View
var s= objmodel.DisplayParent;
if(objmodel.DisplayParent== "Root")
{
    document.getElementById('lblParentName').innerHTML="Root";
    document.getElementById("showcategory").style.display = 'none';  
}


//If not Root View Category
     $("#txtName")[0].value = ''; 
     $("#txtNote")[0].value = ''; 
     $("#txtMeasurementUnitValue")[0].value = 0; 
     $("#txtProductCategoryID")[0].value = 0; 
     $("#txtChildQuantity")[0].value = 0;
     document.getElementById('lblParentName').innerHTML=objmodel.DisplayParent;
     document.getElementById('lblProductCategory').innerHTML=objmodel.DisplayMessageCategoryName;
     document.getElementById("MeasurementLevel").style.display = 'none'; 
     chkIsLastLayer();
     NodeCheck();
     
} 

function EditLayout()
{
    
    GetPPL();
}


function GetPPL() 
{
    //debugger;

var oEdtitPPL=  {                                  
                    PPLID : objmodel.PPLID
                };        

$.ajax({
    type: "POST",
    dataType: "json",
     url: '@Url.Action("GetProductPackingList", "ProductPackingList")',    
    data:  JSON.stringify(oEdtitPPL),
    contentType: "application/json; charset=utf-8",
    success: function (data) {
       // debugger;
         _PPL = jQuery.parseJSON(data);
         $("#txtName")[0].value = _PPL.Name;
         $("#txtNote")[0].value = _PPL.Note;
         $("#ChildQuantity")[0].value = _PPL.ChildQuantity; 
         $("#txtMeasurementUnitValue")[0].value = _PPL.MUValue; 
         document.getElementById('lblParentName').innerHTML=_PPL.DisplayParent; 
         document.getElementById('lblProductCategory').innerHTML=_PPL.DisplayMessageCategoryName;
         document.getElementById('lblMeasurementUnit').innerHTML=_PPL.DisplayMessageMeasurementUnit;        
         Maintaineditfield();
    },
    error: function (xhr, status, error) {
        alert(error);
    }
});
}



function Maintaineditfield()
{
//debugger;
    if(_PPL.IsLastLayer==false)
    {
        document.getElementById('txtChildQuantity').value = _PPL.ChildQuantity; 
        document.getElementById("txtChildQuantity").disabled=true;        
        document.getElementById("ChildQuantity").style.display = '';
        document.getElementById("MeasurementUnit").style.display = 'none'; 
        document.getElementById("lastlayer").style.display = 'none';
        document.getElementById("MeasurementUnitValue").style.display = 'none';
        document.getElementById("MeasurementTypeEnum").style.display = 'none';
        document.getElementById("MeasurementLevel").style.display = 'none'; 
        document.getElementById("ProductCategory").style.display = 'none';
                 
    }
    if(_PPL.IsLastLayer==true)
    {
          document.getElementById("cboEnumUniteType").selectedIndex = 'none';
          document.getElementById("ChildQuantity").style.display = 'none'; 
          document.getElementById("lastlayer").style.display = 'none'; 
          document.getElementById("ProductCategory").style.display = 'none';
          document.getElementById("MeasurementUnitValue").style.display = '';
          document.getElementById("txtMeasurementUnitValue").disabled=true; 
          document.getElementById('MeasurementLevel').value = _PPL.MeasurementUnitType; 
           
          document.getElementById("MeasurementLevel").style.display = '';
          document.getElementById("MeasurementUnit").style.display = 'none'; 
          document.getElementById("MeasurementTypeEnum").style.display = 'none';
          
          
    }

    
}



function NumberTextLock()
{
    //debugger;
    $("#txtChildQuantity").keydown(function(event) 
    {
        // Allow: backspace, delete, tab, escape, and enter        
        if ( event.keyCode == 46 || event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 27 || event.keyCode == 13 || 
        // Allow: Ctrl+A
        (event.keyCode == 65 && event.ctrlKey === true) || // Allow: home, end, left, right             
         (event.keyCode >= 35 && event.keyCode <= 39)) {// let it happen, don't do anything                 
            return;
    }
    else 
    {
        // Ensure that it is a number and stop the keypress
        if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105 )) 
        {
            event.preventDefault(); 
        }   
    }


    });



    $("#txtMeasurementUnitValue").keydown(function(event) 
    {// Allow: backspace, delete, tab, escape, and enter        
        if ( event.keyCode == 46 || event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 27 || event.keyCode == 13 || 
        // Allow: Ctrl+A
        (event.keyCode == 65 && event.ctrlKey === true) || // Allow: home, end, left, right             
         (event.keyCode >= 35 && event.keyCode <= 39)) {// let it happen, don't do anything                 
            return;
    }
    else 
    {
        // Ensure that it is a number and stop the keypress
        if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105 )) 
        {
            event.preventDefault(); 
        }   
    }


    });    

}



function NodeCheck()
{
    //debugger;
    var parent = objmodel.PPLID;
    if(parent==1)
    {
       document.getElementById("ProductCategory").style.display = '';
        
    }

    else
    {
       
        document.getElementById("ProductCategory").style.display = 'none';
        $("#txtProductCategoryID")[0].value = objmodel.ProductCategoryID;
    }


}


function chkIsLastLayer() 
{
////debugger;
    var IsLastLayer = document.getElementById("chkLastLayer");
    if (IsLastLayer.checked)         
    {         
        document.getElementById("MeasurementTypeEnum").style.display = '';
        document.getElementById("MeasurementUnitValue").style.display = '';
        document.getElementById("MeasurementUnit").style.display = '';     
        document.getElementById("ChildQuantity").style.display = 'none';                         
        document.getElementById('txtChildQuantity').value = 0; 
        document.getElementById("cboEnumUniteType").selectedIndex = 0;    
                
    }
    else 
    {           
        document.getElementById("MeasurementTypeEnum").style.display = 'none';
        document.getElementById("MeasurementUnitValue").style.display = 'none';
        document.getElementById("MeasurementUnit").style.display = 'none';
        document.getElementById("ChildQuantity").style.display = '';            
        document.getElementById('MeasurementUnitcbo').value = 'none'; // Enum
        document.getElementById('txtMeasurementUnitValue').value = 0; // text
        document.getElementById("MeasurementUnitcbo").value = 0;  
        
                       
    }
        
}





$ ('._select_changeLT').change(function()
{
// //debugger;
LoadMeasurementUnit();          
        
});



function LoadMeasurementUnit() 
{
////debugger;
var listitemmeasurementid;
$('#MeasurementUnitcbo').empty();
var enumUniteTypecbo = document.getElementById("cboEnumUniteType");
var enumUniteTypestring = enumUniteTypecbo.options[enumUniteTypecbo.selectedIndex].innerHTML; // Read what user selected        
var nMeasurementUniteType = document.getElementById("cboEnumUniteType");   // nMeasurementUniteType reads index number from combo box.
var listItems = "";
        
listItems += "<option value='0'> --Select Measurement Unit-- </option>";
if (nMeasurementUniteType.options[nMeasurementUniteType.selectedIndex].value == "None") 
{
    $("#MeasurementUnitcbo").html(listItems);
    return;
}


////debugger;
    listItems = "";
    listItems += "<option value='0'> --Select Measurement Unit-- </option>";
    for (var i = 0; i < _MeasurementUnits.length; i++) {

        if (_MeasurementUnits[i].UnitType == nMeasurementUniteType.options[nMeasurementUniteType.selectedIndex].index)
            {
            listItems += "<option value='" + _MeasurementUnits[i].MeasurementUnitID + "'>" + _MeasurementUnits[i].UnitName + "</option>";  
            GetByMeasurementUnitID(_MeasurementUnits[i].MeasurementUnitID)           
                   
                //listitemmeasurementid=  _MeasurementUnits[i].MeasurementUnitID;
            }
    }
    $("#MeasurementUnitcbo").html(listItems);   
}



function GetByMeasurementUnitID(MeasurementUnitID) {
//debugger;
$.ajax({
    type: "GET",
    dataType: "json",
    url: '@Url.Action("GetByMeasurementID", "ProductPackingList")',
    data: { id: MeasurementUnitID },
    contentType: "application/json; charset=utf-8",
    success: function (data) {
        ////debugger;
        _MeasurementUnit = jQuery.parseJSON(data);
//                document.getElementById('txtBranchName').value = _oBankAccount.BankAccountName;


    },
    error: function (xhr, status, error) {
        alert(error);
    }
});
}


function ValidateInput() 
{
   
    var sName = $("#txtName").val();
    if (sName =="") 
    {
        alert("Please Provide Name"); 
        $('#txtName').focus();
        return false;
    } 
   
    var nChildQuantity = $("#txtChildQuantity").val();
    if (nChildQuantity < 0)
    {
        alert("Please Enter Numeric Positive Value"); 
        return false;
    }

   //debugger;
   var lastlayerchecked = document.getElementById("chkLastLayer").checked; 

    var nEnumUniteType = $("#cboEnumUniteType").val();
    if (lastlayerchecked == true && nEnumUniteType == "None") 
    {
        alert("Please Select Measurement Type"); 
        $('#cboEnumUniteType').focus();
        return false;
    }
    var nMeasurementUnit = $("#MeasurementUnitcbo").val();
    if (lastlayerchecked== true && nMeasurementUnit<=0) 
    {
        alert("Please Select Measurement Unit"); 
         $('#MeasurementUnitcbo').focus();
        return false;
    }
    var nMeasurementValue = $("#txtMeasurementUnitValue").val();
    if (lastlayerchecked==true && nMeasurementValue <= 0) 
    {
        alert("Measurement Unit Value Can't be Negetive or Zero, Please Enter Numeric Positive Number"); 
        $('#txtMeasurementUnitValue').focus();
        return false;
    }
    
    if(lastlayerchecked==false && nChildQuantity ==0)
    {
        alert("For a Parent node Child number is required"); 
        $('#txtMeasurementUnitValue').focus();
        return false;
    }
    
    var nProductCategory = $("#txtProductCategoryID").val();         
    if(nProductCategory==1)  
    {
        alert("You Can Not Select Node, Select Other Node");
        $('#txtProductCategoryName').focus(); 
        return false;
    }

    if(nProductCategory<=0)  
    {
        alert("Press Enter To Category and Select A Node From Tree, except Root Node"); 
        $('#txtProductCategoryName').focus(); 
        return false;
    }   

    return true;
}





$('#txtProductCategoryName').keypress(function (e) {
        debugger;
        
        var keyCode = e.keyCode || e.which;
        if (keyCode == 13) 
        {           
            var oParameter = new Object();
            oParameter.Name = "ProductCategory";
            oParameter.MultipleReturn = false;     
            var url = '@Url.Action("ProductCategoryTree", "ProductCategory")';             
            //var url = "/ProductCategory/ProductCategoryTree";   // passing value of Product Category to Controller
            var oReturnObject = window.showModalDialog(url, oParameter, 'dialogHeight:530px;dialogWidth:460px;dialogLeft:300;dialogTop:60;center:yes;resizable:no;status:no;scroll:no'); 
           // var oReturnObject = window.showModalDialog(url, oParameter, 'dialogHeight:550px;dialogWidth:500px;dialogLeft:400;dialogTop:100;center:yes;resizable:no;status:no;scroll:no');
            debugger;
            if (oReturnObject != null) 
            {   
                var Attribute =  oReturnObject.attributes.split("~")[0];                 
                var AssetType = oReturnObject.attributes.split("~")[1];
                var AssetTypeInString = oReturnObject.attributes.split("~")[2];
                if (Attribute == "True") 
                {
                 document.getElementById('txtProductCategoryName').value = oReturnObject.text;                
                 document.getElementById('txtProductCategoryID').value = oReturnObject.id;
                 $('#txtNote').focus(); 
                }
                else
                {
                    alert("Select Last Layer Only");
                }

         }           
           
            else 
                {
                  $('#txtProductCategoryName').focus(); 
                }
            return false;
        }
    })



$('#btnCancel').click(function () {
     
 //debugger;        
   window.close();          
});


function RefreshObject()
{ 
    //debugger;
   
    var oProductPackingList= {                                  
                            PPLID : 0, 
                            ProductCategoryID: $("#txtProductCategoryID").val(),
                            Name: $("#txtName").val(),
                            Note: $("#txtNote").val(),
                            ParentID : objmodel.PPLID, 
                            IsLastLayer : document.getElementById("chkLastLayer").checked,
                            ChildQuantity: $("#txtChildQuantity").val(),  
                            MeasurementUnitID : $("#MeasurementUnitcbo").val(),
                            MUValue : $("#txtMeasurementUnitValue").val(),
                            MeasurementUnitTypeInInt : document.getElementById("cboEnumUniteType").selectedIndex
                                                
                        };
        return oProductPackingList;
}



$('#btnSave').click(function () {
     
 debugger;

     if( _ActionName == "Save")
     {
        if(!ValidateInput()) return false;        
        var oProductPackingList = RefreshObject();
         $.ajax({
          type: "POST",
          dataType: "json",
          url: '@Url.Action("AddProductPackingList", "ProductPackingList")',
          data:  JSON.stringify(oProductPackingList),
          contentType: "application/json; charset=utf-8",
          success: function (data) {
           //debugger;
              var oProductPackingListReturn = jQuery.parseJSON(data);
                  
              if (oProductPackingListReturn.ErrorMessage!=null)  
              {
                alert(oProductPackingListReturn.ErrorMessage);
                return;
              }
              else 
              {
                  alert("Data Saved sucessfully"); 
                  window.returnValue = oProductPackingListReturn;
                  window.close();
              }
          },
          error: function (xhr, status, error) {
              alert(error);
          }

      });
     
   }


   if( _ActionName == "Edit")
     {
        if(!ValidateInputEdit()) return false;        
        var oProductPackingList = RefreshObjectEdit();
         $.ajax({
          type: "POST",
          dataType: "json",
          url: '@Url.Action("EditPPL", "ProductPackingList")',
          data:  JSON.stringify(oProductPackingList),
          contentType: "application/json; charset=utf-8",
          success: function (data) {
           //debugger;
              var oProductPackingListReturn = jQuery.parseJSON(data);
                  
              if (oProductPackingListReturn.ErrorMessage!=null)  
              {
                alert(oProductPackingListReturn.ErrorMessage);
                return;
              }
              else 
              {
                  alert("Data Edited sucessfully"); 
                  window.returnValue = oProductPackingListReturn;
                  window.close();
              }
          },
          error: function (xhr, status, error) {
              alert(error);
          }

      });

     }
  
          
});



function ValidateInputEdit() 
{
   // //debugger;
    var lastlayerchecked = document.getElementById("chkLastLayer"); 
    
    var sName = $("#txtName").val();
    if (sName =="") 
    {
        alert("Please Provide Name"); 
        $('#txtName').focus();
        return false;
    } 

    var sNote = $("#txtNote").val();
    if (sNote =="") 
    {
        alert("Please Provide Note"); 
        $('#txtNote').focus();
        return false;
    } 
    
    return true;
}



function RefreshObjectEdit()
{ 
    //debugger;
    var oProductPackingList= {                                  
                            PPLID : objmodel.PPLID,
                            Name: $("#txtName").val(),
                            Note: $("#txtNote").val()                                                
                        };
        return oProductPackingList;
}






   
</script>
