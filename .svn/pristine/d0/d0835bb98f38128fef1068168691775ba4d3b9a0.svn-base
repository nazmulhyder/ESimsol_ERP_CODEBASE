using System;
using ESimSol.BusinessObjects;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using System.Drawing;
using ESimSol.Reports;
using System.Drawing.Imaging;
using System.IO;
using ICS.Core;
using ICS.Core.Framework;
using ICS.Core.Utility;
using ReportManagement;
using System.Xml.Serialization;
using ESimSol.BusinessObjects.ReportingObject;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.Data;
using System.Data.OleDb;
using System.Collections;
using System.Globalization;
using CrystalDecisions.CrystalReports.Engine;

namespace ESimSolFinancial.Controllers
{
    public class ComplianceController : PdfViewController
    {
        #region Declaration
        bool IsComp;
        MaxOTConfiguration _oMaxOTConfiguration = new MaxOTConfiguration();
        List<MaxOTConfiguration> _oMaxOTConfigurations = new List<MaxOTConfiguration>();
        MaxOTConfigurationUser _oMaxOTConfigurationUser = new MaxOTConfigurationUser();
        List<MaxOTConfigurationUser> _oMaxOTConfigurationUsers = new List<MaxOTConfigurationUser>();
        string[] ColGross = new string[] { };
        bool bFlag = true;
        Dictionary<string, object> _gross = new Dictionary<string, object>();
        Dictionary<string, object> _increment = new Dictionary<string, object>();
        Dictionary<string, object> _earnings = new Dictionary<string, object>();
        Dictionary<string, object> _deductions = new Dictionary<string, object>();
        Dictionary<string, object> _banks = new Dictionary<string, object>();

        AttendanceDaily_ZN _oAttendanceDaily_ZN;
        private List<AttendanceDaily_ZN> _oAttendanceDaily_ZNs;
        private List<EmployeeSalary> _oEmployeeSalarys;
        EmployeeSalary _oEmployeeSalary;
        List<TransferPromotionIncrement> _oTransferPromotionIncrements = new List<TransferPromotionIncrement>();
        List<EmployeeBankAccount> _oEmployeeBankAccounts = new List<EmployeeBankAccount>();
        List<EmployeeSalaryDetail> _oEmployeeSalaryDetails = new List<EmployeeSalaryDetail>();
        List<SalarySummary_F2> oSalarySummerys = new List<SalarySummary_F2>();
        List<SalarySummaryDetail_F2> oSalarySummaryDetail_F2s = new List<SalarySummaryDetail_F2>();
        List<SalarySummary_F2> _oSalarySummary_F2s = new List<SalarySummary_F2>();
        List<SalarySummary_F2> _oTempSalarySummary_F2s = new List<SalarySummary_F2>();
        List<SalarySummaryDetail_F2> _oSalarySummaryDetail_F2s = new List<SalarySummaryDetail_F2>();
        List<SalarySummaryDetail_F2> _oAdditionSalaryHeads = new List<SalarySummaryDetail_F2>();
        List<SalarySummaryDetail_F2> _oDeductionSalaryHeads = new List<SalarySummaryDetail_F2>();
        List<SalarySummary_F2> _oSalarySummary_F2s_Location = new List<SalarySummary_F2>();
        EmployeeSettlement _oEmployeeSettlement;
        List<EmployeeSettlement> _oEmployeeSettlements;
        bool IsNUInDate, IsNUInTime, IsNUOutDate, IsNUOutTime, IsNULate, IsNUEarly, IsNUOT, IsNURemark;
        AttendanceDaily _oAttendanceDaily;
        private List<AttendanceDaily> _oAttendanceDailys;
        string sFormat = "";
        List<CalculateManpower> showSummery = new List<CalculateManpower>();
        int Present, Absent, Late, EarlyLeaving, OT, NoWork, Leave, NoOutTime;
        int _nEmpCount;


        #endregion

        #region view

        public ActionResult ViewTimeCardPermission(int id, double ts) // UserID 
        {
            _oMaxOTConfigurations = new List<MaxOTConfiguration>();
            ESimSol.BusinessObjects.User oSelectedUser = new ESimSol.BusinessObjects.User();
            List<MaxOTConfigurationUser> oMaxOTConfigurationUsers = new List<MaxOTConfigurationUser>();
            if (id > 0)
            {
                oSelectedUser = oSelectedUser.Get(id, (int)Session[SessionInfo.currentUserID]);
                oMaxOTConfigurationUsers = MaxOTConfigurationUser.GetsUser(id, (int)Session[SessionInfo.currentUserID]);
            }
            ViewBag.SelectedUser = oSelectedUser;
            ViewBag.MaxOTConfigurations = oMaxOTConfigurationUsers;
            _oMaxOTConfigurations = MaxOTConfiguration.Gets((int)Session[SessionInfo.currentUserID]);
            return View(_oMaxOTConfigurations);
        }
        public ActionResult View_TimeCard(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);

            this.Session.Remove(SessionInfo.AuthorizationRolesMapping);
            List<AuthorizationRoleMapping> oAuthorizationRoleMappings =  AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.Attendance).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]);
            this.Session.Add(SessionInfo.AuthorizationRolesMapping, oAuthorizationRoleMappings);            
            ViewBag.AuthorizationRolesMapping_ESS = AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.EmployeeSalaryStructure).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]);



            _oAttendanceDaily_ZN = new AttendanceDaily_ZN();
            string sSql = "SELECT * FROM HRM_Shift WHERE IsActive=1";
            _oAttendanceDaily_ZN.HRMShifts = HRMShift.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            ViewBag.EmployeeTypes = EmployeeType.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeCategorys = Enum.GetValues(typeof(EnumEmployeeCategory)).Cast<EnumEmployeeCategory>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();

            sSql = "";
            sSql = "SELECT * FROM BusinessUnit WHERE BusinessUnitID IN(SELECT BusinessUnitID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID<>0";
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " )";
            }
            sSql = sSql + ")";
            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();
            oLeaveHeads = LeaveHead.Gets("SELECT * FROM LeaveHead WHERE IsActive = 1", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.LeaveHead = oLeaveHeads;
            ViewBag.BusinessUnits = BusinessUnit.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));
            MaxOTConfiguration oMaxOTConfiguration = new MaxOTConfiguration();
            List<MaxOTConfiguration> oMaxOTConfigurationUsers = new List<MaxOTConfiguration>();
            List<MaxOTConfiguration> oMaxOTConfigurationTemps = new List<MaxOTConfiguration>();
            List<MaxOTConfiguration> oMaxOTConfigurations = MaxOTConfiguration.Gets((int)(Session[SessionInfo.currentUserID]));
            oMaxOTConfigurationUsers = MaxOTConfiguration.GetsByUser((int)(Session[SessionInfo.currentUserID]));


            EnumObject oEnumObject = new EnumObject();
            List<EnumObject> oTimeCards = new List<EnumObject>(); 
            foreach (MaxOTConfiguration oItem1 in oMaxOTConfigurations)
            {
                foreach (MaxOTConfiguration oItem2 in oMaxOTConfigurationUsers)
                {
                    if (oItem1.MOCID == oItem2.MOCID)
                    {
                        oEnumObject = new EnumObject();
                        oEnumObject.id = oItem1.MOCID;
                        oEnumObject.Value = oItem1.TimeCardName;
                        oTimeCards.Add(oEnumObject);
                    }
                }
            }

            //if (oAuthorizationRoleMappings != null)
            //{
            //    foreach (AuthorizationRoleMapping oItem in oAuthorizationRoleMappings)
            //    {
            //        if (oItem.OperationType == EnumRoleOperationType.Time_Card_F3)
            //        {
            //            oMaxOTConfiguration = new MaxOTConfiguration();
            //            oMaxOTConfiguration.MOCID = -4;
            //            oMaxOTConfiguration.IsEnum = true;
            //            oMaxOTConfiguration.TimeCardName = "Time Card-F3";
            //            oMaxOTConfigurationTemps.Add(oMaxOTConfiguration);
            //            //oMaxOTConfigurations.Add(oMaxOTConfiguration);
            //        }
            //        if (oItem.OperationType == EnumRoleOperationType.Time_Card_F6)
            //        {
            //            oMaxOTConfiguration = new MaxOTConfiguration();
            //            oMaxOTConfiguration.MOCID = -7;
            //            oMaxOTConfiguration.IsEnum = true;
            //            oMaxOTConfiguration.TimeCardName = "Time Card-F6";
            //            oMaxOTConfigurationTemps.Add(oMaxOTConfiguration);
            //            //oMaxOTConfigurations.Add(oMaxOTConfiguration);
            //        }
            //        if (oItem.OperationType == EnumRoleOperationType.Time_Card_F6_1)
            //        {
            //            oMaxOTConfiguration = new MaxOTConfiguration();
            //            oMaxOTConfiguration.MOCID = -8;
            //            oMaxOTConfiguration.IsEnum = true;
            //            oMaxOTConfiguration.TimeCardName = "Time Card-F6_1";
            //            oMaxOTConfigurationTemps.Add(oMaxOTConfiguration);
            //            //oMaxOTConfigurations.Add(oMaxOTConfiguration);
            //        }
            //        if (oItem.OperationType == EnumRoleOperationType.Time_Card_Worker)
            //        {
            //            oMaxOTConfiguration = new MaxOTConfiguration();
            //            oMaxOTConfiguration.MOCID = -9;
            //            oMaxOTConfiguration.IsEnum = true;
            //            oMaxOTConfiguration.TimeCardName = "Time Card Worker";
            //            oMaxOTConfigurationTemps.Add(oMaxOTConfiguration);
            //            //oMaxOTConfigurations.Add(oMaxOTConfiguration);
            //        }
            //    }
            //}
            bool flag = false;

            foreach (MaxOTConfiguration oItem in oMaxOTConfigurationTemps)
            {
                if (oItem.MOCID > 0)
                {
                    flag = true;
                    break;
                }
            }
            foreach (MaxOTConfiguration oItem in oMaxOTConfigurationTemps)
            {
                if (flag == false && oItem.MOCID < 0)
                {
                    flag = false;
                    break;
                }
            }

            ViewBag.bMakeDecission = flag;
            //ViewBag.MaxOTTimeCard = oMaxOTConfigurations;
            ViewBag.MaxOTTimeCard = oMaxOTConfigurationTemps;
            oTimeCards.AddRange(GetPermissionList());
            ViewBag.TimeCards = oTimeCards;
            return View(_oAttendanceDaily_ZN);
        }

        public ActionResult View_SalarySheet(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            _oEmployeeSalarys = new List<EmployeeSalary>();

            this.Session.Remove(SessionInfo.AuthorizationRolesMapping);
            this.Session.Add(SessionInfo.AuthorizationRolesMapping, AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.EmployeeSalary).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]));

            ViewBag.EmployeeTypes = EmployeeType.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.Months = Enum.GetValues(typeof(EnumMonth)).Cast<EnumMonth>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).Where(x => x.Value != 0.ToString()).ToList();
            ViewBag.EmployeeCategorys = Enum.GetValues(typeof(EnumEmployeeCategory)).Cast<EnumEmployeeCategory>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();

            string sSql = "SELECT * FROM BusinessUnit WHERE BusinessUnitID IN(SELECT BusinessUnitID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID<>0";
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " )";
            }
            sSql = sSql + ")";

            ViewBag.BusinessUnits = BusinessUnit.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));
            ViewBag.MaxOTTimeCard = MaxOTConfiguration.Gets((int)(Session[SessionInfo.currentUserID]));

            return View(_oEmployeeSalarys);
        }

        public ActionResult View_FinalSettlement(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);

            this.Session.Remove(SessionInfo.AuthorizationRolesMapping);
            this.Session.Add(SessionInfo.AuthorizationRolesMapping, AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.EmployeeSettlement).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]));

            List<EmployeeSettlementClearance> oEmployeeSettlementClearances = new List<EmployeeSettlementClearance>();
            string sSql = "SELECT *  FROM View_EmployeeSettlement WHERE IsResigned=0 ";
            ViewBag.EmployeeSettlements = EmployeeSettlement.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EnumSettleMentTypes = Enum.GetValues(typeof(EnumSettleMentType)).Cast<EnumSettleMentType>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();

            ViewBag.EmployeeTypes = EmployeeType.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeCategorys = Enum.GetValues(typeof(EnumEmployeeCategory)).Cast<EnumEmployeeCategory>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            sSql = "SELECT * FROM BusinessUnit WHERE BusinessUnitID IN(SELECT BusinessUnitID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID<>0";
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " )";
            }
            sSql = sSql + ")";
            ViewBag.BusinessUnits = BusinessUnit.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));

            ViewBag.ClearanceStatus = Enum.GetValues(typeof(EnumESCrearance)).Cast<EnumESCrearance>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();

            //List<AuthorizationUserOEDO> oAUOEDOs = new List<AuthorizationUserOEDO>();
            //oAUOEDOs = AuthorizationUserOEDO.GetsByUser(((User)(Session[SessionInfo.CurrentUser])).UserID, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //bool bView = ((User)(Session[SessionInfo.CurrentUser])).HasFunctionalityWeb(EnumOperationFunctionality._View, "EmployeeSettlement", oAUOEDOs);
            //TempData["View"] = bView;

            return View(oEmployeeSettlementClearances);
        }

        public ActionResult View_LeaveLedger(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            List<LeaveLedgerReport> oLeaveLedgerReports = new List<LeaveLedgerReport>();
            ViewBag.oACSs = AttendanceCalendarSession.Gets("SELECT * FROM AttendanceCalendarSession", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.oLeaveHeads = LeaveHead.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);

            ViewBag.EmployeeTypes = EmployeeType.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeCategorys = Enum.GetValues(typeof(EnumEmployeeCategory)).Cast<EnumEmployeeCategory>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();

            string sSql = "SELECT * FROM BusinessUnit WHERE BusinessUnitID IN(SELECT BusinessUnitID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID<>0";
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " )";
            }
            sSql = sSql + ")";

            ViewBag.BusinessUnits = BusinessUnit.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));

            return View(oLeaveLedgerReports);
        }
        public ActionResult View_UploadAttendance(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();

            return View(oAttendanceDaily);
        }

        public ActionResult View_Rpt_MonthlyAttendance(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            _oAttendanceDailys = new List<AttendanceDaily>();

            this.Session.Remove(SessionInfo.AuthorizationRolesMapping);
            this.Session.Add(SessionInfo.AuthorizationRolesMapping, AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.Attendance).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]));


            ViewBag.EmployeeTypes = EmployeeType.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeCategorys = Enum.GetValues(typeof(EnumEmployeeCategory)).Cast<EnumEmployeeCategory>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();

            string sSql = "SELECT * FROM BusinessUnit WHERE BusinessUnitID IN(SELECT BusinessUnitID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID<>0";
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " )";
            }
            sSql = sSql + ")";

            ViewBag.BusinessUnits = BusinessUnit.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));

            return View(_oAttendanceDailys);
        }

        public ActionResult View_Rpt_DailyAttendance(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            AttendanceDaily oAD = new AttendanceDaily();
            string sSql = "SELECT * FROM HRM_Shift WHERE IsActive=1";
            oAD.HRMShifts = HRMShift.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.LeaveHeads = LeaveHead.Gets("SELECT * FROM LeaveHead WHERE IsActive=1 AND ShortName IS NOT NULL", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            ViewBag.EmployeeTypes = EmployeeType.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeCategorys = Enum.GetValues(typeof(EnumEmployeeCategory)).Cast<EnumEmployeeCategory>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();

            sSql = "";
            sSql = "SELECT * FROM BusinessUnit WHERE BusinessUnitID IN(SELECT BusinessUnitID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID<>0";
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " )";
            }
            sSql = sSql + ")";

            ViewBag.BusinessUnits = BusinessUnit.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));
            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();
            oLeaveHeads = LeaveHead.Gets("SELECT * FROM LeaveHead WHERE IsActive = 1", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.LeaveHead = oLeaveHeads;
            return View(oAD);
        }

        public ActionResult ViewBridgeAbsent(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            AttendanceDaily oAD = new AttendanceDaily();
            MaxOTConfiguration oMaxOTConfiguration = new MaxOTConfiguration();
            List<MaxOTConfiguration> oMaxOTConfigurationUsers = new List<MaxOTConfiguration>();
            List<MaxOTConfiguration> oMaxOTConfigurationTemps = new List<MaxOTConfiguration>();
            List<MaxOTConfiguration> oMaxOTConfigurations = MaxOTConfiguration.GetsDayoff((int)(Session[SessionInfo.currentUserID]));
            oMaxOTConfigurationUsers = MaxOTConfiguration.GetsByUser((int)(Session[SessionInfo.currentUserID]));

            foreach (MaxOTConfiguration oItem1 in oMaxOTConfigurations)
            {
                foreach (MaxOTConfiguration oItem2 in oMaxOTConfigurationUsers)
                {
                    if (oItem1.MOCID == oItem2.MOCID)
                    {
                        oMaxOTConfigurationTemps.Add(oItem1);
                    }
                }
            }

            ViewBag.MaxOTTimeCard = oMaxOTConfigurationTemps;

            string sSQL = "Select * from LeaveHead Where IsActive=1";
            ViewBag.LeaveHeads = LeaveHead.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            return View(oAD);
        }


        #endregion view
        public List<EnumObject> GetPermissionList()
        {
            List<EnumObject> oEnumObjects = new List<EnumObject>();
            List<EnumObject> objEnumObjects = new List<EnumObject>();

            List<AuthorizationRoleMapping> oAuthorizationRoleMappings = new List<AuthorizationRoleMapping>();
            oAuthorizationRoleMappings = AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.Attendance).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]);
            foreach (AuthorizationRoleMapping oItem in oAuthorizationRoleMappings)
            {
                if (oItem.OperationType == EnumRoleOperationType.Time_Card_F1)
                {
                    EnumObject oEnumObject = new EnumObject();
                    oEnumObject.id = (int)EnumEmployeeTimeCard.Time_Card_F1;
                    oEnumObject.Value = EnumObject.jGet(EnumEmployeeTimeCard.Time_Card_F1);
                    objEnumObjects.Add(oEnumObject);
                }
                if (oItem.OperationType == EnumRoleOperationType.Time_Card_F2)
                {
                    EnumObject oEnumObject = new EnumObject();
                    oEnumObject.id = (int)EnumEmployeeTimeCard.Time_Card_F2;
                    oEnumObject.Value = EnumObject.jGet(EnumEmployeeTimeCard.Time_Card_F2);
                    objEnumObjects.Add(oEnumObject);
                }
                if (oItem.OperationType == EnumRoleOperationType.Time_Card_F2_1)
                {
                    EnumObject oEnumObject = new EnumObject();
                    oEnumObject.id = (int)EnumEmployeeTimeCard.Time_Card_F2_1;
                    oEnumObject.Value = EnumObject.jGet(EnumEmployeeTimeCard.Time_Card_F2_1);
                    objEnumObjects.Add(oEnumObject);
                }
                if (oItem.OperationType == EnumRoleOperationType.Time_Card_F3)
                {
                    EnumObject oEnumObject = new EnumObject();
                    oEnumObject.id = (int)EnumEmployeeTimeCard.Time_Card_F3;
                    oEnumObject.Value = EnumObject.jGet(EnumEmployeeTimeCard.Time_Card_F3);
                    objEnumObjects.Add(oEnumObject);
                }
                if (oItem.OperationType == EnumRoleOperationType.Time_Card_F4)
                {
                    EnumObject oEnumObject = new EnumObject();
                    oEnumObject.id = (int)EnumEmployeeTimeCard.Time_Card_F4;
                    oEnumObject.Value = EnumObject.jGet(EnumEmployeeTimeCard.Time_Card_F4);
                    objEnumObjects.Add(oEnumObject);
                }
                if (oItem.OperationType == EnumRoleOperationType.Time_Card_F5)
                {
                    EnumObject oEnumObject = new EnumObject();
                    oEnumObject.id = (int)EnumEmployeeTimeCard.Time_Card_F5;
                    oEnumObject.Value = EnumObject.jGet(EnumEmployeeTimeCard.Time_Card_F5);
                    objEnumObjects.Add(oEnumObject);
                }
                if (oItem.OperationType == EnumRoleOperationType.Time_Card_F6)
                {
                    EnumObject oEnumObject = new EnumObject();
                    oEnumObject.id = (int)EnumEmployeeTimeCard.Time_Card_F6;
                    oEnumObject.Value = EnumObject.jGet(EnumEmployeeTimeCard.Time_Card_F6);
                    objEnumObjects.Add(oEnumObject);
                }
                if (oItem.OperationType == EnumRoleOperationType.Time_Card_FC7)
                {
                    EnumObject oEnumObject = new EnumObject();
                    oEnumObject.id = (int)EnumEmployeeTimeCard.Time_Card_FC7;
                    oEnumObject.Value = EnumObject.jGet(EnumEmployeeTimeCard.Time_Card_FC7);
                    objEnumObjects.Add(oEnumObject);
                }
                if (oItem.OperationType == EnumRoleOperationType.Time_Card_Worker)
                {
                    EnumObject oEnumObject = new EnumObject();
                    oEnumObject.id = (int)EnumEmployeeTimeCard.Time_Card_Worker;
                    oEnumObject.Value = EnumObject.jGet(EnumEmployeeTimeCard.Time_Card_Worker);
                    objEnumObjects.Add(oEnumObject);
                }
                if (oItem.OperationType == EnumRoleOperationType.Job_Card)
                {
                    EnumObject oEnumObject = new EnumObject();
                    oEnumObject.id = (int)EnumEmployeeTimeCard.Job_Card;
                    oEnumObject.Value = EnumObject.jGet(EnumEmployeeTimeCard.Job_Card);
                    objEnumObjects.Add(oEnumObject);
                }
            }
            return objEnumObjects;
        }
        #region Search

        [HttpGet]
        public JsonResult GetAttendanceBYDate(string sDate, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sEmployeeIDs, bool bAbsent, string ShiftIds, string sChkType, int nLoadRecords, int nRowLength, string selectedFormat, int CriteriaType, string StartInTime, string EndInTime, string StartOutTime, string EndOutTime, int StartLate, int EndLate, int StartEarly, int EndEarly, string Remarks, bool IsRemarked, double nts)
        {
            DateTime dStartInTime = Convert.ToDateTime(StartInTime);
            DateTime dEndInTime = Convert.ToDateTime(EndInTime);
            DateTime dStartOutTime = Convert.ToDateTime(StartOutTime);
            DateTime dEndOutTime = Convert.ToDateTime(EndOutTime);
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            try
            {
                string sSQL = "SELECT top(" + nLoadRecords + ")* FROM (SELECT ROW_NUMBER() OVER(ORDER BY Code) Row,* FROM View_AttendanceDaily WHERE AttendanceID <>0 AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=1) AND AttendanceDate ='" + sDate + "'";
                if (bAbsent == true)
                {
                    sSQL = sSQL + " AND InTime='" + sDate + " 00:00:00.000' AND OutTime='" + sDate + " 00:00:00.000' AND IsOSD!=1";
                }
                if (sBusinessUnitIds != "")
                {
                    sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
                }
                if (sLocationID != "")
                {
                    sSQL = sSQL + " AND LocationID IN(" + sLocationID + ")";
                }
                if (sDepartmentIds != "")
                {
                    sSQL = sSQL + " AND DepartmentID IN(" + sDepartmentIds + ")";
                }
                if (sDesignationIds != "")
                {
                    sSQL = sSQL + " AND DesignationID IN(" + sDesignationIds + ")";
                }
                if (sEmployeeIDs != "")
                {
                    sSQL = sSQL + " AND EmployeeID IN(" + sEmployeeIDs + ")";
                }
                if (ShiftIds != "")
                {
                    sSQL = sSQL + " AND ShiftID IN(" + ShiftIds + ")";
                }
                if (sChkType != "")
                {
                    if (sChkType == "Present")
                    {
                        sSQL += " AND (CAST(CompInTime AS TIME(0))!='00:00:00' OR CAST(CompOutTime AS TIME(0))!='00:00:00' OR IsOSD=1)";
                    }
                    if (sChkType == "Absent")
                    {
                        sSQL += " AND (CAST(CompInTime AS TIME(0))='00:00:00'AND CAST(CompOutTime AS TIME(0))='00:00:00') AND CompLeaveHeadID=0 AND IsCompDayOff=0 AND IsCompHoliday=0 AND IsOSD !=1";
                    }
                    if (sChkType == "Late")
                    {
                        sSQL += " AND CompLateArrivalMinute>0";
                    }
                    if (sChkType == "Early")
                    {
                        sSQL += " AND CompEarlyDepartureMinute>0";
                    }
                    if (sChkType == "OT")
                    {
                        sSQL += " AND CompOverTimeInMinute>0";
                    }
                    if (sChkType == "NoWork")
                    {
                        sSQL += " AND IsNoWork=1";
                    }
                    if (sChkType == "Leave")
                    {
                        sSQL += " AND CompLeaveHeadID>0";
                    }
                    if (sChkType == "NOT")//No Out Time
                    {
                        sSQL += " AND (CAST(CompInTime AS TIME(0))!='00:00:00'AND CAST(CompOutTime AS TIME(0))='00:00:00')";
                    }
                }
                if (CriteriaType == 1)
                {

                    if (StartInTime != "00:00:00" && EndInTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompInTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndInTime + "' AS TIME(0)))";
                    }

                    if (StartOutTime != "00:00:00" && EndOutTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompOutTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndOutTime + "' AS TIME(0)))";
                    }
                    if (StartLate > 0 || EndLate > 0)
                    {
                        sSQL += " AND CompLateArrivalMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartLate + "')" + " AND " + "CONVERT(varchar(50),'" + EndLate + "')";
                    }
                    if (StartEarly > 0 || EndEarly > 0)
                    {
                        sSQL += " AND CompEarlyDepartureMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartEarly + "')" + " AND " + "CONVERT(varchar(50),'" + EndEarly + "')";
                    }
                }
                if (CriteriaType == 2)
                {
                    if (StartInTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompInTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                    }

                    if (StartOutTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompOutTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                    }
                    if (StartLate > 0)
                    {
                        sSQL += " AND CompLateArrivalMinute  = " + "CONVERT(varchar(50),'" + StartLate + "')";
                    }
                    if (StartEarly > 0)
                    {
                        sSQL += " AND CompEarlyDepartureMinute = " + "CONVERT(varchar(50),'" + StartEarly + "')";
                    }
                }
                if (CriteriaType == 3)
                {
                    if (StartInTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompInTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                    }

                    if (StartOutTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompOutTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                    }
                    if (StartLate > 0)
                    {
                        sSQL += " AND CompLateArrivalMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartLate - 1) + "')";
                    }
                    if (StartEarly > 0)
                    {
                        sSQL += " AND CompEarlyDepartureMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartEarly - 1) + "')";
                    }
                }
                if (CriteriaType == 4)
                {
                    if (StartInTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompInTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                    }

                    if (StartOutTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompOutTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                    }
                    if (StartLate > 0)
                    {
                        sSQL += " AND CompLateArrivalMinute > " + "CONVERT(varchar(50),'" + StartLate + "')";
                    }
                    if (StartEarly > 0)
                    {
                        sSQL += " AND CompEarlyDepartureMinute > " + "CONVERT(varchar(50),'" + StartEarly + "')";
                    }
                }
                if (IsRemarked)
                {
                    sSQL += " AND (Remark IS NOT NULL OR Remark <> '')";
                }
                if (!string.IsNullOrEmpty(Remarks))
                {
                    sSQL += " AND Remark LIKE '%" + Remarks + "%'";
                }

                if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
                {
                    sSQL = sSQL + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
                }
                sSQL = sSQL + ") aa WHERE Row >" + nRowLength;
                sSQL = sSQL + " ORDER BY Code";
                oAttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                oAttendanceDailys = new List<AttendanceDaily>();
                oAttendanceDailys[0].ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDailys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public JsonResult GetAttendanceExtraSearch(string sDate, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sEmployeeIDs, bool bAbsent, string ShiftIds, string sChkType, int nLoadRecords, int nRowLength, string selectedFormat, int CriteriaType, string StartInTime, string EndInTime, string StartOutTime, string EndOutTime, int StartLate, int EndLate, int StartEarly, int EndEarly, double nts)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();

            //DateTime dStartInTime = Convert.ToDateTime(StartInTime);
            //DateTime dEndInTime = Convert.ToDateTime(EndInTime);
            //DateTime dStartOutTime = Convert.ToDateTime(StartOutTime);
            //DateTime dEndOutTime = Convert.ToDateTime(EndOutTime);

            DateTime dStartInTime;
            DateTime dEndInTime;
            DateTime dStartOutTime;
            DateTime dEndOutTime;

            DateTime paramDate;
            paramDate = Convert.ToDateTime(sDate);

            try
            {
                string sSQL = "SELECT top(" + nLoadRecords + ")* FROM (SELECT ROW_NUMBER() OVER(ORDER BY Code) Row,* FROM View_AttendanceDaily WHERE AttendanceID <>0 AND AttendanceDate ='" + sDate + "'";
                if (bAbsent == true)
                {
                    sSQL = sSQL + " AND CompInTime='" + sDate + " 00:00:00.000' AND CompOutTime='" + sDate + " 00:00:00.000'";
                }
                if (sBusinessUnitIds != "")
                {
                    sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
                }
                if (sLocationID != "")
                {
                    sSQL = sSQL + " AND LocationID IN(" + sLocationID + ")";
                }
                if (sDepartmentIds != "")
                {
                    sSQL = sSQL + " AND DepartmentID IN(" + sDepartmentIds + ")";
                }
                if (sDesignationIds != "")
                {
                    sSQL = sSQL + " AND DesignationID IN(" + sDesignationIds + ")";
                }
                if (sEmployeeIDs != "")
                {
                    sSQL = sSQL + " AND EmployeeID IN(" + sEmployeeIDs + ")";
                }
                if (ShiftIds != "")
                {
                    sSQL = sSQL + " AND ShiftID IN(" + ShiftIds + ")";
                }
                if (sChkType != "")
                {
                    if (sChkType == "Present")
                    {
                        sSQL += " AND (CAST(CompInTime AS TIME(0))!='00:00:00'OR CAST(CompOutTime AS TIME(0))!='00:00:00')";
                    }
                    if (sChkType == "Absent")
                    {
                        sSQL += " AND (CAST(CompInTime AS TIME(0))='00:00:00'AND CAST(CompOutTime AS TIME(0))='00:00:00') AND CompLeaveHeadID=0 AND IsCompDayOff=0 AND IsCompHoliday=0";
                    }
                    if (sChkType == "Late")
                    {
                        sSQL += " AND CompLateArrivalMinute>0";
                    }
                    if (sChkType == "Early")
                    {
                        sSQL += " AND CompEarlyDepartureMinute>0";
                    }
                    if (sChkType == "OT")
                    {
                        sSQL += " AND CompOverTimeInMinute>0";
                    }
                    if (sChkType == "NoWork")
                    {
                        sSQL += " AND IsNoWork=1";
                    }
                    if (sChkType == "Leave")
                    {
                        sSQL += " AND CompLeaveHeadID>0";
                    }
                    if (sChkType == "NOT")//No Out Time
                    {
                        sSQL += " AND (CAST(CompInTime AS TIME(0))!='00:00:00'AND CAST(CompOutTime AS TIME(0))='00:00:00')";
                    }
                }

                DateTime d;

                //dStartInTime = Convert.ToDateTime(StartInTime);
                if (DateTime.TryParse(StartInTime, out d)) { dStartInTime = d; } else { dStartInTime = new DateTime(); }

                paramDate = paramDate.AddHours(-paramDate.Hour);
                paramDate = paramDate.AddHours(dStartInTime.Hour);
                paramDate = paramDate.AddMinutes(-paramDate.Minute);
                paramDate = paramDate.AddMinutes(dStartInTime.Minute);
                paramDate = paramDate.AddSeconds(-paramDate.Second);
                paramDate = paramDate.AddSeconds(dStartInTime.Second);

                dStartInTime = paramDate;

                //dEndInTime = Convert.ToDateTime(EndInTime);
                if (DateTime.TryParse(EndInTime, out d)) { dEndInTime = d; } else { dEndInTime = new DateTime(); }

                paramDate = paramDate.AddHours(-paramDate.Hour);
                paramDate = paramDate.AddHours(dEndInTime.Hour);
                paramDate = paramDate.AddMinutes(-paramDate.Minute);
                paramDate = paramDate.AddMinutes(dEndInTime.Minute);
                paramDate = paramDate.AddSeconds(-paramDate.Second);
                paramDate = paramDate.AddSeconds(dEndInTime.Second);
                dEndInTime = paramDate;

                //dStartOutTime = Convert.ToDateTime(StartOutTime);
                if (DateTime.TryParse(StartOutTime, out d)) { dStartOutTime = d; } else { dStartOutTime = new DateTime(); }

                paramDate = paramDate.AddHours(-paramDate.Hour);
                paramDate = paramDate.AddHours(dStartOutTime.Hour);
                paramDate = paramDate.AddMinutes(-paramDate.Minute);
                paramDate = paramDate.AddMinutes(dStartOutTime.Minute);
                paramDate = paramDate.AddSeconds(-paramDate.Second);
                paramDate = paramDate.AddSeconds(dStartOutTime.Second);
                dStartOutTime = paramDate;

                //dEndOutTime = Convert.ToDateTime(EndOutTime);
                if (DateTime.TryParse(EndOutTime, out d)) { dEndOutTime = d; } else { dEndOutTime = new DateTime(); }

                paramDate = paramDate.AddHours(-paramDate.Hour);
                paramDate = paramDate.AddHours(dEndOutTime.Hour);
                paramDate = paramDate.AddMinutes(-paramDate.Minute);
                paramDate = paramDate.AddMinutes(dEndOutTime.Minute);
                paramDate = paramDate.AddSeconds(-paramDate.Second);
                paramDate = paramDate.AddSeconds(dEndOutTime.Second);
                dEndOutTime = paramDate;

                if (CriteriaType == 1)
                {

                    if (StartInTime != "00:00:00" && EndInTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompInTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndInTime + "' AS TIME(0)))";
                    }

                    if (StartOutTime != "00:00:00" && EndOutTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompOutTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndOutTime + "' AS TIME(0)))";
                    }
                    if (StartLate > 0 || EndLate > 0)
                    {
                        sSQL += " AND CompLateArrivalMinute BETWEEN " + "CONVERT(varchar(50),'" + StartLate + "')" + " AND " + "CONVERT(varchar(50),'" + EndLate + "')";
                    }
                    if (StartEarly > 0 || EndEarly > 0)
                    {
                        sSQL += " AND CompEarlyDepartureMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartEarly + "')" + " AND " + "CONVERT(varchar(50),'" + EndEarly + "')";
                    }
                }
                if (CriteriaType == 2)
                {
                    if (StartInTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompInTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                    }

                    if (StartOutTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompOutTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                    }
                    if (StartLate > 0)
                    {
                        sSQL += " AND CompLateArrivalMinute  = " + "CONVERT(varchar(50),'" + StartLate + "')";
                    }
                    if (StartEarly > 0)
                    {
                        sSQL += " AND CompEarlyDepartureMinute  = " + "CONVERT(varchar(50),'" + StartEarly + "')";
                    }
                }
                if (CriteriaType == 3)
                {
                    if (StartInTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompInTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                    }

                    if (StartOutTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompOutTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                    }
                    if (StartLate > 0)
                    {
                        sSQL += " AND CompLateArrivalMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartLate - 1) + "')";
                    }
                    if (StartEarly > 0)
                    {
                        sSQL += " AND CompEarlyDepartureMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartEarly - 1) + "')";
                    }
                }
                if (CriteriaType == 4)
                {
                    if (StartInTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompInTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                    }

                    if (StartOutTime != "00:00:00")
                    {
                        sSQL += " AND CAST(CompOutTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                    }
                    if (StartLate > 0)
                    {
                        sSQL += " AND CompLateArrivalMinute  > " + "CONVERT(varchar(50),'" + StartLate + "')";
                    }
                    if (StartEarly > 0)
                    {
                        sSQL += " AND CompEarlyDepartureMinute  > " + "CONVERT(varchar(50),'" + StartEarly + "')";
                    }
                }


                if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
                {
                    sSQL = sSQL + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
                }
                sSQL = sSQL + ") aa WHERE Row >" + nRowLength;
                sSQL = sSQL + " ORDER BY Code";
                oAttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                oAttendanceDailys = new List<AttendanceDaily>();
                oAttendanceDailys[0].ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDailys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult EmployeeWiseAttendanceSearchComp(string sTemp)
        {
            _oAttendanceDaily_ZNs = new List<AttendanceDaily_ZN>();
            try
            {
                string sEmployeeIDs = sTemp.Split('~')[0];
                DateTime Startdate = Convert.ToDateTime(sTemp.Split('~')[1]);
                DateTime EndDate = Convert.ToDateTime(sTemp.Split('~')[2]);
                string sLocationID = sTemp.Split('~')[3];
                string sDepartmentIds = sTemp.Split('~')[4];
                string sBUnitIDs = sTemp.Split('~')[5];
                double nStartSalaryRange = Convert.ToDouble(sTemp.Split('~')[6]);
                double nEndSalaryRange = Convert.ToDouble(sTemp.Split('~')[7]);
                string sBlockIDs = sTemp.Split('~')[8];
                string sGroupIDs = sTemp.Split('~')[9];
                int nPType = Convert.ToInt32(sTemp.Split('~')[10]);

                if (nPType > 10)
                {
                    _oAttendanceDaily_ZNs = AttendanceDaily_ZN.GetsTimeCardComp(sEmployeeIDs, Startdate, EndDate, sLocationID, sDepartmentIds, "", sBUnitIDs, nStartSalaryRange, nEndSalaryRange, sBlockIDs, sGroupIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                }
                else if (nPType <= 10)
                {
                    _oAttendanceDaily_ZNs = AttendanceDaily_ZN.GetsTimeCardMaxOTConfSearch(sEmployeeIDs, Startdate, EndDate, sLocationID, sDepartmentIds, sBUnitIDs, nStartSalaryRange, nEndSalaryRange, sBlockIDs, sGroupIDs, nPType, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                }
                if (_oAttendanceDaily_ZNs.Count <= 0)
                {
                    throw new Exception("Data Not Found !");
                }
            }
            catch (Exception ex)
            {
                _oAttendanceDaily_ZN = new AttendanceDaily_ZN();
                _oAttendanceDaily_ZNs = new List<AttendanceDaily_ZN>();
                _oAttendanceDaily_ZN.ErrorMessage = ex.Message;
                _oAttendanceDaily_ZNs.Add(_oAttendanceDaily_ZN);
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oAttendanceDaily_ZNs);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult SearchSalaryByDepartmentAndDateRange(string sBU, string sLocationID, string sDepartmentIds, string sDesignationIDs, string sSalarySchemeIDs, string sEmployeeIDs, string BMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, int nLoadRecords, int nRowLength, double nStartSalaryRange, bool bIsOutSheet, double nEndSalaryRange, double ts)
        {
            try
            {
                string sSql = "";
                sSql = "SELECT * FROM (SELECT top(" + nLoadRecords + ")* FROM (SELECT ROW_NUMBER() OVER(ORDER BY EmployeeSalaryID) Row,* FROM View_EmployeeSalary WHERE MonthID=" + nMonthID + " AND DATEPART(YYYY,EndDate)=" + nYear;

                if (sBU.Trim() != "" && sBU.Trim() != "0")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeOfficial WHERE DRPID IN(SELECT DepartmentRequirementPolicyID FROM DepartmentRequirementPolicy WHERE BusinessUnitID=" + sBU + "))";
                }
                if (sLocationID.Trim() != "")
                {
                    sSql = sSql + " AND LocationID=" + sLocationID;
                }
                if (sDepartmentIds.Trim() != "")
                {
                    sSql = sSql + " AND DepartmentID IN(" + sDepartmentIds + ")";
                }
                if (sDesignationIDs.Trim() != "")
                {
                    sSql = sSql + " AND DesignationID IN(" + sDesignationIDs + ")";
                }
                if (sSalarySchemeIDs.Trim() != "")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
                }
                if (sEmployeeIDs.Trim() != "")
                {
                    sSql = sSql + " AND EmployeeID In (" + sEmployeeIDs + ")";
                }
                if (nPayType > 0)
                {
                    if (nPayType == 1)
                    {
                        sSql = sSql + " AND IsAllowBankAccount=1";
                    }
                    if (nPayType == 2)
                    {
                        sSql = sSql + " AND IsAllowBankAccount=0";
                    }
                }
                //if (nMonthID > 0)
                //{
                //    sSql = sSql + " AND MonthID=" + nMonthID;
                //}
                if (bNewJoin)
                {
                    sSql = sSql + " AND JoiningDate BETWEEN StartDate AND EndDate";
                }
                if (bIsOutSheet)
                {
                    sSql = sSql + " AND IsOutSheet=1";
                }
                if (bIsOutSheet == false)
                {
                    sSql = sSql + " AND (IsOutSheet=0 OR IsOutSheet IS NULL)";
                }
                if (BMMIDs != "")
                {
                    //sSql = sSql + "  AND EmployeeID IN(SELECT EmployeeID FROM View_BlockMachineMappingSupervisor WHERE BMMID " + nBlock + " AND IsActive=1)";
                    sSql = sSql + "  AND BMMID IN(" + BMMIDs + ")";
                }
                if (nStartSalaryRange > 0 && nEndSalaryRange > 0)
                {
                    sSql += " AND GrossAmount BETWEEN " + nStartSalaryRange + " AND " + nEndSalaryRange;
                }
                if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
                {
                    sSql = sSql + "AND DepartmentID IN(SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + "))";
                }
                sSql = sSql + ") aa WHERE Row >" + nRowLength + ") aaa ORDER BY EmployeeCode";
                //sSql = "SELECT * FROM View_EmployeeSalary WHERE DepartmentID =" + nID + " AND StartDate='" + dtDateFrom + "' AND EndDate='" + dtDateTo + "'";
                _oEmployeeSalarys = new List<EmployeeSalary>();
                _oEmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (_oEmployeeSalarys.Count == 0)
                {
                    throw new Exception("Data Not Found !");
                }
                _oEmployeeSalarys.ForEach(x =>
                {
                    x.GrossAmount = x.CompGrossAmount;
                    x.NetAmount = Math.Round(x.CompNetAmount, 2);
                });
            }
            catch (Exception ex)
            {
                _oEmployeeSalarys = new List<EmployeeSalary>();
                _oEmployeeSalary = new EmployeeSalary();
                _oEmployeeSalary.ErrorMessage = ex.Message;
                _oEmployeeSalarys.Add(_oEmployeeSalary);
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oEmployeeSalarys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }
        private EmployeeSalary GetEmployeesSalary(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, double nStartSalaryRange, double nEndSalaryRange, bool IsCompliance, string sGroupIDs, string sBlockIDs)
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            string sSql = "";
            string sStartDate;
            string sEndDate;

            if (sEmpIDs != "")
            {
                sSql = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeID IN (" + sEmpIDs + ") AND MonthID=" + nMonthID + " AND DATEPART(YYYY,EndDate)=" + nYear;
                sSql += " ORDER BY EmployeeCode";

                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                sSql = "";
                sSql = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + sEmpIDs + ") AND PayrollProcessID IN (SELECT   PPMID FROM PayrollProcessManagement WHERE  MonthID=" + nMonthID + ") AND DATEPART(YYYY,EndDate)=" + nYear + ") ORDER BY SalaryHeadID";
                oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                sSql = "";
                sSql = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + ") AND PayrollProcessID IN (SELECT   PayrollProcessID FROM PayrollProcessManagement WHERE  MonthID=" + nMonthID + ")  AND DATEPART(YYYY,EndDate)=" + nYear + ")";
                oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeBankAccounts = EmployeeBankAccount.Gets("SELECT * FROM VIEW_EmployeeBankAccount WHERE EmployeeID IN(" + sEmpIDs + ") AND IsActive=1", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            }
            else
            {
                sSql = "SELECT * FROM View_EmployeeSalary WHERE MonthID=" + nMonthID + " AND DATEPART(YYYY,EndDate)=" + nYear;

                if (sBU.Trim() != "")
                {
                    //sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeOfficial WHERE DRPID IN(SELECT DepartmentRequirementPolicyID FROM DepartmentRequirementPolicy WHERE BusinessUnitID IN(" + sBU + ")))";
                    sSql = sSql + " AND BusinessUnitID IN(" + sBU + ")";
                }

                if (sLocationID.Trim() != "")
                {
                    sSql = sSql + " AND LocationID IN(" + sLocationID + ")";
                }
                if (sDepartmentIDs != "")
                {
                    sSql += " AND DepartmentID IN(" + sDepartmentIDs + ")";
                }
                if (sDesignationIDs != "")
                {
                    sSql += " AND DesignationID IN(" + sDesignationIDs + ")";
                }
                if (sSalarySchemeIDs != "")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
                }
                if (nPayType > 0)
                {
                    if (nPayType == 1)
                    {
                        sSql = sSql + " AND IsAllowBankAccount=1";
                    }
                    if (nPayType == 2)
                    {
                        sSql = sSql + " AND IsAllowBankAccount=0";
                    }
                }
                if (bNewJoin)
                {
                    sSql = sSql + " AND JoiningDate BETWEEN StartDate AND EndDate";
                }
                if (bIsOutSheet)
                {
                    sSql = sSql + " AND IsOutSheet=1";
                }
                if (bIsOutSheet == false)
                {
                    sSql = sSql + " AND (IsOutSheet=0 OR IsOutSheet IS NULL)";
                }
                if (!string.IsNullOrEmpty(sGroupIDs))
                {
                    sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sGroupIDs + "))";
                }
                if (!string.IsNullOrEmpty(sBlockIDs))
                {
                    sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sBlockIDs + "))";
                }
                if (nStartSalaryRange > 0 && nEndSalaryRange > 0)
                {
                    sSql += " AND GrossAmount BETWEEN " + nStartSalaryRange + " AND " + nEndSalaryRange;
                }
                if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
                {
                    sSql = sSql + "AND DepartmentID IN(SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + "))";
                }

                sSql += " ORDER BY EmployeeCode";

                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //List<int> EmpIDs = new List<int>();
                //EmpIDs = oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeID).ToList();

                //string EmpIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeID));
                //if (EmpIDs != "")
                //{
                //    sSql = "";
                //    sSql = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + EmpIDs + ") AND PayrollProcessID IN (SELECT   PayrollProcessID FROM PayrollProcessManagement WHERE  MonthID=" + nMonthID + ") AND DATEPART(YYYY,EndDate)=" + nYear + ") ORDER BY SalaryHeadID";
                //    oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //    sSql = "";
                //    sSql = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + EmpIDs + ") AND PayrollProcessID IN (SELECT   PayrollProcessID FROM PayrollProcessManagement WHERE  MonthID=" + nMonthID + ")  AND DATEPART(YYYY,EndDate)=" + nYear + ")";
                //    oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //    oEmployeeSalary.EmployeeBankAccounts = EmployeeBankAccount.Gets("SELECT * FROM VIEW_EmployeeBankAccount WHERE EmployeeID IN(" + EmpIDs + ") AND IsActive=1", ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //}
                //else
                //{
                //    oEmployeeSalary.Employees = new List<Employee>();
                //    oEmployeeSalary.EmployeeSalaryDetails = new List<EmployeeSalaryDetail>();
                //    oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = new List<EmployeeSalaryDetailDisciplinaryAction>();
                //    oEmployeeSalary.EmployeeBankAccounts = new List<EmployeeBankAccount>();
                //}

                string EmpIDs = "";
                if (oEmployeeSalary.EmployeeSalarys.Count > 0)
                {
                    string TempEmpIDs = "";
                    int nCount = 0;
                    oEmployeeSalary.EmployeeSalaryDetails = new List<EmployeeSalaryDetail>();
                    foreach (EmployeeSalary oItem in oEmployeeSalary.EmployeeSalarys)
                    {
                        TempEmpIDs += oItem.EmployeeID + ",";
                        EmpIDs += oItem.EmployeeID + ",";
                        nCount++;

                        if (nCount % 100 == 0 || nCount == oEmployeeSalary.EmployeeSalarys.Count)
                        {
                            TempEmpIDs = TempEmpIDs.Remove(TempEmpIDs.Length - 1, 1);
                            sSql = "";
                            sSql = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + TempEmpIDs + ") AND PayrollProcessID IN (SELECT   PayrollProcessID FROM PayrollProcessManagement WHERE  MonthID=" + nMonthID + ") AND DATEPART(YYYY,EndDate)=" + nYear + ") ORDER BY SalaryHeadID";
                            List<EmployeeSalaryDetail> oEmployeeSalaryDetails = new List<EmployeeSalaryDetail>();
                            oEmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                            oEmployeeSalary.EmployeeSalaryDetails.AddRange(oEmployeeSalaryDetails);
                            TempEmpIDs = "";
                        }
                    }
                    EmpIDs = EmpIDs.Remove(EmpIDs.Length - 1, 1);
                    oEmployeeSalary.EmployeeBankAccounts = EmployeeBankAccount.Gets("SELECT * FROM VIEW_EmployeeBankAccount WHERE EmployeeID IN(" + EmpIDs + ") AND IsActive=1", ((User)(Session[SessionInfo.CurrentUser])).UserID);
                }
                else
                {
                    oEmployeeSalary.Employees = new List<Employee>();
                    oEmployeeSalary.EmployeeSalaryDetails = new List<EmployeeSalaryDetail>();
                    oEmployeeSalary.EmployeeBankAccounts = new List<EmployeeBankAccount>();
                }
                oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = new List<EmployeeSalaryDetailDisciplinaryAction>();
            }

            if (oEmployeeSalary.EmployeeSalarys.Count > 0)
            {
                sStartDate = oEmployeeSalary.EmployeeSalarys[0].StartDateInString;
                sEndDate = oEmployeeSalary.EmployeeSalarys[0].EndDateInString;
            }
            else
            {
                sStartDate = "01 JAN 1950";
                sEndDate = "01 JAN 1950";
            }

            string sSql_SalaryHead = "";
            if (IsCompliance)
            {
                sSql_SalaryHead = "SELECT * FROM SalaryHead WHERE SalaryHeadID IN(SELECT SalaryHeadID  FROM EmployeeSalaryDetail WHERE "
                                        + " EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM View_EmployeeSalary WHERE MonthID=" + nMonthID + " AND  DATEPART(YYYY,EndDate)=" + nYear + ") AND CompAmount>0)";
            }
            else
            {
                sSql_SalaryHead = "SELECT * FROM SalaryHead WHERE SalaryHeadID IN(SELECT SalaryHeadID  FROM EmployeeSalaryDetail WHERE "
                                        + " EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM View_EmployeeSalary WHERE MonthID=" + nMonthID + " AND  DATEPART(YYYY,EndDate)=" + nYear + ") AND Amount>0)";
            }

            oEmployeeSalary.SalaryHeads = SalaryHead.Gets(sSql_SalaryHead, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            oEmployeeSalary.ErrorMessage = sStartDate + "," + sEndDate;
            return oEmployeeSalary;
        }
        #endregion search

        #region TimeCard




        public ActionResult PrintTimeCard_F2(string sTemp, string sType)
        {
            AttendanceDaily_ZN oAttendanceDaily_ZN = new AttendanceDaily_ZN();
            //string sEmployeeIDs = sTemp.Split('~')[0];
            //DateTime Startdate = Convert.ToDateTime(sTemp.Split('~')[1]);
            //DateTime EndDate = Convert.ToDateTime(sTemp.Split('~')[2]);
            //int nLocationID = Convert.ToInt32(sTemp.Split('~')[3]);
            //string sDepartmentIds = sTemp.Split('~')[4];

            string sEmployeeIDs = sTemp.Split('~')[0];
            DateTime Startdate = Convert.ToDateTime(sTemp.Split('~')[1]);
            DateTime EndDate = Convert.ToDateTime(sTemp.Split('~')[2]);
            string sLocationID = sTemp.Split('~')[3];
            string sDepartmentIds = sTemp.Split('~')[4];
            string sBUnitIDs = sTemp.Split('~')[5];
            double nStartSalaryRange = Convert.ToDouble(sTemp.Split('~')[6]);
            double nEndSalaryRange = Convert.ToDouble(sTemp.Split('~')[7]);
            string sBMMIDs = sTemp.Split('~')[8];
            string sGroupIDs = sTemp.Split('~')[9];

            List<AttendanceDaily_ZN> AttendanceDaily_ZNs = new List<AttendanceDaily_ZN>();
            AttendanceDaily_ZNs = AttendanceDaily_ZN.GetsTimeCard(sEmployeeIDs, Startdate, EndDate, sLocationID, sDepartmentIds, sType, sBUnitIDs, nStartSalaryRange, nEndSalaryRange, sBMMIDs, sGroupIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily_ZN.AttendanceDaily_ZNs = AttendanceDaily_ZNs;

            if (sBUnitIDs != "")
            {
                oAttendanceDaily_ZN.BusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + sBUnitIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }


            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily_ZN.Company = oCompanys.First();
            oAttendanceDaily_ZN.Company.CompanyLogo = GetImage(oAttendanceDaily_ZN.Company.OrganizationLogo);
            oAttendanceDaily_ZN.ErrorMessage = Startdate.ToString("dd MMM yyyy") + "~" + EndDate.ToString("dd MMM yyyy");
            rptTimeCard_F2 oReport = new rptTimeCard_F2();
            byte[] abytes = oReport.PrepareReport(oAttendanceDaily_ZN);
            return File(abytes, "application/pdf");
        }
        



        public ActionResult PrintTimeCard_F6_1(string sTemp)
        {
            AttendanceDaily_ZN oAttendanceDaily_ZN = new AttendanceDaily_ZN();

            string sEmployeeIDs = sTemp.Split('~')[0];
            DateTime Startdate = Convert.ToDateTime(sTemp.Split('~')[1]);
            DateTime EndDate = Convert.ToDateTime(sTemp.Split('~')[2]);
            string sLocationID = sTemp.Split('~')[3];
            string sDepartmentIds = sTemp.Split('~')[4];
            string sBUnitIDs = sTemp.Split('~')[5];
            double nStartSalaryRange = Convert.ToDouble(sTemp.Split('~')[6]);
            double nEndSalaryRange = Convert.ToDouble(sTemp.Split('~')[7]);
            string sBMMIDs = sTemp.Split('~')[8];
            string sGroupIDs = sTemp.Split('~')[9];

            List<AttendanceDaily_ZN> AttendanceDaily_ZNs = new List<AttendanceDaily_ZN>();
            AttendanceDaily_ZNs = AttendanceDaily_ZN.GetsTimeCardComp(sEmployeeIDs, Startdate, EndDate, sLocationID, sDepartmentIds, "", sBUnitIDs, nStartSalaryRange, nEndSalaryRange, sBMMIDs, sGroupIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily_ZN.AttendanceDaily_ZNs = AttendanceDaily_ZNs;

            oAttendanceDaily_ZN.LeaveHeads = LeaveHead.Gets("SELECT * FROM LeaveHead", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily_ZN.Company = oCompanys.First();
            oAttendanceDaily_ZN.Company.CompanyLogo = GetImage(oAttendanceDaily_ZN.Company.OrganizationLogo);
            oAttendanceDaily_ZN.ErrorMessage = Startdate.ToString("dd MMM yyyy") + "~" + EndDate.ToString("dd MMM yyyy");
            rptTimeCard_F6_1 oReport = new rptTimeCard_F6_1();
            byte[] abytes = oReport.PrepareReport(oAttendanceDaily_ZN);
            return File(abytes, "application/pdf");
        }


        #endregion TimeCard

        #region LeaveLedger
        public ActionResult PrintLeaveLedger(string sParams, double ts)
        {
            string sEmployeeIDs = sParams.Split('~')[0];
            string sDepartmentIds = sParams.Split('~')[1];
            string sDesignationIds = sParams.Split('~')[2];
            int ACSID = Convert.ToInt32(sParams.Split('~')[3]);
            int nLeaveHeadID = Convert.ToInt32(sParams.Split('~')[4]);
            double nBalanceAmount = Convert.ToDouble(sParams.Split('~')[5]);
            int nBalanceType = Convert.ToInt16(sParams.Split('~')[6]);
            string sSessions = sParams.Split('~')[7];
            bool bReportingPerson = Convert.ToBoolean(sParams.Split('~')[8]);
            DateTime dtFrom = Convert.ToDateTime(sParams.Split('~')[9]);
            DateTime dtTo = Convert.ToDateTime(sParams.Split('~')[10]);
            bool bDate = Convert.ToBoolean(sParams.Split('~')[11]);
            bool IsActive = Convert.ToBoolean(sParams.Split('~')[12]);
            bool IsInActive = Convert.ToBoolean(sParams.Split('~')[13]);
            string sBUnit = sParams.Split('~')[14];
            string sLocationID = sParams.Split('~')[15];

            LeaveLedgerReport oLeaveLedgerReport = new LeaveLedgerReport();
            oLeaveLedgerReport.LeaveLedgerReports = LeaveLedgerReport.GetsComp(sEmployeeIDs, sDepartmentIds, sDesignationIds, ACSID, nLeaveHeadID, nBalanceAmount, nBalanceType, bReportingPerson, dtFrom, dtTo, bDate, IsActive, IsInActive, sBUnit, sLocationID, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();
            oLeaveLedgerReport.LeaveHeads = LeaveHead.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oLeaveLedgerReport.Company = oCompanys.First();
            oLeaveLedgerReport.Company.CompanyLogo = GetCompanyLogo(oLeaveLedgerReport.Company);
            if (sBUnit != "")
            {
                oLeaveLedgerReport.BusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + sBUnit + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }

            if (ACSID <= 0)
            {
                string sSql = "SELECT TOP(1)* FROM AttendanceCalendarSession WHERE IsActive=1 ORDER BY Session DESC";
                List<AttendanceCalendarSession> oACSs = new List<AttendanceCalendarSession>();
                oACSs = AttendanceCalendarSession.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (oACSs.Count > 0)
                {
                    sSessions = oACSs[0].Session;
                }
            }
            oLeaveLedgerReport.ErrorMessage = nLeaveHeadID + "~" + sSessions + "~" + dtFrom.ToString("dd MMM yyyy") + "~" + dtTo.ToString("dd MMM yyyy") + "~" + bDate;

            rptLeaveLedger oReport = new rptLeaveLedger();
            byte[] abytes = oReport.PrepareReport(oLeaveLedgerReport);
            return File(abytes, "application/pdf");

        }

        public void PrintLeaveReport(string sParams, double ts)
        {
            string sEmployeeIDs = sParams.Split('~')[0];
            string sDepartmentIds = sParams.Split('~')[1];
            string sDesignationIds = sParams.Split('~')[2];
            int ACSID = Convert.ToInt32(sParams.Split('~')[3]);
            int nLeaveHeadID = Convert.ToInt32(sParams.Split('~')[4]);
            double nBalanceAmount = Convert.ToDouble(sParams.Split('~')[5]);
            int nBalanceType = Convert.ToInt16(sParams.Split('~')[6]);
            string sSessions = sParams.Split('~')[7];
            bool bReportingPerson = Convert.ToBoolean(sParams.Split('~')[8]);
            DateTime dtFrom = Convert.ToDateTime(sParams.Split('~')[9]);
            DateTime dtTo = Convert.ToDateTime(sParams.Split('~')[10]);
            bool bDate = Convert.ToBoolean(sParams.Split('~')[11]);
            bool IsActive = Convert.ToBoolean(sParams.Split('~')[12]);
            bool IsInActive = Convert.ToBoolean(sParams.Split('~')[13]);
            string sBUnit = sParams.Split('~')[14];
            string sLocationID = sParams.Split('~')[15];

            List<LeaveLedgerReport> oLeaveLedgers = new List<LeaveLedgerReport>();
            List<LeaveLedgerReport> oLeaveHeads = new List<LeaveLedgerReport>();

            oLeaveLedgers = LeaveLedgerReport.GetsComp(sEmployeeIDs, sDepartmentIds, sDesignationIds, ACSID, nLeaveHeadID, nBalanceAmount, nBalanceType, bReportingPerson, dtFrom, dtTo, bDate, IsActive, IsInActive, sBUnit, sLocationID, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oLeaveHeads = oLeaveLedgers.GroupBy(x => x.LeaveHeadID).Select(x => x.FirstOrDefault()).ToList();

            List<AttendanceCalendarSession> oAttendanceCalendarSessions = new List<AttendanceCalendarSession>();
            string sSql = "";
            if (ACSID > 0)
            { sSql = "SELECT * FROM AttendanceCalendarSession WHERE ACSID=" + ACSID; }
            else { sSql = "SELECT TOP(1)* FROM AttendanceCalendarSession WHERE IsActive=1 ORDER BY ACSID DESC"; }
            oAttendanceCalendarSessions = AttendanceCalendarSession.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            int nStartCol = 2, nEndCol = 2;
            int rowIndex = 3;
            int nMaxCol = 0;

            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Leave report");
                sheet.Name = "Leave Report";

                sheet.Column(2).Width = 8; //SL
                sheet.Column(3).Width = 35; //Employee Name
                sheet.Column(4).Width = 15; //Code
                //sheet.Column(5).Width = 25; //Dept
                sheet.Column(5).Width = 25; //Designation

                int i = 0;
                for (i = 6; i <= (2 * oLeaveHeads.Count()) + 4; i++)
                {
                    sheet.Column(i).Width = 10; //Leave Short Name
                }
                nEndCol = i - 1;
                nMaxCol = i - 1;
                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, nStartCol, rowIndex, nEndCol]; cell.Merge = true; cell.Value = oCompany.Name; cell.Merge = true; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, nStartCol, rowIndex, nEndCol]; cell.Merge = true; cell.Value = "Leave Report " + (bDate ? ("@ " + dtFrom.ToString("dd MMM yyyy") + " - " + dtTo.ToString("dd MMM yyyy")) : "") + (oAttendanceCalendarSessions.Count > 0 ? (" @ Session-" + oAttendanceCalendarSessions[0].Session) : ""); cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02

                oLeaveLedgers = oLeaveLedgers.OrderBy(x => x.DepartmentName).ToList();
                List<LeaveLedgerReport> oTempLLs = new List<LeaveLedgerReport>();
                oLeaveLedgers.ForEach(x => oTempLLs.Add(x));

                while (oTempLLs.Count > 0)
                {
                    List<LeaveLedgerReport> oTempLeaveLedgers = new List<LeaveLedgerReport>();
                    List<LeaveLedgerReport> oLeaveLedgerDistinctEmps = new List<LeaveLedgerReport>();
                    oTempLeaveLedgers = oTempLLs.Where(x => x.DepartmentName == oTempLLs[0].DepartmentName).ToList();
                    oLeaveLedgerDistinctEmps = oTempLeaveLedgers.GroupBy(x => x.EmployeeID).Select(x => x.FirstOrDefault()).ToList();

                    nStartCol = 2;
                    cell = sheet.Cells[rowIndex, nStartCol, rowIndex, nEndCol]; cell.Merge = true; cell.Value = oTempLLs[0].DepartmentName; cell.Style.Font.Bold = true;
                    cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    rowIndex = rowIndex + 1;

                    nEndCol = 2;
                    cell = sheet.Cells[rowIndex, nStartCol++, rowIndex + 1, nEndCol++]; cell.Merge = true; cell.Value = "SL"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nStartCol++, rowIndex + 1, nEndCol++]; cell.Merge = true; cell.Value = "Employee Name"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nStartCol++, rowIndex + 1, nEndCol++]; cell.Merge = true; cell.Value = "Code"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //cell = sheet.Cells[rowIndex, nStartCol++, rowIndex + 1, nEndCol++]; cell.Merge = true; cell.Value = "Department"; cell.Style.Font.Bold = true;
                    //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nStartCol++, rowIndex + 1, nEndCol++]; cell.Merge = true; cell.Value = "Designation"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    nEndCol = nEndCol + oLeaveHeads.Count() - 1;
                    cell = sheet.Cells[rowIndex, nStartCol++, rowIndex, nEndCol++]; cell.Merge = true; cell.Value = "Leave Taken"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    nStartCol = nEndCol;
                    nEndCol = nEndCol + oLeaveHeads.Count() - 1;
                    cell = sheet.Cells[rowIndex, nStartCol++, rowIndex, nEndCol++]; cell.Merge = true; cell.Value = "Current Balance"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;

                    nStartCol = 6;
                    nEndCol = 6;
                    foreach (LeaveLedgerReport oItem in oLeaveHeads)
                    {
                        cell = sheet.Cells[rowIndex, nStartCol++, rowIndex, nEndCol++]; cell.Merge = true; cell.Value = oItem.LeaveShortName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    foreach (LeaveLedgerReport oItem in oLeaveHeads)
                    {
                        cell = sheet.Cells[rowIndex, nStartCol++, rowIndex, nEndCol++]; cell.Merge = true; cell.Value = oItem.LeaveShortName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                #endregion

                    #region Table Body
                    int nSL = 0;
                    rowIndex++;

                    foreach (LeaveLedgerReport oLeaveLedger in oLeaveLedgerDistinctEmps)
                    {
                        nStartCol = 2;
                        nEndCol = 2;
                        nSL++;

                        cell = sheet.Cells[rowIndex, nStartCol++, rowIndex, nEndCol++]; cell.Merge = true; cell.Value = nSL; cell.Style.Numberformat.Format = "0"; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, nStartCol++, rowIndex, nEndCol++]; cell.Merge = true; cell.Value = oLeaveLedger.EmployeeName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        int Code = 0;
                        if (int.TryParse(oLeaveLedger.EmployeeCode, out Code))
                        {
                            cell = sheet.Cells[rowIndex, nStartCol++, rowIndex, nEndCol++]; cell.Merge = true; cell.Value = Code;
                            cell.Style.Numberformat.Format = "0";
                        }
                        else
                        {
                            cell = sheet.Cells[rowIndex, nStartCol++, rowIndex, nEndCol++]; cell.Merge = true; cell.Value = oLeaveLedger.EmployeeCode;

                        }

                        cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //cell = sheet.Cells[rowIndex, nStartCol++, rowIndex, nEndCol++]; cell.Merge = true; cell.Value = oLeaveLedger.DepartmentName; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, nStartCol++, rowIndex, nEndCol++]; cell.Merge = true; cell.Value = oLeaveLedger.DesignationName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        foreach (LeaveLedgerReport oItem in oLeaveHeads)
                        {
                            int nLeavDays = 0;
                            if (oLeaveLedgers.Where(x => x.EmployeeID == oLeaveLedger.EmployeeID && x.LeaveHeadID == oItem.LeaveHeadID).Any())
                            {
                                nLeavDays = Convert.ToInt32(oLeaveLedgers.Where(x => x.EmployeeID == oLeaveLedger.EmployeeID && x.LeaveHeadID == oItem.LeaveHeadID).FirstOrDefault().Enjoyed);
                            }
                            cell = sheet.Cells[rowIndex, nStartCol++, rowIndex, nEndCol++]; cell.Merge = true; cell.Value = nLeavDays; cell.Style.Numberformat.Format = "0"; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        foreach (LeaveLedgerReport oItem in oLeaveHeads)
                        {
                            int nEnjoyedDays = 0;
                            if (oLeaveLedgers.Where(x => x.EmployeeID == oLeaveLedger.EmployeeID && x.LeaveHeadID == oItem.LeaveHeadID).Any())
                            {
                                nEnjoyedDays = Convert.ToInt32(oLeaveLedgers.Where(x => x.EmployeeID == oLeaveLedger.EmployeeID && x.LeaveHeadID == oItem.LeaveHeadID).FirstOrDefault().Balance);
                            }

                            cell = sheet.Cells[rowIndex, nStartCol++, rowIndex, nEndCol++]; cell.Merge = true; cell.Value = nEnjoyedDays; cell.Style.Numberformat.Format = "0"; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        rowIndex++;
                    }
                    oTempLLs.RemoveAll(x => x.DepartmentName == oTempLeaveLedgers[0].DepartmentName);
                }
                    #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=LeaveReport.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }


        #endregion

        #region UpdateOutSheet

        [HttpPost]
        public JsonResult UpdateOutSheet(string sEmpSalaryIDs)
        {
            bool bSuccess = false;
            try
            {
                string sSql = "";

                if (!string.IsNullOrEmpty(sEmpSalaryIDs))
                {
                    sSql = "Update EmployeeSalary SET IsOutSheet=~ISNULL(IsOutSheet,0) Where EmployeeSalaryID IN(" + sEmpSalaryIDs + ")";
                }
                _oEmployeeSalarys = new List<EmployeeSalary>();
                bSuccess = EmployeeSalary.UpdateOutSheet(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (bSuccess == false)
                {
                    throw new Exception("Failed to Outsheet!");
                }
            }
            catch (Exception ex)
            {
                //_oEmployeeSalarys = new List<EmployeeSalary>();
                //_oEmployeeSalary = new EmployeeSalary();
                //_oEmployeeSalary.ErrorMessage = ex.Message;
                //_oEmployeeSalarys.Add(_oEmployeeSalary);
                bSuccess = false;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(bSuccess);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region SalarySheet


        public string DateFormat(string sDate)
        {
            string banglaDate = "";
            string[] DateInEnglish = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
            string[] DateInBangla = { "জানু.", "ফেব্রু.", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "অগাস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভে.", "ডিসে." };

            string[] arr = sDate.Split(' ');

            banglaDate = this.NumberFormat(arr[0]);

            foreach (string st in arr)
            {
                int i = 0;
                while (i != 12)
                {
                    if (st == DateInEnglish[i])
                    {
                        banglaDate = banglaDate + " " + DateInBangla[i];
                        break;
                    }
                    i++;
                }
            }
            return banglaDate + " " + this.NumberFormat(arr[2]);
        }
        public void ReportHeaderExtraOTSheet(string unitName,string address, string deptName, string locName, List<TableHeader> table_header, ref ExcelWorksheet sheet, ref int nRowIndex, int nStartCol, int nEndCol, int nMonthID, int nYear)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;
            string[] months = new string[] { "জানুয়ারী", "ফেব্রুয়ারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "অগাস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর" };

            #region Report Header
            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = ""; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;


            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = unitName; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;

            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = address; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;

            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = "Floor: " + locName; cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;

            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nStartCol + 3];
            cell.Merge = true;
            cell.Value = "Section: " + deptName; cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, nStartCol + 4, nRowIndex, nEndCol - 4];
            cell.Merge = true;
            cell.Value = "অতিরিক্ত ওভার টাইম বিবরণী"; cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, nEndCol - 3, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = "মাস: " + months[nMonthID - 1] + " " + NumberFormat(nYear.ToString()); cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;


            ExcelTool.GenerateHeader(table_header, ref sheet, ref nRowIndex, nStartCol, nEndCol, 8);
            #endregion
        }


        public void ExcelExtraOTConf(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin,bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroubByDept, double ts, int nMOCID)
        {
            List<ExtraOTDynamic> oExtraOTDynamics = new List<ExtraOTDynamic>();
            oExtraOTDynamics = ExtraOTDynamic.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sBMMIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, nMOCID, ((User)Session[SessionInfo.CurrentUser]).UserID);


            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignatures = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            var oCompany = new Company();
            var results = Company.Gets("Select * from View_Company", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            if (results.Any())
                oCompany = results.First();



            List<TableHeader> table_header = new List<TableHeader>();
            //table_header.Add(new TableHeader { Header = "#", Width = 8f, IsRotate = false});
            table_header.Add(new TableHeader { Header = "নাম ও পদবী", Width = 11f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "কার্ড নং ও যোগদানের তারিখ", Width = 11f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "গ্রেড", Width = 11f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "ক্ষতি পুরন ছুটি", Width = 8f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "মোট ঊপঃ দিবস", Width = 8f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "মোট বেতন", Width = 11f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "মূল বেতন", Width = 11f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "অতিরিক্ত ঘণ্টা", Width = 8f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "ওভার টাইম রেট", Width = 8f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "নীট প্রাপ্য বেতন", Width = 11f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "সাক্ষর", Width = 25f, IsRotate = false });

            #region Export Excel
            int nRowIndex = 1, nStartCol = 1, nEndCol = 0;
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Extra OT Sheet");
                sheet.Name = "Extra OT Sheet";
                sheet.PrinterSettings.TopMargin = 0;
                sheet.PrinterSettings.BottomMargin = 0;
                sheet.PrinterSettings.LeftMargin = 0;
                sheet.PrinterSettings.RightMargin = 0;

                ExcelTool.SetColumnWidth(table_header, ref sheet, ref nStartCol, ref nEndCol);




                #region Body
                int nCount = 0;
                float cellHeight = 50f;

                var data = oExtraOTDynamics.GroupBy(x => new { x.BUName, x.LocName, x.DptName }, (key, grp) => new
                {
                    BUName = key.BUName,
                    LocName = key.LocName,
                    DptName = key.DptName,
                    Results = grp.ToList()
                });


                foreach (var oItem in data)
                {
                    foreach (var obj in oItem.Results)
                    {
                        nStartCol = 1;

                        if (nCount % 16 == 0)
                        {
                            ReportHeaderExtraOTSheet(oItem.BUName,obj.BUAddress, oItem.DptName, oItem.LocName, table_header, ref sheet, ref nRowIndex, nStartCol, nEndCol, nMonthID, nYear);
                        }
                        nCount++;
                        FillCell(sheet, nRowIndex, nStartCol++, ((obj.EmpNameInBangla == "") ? obj.Name : obj.EmpNameInBangla) + '\n' + ((obj.DsgNameInBangla == "") ? obj.DsgName : obj.DsgNameInBangla), false);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.Code + '\n' + DateFormat(obj.DateOfJoinInString), false);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.Grade, false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.LWP.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.P.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Gross, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Basics, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_HR, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_Rate, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_Amount, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, "", false);

                        sheet.Row(nRowIndex).Height = cellHeight;
                        sheet.Row(nRowIndex).Style.Font.Size = 8;


                        if (nCount % 16 == 0)
                        {

                            nRowIndex++;
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 1, 3, "");

                            nRowIndex++;
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 1, 3, "------------- ");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 4, 7, "-------------");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 8, 11, "-------------");
                            sheet.Row(nRowIndex).Height = 40;
                            sheet.Row(nRowIndex).Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;

                            nRowIndex++;
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 1, 3, "প্রস্তূতকারক ");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 4, 7, "প্রধান হিসাব রক্ষক ");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 8, 11, "পরিচালক / ব্যাবস্থাপনা পরিচালক ");

                            PageBreak(ref sheet, nRowIndex, nEndCol);
                        }
                        nRowIndex++;

                    }
                }
                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=ExtraOTSheet.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion



        }



        #endregion

        #region Final Settlement
        public JsonResult SearchWithCriteria(string dtDateFrom, string dtDateTo, int nSettlementType, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIDs, int nClearanceStatus, int nApproveStatus, double ts)
        {
            try
            {
                string sSql = "";
                sSql = "SELECT * FROM View_EmployeeSettlement WHERE  EffectDate BETWEEN '" + dtDateFrom + "' AND '" + dtDateTo + "' ";

                if (!string.IsNullOrEmpty(sBusinessUnitIds))
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE BusinessUnitID IN(" + sBusinessUnitIds + "))";
                }
                if (!string.IsNullOrEmpty(sLocationID))
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE LocationID IN(" + sLocationID + "))";
                }
                if (!string.IsNullOrEmpty(sDepartmentIds))
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE DepartmentID IN(" + sDepartmentIds + "))";
                }
                if (!string.IsNullOrEmpty(sDesignationIDs))
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeOfficial WHERE DesignationID IN(" + sDesignationIDs + "))";
                }

                if (nSettlementType > 0)
                {
                    sSql = sSql + " AND SettlementType=" + nSettlementType;
                }

                if (nApproveStatus == 1)
                {
                    sSql = sSql + " AND ApproveBy>0";
                }
                if (nApproveStatus == 2)
                {
                    sSql = sSql + " AND ApproveBy<=0";
                }
                if (nClearanceStatus > 0)
                {
                    sSql = sSql + " AND EmployeeSettlementID IN(SELECT EmployeeSettlementID  FROM EmployeeSettlementClearance WHERE CurrentStatus=" + nClearanceStatus + ")";
                }
                if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE DRPID IN( "
                                + " SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + "))";
                }
                sSql = sSql + " ORDER BY EmployeeCode";
                _oEmployeeSettlements = new List<EmployeeSettlement>();
                _oEmployeeSettlements = EmployeeSettlement.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (_oEmployeeSettlements.Count == 0)
                {
                    throw new Exception("Data Not Found !");
                }
            }
            catch (Exception ex)
            {
                _oEmployeeSettlements = new List<EmployeeSettlement>();
                _oEmployeeSettlement = new EmployeeSettlement();
                _oEmployeeSettlement.ErrorMessage = ex.Message;
                _oEmployeeSettlements.Add(_oEmployeeSettlement);
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oEmployeeSettlements);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region GetImage

        public System.Drawing.Image GetCompanyLogo(Company oCompany)
        {
            if (oCompany.OrganizationLogo != null)
            {
                string fileDirectory = Server.MapPath("~/Content/CompanyLogo.jpg");
                if (System.IO.File.Exists(fileDirectory))
                {
                    System.IO.File.Delete(fileDirectory);
                }

                MemoryStream m = new MemoryStream(oCompany.OrganizationLogo);
                System.Drawing.Image img = System.Drawing.Image.FromStream(m);
                img.Save(fileDirectory, ImageFormat.Jpeg);
                return img;
            }
            else
            {
                return null;
            }
        }

        public Image GetImage(byte[] Image)
        {
            if (Image != null)
            {
                string fileDirectory = Server.MapPath("~/Content/Image.jpg");
                if (System.IO.File.Exists(fileDirectory))
                {
                    System.IO.File.Delete(fileDirectory);
                }

                MemoryStream m = new MemoryStream(Image);
                System.Drawing.Image img = System.Drawing.Image.FromStream(m);
                img.Save(fileDirectory, ImageFormat.Jpeg);
                return img;

            }
            else
            {
                return null;
            }
        }

        #endregion GetImage

        #region Excel


        private void ExcelSalarySheet_F6_Header(List<string> ColumnHeader, List<string> ColEmpInfo, List<string> ColAttDetail, List<string> ColEarnings, List<string> ColBasics, List<string> ColDeductions, List<string> ColBankDetail, ref int nRowIndex, ref ExcelWorksheet sheet, ref ExcelRange cell, ref OfficeOpenXml.Style.Border border, List<SalaryHead> oSalaryHeads, List<LeaveHead> oLeaveHeads, List<EmployeeLeaveOnAttendance> oELOnAttendances, bool bWithPrecision, bool bHasOTAllowance, bool bHasParentDept)
        {
            int nStartCol = 2, nEndCol = 2;
            int nColumn = 2;
            sheet.Column(nColumn).Width = 5;

            foreach (string sColumn in ColEmpInfo)
            {
                sheet.Column(++nColumn).Width = 15;
            }

            if (oLeaveHeads.Count() > 0)
            {
                foreach (string sColumn in ColAttDetail)
                {
                    if (sColumn == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                    {
                        foreach (LeaveHead oItem in oLeaveHeads)
                        {
                            sheet.Column(++nColumn).Width = 7;
                        }
                    }
                    else
                    {
                        sheet.Column(++nColumn).Width = 12;
                    }
                }
            }
            else
            {
                foreach (string sColumn in ColAttDetail)
                {
                    sheet.Column(++nColumn).Width = 12;
                }
            }

            sheet.Column(++nColumn).Width = 15; // Gross Amount

            foreach (string sColumn in ColEarnings)
            {
                sheet.Column(++nColumn).Width = 12;
            }
            if (ColEarnings.Count() > 0)
            {
                sheet.Column(++nColumn).Width = 15;
                sheet.Column(++nColumn).Width = 15;
            }
            if (IsComp)
            {
                foreach (string sColumn in ColBasics)
                {
                    sheet.Column(++nColumn).Width = 12;
                }
            }
            foreach (string sColumn in ColDeductions)
            {
                sheet.Column(++nColumn).Width = 12;
            }
            if (ColDeductions.Count() > 0)
            {
                sheet.Column(++nColumn).Width = 16;
            }
            sheet.Column(++nColumn).Width = 15;
            foreach (string sColumn in ColBankDetail)
            {
                sheet.Column(++nColumn).Width = 16;
            }
            sheet.Column(++nColumn).Width = 15;
            nEndCol = nColumn;


            #region Column Header

            nStartCol = 2; nEndCol = 2;
            foreach (string sColumn in ColumnHeader)
            {
                if (sColumn == "SL#")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "SL"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                if (sColumn == "Employee Information")
                {
                    foreach (string sItem in ColEmpInfo)
                    {
                        string sColName = "";
                        sColName = sItem;
                        if (bHasParentDept && sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.Department.ToString())) { sColName = "Sub Department"; }
                        if (bHasParentDept && sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.ParentDepartment.ToString())) { sColName = "Department"; }
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColName; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }
                else if (sColumn == "Att. Detail")
                {
                    foreach (string sItem in ColAttDetail)
                    {
                        if (sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                        {
                            //nEndCol += oLeaveHeads.Count() - 1;
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            nStartCol += oLeaveHeads.Count() - 1;
                        }
                        else
                        {
                            string sColumnvalue = "";
                            sColumnvalue = sItem;
                            if (sColumnvalue == "Employee Working Days") { sColumnvalue = "EWD"; }

                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumnvalue; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                    }
                }
                else if (sColumn == "Gross Salary")
                {
                    string sColumnvalue = "";
                    sColumnvalue = sColumn;
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumnvalue; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }

                else if (sColumn == "Earnings")
                {
                    //nStartCol++; nEndCol++;
                    foreach (string sItem in ColEarnings)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    //nStartCol++; nEndCol++;
                }

                else if (sColumn == "Gross Earnings")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "Gross Earnings"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Gross Earnings On Att.")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "Gross Earnings On Att."; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                else if (sColumn == "Basic Breakdown")
                {
                    //nStartCol++; nEndCol++;
                    if (IsComp)
                    {
                        foreach (string sItem in ColBasics)
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }
                }
                else if (sColumn == "Deduction")
                {
                    //nStartCol++; nEndCol++;
                    foreach (string sItem in ColDeductions)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }

                else if (sColumn == "Gross Deductions")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Net Amount")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Bank")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Cash")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Account No")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Bank Name")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Signature")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

            }
            //nRowIndex += nAddSpan;
            //if (nAddSpan > 0) // With leave Heads
            //{
            nStartCol = 3 + ColEmpInfo.Count();
            foreach (string sItem in ColAttDetail)
            {
                if (sItem != Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                {
                    nStartCol++;
                }
                else
                {
                    break;
                }
            }
            nEndCol = nStartCol;

            foreach (LeaveHead oItem in oLeaveHeads)
            {
                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.ShortName; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            }
            nRowIndex++;
            //}
            //else
            //{
            //    nRowIndex++;
            //}

            #endregion
        }

        private void ExcelSalarySheet_F6_DataManipulation(List<SalarySheetProperty> oSalarySheetPropertys, List<string> ColumnHeader, List<string> ColEmpInfo, List<string> ColAttDetail, List<string> ColEarnings, List<string> ColBasics, List<string> ColDeductions, List<string> ColBankDetail, ref int nRowIndex, ref ExcelWorksheet sheet, ref ExcelRange cell, ref OfficeOpenXml.Style.Border border, List<SalaryHead> oSalaryHeads, List<EmployeeSalary> oResults, List<EmployeeSalaryDetail> oEmployeeSalaryDetails, List<LeaveHead> oLeaveHeads, List<EmployeeLeaveOnAttendance> oELOnAttendances, bool bWithPrecision, bool bHasOTAllowance, bool bHasParentDept)
        {
            #region Date Manipulation

            var EmpInfoPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 1).ToList();
            var AttDetailPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty != EnumSalarySheetFormatProperty.OTAllowance).ToList();
            var oEarnings = oSalaryHeads.Where(x => (x.SalaryHeadType == EnumSalaryHeadType.Addition) || (x.SalaryHeadType == EnumSalaryHeadType.Reimbursement)).ToList();
            var oDeductions = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Deduction).ToList();
            var oBasics = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Basic).ToList();
            var IncrementPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 3).ToList();
            var BankPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 4).ToList();

            if (oResults.Count() > 0)
            {
                int nCount = 0;
                int Code = 0;
                var oELOnAtts = new List<EmployeeLeaveOnAttendance>();
                foreach (EmployeeSalary oItem in oResults)
                {

                    oELOnAtts = oELOnAttendances.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();

                    Code = 0;
                    int nStartCol = 2; int nEndCol = 2;
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (++nCount); cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = "0";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    /*---- Employee Info -----*/
                    if (ColEmpInfo.Count() > 0)
                    {
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeCode).Any())
                        {
                            if (int.TryParse(oItem.EmployeeCode, out Code))
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = Code; cell.Style.Font.Bold = false;
                                cell.Style.Numberformat.Format = "0";
                            }
                            else
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;

                            }
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeName).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ParentDepartment).Any())
                        {

                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.ParentDepartmentName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Department).Any())
                        {

                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Designation).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.JoiningDate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ConfirmationDate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.DateOfConfirmationInString; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeType).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmployeeTypeName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Gender).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.Gender; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    if (ColAttDetail.Count() > 0)
                    {         /*---- Att. Detail -----*/
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.TotalDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalWorkingDay + oItem.TotalDayOff + oItem.TotalHoliday > 0) ? (oItem.TotalWorkingDay + oItem.TotalDayOff + oItem.TotalHoliday) : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.PresentDay).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalPresent > 0) ? oItem.TotalPresent : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.DayOffHolidays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = ((oItem.TotalDayOff + +oItem.TotalHoliday) > 0) ? (oItem.TotalDayOff + +oItem.TotalHoliday) : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.AbsentDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalAbsent > 0) ? oItem.TotalAbsent : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveHead).Any())
                        {
                            foreach (LeaveHead oLeaveHead in oLeaveHeads)
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).Any()) ? oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).FirstOrDefault().LeaveDays : 0; cell.Style.Font.Bold = false;
                                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalPLeave + oItem.TotalUpLeave > 0) ? (oItem.TotalPLeave + oItem.TotalUpLeave) : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeWorkingDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.PD > 0) ? oItem.PD : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EarlyOutDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalEarlyLeaving > 0) ? oItem.TotalEarlyLeaving : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EarlyOutMins).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.EarlyLeavingMinute > 0) ? oItem.EarlyLeavingMinute : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LateDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalLate > 0) ? oItem.TotalLate : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LateHrs).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.LateInMin > 0) ? Global.MinInHourMin(oItem.LateInMin) : ""; cell.Style.Font.Bold = false;

                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTHours).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.OTHour > 0) ? oItem.OTHour : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTRate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.OTRatePerHour > 0) ? oItem.OTRatePerHour : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }
                    /*--- Gross Salary ---- */
                    //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";

                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.GrossAmount > 0) ? Math.Round(oItem.GrossAmount) : 0; ; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    /*--- Earnings ---- */

                    double nAmount = 0, nAddAmount = 0;

                    foreach (SalaryHead oSalaryHead in oEarnings.OrderBy(x => x.SalaryHeadType))
                    {
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;

                        //nAmount = (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Basic) ? nAmount : Math.Round(nAmount);
                        nAmount = Math.Round(nAmount);

                        nAddAmount += (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Addition || oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Reimbursement) ? nAmount : 0;

                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nAmount > 0) ? nAmount : 0; cell.Style.Font.Bold = false;
                        //cell.Style.Numberformat.Format = (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Basic) ? "#,##0.00;(#,##0.00)" : (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    double nOTAllowance = Math.Round(oItem.OTHour * oItem.OTRatePerHour);
                    if (bHasOTAllowance)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nOTAllowance > 0) ? Math.Round(nOTAllowance) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    if (oEarnings.Any())
                    {
                        double nEarnings = oItem.GrossAmount + ((bHasOTAllowance) ? nOTAllowance : 0) + nAddAmount;
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nEarnings > 0) ? Math.Round(nEarnings) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nOnedayGross = 0;
                        if ((oItem.TotalWorkingDay + oItem.TotalDayOff + oItem.TotalHoliday) > 0)
                        {
                            double dMonthDays = (oItem.EndDate - oItem.StartDate).TotalDays + 1;
                            //nOnedayGross = oItem.GrossAmount / (oItem.TotalWorkingDay + oItem.TotalDayOff + oItem.TotalHoliday);
                            nOnedayGross = oItem.GrossAmount / dMonthDays;

                        }
                        double nEarningsOnAtt = Math.Round(oItem.PD * nOnedayGross + ((bHasOTAllowance) ? nOTAllowance : 0) + nAddAmount);

                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nEarningsOnAtt > 0) ? Math.Round(nEarningsOnAtt) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    //Basics
                    foreach (SalaryHead oSalaryHead in oBasics)
                    {
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nAmount > 0) ? Math.Round(nAmount) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    /*---deduction--*/
                    double nDeductionAmount = 0;

                    foreach (SalaryHead oSalaryHead in oDeductions)
                    {
                        //double nDedAmount = Math.Round(GetAmount(oSalaryHead.SalaryHeadID, oItem.EmployeeSalaryID));
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;
                        nDeductionAmount += nAmount;
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nAmount > 0) ? Math.Round(nAmount) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    if (oDeductions.Count() > 0)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nDeductionAmount > 0) ? Math.Round(nDeductionAmount) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    /*---Net Amount--*/

                    double nNetAmount = oItem.NetAmount + ((bHasOTAllowance) ? 0 : -nOTAllowance);
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nNetAmount > 0) ? Math.Round(nNetAmount) : 0; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    if (ColBankDetail.Count() > 0)
                    {
                        List<EmployeeBankAccount> oBanks = new List<EmployeeBankAccount>();
                        oBanks = _oEmployeeBankAccounts.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.BankAmount).Any())
                        {
                            var sValue = (oBanks.Count > 0 ? oItem.NetAmount : 0);
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.CashAmount).Any())
                        {
                            var sValue = (oBanks.Count <= 0 ? oItem.NetAmount : 0);
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.AccountNo).Any())
                        {
                            var sValue = (oBanks.Count > 0 ? oBanks[0].AccountNo : "-");
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.BankName).Any())
                        {
                            var sValue = (oBanks.Count > 0 ? oBanks[0].BankBranchName : "-");
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    /*---Signature--*/
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "--"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    ++nRowIndex;
                }
            }
            #endregion
        }

        public void ExportIntoPaySlip_Comp(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroubByDept, string sGroupIDs, string sBlockIDs, double ts, int PC)
        {
            EmployeeSalary oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, bIsOutSheet, nStartSalaryRange, nEndSalaryRange, IsCompliance,sGroupIDs, sBlockIDs);
            if (IsCompliance)// if this report is for compliance, then map comp OT with the actual OT . there is no condition for comp in report .
            {
                oEmployeeSalary.EmployeeSalarys.ForEach(x =>
                {
                    x.OTHour = x.CompOTHour;
                    x.OTRatePerHour = Math.Round(x.CompOTRatePerHour, 2);
                    x.NetAmount = Math.Round(x.CompNetAmount, 2);
                });
            }

            var oCompany = new Company();
            oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            oEmployeeSalary.Company = oCompany;

            this.PrintPaySlipXL(oEmployeeSalary, PC);
        }

        private void PrintPaySlipXL(EmployeeSalary oEmployeeSalary, int nPrintCount)
        {
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;
            int nRowIndex = 2, nEndCol = 17;
            double nRowHeight = 12;

            Company oCompany = new Company();
            List<SalaryHead> oSalaryHeads = new List<SalaryHead>();
            List<EmployeeSalary> oEmployeeSalarys = new List<EmployeeSalary>();
            List<EmployeeSalaryDetail> oEmployeeSalaryDetails = new List<EmployeeSalaryDetail>();

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            oCompany = oEmployeeSalary.Company;
            oSalaryHeads = oEmployeeSalary.SalaryHeads;
            oEmployeeSalarys = oEmployeeSalary.EmployeeSalarys.OrderBy(x => x.BusinessUnitID).ThenBy(x => x.LocationID).ThenBy(x => x.DepartmentID).ThenBy(x => x.EmployeeCode).ToList();
            oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalaryDetails;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Pay Slip");
                sheet.PrinterSettings.TopMargin = 0.2M;
                sheet.PrinterSettings.LeftMargin = 0.2M;
                sheet.PrinterSettings.BottomMargin = 0.2M;
                sheet.PrinterSettings.RightMargin = 0.2M;
                sheet.PrinterSettings.Orientation = eOrientation.Portrait;
                sheet.PrinterSettings.PaperSize = ePaperSize.A4;
                sheet.Name = "Pay Slip";

                #region Column Declare
                sheet.Column(1).Width = 3;//Extra
                sheet.Column(2).Width = 2; //Blank
                sheet.Column(3).Width = 10;//Caption
                sheet.Column(4).Width = 2; //:
                sheet.Column(5).Width = 10;//Basic Salary
                sheet.Column(6).Width = 10;//Other Salary
                sheet.Column(7).Width = 10;//Net Salary
                sheet.Column(8).Width = 2;//Blank

                sheet.Column(9).Width = 4; //Middle Blank

                sheet.Column(10).Width = 2; //Blank
                sheet.Column(11).Width = 10;//Caption
                sheet.Column(12).Width = 2; //:
                sheet.Column(13).Width = 10;//Basic Salary
                sheet.Column(14).Width = 10;//Other Salary
                sheet.Column(15).Width = 10;//Net Salary
                sheet.Column(16).Width = 2;//Blank
                sheet.Column(17).Width = 3;//Extra
                #endregion

                if (oEmployeeSalarys != null)
                {
                    int nLeftSideRowIndex = 0, nRightSideRowIndex = 0, nTempPrintCount = 0;
                    for (int i = 0; i < oEmployeeSalarys.Count; i = i + 2)
                    {
                        nTempPrintCount = nTempPrintCount + 2;
                        if (i <= (oEmployeeSalarys.Count - 1))
                        {
                            nLeftSideRowIndex = this.FillSalaraySlip(sheet, nRowIndex, oEmployeeSalarys[i], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 2, nRowHeight, "", oBusinessUnits);                        }

                        if ((i + 1) <= (oEmployeeSalarys.Count - 1))
                        {
                            nRightSideRowIndex = this.FillSalaraySlip(sheet, nRowIndex, oEmployeeSalarys[i + 1], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 10, nRowHeight, "", oBusinessUnits);
                        }

                        nRowIndex = nLeftSideRowIndex;
                        if (nRightSideRowIndex > nLeftSideRowIndex)
                        {
                            nRowIndex = nRightSideRowIndex;
                        }

                        #region Blank
                        sheet.Row(nRowIndex).Height = 20;
                        sheet.Cells[nRowIndex, 2, nRowIndex, 16].Merge = true;
                        cell = sheet.Cells[nRowIndex, 2]; cell.Value = "";
                        cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.None;
                        if (nTempPrintCount >= nPrintCount)
                        {
                            sheet.Row(nRowIndex).PageBreak = true;
                            nTempPrintCount = 0;
                        }
                        nRowIndex = nRowIndex + 1;
                        #endregion
                    }
                }
                cell = sheet.Cells[1, 1, nRowIndex, nEndCol];
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=PaySlip.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        private int FillSalaraySlip(OfficeOpenXml.ExcelWorksheet sheet, int nRowIndex, EmployeeSalary oEmployeeSalary, List<EmployeeSalaryDetail> oEmployeeSalaryDetails, List<SalaryHead> oSalaryHeads, Company oCompany, int nColumnIndex, double nRowHeight, string OCEC, List<BusinessUnit> oBusinessUnits)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            #region Blank with Top/Left/Right Border
            sheet.Row(nRowIndex).Height = 5;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Company Name
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = oBusinessUnits.Count == 1 ? ((oBusinessUnits[0].NameInBangla != "") ? oBusinessUnits[0].NameInBangla : oBusinessUnits[0].Name) : ((oCompany.NameInBangla != "") ? oCompany.NameInBangla : oCompany.Name); //(oCompany.NameInBangla != "") ? oCompany.NameInBangla : oCompany.Name;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region বেতন প্রদান রশিদ
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "বেতন প্রদান রশিদ";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Salary Date
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = oEmployeeSalary.StartDateInString + "-" + oEmployeeSalary.EndDateInString;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region OfficeCopyEmployeeCopy
            if (!string.IsNullOrEmpty(OCEC))
            {
                sheet.Row(nRowIndex).Height = nRowHeight;
                sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
                cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = (OCEC == "OC" ? "Office Copy" : "Employee Copy");
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ইউনিট
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ইউনিট";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.LocationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কার্ড নং
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কার্ড নং";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeCode;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region নাম
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "নাম";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region পদবী
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "পদবী";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DesignationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region সেকশন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সেকশন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DepartmentName + "      গ্রেড:" + oEmployeeSalary.EmployeeTypeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কর্মদিবস
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কর্মদিবস";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = this.NumberFormat(oEmployeeSalary.TotalWorkingDay.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            TimeSpan diff = oEmployeeSalary.EndDate - oEmployeeSalary.StartDate;
            int nDays = diff.Days + 1;
            int nAcDays = diff.Days + 1;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট দিন : " + this.NumberFormat(nDays.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region উপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "উপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = this.NumberFormat(oEmployeeSalary.TotalPresent.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট বন্ধের দিন : " + this.NumberFormat(oEmployeeSalary.TotalDayOff.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ছুটি
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ছুটি";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = this.NumberFormat((oEmployeeSalary.TotalUpLeave + oEmployeeSalary.TotalPLeave).ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট ছুটির দিন : " + this.NumberFormat(oEmployeeSalary.TotalHoliday.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region অনুপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "অনুপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.TotalAbsent.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region মোট বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "মোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.GrossAmount > 0 ? this.GetAmountInStr(oEmployeeSalary.GrossAmount, true, false) : "-");
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            double nAmount = 0; string sHeadName = "";
            List<EmployeeSalaryDetail> oTempEmployeeSalaryDetails = oEmployeeSalaryDetails.Where(x => x.EmployeeSalaryID == oEmployeeSalary.EmployeeSalaryID).ToList();

            #region Salary Head
            foreach (SalaryHead oItem in oSalaryHeads)
            {
                nAmount = (oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).Count() > 0) ? oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).FirstOrDefault().Amount : 0;
                if (!string.Equals(@oItem.Name.ToLower(), "n/a") && !string.Equals(@oItem.Name.Trim(), ""))
                {
                    sHeadName = ((!string.Equals(@oItem.NameInBangla.ToLower(), "n/a") && !string.Equals(@oItem.NameInBangla.Trim(), "")) ? @oItem.NameInBangla : @oItem.Name);
                }

                sheet.Row(nRowIndex).Height = nRowHeight;
                cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = sHeadName;
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                if (oItem.SalaryHeadType == EnumSalaryHeadType.Basic || oItem.SalaryHeadType == EnumSalaryHeadType.Basic)
                {
                    sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }
                else
                {
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = "";
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                    sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region সর্বমোট বেতন
            nAmount = oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Basic).Sum(x => x.Amount) +
                           oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Addition).Sum(x => x.Amount) -
                           oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Deduction).Sum(x => x.Amount);

            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সর্বমোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম হারsheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম হার";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.OTRatePerHour.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম ঘন্টাsheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম ঘন্টা";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            Double OTmin = oEmployeeSalary.OTHour * 60;
            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = Global.MinInHourMin(Convert.ToInt32(OTmin));
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম চার্জ
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম চার্জ";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(oEmployeeSalary.OverTimeAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region প্রদেয় বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "প্রদেয় বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(oEmployeeSalary.OverTimeAmount + nAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 20;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Under Line
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region স্বাক্ষর
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "শ্রমিকের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "কর্তৃপক্ষের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 5;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            return nRowIndex;
        }

        public string NumberFormatWithBijoy(string sNum)
        {
            //char[] NumbersInBangla = { '০', '১', '২', '৩', '৪', '৫', '৬', '৭', '৮', '৯' };
            char[] NumbersInBangla = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }; //Bijoy Bangla Font
            char[] NumbersInEnglish = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };

            char[] arr = sNum.ToCharArray();

            foreach (char ch in arr)
            {
                int i = 0;
                while (i != 10)
                {
                    if (ch == NumbersInEnglish[i])
                    {
                        sNum = sNum.Replace(ch, NumbersInBangla[i]);
                        break;
                    }
                    i++;
                }
            }
            return sNum;
        }

        public string NumberFormat(string sNum)
        {
            char[] NumbersInBangla = { '০', '১', '২', '৩', '৪', '৫', '৬', '৭', '৮', '৯' };
            char[] NumbersInEnglish = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };

            char[] arr = sNum.ToCharArray();

            foreach (char ch in arr)
            {
                int i = 0;
                while (i != 10)
                {
                    if (ch == NumbersInEnglish[i])
                    {
                        sNum = sNum.Replace(ch, NumbersInBangla[i]);
                        break;
                    }
                    i++;
                }
            }
            return sNum;
        }

        private string GetAmountInStr(double amount, bool bIsround, bool bWithPrecision)
        {
            amount = (bIsround) ? Math.Round(amount) : amount;
            return (bWithPrecision) ? Global.MillionFormat(amount) : Global.MillionFormat(amount).Split('.')[0];
        }

        #endregion

        #region SalarySummary
        public ActionResult PrintSalarySummary(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, string sGroupIDs, string sBlockIDs, bool bRound, double ts)
        {
            List<SalarySummary_F2> oSalarySummerys = new List<SalarySummary_F2>();
            List<SalarySummaryDetail_F2> oSalarySummaryDetail_F2s = new List<SalarySummaryDetail_F2>();

            oSalarySummerys = SalarySummary_F2.GetsSalarySummaryComp(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, bIsOutSheet,sGroupIDs, sBlockIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oSalarySummaryDetail_F2s = SalarySummaryDetail_F2.GetsSalarySummaryDetailComp(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, bIsOutSheet,sGroupIDs, sBlockIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            oSalarySummerys.ForEach(x =>
            {
                x.OTHr = x.CompOTHr;
                x.GrossSalary = Math.Round(x.CompGrossSalary, 2);
                x.OTAmount = Math.Round(x.CompOTAmount, 2);
                x.NetPay = Math.Round(x.CompNetPay, 2);
                x.TotalPayable = Math.Round(x.CompTotalPayable, 2);
            });
            oSalarySummaryDetail_F2s.ForEach(x =>
            {
                x.Amount = x.CompAmount;
            });

            sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            rptSalarySummary_F2 oReport = new rptSalarySummary_F2();
            byte[] abytes = oReport.PrepareReport(oSalarySummerys, oSalarySummaryDetail_F2s, oSalarySheetSignature, oSalarySheetPropertys, bRound);
            return File(abytes, "application/pdf");
        }

        public void ExcelSalarySummery(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, string sGroupIDs, string sBlockIDs, double ts)
        {


            oSalarySummerys = SalarySummary_F2.GetsSalarySummaryComp(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, bIsOutSheet, sGroupIDs, sBlockIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oSalarySummaryDetail_F2s = SalarySummaryDetail_F2.GetsSalarySummaryDetailComp(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, bIsOutSheet, sGroupIDs, sBlockIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            oSalarySummerys.ForEach(x =>
            {
                x.OTHr = x.CompOTHr;
                x.GrossSalary = Math.Round(x.CompGrossSalary, 2);
                x.OTAmount = Math.Round(x.CompOTAmount, 2);
                x.NetPay = Math.Round(x.CompNetPay, 2);
                x.TotalPayable = Math.Round(x.CompTotalPayable, 2);
            });
            oSalarySummaryDetail_F2s.ForEach(x =>
            {
                x.Amount = x.CompAmount;
            });


            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            int _nColumns = 0;

            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Salary Summery");
                sheet.Name = "Salary Summery";

                _oSalarySummary_F2s = oSalarySummerys;
                _oSalarySummaryDetail_F2s = oSalarySummaryDetail_F2s;

                _oAdditionSalaryHeads = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Addition).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).ToList();
                _oDeductionSalaryHeads = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Deduction).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).ToList();
                _oSalarySummary_F2s_Location = oSalarySummerys.GroupBy(x => x.LocationID).Select(x => x.First()).ToList();

                _nColumns = 7 + _oAdditionSalaryHeads.Count + _oDeductionSalaryHeads.Count + 4;


                sheet.Column(1).Width = 15;
                sheet.Column(2).Width = 20;
                sheet.Column(3).Width = 15;
                sheet.Column(4).Width = 15;
                sheet.Column(5).Width = 15;
                sheet.Column(6).Width = 15;
                sheet.Column(7).Width = 15;
                int i = 0;
                for (i = 8; i < _nColumns - 4; i++)
                {
                    sheet.Column(i).Width = 20;
                }
                sheet.Column(i++).Width = 15;
                sheet.Column(i++).Width = 15;
                sheet.Column(i++).Width = 20;
                sheet.Column(i++).Width = 20;
                sheet.Column(i++).Width = 20;

                nMaxColumn = i;
                int midIndex = i / 2;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, midIndex]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, midIndex]; cell.Value = "Salary Summery"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                rowIndex = rowIndex + 1;
                cell = sheet.Cells[rowIndex, midIndex]; cell.Value = "From " + _oSalarySummary_F2s[0].StartDateInString + " To " + _oSalarySummary_F2s[0].EndDateInString; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 2;

                #endregion

                _oSalarySummary_F2s = _oSalarySummary_F2s.OrderBy(x => x.DepartmentName).ToList();
                _oSalarySummary_F2s.ForEach(x => _oTempSalarySummary_F2s.Add(x));

                colIndex = 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Unit-" + _oSalarySummary_F2s[0].LocationName; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex = rowIndex + 1;
                colIndex = 1;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Department"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "ManPower"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OTHr"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Salary/Wages"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Payable"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total Payable"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                foreach (SalarySummaryDetail_F2 oItem in _oAdditionSalaryHeads)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.SalaryHeadName; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }
                foreach (SalarySummaryDetail_F2 oItem in _oDeductionSalaryHeads)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.SalaryHeadName; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Stamp"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Net Payable"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Bank"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Cash"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex = rowIndex + 1;
                colIndex = 1;
                int nCount = 0;
                int _nRowCount = 0;
                while (_oSalarySummary_F2s.Count > 0)
                {
                    List<SalarySummary_F2> oTempSS = new List<SalarySummary_F2>();
                    oTempSS = _oSalarySummary_F2s.Where(x => x.BusinessUnitID == _oSalarySummary_F2s[0].BusinessUnitID && x.LocationID == _oSalarySummary_F2s[0].LocationID).ToList();
                    //PrintSalarySummary_F2_Ex(oTempSS, rowIndex);

                    foreach (SalarySummary_F2 oItem in oTempSS)
                    {
                        colIndex = 1;
                        _nRowCount++;
                        nCount++;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nCount;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DepartmentName; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NoOfEmp;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTHr;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.GrossSalary; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.TotalPayable; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        List<SalarySummaryDetail_F2> oTempDetails = new List<SalarySummaryDetail_F2>();

                        foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                        {
                            oTempDetails = new List<SalarySummaryDetail_F2>();
                            oTempDetails = _oSalarySummaryDetail_F2s.Where(x => x.BusinessUnitID == oItem.BusinessUnitID && x.LocationID == oItem.LocationID && x.DepartmentID == oItem.DepartmentID && x.SalaryHeadID == oDetailAddItem.SalaryHeadID).ToList();

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oTempDetails.Count > 0 ? oTempDetails[0].Amount : 0; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                        {
                            oTempDetails = new List<SalarySummaryDetail_F2>();
                            oTempDetails = _oSalarySummaryDetail_F2s.Where(x => x.BusinessUnitID == oItem.BusinessUnitID && x.LocationID == oItem.LocationID && x.DepartmentID == oItem.DepartmentID && x.SalaryHeadID == oDeductionAddItem.SalaryHeadID).ToList();

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oTempDetails.Count > 0 ? oTempDetails[0].Amount : 0; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Stamp > 0 ? oItem.Stamp : 0; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NetPay > 0 ? oItem.NetPay : 0; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.BankPay > 0 ? oItem.BankPay : 0; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CashPay > 0 ? oItem.CashPay : 0; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex = rowIndex + 1;

                    }
                    if (_oTempSalarySummary_F2s.Count != _nRowCount)
                    {
                        //this.PrintGT(oTempSS, "TOTAL", ref sheet, rowIndex);
                        cell = sheet.Cells[rowIndex, 1, rowIndex, 2]; cell.Style.Font.Bold = true; cell.Value = "TOTAL"; cell.Merge = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex = 3;

                        double TotalNoOfEmp = oTempSS.Sum(x => x.NoOfEmp);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = TotalNoOfEmp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double TotalOTHour = oTempSS.Sum(x => x.OTHr);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = TotalOTHour; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalGrossSalary = oTempSS.Sum(x => x.GrossSalary);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalGrossSalary; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalOTAmount = oTempSS.Sum(x => x.OTAmount);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalOTAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalPayable = oTempSS.Sum(x => x.TotalPayable);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalPayable; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nHAmount = 0;
                        foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                        {
                            nHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.Amount);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nHAmount; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                        {
                            nHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.Amount);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nHAmount; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        double nTotalStamp = oTempSS.Sum(x => x.Stamp);

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalStamp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalNetPay = oTempSS.Sum(x => x.NetPay);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalNetPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalBankPay = oTempSS.Sum(x => x.BankPay);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalBankPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalCashPay = oTempSS.Sum(x => x.CashPay);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalCashPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex = rowIndex + 1;
                    }
                    else
                    {
                        if (_oSalarySummary_F2s_Location.Count > 1)
                        {
                            //this.PrintGT(oTempSS, "TOTAL", ref sheet, rowIndex); 
                            cell = sheet.Cells[rowIndex, 1, rowIndex, 2]; cell.Value = "TOTAL"; cell.Style.Font.Bold = true; cell.Merge = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            colIndex = 3;

                            double TotalNoOfEmp = oTempSS.Sum(x => x.NoOfEmp);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = TotalNoOfEmp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double TotalOTHour = oTempSS.Sum(x => x.OTHr);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = TotalOTHour; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalGrossSalary = oTempSS.Sum(x => x.GrossSalary);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalGrossSalary; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalOTAmount = oTempSS.Sum(x => x.OTAmount);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalOTAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalPayable = oTempSS.Sum(x => x.TotalPayable);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalPayable; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nHAmount = 0;
                            foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                            {
                                nHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.Amount);

                                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nHAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            }
                            foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                            {
                                nHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.Amount);

                                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nHAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            }

                            double nTotalStamp = oTempSS.Sum(x => x.Stamp);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalStamp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalNetPay = oTempSS.Sum(x => x.NetPay);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalNetPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalBankPay = oTempSS.Sum(x => x.BankPay);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalBankPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalCashPay = oTempSS.Sum(x => x.CashPay);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalCashPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            rowIndex = rowIndex + 1;
                        }
                        //this.PrintGT(_oTempSalarySummary_F2s, "GRAND TOTAL", ref sheet, rowIndex);

                        cell = sheet.Cells[rowIndex, 1, rowIndex, 2]; cell.Style.Font.Bold = true; cell.Value = "GRAND TOTAL"; cell.Merge = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex = 3;
                        double nTotalNoOfEmp = _oTempSalarySummary_F2s.Sum(x => x.NoOfEmp);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalNoOfEmp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalOTHour = _oTempSalarySummary_F2s.Sum(x => x.OTHr);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalOTHour; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalGrossSalary = _oTempSalarySummary_F2s.Sum(x => x.GrossSalary);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalGrossSalary; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalOTAmount = _oTempSalarySummary_F2s.Sum(x => x.OTAmount);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalOTAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalPayable = _oTempSalarySummary_F2s.Sum(x => x.TotalPayable);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalPayable; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnHAmount = 0;
                        foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                        {
                            nnHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID && x.BusinessUnitID == _oTempSalarySummary_F2s[0].BusinessUnitID && x.LocationID == _oTempSalarySummary_F2s[0].LocationID).Sum(x => x.Amount);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnHAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                        {
                            nnHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID && x.BusinessUnitID == _oTempSalarySummary_F2s[0].BusinessUnitID && x.LocationID == _oTempSalarySummary_F2s[0].LocationID).Sum(x => x.Amount);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnHAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        double nnTotalStamp = _oTempSalarySummary_F2s.Sum(x => x.Stamp);

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalStamp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalNetPay = _oTempSalarySummary_F2s.Sum(x => x.NetPay);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalNetPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalBankPay = _oTempSalarySummary_F2s.Sum(x => x.BankPay);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalBankPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalCashPay = _oTempSalarySummary_F2s.Sum(x => x.CashPay);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalCashPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex = rowIndex + 1;
                    }

                    _oSalarySummary_F2s.RemoveAll(x => x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID);

                }




                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=Salary_Summery.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }

        }

        #endregion

        #region SetlementSummary
        public void EmpSettlementSummary_XL(string sParam)
        {
            DateTime dtStartDate = Convert.ToDateTime(sParam.Split('~')[0]);
            DateTime dtEndDate = Convert.ToDateTime(sParam.Split('~')[1]);
            Int16 nSettlementType = Convert.ToInt16(sParam.Split('~')[2]);
            string sDepartmentIds = sParam.Split('~')[3];
            string sDesignationIds = sParam.Split('~')[4];
            Int16 nClearanceStatus = Convert.ToInt16(sParam.Split('~')[5]);
            Int16 nApproveStatus = Convert.ToInt16(sParam.Split('~')[6]);

            string sBUIDs = sParam.Split('~')[7];
            string sLocationIds = sParam.Split('~')[8];
            string sEmpIDs = sParam.Split('~')[9];

            List<EmployeeSettlement> oEmployeeSettlements = new List<EmployeeSettlement>();
            List<EmployeeSettlementSalary> oEmployeeSettlementSalarys = new List<EmployeeSettlementSalary>();
            List<EmployeeSettlementSalaryDetail> oEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
            string sSql = "";

            sSql = "SELECT * FROM View_EmployeeSettlement WHERE EmployeeSettlementID<>0 AND EffectDate BETWEEN '" + dtStartDate.ToString("dd MMM yyyy") + "' AND '" + dtEndDate.ToString("dd MMM yyyy") + "' ";
            if (!string.IsNullOrEmpty(sBUIDs))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE BusinessUnitID IN(" + sBUIDs + "))";
            }
            if (!string.IsNullOrEmpty(sLocationIds))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE LocationID IN(" + sLocationIds + "))";
            }
            if (!string.IsNullOrEmpty(sDepartmentIds))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE DepartmentID IN(" + sDepartmentIds + "))";
            }
            if (!string.IsNullOrEmpty(sDesignationIds))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeOfficial WHERE DesignationID IN(" + sDesignationIds + "))";
            }

            if (!string.IsNullOrEmpty(sEmpIDs))
            {
                sSql += " AND EmployeeID IN(" + sEmpIDs + ")";
            }


            if (nSettlementType > 0)
            {
                sSql = sSql + " AND SettlementType=" + nSettlementType;
            }

            if (nApproveStatus == 1)
            {
                sSql = sSql + " AND ApproveBy>0";
            }
            if (nApproveStatus == 2)
            {
                sSql = sSql + " AND ApproveBy<=0";
            }
            if (nClearanceStatus > 0)
            {
                sSql = sSql + " AND EmployeeSettlementID IN(SELECT EmployeeSettlementID  FROM EmployeeSettlementClearance WHERE CurrentStatus=" + nClearanceStatus + ")";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DRPID "
                            + "IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + ")";
            }

            oEmployeeSettlements = EmployeeSettlement.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //End EmployeeSettlement


            string tEmpIDs = "";
            if (oEmployeeSettlements.Count > 0)
            {
                foreach (EmployeeSettlement oItem in oEmployeeSettlements)
                {
                    tEmpIDs += oItem.EmployeeID + ",";
                }
                tEmpIDs = tEmpIDs.Remove(tEmpIDs.Length - 1, 1);
            }


            //EmployeeSettlementSalary
            string sSQL = "";
            if (!string.IsNullOrEmpty(tEmpIDs))
            {
                sSQL += "SELECT * FROM View_EmployeeSettlementSalary WHERE EmployeeID IN(" + tEmpIDs + ")";
                oEmployeeSettlementSalarys = EmployeeSettlementSalary.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                oEmployeeSettlementSalarys.ForEach(x =>
                {
                    x.GrossAmount = Math.Round(x.CompGrossAmount, 2);
                    x.NetAmount = Math.Round(x.CompNetAmount, 2);
                    x.OTHour = x.CompOTHour;
                    x.OTRatePerHour = Math.Round(x.CompOTRatePerHour, 2);
                    x.TotalWorkingDay = x.CompTotalWorkingDay;
                    x.TotalAbsent = x.CompTotalAbsent;
                    x.TotalLate = x.CompTotalLate;
                    x.TotalEarlyLeaving = x.CompTotalEarlyLeaving;
                    x.TotalDayOff = x.CompTotalDayOff;
                    x.TotalHoliday = x.CompTotalHoliday;
                    x.TotalPLeave = x.CompTotalLeave;
                    x.TotalUpLeave = 0;
                });

            }

            string EmpIDs = "";
            if (oEmployeeSettlementSalarys.Count > 0)
            {
                string TempEmpIDs = "";
                int nCount = 0;
                oEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
                foreach (EmployeeSettlementSalary oItem in oEmployeeSettlementSalarys)
                {
                    TempEmpIDs += oItem.EmployeeID + ",";
                    EmpIDs += oItem.EmployeeID + ",";
                    nCount++;

                    if (nCount % 100 == 0 || nCount == oEmployeeSettlementSalarys.Count)
                    {
                        TempEmpIDs = TempEmpIDs.Remove(TempEmpIDs.Length - 1, 1);
                        sSql = "";
                        sSql = "SELECT * FROM View_EmployeeSettlementSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSettlementSalary WHERE EmployeeID IN (" + TempEmpIDs + ")) ORDER BY SalaryHeadID";
                        List<EmployeeSettlementSalaryDetail> oTempEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
                        oTempEmployeeSettlementSalaryDetails = EmployeeSettlementSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                        oEmployeeSettlementSalaryDetails.AddRange(oTempEmployeeSettlementSalaryDetails);
                        TempEmpIDs = "";
                    }
                }
                EmpIDs = EmpIDs.Remove(EmpIDs.Length - 1, 1);
            }
            else
            {
                oEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
            }
            oEmployeeSettlementSalaryDetails.ForEach(x =>
            {
                x.Amount = Math.Round(x.CompAmount, 2);
            });


            List<string> ColEarnings = new List<string>();
            ColEarnings = oEmployeeSettlementSalaryDetails.Where(x => (x.SalaryHeadType == (int)EnumSalaryHeadType.Addition)).Select(x => x.SalaryHeadName).ToList();
            ColEarnings = ColEarnings.Distinct().ToList();

            List<string> ColDeductions = new List<string>();
            ColDeductions = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadType == (int)EnumSalaryHeadType.Deduction).Select(x => x.SalaryHeadName).ToList();
            ColDeductions = ColDeductions.Distinct().ToList();

            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();
            oLeaveHeads = LeaveHead.Gets("SELECT * FROM LeaveHead WHERE IsActive <> 1", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            sSql = "SELECT * FROM View_AttendanceDaily WHERE AttendanceDate BETWEEN '" + dtStartDate.ToString("dd MMM yyyy") + "' AND '" + dtEndDate.ToString("dd MMM yyyy") + "' ";
            if (!string.IsNullOrEmpty(EmpIDs))
            {
                sSql += " AND EmployeeID IN(" + EmpIDs + ")";
            }
            oAttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            oAttendanceDailys.ForEach(x =>
            {
                x.LateArrivalMinute = x.CompLateArrivalMinute;
                x.EarlyDepartureMinute = x.CompEarlyDepartureMinute;
            });

            var attList = oAttendanceDailys.Where(x => x.CompLeaveHeadID > 0).GroupBy(x => new { x.CompLeaveHeadID }, (key, grp) => new
            {
                CompLeaveHeadID = key.CompLeaveHeadID,
                result = grp,

            }).OrderBy(x => x.CompLeaveHeadID).ToList();
            List<string> ColLeaveHeads = new List<string>();
            foreach (var col in attList)
            {
                foreach (LeaveHead lh in oLeaveHeads)
                {
                    if (col.CompLeaveHeadID == lh.LeaveHeadID)
                    {
                        ColLeaveHeads.Add(lh.ShortName);
                    }
                }
            }



            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("SettlementSummary");
                sheet.Name = "SettlementSummary";

                int nCount = 2;
                sheet.Column(nCount++).Width = 8; //SL
                sheet.Column(nCount++).Width = 15; //CODE
                sheet.Column(nCount++).Width = 18; //Name
                sheet.Column(nCount++).Width = 18; //Department 
                sheet.Column(nCount++).Width = 18; //Designation
                sheet.Column(nCount++).Width = 18; //Joining date
                sheet.Column(nCount++).Width = 18; //Total Day
                sheet.Column(nCount++).Width = 18; //Present Day
                sheet.Column(nCount++).Width = 18; //DayOff
                sheet.Column(nCount++).Width = 18; //Absent

                //if (ColLeaveHeads.Count > 0)
                //{
                //    foreach (string col in ColLeaveHeads)
                //    {
                //        sheet.Column(nCount++).Width = 12;
                //    }
                //}

                sheet.Column(nCount++).Width = 18; //Leave Days
                sheet.Column(nCount++).Width = 18; //EWD
                sheet.Column(nCount++).Width = 18; //Early Out Days
                sheet.Column(nCount++).Width = 18; //Early Out Mins
                sheet.Column(nCount++).Width = 18; //Late Days
                sheet.Column(nCount++).Width = 18; //Late Mins
                sheet.Column(nCount++).Width = 18; //OT Hr
                sheet.Column(nCount++).Width = 18; //OT Rate
                sheet.Column(nCount++).Width = 18; //Present Salary

                if (ColEarnings.Count > 0)
                {
                    for (int i = 0; i < ColEarnings.Count; i++)
                    {
                        sheet.Column(nCount++).Width = 18;
                    }
                }
                sheet.Column(nCount++).Width = 18; //OT Amount
                sheet.Column(nCount++).Width = 18; //Gross Earnings


                if (ColDeductions.Count > 0)
                {
                    for (int i = 0; i < ColDeductions.Count; i++)
                    {
                        sheet.Column(nCount++).Width = 18;
                    }
                }

                sheet.Column(nCount++).Width = 18; //Gross Deductions
                sheet.Column(nCount++).Width = 18; //Net Amount
                sheet.Column(nCount++).Width = 18; //Signature

                nMaxColumn = nCount;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header
                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = "SETTLEMENT SUMMARY"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Employee Code"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Employee Name"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Department"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Designation"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Joining Date"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Month Cycle Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Present Day"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Day Off Holidays"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Absent Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //if (ColLeaveHeads.Count > 0)
                //{
                //    foreach (string col in ColLeaveHeads)
                //    {
                //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = col; cell.Style.Font.Bold = true;
                //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //    }
                //}

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Leave Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "EWD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Early Out Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Early Out Mins"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Late Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Late Mins"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "OT Hr"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "OT Rate"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Present Salary"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (string sItem in ColEarnings)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = sItem; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "OT Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Gross Earnings"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (string sItem in ColDeductions)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = sItem; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }



                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Gross Deductions"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Net Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Signature"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
                #endregion

                #region Table Body


                int nSL = 0;
                foreach (EmployeeSettlementSalary oItem in oEmployeeSettlementSalarys)
                {
                    var oEarnings = oEmployeeSettlementSalaryDetails.Where(x => (x.SalaryHeadType == (int)EnumSalaryHeadType.Addition && x.EmployeeSalaryID == oItem.EmployeeSalaryID)).ToList();
                    var oDeductions = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadType == (int)EnumSalaryHeadType.Deduction && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();


                    nSL++;
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //joining date
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Month cycle day
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (oItem.EndDate - oItem.StartDate).TotalDays + 1; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //Present
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Present; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //TotalDayOff
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.TotalDayOff + oItem.TotalHoliday; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //TotalAbsent
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.TotalAbsent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //
                    int leaveCount = 0;
                    int totalLeave = 0;
                    foreach (var list in attList)
                    {
                        leaveCount = oAttendanceDailys.Where(x => (x.EmployeeID == oItem.EmployeeID && x.CompLeaveHeadID == list.CompLeaveHeadID)).Count();
                        totalLeave += leaveCount;
                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = leaveCount; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    //totalLeave
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = totalLeave; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //EWD = TotalPresent + TotalHoliday + TotalDayOff + TotalPLeave + TotalUpLeave
                    int EWD = 0;
                    EWD = oItem.Present + oItem.TotalHoliday + oItem.TotalDayOff + oItem.CompTotalLeave;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = EWD; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    var currentEmpAtt = oAttendanceDailys.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();

                    int earlyOutDays = currentEmpAtt.Where(x => x.EarlyDepartureMinute > 0).Count();
                    double earlyOutMins = currentEmpAtt.Sum(x => x.EarlyDepartureMinute);

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = earlyOutDays; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = earlyOutMins; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                    int LateDays = currentEmpAtt.Where(x => x.LateArrivalMinute > 0).Count();
                    double lateMins = currentEmpAtt.Sum(x => x.LateArrivalMinute);

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = LateDays; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = lateMins; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTHour; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTRatePerHour; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //GrossAmount
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.GrossAmount; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    double grossEarnings = 0.0;
                    double nAmount;
                    foreach (string sItem in ColEarnings)
                    {
                        var oESDs = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadName == sItem && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;

                        nAmount = Math.Round(nAmount);

                        grossEarnings += nAmount;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nAmount; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }


                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Floor(oItem.OTHour * oItem.OTRatePerHour); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //oItem.GrossAmount + grossEarnings + OTAmount == Gross Earnings
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.GrossAmount + grossEarnings + Math.Floor(oItem.OTHour * oItem.OTRatePerHour); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    double grossDeductions = 0.0;
                    //if (oDeductions.Count > 0)
                    //{
                    //    foreach (EmployeeSettlementSalaryDetail oDeductionItem in oDeductions)
                    //    {
                    //        var oESDs = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadID == oDeductionItem.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                    //        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;
                    //        nAmount = Math.Round(nAmount);

                    //        grossDeductions += nAmount;
                    //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nAmount; cell.Style.Font.Bold = false;
                    //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    //    }

                    //}
                    foreach (string sItem in ColDeductions)
                    {
                        var oESDs = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadName == sItem && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;
                        nAmount = Math.Round(nAmount);

                        grossDeductions += nAmount;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nAmount; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = grossDeductions; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //((oItem.GrossAmount + grossEarnings) - grossDeductions) == Net Amount
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ((oItem.GrossAmount + grossEarnings + Math.Floor(oItem.OTHour * oItem.OTRatePerHour)) - grossDeductions); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    rowIndex++;
                }
                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SETTLEMENT_SUMMARY.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        public void EmpSettlementSummary_XL_AMG(string sParam)
        {
            DateTime dtStartDate = Convert.ToDateTime(sParam.Split('~')[0]);
            DateTime dtEndDate = Convert.ToDateTime(sParam.Split('~')[1]);
            Int16 nSettlementType = Convert.ToInt16(sParam.Split('~')[2]);
            string sDepartmentIds = sParam.Split('~')[3];
            string sDesignationIds = sParam.Split('~')[4];
            Int16 nClearanceStatus = Convert.ToInt16(sParam.Split('~')[5]);
            Int16 nApproveStatus = Convert.ToInt16(sParam.Split('~')[6]);

            string sBUIDs = sParam.Split('~')[7];
            string sLocationIds = sParam.Split('~')[8];
            string sEmpIDs = sParam.Split('~')[9];

            List<EmployeeSettlement> oEmployeeSettlements = new List<EmployeeSettlement>();
            List<EmployeeSettlementSalary> oSummaryEmployeeSettlementSalarys = new List<EmployeeSettlementSalary>();
            List<EmployeeSettlementSalary> oEmployeeSettlementSalarys = new List<EmployeeSettlementSalary>();
            List<EmployeeSettlementSalaryDetail> oEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
            string sSql = "";

            sSql = "SELECT * FROM View_EmployeeSettlement WHERE EmployeeSettlementID<>0 AND EffectDate BETWEEN '" + dtStartDate.ToString("dd MMM yyyy") + "' AND '" + dtEndDate.ToString("dd MMM yyyy") + "' ";
            if (!string.IsNullOrEmpty(sBUIDs))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE BusinessUnitID IN(" + sBUIDs + "))";
            }
            if (!string.IsNullOrEmpty(sLocationIds))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE LocationID IN(" + sLocationIds + "))";
            }
            if (!string.IsNullOrEmpty(sDepartmentIds))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE DepartmentID IN(" + sDepartmentIds + "))";
            }
            if (!string.IsNullOrEmpty(sDesignationIds))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeOfficial WHERE DesignationID IN(" + sDesignationIds + "))";
            }

            if (!string.IsNullOrEmpty(sEmpIDs))
            {
                sSql += " AND EmployeeID IN(" + sEmpIDs + ")";
            }


            if (nSettlementType > 0)
            {
                sSql = sSql + " AND SettlementType=" + nSettlementType;
            }

            if (nApproveStatus == 1)
            {
                sSql = sSql + " AND ApproveBy>0";
            }
            if (nApproveStatus == 2)
            {
                sSql = sSql + " AND ApproveBy<=0";
            }
            if (nClearanceStatus > 0)
            {
                sSql = sSql + " AND EmployeeSettlementID IN(SELECT EmployeeSettlementID  FROM EmployeeSettlementClearance WHERE CurrentStatus=" + nClearanceStatus + ")";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DRPID "
                            + "IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + ")";
            }

            oEmployeeSettlements = EmployeeSettlement.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //End EmployeeSettlement


            string tEmpIDs = "";
            if (oEmployeeSettlements.Count > 0)
            {
                foreach (EmployeeSettlement oItem in oEmployeeSettlements)
                {
                    tEmpIDs += oItem.EmployeeID + ",";
                }
                tEmpIDs = tEmpIDs.Remove(tEmpIDs.Length - 1, 1);
            }


            //EmployeeSettlementSalary
            string sSQL = "";
            if (!string.IsNullOrEmpty(tEmpIDs))
            {
                sSQL += "SELECT * FROM View_EmployeeSettlementSalary WHERE EmployeeID IN(" + tEmpIDs + ")";
                oEmployeeSettlementSalarys = EmployeeSettlementSalary.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSettlementSalarys.ForEach(x =>
                {
                    x.GrossAmount = Math.Round(x.CompGrossAmount, 2);
                    x.NetAmount = Math.Round(x.CompNetAmount, 2);
                    x.OTHour = x.CompOTHour;
                    x.OTRatePerHour = Math.Round(x.CompOTRatePerHour, 2);
                    x.TotalWorkingDay = x.CompTotalWorkingDay;
                    x.TotalAbsent = x.CompTotalAbsent;
                    x.TotalLate = x.CompTotalLate;
                    x.TotalEarlyLeaving = x.CompTotalEarlyLeaving;
                    x.TotalDayOff = x.CompTotalDayOff;
                    x.TotalHoliday = x.CompTotalHoliday;
                    x.TotalPLeave = x.CompTotalLeave;
                    x.TotalUpLeave = 0;
                });

            }
            //EmployeeSettlementSalaryDetail
            string EmpIDs = "";
            if (oEmployeeSettlementSalarys.Count > 0)
            {
                string TempEmpIDs = "";
                int nCount = 0;
                oEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
                foreach (EmployeeSettlementSalary oItem in oEmployeeSettlementSalarys)
                {
                    TempEmpIDs += oItem.EmployeeID + ",";
                    EmpIDs += oItem.EmployeeID + ",";
                    nCount++;

                    if (nCount % 100 == 0 || nCount == oEmployeeSettlementSalarys.Count)
                    {
                        TempEmpIDs = TempEmpIDs.Remove(TempEmpIDs.Length - 1, 1);
                        sSql = "";
                        sSql = "SELECT * FROM View_EmployeeSettlementSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSettlementSalary WHERE EmployeeID IN (" + TempEmpIDs + ")) ORDER BY SalaryHeadID";
                        List<EmployeeSettlementSalaryDetail> oTempEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
                        oTempEmployeeSettlementSalaryDetails = EmployeeSettlementSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                        oEmployeeSettlementSalaryDetails.AddRange(oTempEmployeeSettlementSalaryDetails);
                        TempEmpIDs = "";
                    }
                }
                EmpIDs = EmpIDs.Remove(EmpIDs.Length - 1, 1);
            }
            else
            {
                oEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
            }

            oEmployeeSettlementSalaryDetails.ForEach(x =>
            {
                x.Amount = Math.Round(x.CompAmount, 2);
            });

            List<string> ColEarnings = new List<string>();
            ColEarnings = oEmployeeSettlementSalaryDetails.Where(x => (x.SalaryHeadType == (int)EnumSalaryHeadType.Addition)).Select(x => x.SalaryHeadName).ToList();
            ColEarnings = ColEarnings.Distinct().ToList();

            List<string> ColDeductions = new List<string>();
            //ColDeductions = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadType == (int)EnumSalaryHeadType.Deduction && (x.SalaryHeadID == 8 || x.SalaryHeadID == 20 || x.SalaryHeadID == 25 || x.SalaryHeadID == 26))).Select(x => x.SalaryHeadName).ToList();

            ColDeductions = oEmployeeSettlementSalaryDetails.Where(x => (x.SalaryHeadType == (int)EnumSalaryHeadType.Deduction && (x.SalaryHeadID == 8 || x.SalaryHeadID == 20 || x.SalaryHeadID == 25 || x.SalaryHeadID == 26))).Select(x => x.SalaryHeadName).ToList();
            List<string> allCols = oEmployeeSettlementSalaryDetails.Where(x => (x.SalaryHeadType == (int)EnumSalaryHeadType.Deduction)).Select(x => x.SalaryHeadName).ToList();

            ColDeductions = allCols.Except(oEmployeeSettlementSalaryDetails.Where(x => (x.SalaryHeadType == (int)EnumSalaryHeadType.Deduction && (x.SalaryHeadID == 8 || x.SalaryHeadID == 20 || x.SalaryHeadID == 25 || x.SalaryHeadID == 26))).Select(x => x.SalaryHeadName).ToList()).ToList();


            ColDeductions = ColDeductions.Distinct().ToList();

            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();
            oLeaveHeads = LeaveHead.Gets("SELECT * FROM LeaveHead WHERE IsActive <> 0", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            sSql = "SELECT * FROM View_AttendanceDaily WHERE AttendanceDate BETWEEN '" + dtStartDate.ToString("dd MMM yyyy") + "' AND '" + dtEndDate.ToString("dd MMM yyyy") + "' ";
            if (!string.IsNullOrEmpty(EmpIDs))
            {
                sSql += " AND EmployeeID IN(" + EmpIDs + ")";
            }
            oAttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            oAttendanceDailys.ForEach(x =>
            {
                x.LateArrivalMinute = x.CompLateArrivalMinute;
                x.EarlyDepartureMinute = x.CompEarlyDepartureMinute;
            });

            var attList = oAttendanceDailys.Where(x => x.CompLeaveHeadID > 0).GroupBy(x => new { x.CompLeaveHeadID }, (key, grp) => new
            {
                CompLeaveHeadID = key.CompLeaveHeadID,
                result = grp,

            }).OrderBy(x => x.CompLeaveHeadID).ToList();
            List<string> ColLeaveHeads = new List<string>();
            foreach (var col in attList)
            {
                foreach (LeaveHead lh in oLeaveHeads)
                {
                    if (col.CompLeaveHeadID == lh.LeaveHeadID)
                    {
                        ColLeaveHeads.Add(lh.ShortName);
                    }
                }
            }



            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("SettlementSummary");
                sheet.Name = "SettlementSummary";

                int nCount = 2;
                sheet.Column(nCount++).Width = 8; //SL
                sheet.Column(nCount++).Width = 15; //CODE
                sheet.Column(nCount++).Width = 18; //Name
                sheet.Column(nCount++).Width = 18; //Department 
                sheet.Column(nCount++).Width = 18; //Designation
                sheet.Column(nCount++).Width = 18; //Joining date
                sheet.Column(nCount++).Width = 18; //Total Day
                sheet.Column(nCount++).Width = 18; //Present Day
                sheet.Column(nCount++).Width = 18; //DayOff
                sheet.Column(nCount++).Width = 18; //Absent

                //if (ColLeaveHeads.Count > 0)
                //{
                //    foreach (string col in ColLeaveHeads)
                //    {
                //        sheet.Column(nCount++).Width = 12;
                //    }
                //}

                sheet.Column(nCount++).Width = 18; //Leave Days
                sheet.Column(nCount++).Width = 18; //EWD
                sheet.Column(nCount++).Width = 18; //Early Out Days
                sheet.Column(nCount++).Width = 18; //Early Out Mins
                sheet.Column(nCount++).Width = 18; //Late Days
                sheet.Column(nCount++).Width = 18; //Late Mins
                sheet.Column(nCount++).Width = 18; //OT Hr
                sheet.Column(nCount++).Width = 18; //OT Rate
                sheet.Column(nCount++).Width = 18; //Present Salary

                if (ColEarnings.Count > 0)
                {
                    for (int i = 0; i < ColEarnings.Count; i++)
                    {
                        sheet.Column(nCount++).Width = 18;
                    }
                }
                sheet.Column(nCount++).Width = 18; //OT Amount
                //sheet.Column(nCount++).Width = 18; //Gross Earnings


                if (ColDeductions.Count > 0)
                {
                    for (int i = 0; i < ColDeductions.Count; i++)
                    {
                        sheet.Column(nCount++).Width = 18;
                    }
                }

                sheet.Column(nCount++).Width = 18; //Gross Deductions
                sheet.Column(nCount++).Width = 18; //Net Amount
                sheet.Column(nCount++).Width = 18; //Signature

                nMaxColumn = nCount;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header
                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = "SETTLEMENT SUMMARY"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Employee Code"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Employee Name"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Department"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Designation"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Joining Date"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Month Cycle Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Present Day"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Day Off Holidays"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Absent Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //foreach (string sColumn in ColAttDetail)
                //{
                //    if (ColAttDetail.Where(x => x == (Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))).Any())
                //    {
                //        foreach (LeaveHead oItem in oLeaveHeads)
                //        {
                //            cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = oItem.ShortName; cell.Style.Font.Bold = true;
                //            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //        }
                //    }
                //}

                //if (ColLeaveHeads.Count > 0)
                //{
                //    foreach (string col in ColLeaveHeads)
                //    {
                //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = col; cell.Style.Font.Bold = true;
                //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //    }
                //}

                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "CL"; cell.Style.Font.Bold = true;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "ML"; cell.Style.Font.Bold = true;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "EL"; cell.Style.Font.Bold = true;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "LWP"; cell.Style.Font.Bold = true;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Leave Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "EWD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Early Out Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Early Out Mins"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Late Days"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Late Mins"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "OT Hr"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "OT Rate"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Present Salary"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Addition fields
                //if (ColEarnings.Count > 0)
                //{
                //    for (int i = 0; i < ColEarnings.Count; i++)
                //    {

                //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = ColEarnings[i]; cell.Style.Font.Bold = true;
                //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                //    }
                //}
                foreach (string sItem in ColEarnings)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = sItem; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "OT Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Gross Earnings"; cell.Style.Font.Bold = true;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Deduction fields
                //if (ColDeductions.Count > 0)
                //{
                //    for (int i = 0; i < ColDeductions.Count; i++)
                //    {

                //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = ColDeductions[i]; cell.Style.Font.Bold = true;
                //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                //    }
                //}
                foreach (string sItem in ColDeductions)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Merge = true; cell.Value = sItem; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }



                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Gross Deductions"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Net Amount"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Signature"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
                #endregion

                #region Table Body

                double nTotalGrossDeduction = 0.0;
                double nTotalGrossDeductionGrand = 0.0;
                double nTotalGrossEarning = 0.0;

                oEmployeeSettlementSalarys = oEmployeeSettlementSalarys.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ToList();
                oEmployeeSettlementSalarys.ForEach(x => oSummaryEmployeeSettlementSalarys.Add(x));
                while (oEmployeeSettlementSalarys.Count > 0)
                {
                    List<EmployeeSettlementSalary> oTempEmployeeSettlementSalarys = new List<EmployeeSettlementSalary>();
                    oTempEmployeeSettlementSalarys = oEmployeeSettlementSalarys.Where(x => x.LocationName == oEmployeeSettlementSalarys[0].LocationName).ToList();
                    string sLocationName = oTempEmployeeSettlementSalarys.Count > 0 ? oTempEmployeeSettlementSalarys[0].LocationName : "";
                    while (oTempEmployeeSettlementSalarys.Count > 0)
                    {
                        List<EmployeeSettlementSalary> oTempEmpSs = new List<EmployeeSettlementSalary>();
                        oTempEmpSs = oTempEmployeeSettlementSalarys.Where(x => x.DepartmentName == oTempEmployeeSettlementSalarys[0].DepartmentName).ToList();

                        //this.PrintHeader();
                        //PrintHaedRow(oTempEmpSs[0], _nGroupDept);

                        colIndex = 2;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Unit:" + oTempEmpSs[0].LocationName + ", " + "Department:" + oTempEmpSs[0].DepartmentName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        rowIndex += 1;

                        int nSL = 0;
                        foreach (EmployeeSettlementSalary oItem in oTempEmpSs)
                        {
                            //var oEarnings = oEmployeeSettlementSalaryDetails.Where(x => (x.SalaryHeadType == EnumSalaryHeadType.Addition && x.EmployeeSalaryID == oItem.EmployeeSalaryID)).ToList();
                            //oEarnings = oEarnings.Distinct().ToList();
                            //var oDeductions = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Deduction && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                            //oDeductions = oDeductions.Distinct().ToList();
                            var oEarnings = oEmployeeSettlementSalaryDetails.Where(x => (x.SalaryHeadType == (int)EnumSalaryHeadType.Addition && x.EmployeeSalaryID == oItem.EmployeeSalaryID)).ToList();
                            var oDeductions = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadType == (int)EnumSalaryHeadType.Deduction && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();


                            nSL++;
                            colIndex = 2;
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //joining date
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //Month cycle day
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (oItem.EndDate - oItem.StartDate).TotalDays + 1; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //Present
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Present; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //TotalDayOff
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.TotalDayOff + oItem.TotalHoliday; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //TotalAbsent
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.TotalAbsent; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //
                            int leaveCount = 0;
                            int totalLeave = 0;
                            foreach (var list in attList)
                            {
                                leaveCount = oAttendanceDailys.Where(x => (x.EmployeeID == oItem.EmployeeID && x.LeaveHeadID == list.CompLeaveHeadID)).Count();
                                totalLeave += leaveCount;
                                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = leaveCount; cell.Style.Font.Bold = false;
                                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }

                            //totalLeave
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = totalLeave; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //EWD = TotalPresent + TotalHoliday + TotalDayOff + TotalPLeave + TotalUpLeave
                            int EWD = 0;
                            EWD = oItem.Present + oItem.TotalHoliday + oItem.TotalDayOff + oItem.TotalPLeave + oItem.TotalUpLeave;
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = EWD; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                            var currentEmpAtt = oAttendanceDailys.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();

                            int earlyOutDays = currentEmpAtt.Where(x => x.EarlyDepartureMinute > 0).Count();
                            double earlyOutMins = currentEmpAtt.Sum(x => x.EarlyDepartureMinute);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = earlyOutDays; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = earlyOutMins; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                            int LateDays = currentEmpAtt.Where(x => x.LateArrivalMinute > 0).Count();
                            double lateMins = currentEmpAtt.Sum(x => x.LateArrivalMinute);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = LateDays; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = lateMins; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTHour; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTRatePerHour; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //GrossAmount
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.GrossAmount; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double grossEarnings = 0.0;
                            double nAmount;
                            //if (oEarnings.Count > 0)
                            //{
                            //    foreach (EmployeeSettlementSalaryDetail oEarningsItem in oEarnings.OrderBy(x => x.SalaryHeadType))
                            //    {
                            //        var oESDs = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadID == oEarningsItem.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                            //        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;
                            //        nAmount = Math.Round(nAmount);

                            //        grossEarnings += nAmount;
                            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nAmount; cell.Style.Font.Bold = false;
                            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            //    }

                            //}
                            foreach (string sItem in ColEarnings)
                            {
                                var oESDs = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadName == sItem && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                                nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;

                                //nAmount = (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Basic) ? nAmount : Math.Round(nAmount);
                                nAmount = Math.Round(nAmount);

                                grossEarnings += nAmount;

                                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nAmount; cell.Style.Font.Bold = false;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                            nTotalGrossEarning += grossEarnings;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.OTHour * oItem.OTRatePerHour); cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //oItem.GrossAmount + grossEarnings + OTAmount == Gross Earnings
                            //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.GrossAmount + grossEarnings + Math.Round(oItem.OTHour * oItem.OTRatePerHour); cell.Style.Font.Bold = false;
                            //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double grossDeductions = 0.0;
                            //if (oDeductions.Count > 0)
                            //{
                            //    foreach (EmployeeSettlementSalaryDetail oDeductionItem in oDeductions)
                            //    {
                            //        var oESDs = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadID == oDeductionItem.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                            //        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;
                            //        nAmount = Math.Round(nAmount);

                            //        grossDeductions += nAmount;
                            //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nAmount; cell.Style.Font.Bold = false;
                            //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            //    }

                            //}
                            foreach (string sItem in ColDeductions)
                            {
                                var oESDs = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadName == sItem && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();


                                //if (oESDItem.SalaryHeadID == 8 || oESDItem.SalaryHeadID == 20 || oESDItem.SalaryHeadID == 25 || oESDItem.SalaryHeadID == 26)
                                //{
                                //    nExceptSalaryHead += oESDItem.Amount;
                                //}

                                nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;

                                //double ndedAmount = (oESDs.Count() > 0) ? oESDs.Where(x => (x.SalaryHeadID == 8 || x.SalaryHeadID == 20 || x.SalaryHeadID == 25 || x.SalaryHeadID == 26)).Sum(x => x.Amount) : 0;

                                nAmount = Math.Round(nAmount);// -Math.Round(ndedAmount);

                                grossDeductions += nAmount;
                                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nAmount; cell.Style.Font.Bold = false;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                            //foreach (string sItem in ColDeductions)
                            //{
                            //    double nESH = GetExceptDeductionSalary(oItem.EmployeeSalaryID);

                            //    grossDeductions = grossDeductions - nESH;
                            //    nExceptSalaryHead = 0;
                            //}
                            nTotalGrossDeduction += grossDeductions;
                            nTotalGrossDeductionGrand += grossDeductions;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = grossDeductions; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //((oItem.GrossAmount + grossEarnings) - grossDeductions) == Net Amount

                            //((oItem.GrossAmount + grossEarnings + Math.Floor(oItem.OTHour * oItem.OTRatePerHour)) - grossDeductions)
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NetAmount; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                            rowIndex++;
                        }
                        colIndex = 2;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Present Salary
                        double nGrossAmount = oTempEmpSs.Sum(x => x.GrossAmount);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(nGrossAmount); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        foreach (string sItem in ColEarnings)
                        {
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        nTotalGrossEarning = 0;

                        foreach (string sItem in ColDeductions)
                        {
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(nTotalGrossDeduction); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        nTotalGrossDeduction = 0;

                        double nNetAmount = oTempEmpSs.Sum(x => x.NetAmount);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(nNetAmount); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        rowIndex += 1;
                        //PrintSalarySheet(oTempEmpSs);
                        oTempEmployeeSettlementSalarys.RemoveAll(x => x.DepartmentName == oTempEmpSs[0].DepartmentName);
                    }
                    oEmployeeSettlementSalarys.RemoveAll(x => x.LocationName == sLocationName);
                }
                rowIndex += 1;


                colIndex = 2;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Grand Total"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Present Salary
                double nGrossAmountG = oSummaryEmployeeSettlementSalarys.Sum(x => x.GrossAmount);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(nGrossAmountG); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (string sItem in ColEarnings)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nTotalGrossEarning = 0;

                foreach (string sItem in ColDeductions)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(nTotalGrossDeductionGrand); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nTotalGrossDeduction = 0;

                double nNetAmountG = oSummaryEmployeeSettlementSalarys.Sum(x => x.NetAmount);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(nNetAmountG); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex += 1;

                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SETTLEMENT_SUMMARY.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        #endregion

        #region Salary Process
        [HttpPost]
        public JsonResult ProcessSalary(EmployeeSalary oEmployeeSalary)
        {

            oEmployeeSalary = oEmployeeSalary.ProcessSalaryComp(((User)(Session[SessionInfo.CurrentUser])).UserID);

            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oEmployeeSalary);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region SalarySheet Bangla
        private void ExcelSalarySheet_F6_Header_Bangla(List<string> ColumnHeader, List<string> ColEmpInfo, List<string> ColAttDetail, List<string> ColEarnings, List<string> ColBasics, List<string> ColDeductions, List<string> ColBankDetail, ref int nRowIndex, ref ExcelWorksheet sheet, ref ExcelRange cell, ref OfficeOpenXml.Style.Border border, List<SalaryHead> oSalaryHeads, List<LeaveHead> oLeaveHeads, List<EmployeeLeaveOnAttendance> oELOnAttendances, bool bWithPrecision, bool bHasOTAllowance, bool bHasParentDept)
        {
            int nStartCol = 2, nEndCol = 2;
            int nColumn = 2;
            sheet.Column(nColumn).Width = 5;

            foreach (string sColumn in ColEmpInfo)
            {
                sheet.Column(++nColumn).Width = 15;
            }

            if (oLeaveHeads.Count() > 0)
            {
                foreach (string sColumn in ColAttDetail)
                {
                    if (sColumn == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                    {
                        foreach (LeaveHead oItem in oLeaveHeads)
                        {
                            sheet.Column(++nColumn).Width = 7;
                        }
                    }
                    else
                    {
                        sheet.Column(++nColumn).Width = 12;
                    }
                }
            }
            else
            {
                foreach (string sColumn in ColAttDetail)
                {
                    sheet.Column(++nColumn).Width = 12;
                }
            }

            sheet.Column(++nColumn).Width = 15; // Gross Amount

            foreach (string sColumn in ColEarnings)
            {
                sheet.Column(++nColumn).Width = 12;
            }
            if (ColEarnings.Count() > 0)
            {
                sheet.Column(++nColumn).Width = 15;
                sheet.Column(++nColumn).Width = 15;
            }
            if (IsComp)
            {
                foreach (string sColumn in ColBasics)
                {
                    sheet.Column(++nColumn).Width = 12;
                }
            }
            foreach (string sColumn in ColDeductions)
            {
                sheet.Column(++nColumn).Width = 12;
            }
            if (ColDeductions.Count() > 0)
            {
                sheet.Column(++nColumn).Width = 16;
            }
            sheet.Column(++nColumn).Width = 15;
            foreach (string sColumn in ColBankDetail)
            {
                sheet.Column(++nColumn).Width = 16;
            }
            sheet.Column(++nColumn).Width = 15;
            nEndCol = nColumn;


            #region Column Header

            double nAmount = 0; string sHeadName = "";
            //List<EmployeeSalaryDetail> oTempEmployeeSalaryDetails = _oEmployeeSalaryDetails.Where(x => x.EmployeeSalaryID == oEmployeeSalary.EmployeeSalaryID).ToList();



            nStartCol = 2; nEndCol = 2;
            foreach (string sColumn in ColumnHeader)
            {
                if (sColumn == "SL#")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "ক্রমিক নং"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                if (sColumn == "Employee Information")
                {
                    foreach (string sItem in ColEmpInfo)
                    {
                        string sColName = "";
                        sColName = sItem;
                        if (bHasParentDept && sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.Department.ToString())) { sColName = "Sub Department"; }
                        if (bHasParentDept && sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.ParentDepartment.ToString())) { sColName = "Department"; }
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColName; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }
                else if (sColumn == "Att. Detail")
                {
                    foreach (string sItem in ColAttDetail)
                    {
                        if (sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                        {
                            //nEndCol += oLeaveHeads.Count() - 1;
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            nStartCol += oLeaveHeads.Count() - 1;
                        }
                        else
                        {
                            string sColumnvalue = "";
                            sColumnvalue = sItem;
                            if (sColumnvalue == "Employee Working Days") { sColumnvalue = "EWD"; }

                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumnvalue; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                    }
                }
                else if (sColumn == "Gross Salary")
                {
                    string sColumnvalue = "";
                    sColumnvalue = sColumn;
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumnvalue; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }

                else if (sColumn == "Earnings")
                {
                    //nStartCol++; nEndCol++;
                    foreach (string sItem in ColEarnings)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    //nStartCol++; nEndCol++;
                }

                else if (sColumn == "Gross Earnings")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "Gross Earnings"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Gross Earnings On Att.")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "Gross Earnings On Att."; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }



                else if (sColumn == "Basic Breakdown")
                {
                    //nStartCol++; nEndCol++;
                    if (IsComp)
                    {
                        foreach (string sItem in ColBasics)
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }
                }
                else if (sColumn == "Deduction")
                {
                    //nStartCol++; nEndCol++;
                    foreach (string sItem in ColDeductions)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }

                else if (sColumn == "Gross Deductions")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Net Amount")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Bank")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Cash")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Account No")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Bank Name")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Signature")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

            }
            //nRowIndex += nAddSpan;
            //if (nAddSpan > 0) // With leave Heads
            //{
            nStartCol = 3 + ColEmpInfo.Count();
            foreach (string sItem in ColAttDetail)
            {
                if (sItem != Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                {
                    nStartCol++;
                }
                else
                {
                    break;
                }
            }
            nEndCol = nStartCol;

            foreach (LeaveHead oItem in oLeaveHeads)
            {
                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.ShortName; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            }
            nRowIndex++;
            //}
            //else
            //{
            //    nRowIndex++;
            //}

            #endregion
        }

        private void ExcelSalarySheet_F6_DataManipulation_Bangla(List<SalarySheetProperty> oSalarySheetPropertys, List<string> ColumnHeader, List<string> ColEmpInfo, List<string> ColAttDetail, List<string> ColEarnings, List<string> ColBasics, List<string> ColDeductions, List<string> ColBankDetail, ref int nRowIndex, ref ExcelWorksheet sheet, ref ExcelRange cell, ref OfficeOpenXml.Style.Border border, List<SalaryHead> oSalaryHeads, List<EmployeeSalary> oResults, List<EmployeeSalaryDetail> oEmployeeSalaryDetails, List<LeaveHead> oLeaveHeads, List<EmployeeLeaveOnAttendance> oELOnAttendances, bool bWithPrecision, bool bHasOTAllowance, bool bHasParentDept)
        {
            #region Date Manipulation

            var EmpInfoPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 1).ToList();
            var AttDetailPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty != EnumSalarySheetFormatProperty.OTAllowance).ToList();
            var oEarnings = oSalaryHeads.Where(x => (x.SalaryHeadType == EnumSalaryHeadType.Addition) || (x.SalaryHeadType == EnumSalaryHeadType.Reimbursement)).ToList();
            var oDeductions = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Deduction).ToList();
            var oBasics = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Basic).ToList();
            var IncrementPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 3).ToList();
            var BankPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 4).ToList();

            if (oResults.Count() > 0)
            {
                int nCount = 0;
                int Code = 0;
                var oELOnAtts = new List<EmployeeLeaveOnAttendance>();
                foreach (EmployeeSalary oItem in oResults)
                {

                    oELOnAtts = oELOnAttendances.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();

                    Code = 0;
                    int nStartCol = 2; int nEndCol = 2;
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = this.NumberFormat((++nCount).ToString()); cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = "0";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    /*---- Employee Info -----*/
                    if (ColEmpInfo.Count() > 0)
                    {
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeCode).Any())
                        {
                            if (int.TryParse(oItem.EmployeeCode, out Code))
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = Code; cell.Style.Font.Bold = false;
                                cell.Style.Numberformat.Format = "0";
                            }
                            else
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;

                            }
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeName).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ParentDepartment).Any())
                        {

                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.ParentDepartmentName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Department).Any())
                        {

                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Designation).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.JoiningDate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ConfirmationDate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.DateOfConfirmationInString; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeType).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmployeeTypeName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Gender).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.Gender; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    if (ColAttDetail.Count() > 0)
                    {         /*---- Att. Detail -----*/
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.TotalDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalWorkingDay + oItem.TotalDayOff + oItem.TotalHoliday > 0) ? (oItem.TotalWorkingDay + oItem.TotalDayOff + oItem.TotalHoliday) : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.PresentDay).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalPresent > 0) ? oItem.TotalPresent : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.DayOffHolidays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = ((oItem.TotalDayOff + +oItem.TotalHoliday) > 0) ? (oItem.TotalDayOff + +oItem.TotalHoliday) : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.AbsentDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalAbsent > 0) ? oItem.TotalAbsent : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveHead).Any())
                        {
                            foreach (LeaveHead oLeaveHead in oLeaveHeads)
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).Any()) ? oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).FirstOrDefault().LeaveDays : 0; cell.Style.Font.Bold = false;
                                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalPLeave + oItem.TotalUpLeave > 0) ? (oItem.TotalPLeave + oItem.TotalUpLeave) : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeWorkingDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.PD > 0) ? oItem.PD : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EarlyOutDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalEarlyLeaving > 0) ? oItem.TotalEarlyLeaving : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EarlyOutMins).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.EarlyLeavingMinute > 0) ? oItem.EarlyLeavingMinute : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LateDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalLate > 0) ? oItem.TotalLate : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LateHrs).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.LateInMin > 0) ? Global.MinInHourMin(oItem.LateInMin) : ""; cell.Style.Font.Bold = false;

                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTHours).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.OTHour > 0) ? oItem.OTHour : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTRate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.OTRatePerHour > 0) ? oItem.OTRatePerHour : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }
                    /*--- Gross Salary ---- */
                    //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";

                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.GrossAmount > 0) ? Math.Round(oItem.GrossAmount) : 0; ; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    /*--- Earnings ---- */

                    double nAmount = 0, nAddAmount = 0;

                    foreach (SalaryHead oSalaryHead in oEarnings.OrderBy(x => x.SalaryHeadType))
                    {
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;

                        //nAmount = (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Basic) ? nAmount : Math.Round(nAmount);
                        nAmount = Math.Round(nAmount);

                        nAddAmount += (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Addition || oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Reimbursement) ? nAmount : 0;

                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nAmount > 0) ? nAmount : 0; cell.Style.Font.Bold = false;
                        //cell.Style.Numberformat.Format = (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Basic) ? "#,##0.00;(#,##0.00)" : (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    double nOTAllowance = Math.Round(oItem.OTHour * oItem.OTRatePerHour);
                    if (bHasOTAllowance)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nOTAllowance > 0) ? Math.Round(nOTAllowance) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    if (oEarnings.Any())
                    {
                        double nEarnings = oItem.GrossAmount + ((bHasOTAllowance) ? nOTAllowance : 0) + nAddAmount;
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nEarnings > 0) ? Math.Round(nEarnings) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nOnedayGross = 0;
                        if ((oItem.TotalWorkingDay + oItem.TotalDayOff + oItem.TotalHoliday) > 0)
                        {
                            double dMonthDays = (oItem.EndDate - oItem.StartDate).TotalDays + 1;
                            //nOnedayGross = oItem.GrossAmount / (oItem.TotalWorkingDay + oItem.TotalDayOff + oItem.TotalHoliday);
                            nOnedayGross = oItem.GrossAmount / dMonthDays;

                        }
                        double nEarningsOnAtt = Math.Round(oItem.PD * nOnedayGross + ((bHasOTAllowance) ? nOTAllowance : 0) + nAddAmount);

                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nEarningsOnAtt > 0) ? Math.Round(nEarningsOnAtt) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    //Basics
                    foreach (SalaryHead oSalaryHead in oBasics)
                    {
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nAmount > 0) ? Math.Round(nAmount) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    /*---deduction--*/
                    double nDeductionAmount = 0;

                    foreach (SalaryHead oSalaryHead in oDeductions)
                    {
                        //double nDedAmount = Math.Round(GetAmount(oSalaryHead.SalaryHeadID, oItem.EmployeeSalaryID));
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;
                        nDeductionAmount += nAmount;
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nAmount > 0) ? Math.Round(nAmount) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    if (oDeductions.Count() > 0)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nDeductionAmount > 0) ? Math.Round(nDeductionAmount) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    /*---Net Amount--*/

                    double nNetAmount = oItem.NetAmount + ((bHasOTAllowance) ? 0 : -nOTAllowance);
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nNetAmount > 0) ? Math.Round(nNetAmount) : 0; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    if (ColBankDetail.Count() > 0)
                    {
                        List<EmployeeBankAccount> oBanks = new List<EmployeeBankAccount>();
                        oBanks = _oEmployeeBankAccounts.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.BankAmount).Any())
                        {
                            var sValue = (oBanks.Count > 0 ? oItem.NetAmount : 0);
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.CashAmount).Any())
                        {
                            var sValue = (oBanks.Count <= 0 ? oItem.NetAmount : 0);
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.AccountNo).Any())
                        {
                            var sValue = (oBanks.Count > 0 ? oBanks[0].AccountNo : "-");
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.BankName).Any())
                        {
                            var sValue = (oBanks.Count > 0 ? oBanks[0].BankBranchName : "-");
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    /*---Signature--*/
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "--"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    ++nRowIndex;
                }
            }
            #endregion
        }


        #endregion

        #region UploadManualAttendance
        private List<AttendanceDaily> GetAttFromExcel(HttpPostedFileBase PostedFile)
        {
            DataSet ds = new DataSet();
            DataRowCollection oRows = null;
            string fileExtension = "";
            string fileDirectory = "";
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();
            AttendanceDaily oAttendanceDailyT = new AttendanceDaily();
            if (PostedFile.ContentLength > 0)
            {
                fileExtension = System.IO.Path.GetExtension(PostedFile.FileName);
                if (fileExtension == ".xls" || fileExtension == ".xlsx")
                {
                    fileDirectory = Server.MapPath("~/Content/") + PostedFile.FileName;
                    if (System.IO.File.Exists(fileDirectory))
                    {
                        System.IO.File.Delete(fileDirectory);
                    }
                    PostedFile.SaveAs(fileDirectory);
                    string excelConnectionString = string.Empty;
                    //connection String for xls file format.
                    //excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileDirectory + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=2\"";
                    excelConnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileDirectory + ";Extended Properties=\"Excel 12.0;HDR=No;IMEX=1\"";
                    ////excelConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + fileDirectory + ";Extended Properties=\"Excel 8.0;HDR=Yes;IMEX=2\"";

                    //Create Connection to Excel work book and add oledb namespace
                    OleDbConnection excelConnection = new OleDbConnection(excelConnectionString);
                    excelConnection.Open();
                    DataTable dt = new DataTable();

                    dt = excelConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                    if (dt == null)
                    {
                        return null;
                    }
                    excelConnection.Close();
                    String[] excelSheets = new String[dt.Rows.Count];
                    int t = 0;
                    //excel data saves in temp file here.
                    foreach (DataRow row in dt.Rows)
                    {
                        excelSheets[t] = row["TABLE_NAME"].ToString();
                        t++;
                    }
                    OleDbConnection excelConnection1 = new OleDbConnection(excelConnectionString);

                    string query = string.Format("Select * from [{0}]", excelSheets[0]);
                    using (OleDbDataAdapter dataAdapter = new OleDbDataAdapter(query, excelConnection1))
                    {
                        dataAdapter.Fill(ds);
                    }
                    oRows = ds.Tables[0].Rows;

                    IFormatProvider culture = new System.Globalization.CultureInfo("en-US", true);

                    string sAtt = "";
                    DateTime tempDT = new DateTime(1950, 01, 01);
                    DateTime tempTime = new DateTime(1950, 01, 01);
                    DateTime tempTimeFinal = new DateTime(1950, 01, 01);
                    oAttendanceDailyT.AttendanceDate = Convert.ToDateTime(oRows[0][1]);
                    for (int i = 2; i < oRows.Count; i++)
                    {
                        oAttendanceDaily = new AttendanceDaily();
                        oAttendanceDaily.EmployeeCode = Convert.ToString(oRows[i][0] == DBNull.Value ? "NU" : oRows[i][0]);
                        int j = 1;
                        sAtt = "";
                        sAtt = Convert.ToString(oRows[i][j] == DBNull.Value ? "NU" : oRows[i][j]);
                        j++;

                        //InDate
                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNUInDate = true;
                        }
                        else
                        {
                            string sDate = Convert.ToString(oRows[i][j]);
                            //DateTime.TryParse(Convert.ToString(oRows[i][j]), out tempDT);
                            //tempDT = DateTime.ParseExact(sDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            //tempDT = DateTime.Parse(sDate);
                            tempDT = DateTime.ParseExact(sDate, "dd/MM/yyyy", null);
                        }
                        j++;

                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNUInTime = true;
                            //oAttendanceDaily.CompInTime = new DateTime(1950, 01, 01);
                        }
                        else
                        {
                            string sDate = Convert.ToString(oRows[i][j]);
                            TimeSpan ts = new TimeSpan(Convert.ToInt32(sDate.Split(':')[0]), Convert.ToInt32(sDate.Split(':')[1]), 0);
                            tempTime = tempTime.Date + ts;
                            tempTimeFinal = new DateTime(tempDT.Year, tempDT.Month, tempDT.Day, tempTime.Hour, tempTime.Minute, tempTime.Second);


                        }
                        if (IsNUInDate == true && IsNUInTime == true)
                        {
                            oAttendanceDaily.CompInTime = new DateTime(1950, 01, 01);
                        }
                        else
                        {
                            oAttendanceDaily.CompInTime = new DateTime(tempDT.Year, tempDT.Month, tempDT.Day, tempTimeFinal.Hour, tempTimeFinal.Minute, tempTimeFinal.Second);
                        }
                        j++;

                        //OutDate
                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNUOutDate = true;
                        }
                        else
                        {
                            string sDate = Convert.ToString(oRows[i][j]);
                            //DateTime.TryParse(Convert.ToString(oRows[i][j]), out tempDT);
                            //tempDT = DateTime.ParseExact(sDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            //tempDT = DateTime.Parse(sDate);
                            tempDT = DateTime.ParseExact(sDate, "dd/MM/yyyy", null);
                            //tempDT = DateTime.ParseExact(Convert.ToString(oRows[i][j]), "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        }
                        j++;
                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNUOutTime = true;
                            //oAttendanceDaily.CompOutTime = new DateTime(1950, 01, 01);
                        }
                        else
                        {
                            string sDate = Convert.ToString(oRows[i][j]);
                            TimeSpan ts = new TimeSpan(Convert.ToInt32(sDate.Split(':')[0]), Convert.ToInt32(sDate.Split(':')[1]), 0);
                            tempTime = tempTime.Date + ts;
                            tempTimeFinal = new DateTime(tempDT.Year, tempDT.Month, tempDT.Day, tempTime.Hour, tempTime.Minute, tempTime.Second);
                        }
                        if (IsNUOutDate == true && IsNUOutTime == true)
                        {
                            oAttendanceDaily.CompOutTime = new DateTime(1950, 01, 01);
                        }
                        else
                        {
                            oAttendanceDaily.CompOutTime = new DateTime(tempDT.Year, tempDT.Month, tempDT.Day, tempTimeFinal.Hour, tempTimeFinal.Minute, tempTimeFinal.Second);
                        }
                        j++;

                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNULate = true;
                        }
                        else
                        {
                            oAttendanceDaily.CompLateArrivalMinute = Convert.ToInt32(oRows[i][j]);
                        }
                        j++;
                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNUEarly = true;
                        }
                        else
                        {
                            oAttendanceDaily.CompEarlyDepartureMinute = Convert.ToInt32(oRows[i][j]);
                        }
                        j++;
                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNUOT = true;
                        }
                        else
                        {
                            oAttendanceDaily.CompOverTimeInMinute = Convert.ToInt32(oRows[i][j]);
                        }
                        j++;
                        if (Convert.ToString(oRows[i][j]) == "NU")
                        {
                            IsNURemark = true;
                        }
                        else
                        {
                            oAttendanceDaily.Remark = Convert.ToString(oRows[i][0] == DBNull.Value ? "NU" : oRows[i][j]);
                        }
                        j++;

                        oAttendanceDaily.ErrorMessage = sAtt;
                        oAttendanceDailys.Add(oAttendanceDaily);
                    }
                    if (System.IO.File.Exists(fileDirectory))
                    {
                        System.IO.File.Delete(fileDirectory);
                    }
                    foreach (AttendanceDaily ADs in oAttendanceDailys)
                    {
                        ADs.AttendanceDate = oAttendanceDailyT.AttendanceDate;
                    }
                }
                else
                {
                    throw new Exception("File not supported");
                }
            }
            return oAttendanceDailys;
        }

        [HttpPost]
        public ActionResult View_UploadAttendance(HttpPostedFileBase fileAtts)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            List<AttendanceDaily> oADs = new List<AttendanceDaily>();
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();
            try
            {
                if (fileAtts == null) { throw new Exception("File not Found"); }
                oAttendanceDailys = this.GetAttFromExcel(fileAtts);

                if (oAttendanceDailys.Count() <= 0)
                    throw new Exception("Nothing found to Upload");

                oADs = AttendanceDaily.UploadAttXL(oAttendanceDailys, IsNUInTime, IsNUOutTime, IsNULate, IsNUEarly, IsNUInDate, IsNUOutDate, IsNUOT, IsNURemark, true, ((User)Session[SessionInfo.CurrentUser]).UserID);
                if (oADs.Count > 0)
                {
                    int nRowIndex = 2, nStartCol = 2, nEndCol = 2;
                    ExcelRange cell;
                    OfficeOpenXml.Style.Border border;
                    ExcelFill fill;
                    int colIndex = 1;
                    int rowIndex = 2;

                    using (var excelPackage = new ExcelPackage())
                    {
                        excelPackage.Workbook.Properties.Author = "ESimSol";
                        excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                        var sheet = excelPackage.Workbook.Worksheets.Add("Error List");
                        sheet.Name = "Error List";

                        int n = 1;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 13;
                        sheet.Column(n++).Width = 25;

                        colIndex = 1;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Code"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "InDateTime"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OutDateTime"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Late"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Early"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Remark"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Error"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        rowIndex += 1;

                        foreach (AttendanceDaily oItem in oADs)
                        {
                            colIndex = 1;
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompInTimeInString; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompOutTimeInString; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompLateArrivalMinute; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompEarlyDepartureMinute; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompOverTimeInMinute; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Remark; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.ErrorMessage; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        Response.ClearContent();
                        Response.BinaryWrite(excelPackage.GetAsByteArray());
                        Response.AddHeader("content-disposition", "attachment; filename=ErrorList.xlsx");
                        Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        Response.Flush();
                        Response.End();
                    }
                }
            }
            catch (Exception ex)
            {
                ViewBag.FeedBack = ex.Message;
                ViewBag.FeedBackText = "Unsuccessful";
            }
            ViewBag.FeedBackText = "successful";
            return View(new AttendanceDaily());
        }

        public void DownloadFormat()
        {
            int nRowIndex = 2, nStartCol = 2, nEndCol = 2;
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;
            ExcelFill fill;
            int colIndex = 1;
            int rowIndex = 1;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Format Downlaod");
                sheet.Name = "Format Downlaod";

                int n = 1;
                sheet.Column(n++).Width = 13;//code
                sheet.Column(n++).Width = 13;//status
                sheet.Column(n++).Width = 13;//indate
                sheet.Column(n++).Width = 13;//intime
                sheet.Column(n++).Width = 13;//outdate
                sheet.Column(n++).Width = 13;//outtime
                sheet.Column(n++).Width = 13;//late
                sheet.Column(n++).Width = 13;//early
                sheet.Column(n++).Width = 13;//OT
                sheet.Column(n++).Width = 13;//Remark

                sheet.Column(n++).Width = 13;//blank
                sheet.Column(n++).Width = 13;//blank
                sheet.Column(n++).Width = 13;//blank

                sheet.Column(n++).Width = 20;//
                sheet.Column(n++).Width = 20;//
                sheet.Column(n++).Width = 30;//

                colIndex = 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Date"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "25-Sep-17"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                
                rowIndex++;

                colIndex = 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Code"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Status"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "InDate"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "InTime"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OutDate"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OutTime"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Late"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Early"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Remark"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, 14]; cell.Value = "Legend"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                
                cell = sheet.Cells[rowIndex, 15]; cell.Value = "If Holiday, No effect"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                
                rowIndex += 1;

                colIndex = 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "10001"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "P"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "25/9/2017"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "8:20"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "25/9/2017"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "16:10"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "10"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "20"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "40"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Remark"; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, 14]; cell.Value = "A"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 15]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 14]; cell.Value = "P"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 15]; cell.Value = "Present"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 16]; cell.Value = "Must Enter in time and out time"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;


                cell = sheet.Cells[rowIndex, 14]; cell.Value = "OFF"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 15]; cell.Value = "Dayoff"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 14, rowIndex, 16]; cell.Value = "For leave use short name of leave head"; cell.Style.Font.Bold = true; cell.Merge = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
                cell = sheet.Cells[rowIndex, 14, rowIndex, 16]; cell.Value = "NU=Not Update"; cell.Style.Font.Bold = true; cell.Merge = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=Format.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        #endregion

        #region AMG Salary

        public ActionResult PrintSalarySheet_DetailFormat_F6(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)
        {

            string BlockIds = string.Empty;
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, IsCompliance, ((User)Session[SessionInfo.CurrentUser]).UserID);


            DateTime dt = new DateTime(nYear, nMonthID, 1);

            string salaryMonth = dt.ToString("MMMM yyyy");



            var oCompany = new Company();
            var results = Company.Gets("Select * from View_Company", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            if (results.Any())
                oCompany = results.First();

            if (oAMGSalarySheets.Count == 0)
            {
                rptErrorMessage oReport = new rptErrorMessage();
                byte[] abytes = oReport.PrepareReport("No Data Found !");
                return File(abytes, "application/pdf");

            }
            else
            {
                rptAMGSalarySheet oReport = new rptAMGSalarySheet();
                byte[] abytes = oReport.PrepareReport(oAMGSalarySheets, oCompany, salaryMonth);
                return File(abytes, "application/pdf");
            }
            
        }
        private ExcelRange FillCell(ExcelWorksheet sheet, int nRowIndex, int nStartCol, string sVal, bool IsNumber)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            cell = sheet.Cells[nRowIndex, nStartCol++];
            if (IsNumber)
                cell.Value = Convert.ToDouble(sVal);
            else
                cell.Value = sVal;
            cell.Style.Font.Bold = false;
            cell.Style.WrapText = true;
            if (IsNumber)
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            return cell;
        }
        private ExcelRange FillCellMerge(ExcelWorksheet sheet, int nRowIndex, int nStartCol, int nEndCol, string sVal, bool IsNumber)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol];
            cell.Merge = true;
            if (IsNumber)
                cell.Value = Convert.ToDouble(sVal);
            else
                cell.Value = sVal;
            cell.Style.Font.Bold = false;
            if (IsNumber)
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            return cell;
        }
        public void ExportIntoExcelSalarySheet_F6(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)//F6 XL
        {

            string BlockIds = string.Empty;
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, IsCompliance, ((User)Session[SessionInfo.CurrentUser]).UserID);


            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignatures = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            var oCompany = new Company();
            var results = Company.Gets("Select * from View_Company", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            if (results.Any())
                oCompany = results.First();

            #region Header
            ArrayList table_header = new ArrayList();
            table_header.Add(new TableHeader { Header = "#SL", Width = 5f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "Employee Code", Width = 10f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "EMployee Name", Width = 15f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "Designation", Width = 15f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "Join Date", Width = 10f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "Total Days", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Present Day", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Day Off Holiday", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Absent Days", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "CL", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "SL", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "EL", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "LWP", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Leave Days", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "EWD", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Gross Salary", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Att Bonous", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Gross Earnings", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Basic", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "House Rent", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Conveyance", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Food", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Medical", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Absent Amt", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Stamp", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Total Deduct", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Net Amount", Width = 10f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "Bank", Width = 10f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "Cash", Width = 10f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "Account No", Width = 15f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "Bank Name", Width = 15f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "Signature", Width = 15f, IsRotate = false });
            #endregion


            #region Export Excel
            int nRowIndex = 2, nStartCol = 2, nEndCol = table_header.Count;
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Salary Sheet");
                sheet.Name = "Salary Sheet";

                foreach (TableHeader listItem in table_header)
                {
                    sheet.Column(nStartCol++).Width = listItem.Width;
                }

                #region Report Header
                //int nmiddlecol = Convert.ToInt32(nEndCol / 2);
                cell = sheet.Cells[nRowIndex, 4];
                cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;

                cell = sheet.Cells[nRowIndex, 4];
                cell.Value = "Salary Sheet"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex = nRowIndex + 2;


                nStartCol = 2;
                foreach (TableHeader listItem in table_header)
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = listItem.Header; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                #endregion


                #region Body
                int nCount = 0;
                var data = oAMGSalarySheets.GroupBy(x => new { x.BUName, x.LocName, x.DptName }, (key, grp) => new
                {
                    BUName = key.BUName,
                    LocName = key.LocName,
                    DptName = key.DptName,
                    Results = grp.ToList()
                });

                foreach (var oItem in data)
                {
                    FillCell(sheet, nRowIndex, nStartCol++, "Unit Name: " + oItem.LocName + ", Dept. Name: " + oItem.DptName, false);
                    nRowIndex++;

                    foreach (var obj in oItem.Results)
                    {
                        nStartCol = 2;
                        FillCell(sheet, nRowIndex, nStartCol++, (++nCount).ToString(), false);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.Code, false);
                        FillCell(sheet, nRowIndex, nStartCol++, (obj.EmpNameInBangla == "") ? obj.Name : obj.EmpNameInBangla, false);
                        FillCell(sheet, nRowIndex, nStartCol++, (obj.DsgNameInBangla == "") ? obj.DsgName : obj.DsgNameInBangla, false);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.DOJInStr, false);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.TotalDays.ToString(), true);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.Present.ToString(), true);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.DayOffHoliday.ToString(), true);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.Absent.ToString(), true);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.CL.ToString(), true);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.SL.ToString(), true);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.EL.ToString(), true);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.LWP.ToString(), true);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.LeaveDays.ToString(), true);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.EWD.ToString(), true);
                        FillCell(sheet, nRowIndex, nStartCol++, Global.MillionFormat(obj.Gross, 2), true);
                        FillCell(sheet, nRowIndex, nStartCol++, Global.MillionFormat(obj.AttBonus, 2), true);
                        FillCell(sheet, nRowIndex, nStartCol++, Global.MillionFormat(obj.GrossEarning, 2), true);
                        FillCell(sheet, nRowIndex, nStartCol++, Global.MillionFormat(obj.Basics, 2), true);
                        FillCell(sheet, nRowIndex, nStartCol++, Global.MillionFormat(obj.HR, 2), true);
                        FillCell(sheet, nRowIndex, nStartCol++, Global.MillionFormat(obj.Conv, 2), true);
                        FillCell(sheet, nRowIndex, nStartCol++, Global.MillionFormat(obj.Food, 2), true);
                        FillCell(sheet, nRowIndex, nStartCol++, Global.MillionFormat(obj.Med, 2), true);
                        FillCell(sheet, nRowIndex, nStartCol++, Global.MillionFormat(obj.AbsentAmount, 2), true);
                        FillCell(sheet, nRowIndex, nStartCol++, Global.MillionFormat(obj.Stemp, 2), true);
                        FillCell(sheet, nRowIndex, nStartCol++, Global.MillionFormat(obj.TotalDeduction, 2), true);
                        FillCell(sheet, nRowIndex, nStartCol++, Global.MillionFormat(obj.NetAmount, 2), true);

                        FillCell(sheet, nRowIndex, nStartCol++, ((string.IsNullOrEmpty(obj.AccountNo)) ? "" : Global.MillionFormat(obj.NetAmount, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, ((string.IsNullOrEmpty(obj.AccountNo)) ? Global.MillionFormat(obj.NetAmount, 2) : ""), false);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.AccountNo, false);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.BankName, false);
                        FillCell(sheet, nRowIndex, nStartCol++, "-", false);
                        nRowIndex++;
                    }
                }
                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SalarySheet-F6.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }

        public void ReportHeader(string unitName, string address, string deptName, string locName, List<TableHeader> table_header, ref ExcelWorksheet sheet, ref int nRowIndex, int nStartCol, int nEndCol, int nMonthID, int nYear)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;
            string[] months = new string[] { "জানুয়ারী", "ফেব্রুয়ারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "অগাস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর" };
           
            #region Report Header
            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = unitName; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;


            //cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            //cell.Merge = true;
            //cell.Value = address; cell.Style.Font.Bold = true;
            //cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            //nRowIndex++;

            //cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            //cell.Merge = true;
            //cell.Value = "Floor: " + locName; cell.Style.Font.Bold = false;
            //cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            //nRowIndex++;


            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nStartCol + 4];
            cell.Merge = true;
            cell.Value = "Floor: " + locName; cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, nStartCol + 5, nRowIndex, nEndCol - 5];
            cell.Merge = true;
            cell.Value = address; cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            nRowIndex++;

            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nStartCol + 3];
            cell.Merge = true;
            cell.Value = "Section: " + deptName; cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, nStartCol + 4, nRowIndex, nEndCol - 4];
            cell.Merge = true;
            cell.Value = "বেতন ভাতা ও ওভার টাইম বিবরণী"; cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, nEndCol - 3, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = "মাস: " + months[nMonthID - 1] + " " + NumberFormat(nYear.ToString()); cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;


            ExcelTool.GenerateHeader(table_header, ref sheet, ref nRowIndex, nStartCol, nEndCol, 8);
            #endregion
        }
        public void PageBreak(ref ExcelWorksheet sheet, int nRowIndex, int nEndCol)
        {
             sheet.Row(nRowIndex).PageBreak = true;
             sheet.Row(nEndCol).PageBreak = true;
        }
        private void FillCellMerge(ref ExcelWorksheet sheet, int startRowIndex, int endRowIndex, int startColIndex, int endColIndex, string sVal)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            cell = sheet.Cells[startRowIndex, startColIndex, endRowIndex, endColIndex];
            cell.Merge = true;
            cell.Value = sVal;
            cell.Style.Font.Bold = false;
            cell.Style.WrapText = true;
            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
        }
        public ActionResult PrintSalarySheet_DetailFormat_F6_Bangla(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)//F6 XL
        {
            string BlockIds = string.Empty;
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, IsCompliance, ((User)Session[SessionInfo.CurrentUser]).UserID);

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "SalarySheet_DetailFormat_F6.rpt"));
            rd.SetDataSource(oAMGSalarySheets);
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();
            try
            {
                //string[] months = new string[] { "জানুয়ারী", "ফেব্রুয়ারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "অগাস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর" };
                string[] months = new string[] { "Rvbyqvix", "‡deªyqvwi", "gvP©", "GwcÖj", "‡g", "Ryb", "RyjvB", "AMvó", "‡m‡Þ¤^i", "A‡±vei", "b‡f¤^i", "wW‡m¤^i" };
                string sMonthName = "gvmt " + months[nMonthID - 1] + " " + NumberFormatWithBijoy(nYear.ToString());
                TextObject txtSalaryMonth = (TextObject)rd.ReportDefinition.Sections["Section2"].ReportObjects["txtSalaryMonth"];
                txtSalaryMonth.Text = sMonthName;

                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return File(stream, "application/pdf");
            }
            catch { throw; }
        }
        public void PrintSalarySheet_DetailFormat_F6_BanglaTest(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)//F6 XL
        {
            string BlockIds = string.Empty;
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, IsCompliance, ((User)Session[SessionInfo.CurrentUser]).UserID);


            //string sSQL = "Select * from SalarySheetSignature";
            //var oSalarySheetSignatures = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            var oCompany = new Company();
            var results = Company.Gets("Select * from View_Company", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            if (results.Any())
                oCompany = results.First();

            #region Header

            List<TableHeader> table_header = new List<TableHeader>();
            //table_header.Add(new TableHeader { Header = "#", Width = 8f, IsRotate = false});
            table_header.Add(new TableHeader { Header = "নাম ও পদবী", Width = 11f, IsRotate = false});
            table_header.Add(new TableHeader { Header = "কার্ড নং ও যোগদানের তারিখ ", Width = 9f, IsRotate = false});
            table_header.Add(new TableHeader { Header = "গ্রেড", Width = 5f, IsRotate = false});

            table_header.Add(new TableHeader { Header = "মোট কর্ম দিবস", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "মাসিক ছুটি", Width = 3f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "উপঃ দিবস", Width = 3f, IsRotate = true });


            table_header.Add(new TableHeader
           {
               Header = "ছুটি সম্মূহ",
               Width = 15f,
               IsRotate = false,
               ChildHeader = new List<TableHeader>()
                {
                    new TableHeader { Header = "ক্ষতি পূরণ", Width = 4f, IsRotate = false},
                    new TableHeader { Header = "নৈ:", Width = 3f, IsRotate = false},
                    new TableHeader { Header = "অ:", Width = 3f, IsRotate = false},
                    new TableHeader { Header = "ডা:", Width = 3f, IsRotate = false}
                }
           });


            table_header.Add(new TableHeader { Header = "অনুঃ দিবস", Width = 3f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "মোট উপঃ দিবস", Width = 4f, IsRotate = false });

            table_header.Add(new TableHeader { Header = "মোট বেতন ", Width = 7f, IsRotate = false});
            table_header.Add(new TableHeader { Header = "মূল বেতন", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "বাড়ি ভাড়া", Width = 6f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "চিকি: ভাতা", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "খাদ্য ভাতা", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "যাতা: ভাতা", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "অর্জিত বেতন ", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "হাজিরা বোনাস", Width = 4f, IsRotate = false });

            table_header.Add(new TableHeader
            {
                Header = "ওভার টাইম",
                Width = 9f,
                IsRotate = false,
                ChildHeader = new List<TableHeader>()
                {
                    new TableHeader { Header = "ঘন্টা", Width = 3f, IsRotate = false},
                    new TableHeader { Header = "রেট", Width = 5f, IsRotate = false},
                    new TableHeader { Header = "টাকা", Width = 6f, IsRotate = false}
                }
            });

            table_header.Add(new TableHeader { Header = "মোট প্রাপ্য বেতন", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "অনুপঃ জন্য কর্তন", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "অগ্রিম/অন্যান্য কর্তন", Width = 6f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "রাজস্ব কর্তন", Width = 4f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "নিট প্রাপ্য বেতন", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "স্বাক্ষর", Width = 9f, IsRotate = false});
           
            #endregion


            #region Export Excel
            int nRowIndex = 1, nStartCol = 1, nEndCol = 0;
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Salary Sheet");
                sheet.Name = "Salary Sheet";
                sheet.PrinterSettings.TopMargin = 0;
                sheet.PrinterSettings.BottomMargin = 0;
                sheet.PrinterSettings.LeftMargin = 0;
                sheet.PrinterSettings.RightMargin = 0;

                ExcelTool.SetColumnWidth(table_header, ref sheet, ref nStartCol, ref nEndCol);
                

                #region Body
                int nCount = 0;
                float cellHeight = 60f;

                var data = oAMGSalarySheets.GroupBy(x => new { x.BUName, x.LocName, x.DptName }, (key, grp) => new
                {
                    BUName = key.BUName,
                    LocName = key.LocName,
                    DptName = key.DptName,
                    Results = grp.ToList()
                });

                foreach (var oItem in data)
                {
                    //FillCell(sheet, nRowIndex, nStartCol++, "Unit Name: " + oItem.BUName + ", Dept. Name: " + oItem.DptName, false);
                    foreach (var obj in oItem.Results)
                    {
                        nStartCol = 1;

                        if (nCount % 7 == 0)
                        {
                            ReportHeader(oItem.BUName, obj.BUAddress, oItem.DptName, oItem.LocName, table_header, ref sheet, ref nRowIndex, nStartCol, nEndCol, nMonthID, nYear);
                        }
                        nCount++;
                        //FillCell(sheet, nRowIndex, nStartCol++, (++nCount).ToString(), false);
                        FillCell(sheet, nRowIndex, nStartCol++, ((obj.EmpNameInBangla == "") ? obj.Name : obj.EmpNameInBangla) + '\n' + ((obj.DsgNameInBangla == "") ? obj.DsgName : obj.DsgNameInBangla), false);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.Code +'\n'+ obj.DOJInStr, false);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.Grade, false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.TotalDays.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.DayOffHoliday.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.Present.ToString()), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.LWP.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.CL.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.EL.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.SL.ToString()), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.Absent.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.LeaveDays.ToString()), false);

                        //FillCell(sheet, nRowIndex, nStartCol++, obj.EWD.ToString(), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Gross, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Basics, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.HR, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Med, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Food, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Conv, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.GrossEarning, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.AttBonus, 0)), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_HR, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_Rate, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_Amount, 0)), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Earning, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.AbsentAmount, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Advance, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Stemp, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.NetAmount, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, "-", false);
                        sheet.Row(nRowIndex).Height = cellHeight;
                        sheet.Row(nRowIndex).Style.Font.Size = 8;

                        if (nCount % 7 == 0)
                        {
                            //nRowIndex++;
                            //sheet.Row(nRowIndex).Height = 15;
                            //FillCellMerge(ref sheet, nRowIndex, nRowIndex, 1, nEndCol, " ");

                            nRowIndex++;
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 1, 4, "------------- ");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 5, nEndCol - 5, "-------------");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, nEndCol - 4, nEndCol, "-------------");
                            sheet.Row(nRowIndex).Height = 40;
                            sheet.Row(nRowIndex).Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;

                            nRowIndex++;
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 1, 4, "প্রস্তূতকারক ");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 5, nEndCol - 5, "প্রধান হিসাব রক্ষক ");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, nEndCol - 4, nEndCol, "পরিচালক / ব্যাবস্থাপনা পরিচালক ");

                            PageBreak(ref sheet, nRowIndex, nEndCol);
                        }
                        nRowIndex++;
                    }
                }
                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SalarySheet-F6.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }
        public void ExcelSalarySheet_DetailFormat_F6_Bangla(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)//F6 XL
        {
            string BlockIds = string.Empty;
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, IsCompliance, ((User)Session[SessionInfo.CurrentUser]).UserID);


            //string sSQL = "Select * from SalarySheetSignature";
            //var oSalarySheetSignatures = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            var oCompany = new Company();
            var results = Company.Gets("Select * from View_Company", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            if (results.Any())
                oCompany = results.First();

            #region Header

            List<TableHeader> table_header = new List<TableHeader>();
            //table_header.Add(new TableHeader { Header = "#", Width = 8f, IsRotate = false});
            table_header.Add(new TableHeader { Header = "নাম ও পদবী", Width = 11f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "কার্ড নং ও যোগদানের তারিখ ", Width = 9f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "গ্রেড", Width = 5f, IsRotate = false });

            table_header.Add(new TableHeader { Header = "মোট কর্ম দিবস", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "মাসিক ছুটি", Width = 3f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "উপঃ দিবস", Width = 3f, IsRotate = true });


            table_header.Add(new TableHeader
            {
                Header = "ছুটি সম্মূহ",
                Width = 15f,
                IsRotate = false,
                ChildHeader = new List<TableHeader>()
                {
                    new TableHeader { Header = "ক্ষতি পূরণ", Width = 4f, IsRotate = false},
                    new TableHeader { Header = "নৈ:", Width = 3f, IsRotate = false},
                    new TableHeader { Header = "অ:", Width = 3f, IsRotate = false},
                    new TableHeader { Header = "ডা:", Width = 3f, IsRotate = false}
                }
            });


            table_header.Add(new TableHeader { Header = "অনুঃ দিবস", Width = 3f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "মোট উপঃ দিবস", Width = 4f, IsRotate = false });

            table_header.Add(new TableHeader { Header = "মোট বেতন ", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "মূল বেতন", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "বাড়ি ভাড়া", Width = 6f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "চিকি: ভাতা", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "খাদ্য ভাতা", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "যাতা: ভাতা", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "অর্জিত বেতন ", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "হাজিরা বোনাস", Width = 4f, IsRotate = false });

            table_header.Add(new TableHeader
            {
                Header = "ওভার টাইম",
                Width = 9f,
                IsRotate = false,
                ChildHeader = new List<TableHeader>()
                {
                    new TableHeader { Header = "ঘন্টা", Width = 3f, IsRotate = false},
                    new TableHeader { Header = "রেট", Width = 5f, IsRotate = false},
                    new TableHeader { Header = "টাকা", Width = 6f, IsRotate = false}
                }
            });

            table_header.Add(new TableHeader { Header = "মোট প্রাপ্য বেতন", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "অনুপঃ জন্য কর্তন", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "অগ্রিম/অন্যান্য কর্তন", Width = 6f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "রাজস্ব কর্তন", Width = 4f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "নিট প্রাপ্য বেতন", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "স্বাক্ষর", Width = 9f, IsRotate = false });

            #endregion


            #region Export Excel
            int nRowIndex = 1, nStartCol = 1, nEndCol = 0;
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Salary Sheet");
                sheet.Name = "Salary Sheet";
                sheet.PrinterSettings.TopMargin = 0;
                sheet.PrinterSettings.BottomMargin = 0;
                sheet.PrinterSettings.LeftMargin = 0;
                sheet.PrinterSettings.RightMargin = 0;

                ExcelTool.SetColumnWidth(table_header, ref sheet, ref nStartCol, ref nEndCol);


                #region Body
                int nCount = 0;
                float cellHeight = 60f;

                var data = oAMGSalarySheets.GroupBy(x => new { x.BUName, x.LocName, x.DptName }, (key, grp) => new
                {
                    BUName = key.BUName,
                    LocName = key.LocName,
                    DptName = key.DptName,
                    Results = grp.ToList()
                });

                foreach (var oItem in data)
                {
                    //FillCell(sheet, nRowIndex, nStartCol++, "Unit Name: " + oItem.BUName + ", Dept. Name: " + oItem.DptName, false);
                    foreach (var obj in oItem.Results)
                    {
                        nStartCol = 1;

                        if (nCount % 7 == 0)
                        {
                            ReportHeader(oItem.BUName, obj.BUAddress, oItem.DptName, oItem.LocName, table_header, ref sheet, ref nRowIndex, nStartCol, nEndCol, nMonthID, nYear);
                        }
                        nCount++;
                        //FillCell(sheet, nRowIndex, nStartCol++, (++nCount).ToString(), false);
                        FillCell(sheet, nRowIndex, nStartCol++, ((obj.EmpNameInBangla == "") ? obj.Name : obj.EmpNameInBangla) + '\n' + ((obj.DsgNameInBangla == "") ? obj.DsgName : obj.DsgNameInBangla), false);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.Code + '\n' + obj.DOJInStr, false);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.Grade, false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.TotalDays.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.DayOffHoliday.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.Present.ToString()), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.LWP.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.CL.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.EL.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.SL.ToString()), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.Absent.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.LeaveDays.ToString()), false);

                        //FillCell(sheet, nRowIndex, nStartCol++, obj.EWD.ToString(), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Gross, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Basics, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.HR, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Med, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Food, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Conv, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.GrossEarning, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.AttBonus, 0)), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_HR, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_Rate, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_Amount, 0)), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Earning, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.AbsentAmount, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Advance, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Stemp, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.NetAmount, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, "-", false);
                        sheet.Row(nRowIndex).Height = cellHeight;
                        sheet.Row(nRowIndex).Style.Font.Size = 8;

                        if (nCount % 7 == 0)
                        {
                            //nRowIndex++;
                            //sheet.Row(nRowIndex).Height = 15;
                            //FillCellMerge(ref sheet, nRowIndex, nRowIndex, 1, nEndCol, " ");

                            nRowIndex++;
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 1, 4, "------------- ");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 5, nEndCol - 5, "-------------");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, nEndCol - 4, nEndCol, "-------------");
                            sheet.Row(nRowIndex).Height = 40;
                            sheet.Row(nRowIndex).Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;

                            nRowIndex++;
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 1, 4, "প্রস্তূতকারক ");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 5, nEndCol - 5, "প্রধান হিসাব রক্ষক ");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, nEndCol - 4, nEndCol, "পরিচালক / ব্যাবস্থাপনা পরিচালক ");

                            PageBreak(ref sheet, nRowIndex, nEndCol);
                        }
                        nRowIndex++;
                    }
                }
                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SalarySheet-F6.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }

        private ExcelRange FillCellLeftFirstCol(ExcelWorksheet sheet, int nRowIndex, int nStartCol, string sVal, bool IsNumber)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            cell = sheet.Cells[nRowIndex, nStartCol++];
            cell.Value = sVal;
            cell.Style.Font.Bold = false;
            cell.Style.WrapText = true;
            if (IsNumber)
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = 0;
            return cell;
        }

        private ExcelRange FillCellLeft(ExcelWorksheet sheet, int nRowIndex, int nStartCol, string sVal, bool IsNumber)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            cell = sheet.Cells[nRowIndex, nStartCol++];
            cell.Value = sVal;
            cell.Style.Font.Bold = false;
            cell.Style.WrapText = true;
            if (IsNumber)
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            return cell;
        }
        private ExcelRange FillCellLeftSpan(ExcelWorksheet sheet, int nRowIndex, int nStartCol, int nEndRowIndex, int nEndCol, string sVal, bool IsNumber)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            cell = sheet.Cells[nRowIndex, nStartCol, nEndRowIndex, nEndCol];
            cell.Value = sVal;
            cell.Merge = true;
            cell.Style.Font.Bold = false;
            cell.Style.WrapText = true;
            if (IsNumber)
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            return cell;
        }
        private ExcelRange FillCellLeftSpanCenter(ExcelWorksheet sheet, int nRowIndex, int nStartCol, int nEndRowIndex, int nEndCol, string sVal, bool IsNumber)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            cell = sheet.Cells[nRowIndex, nStartCol, nEndRowIndex, nEndCol];
            cell.Value = sVal;
            cell.Merge = true;
            cell.Style.Font.Bold = false;
            cell.Style.WrapText = true;
            if (IsNumber)
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            return cell;
        }

        public void ReportHeaderPaySlip(string unitName, string address, ref ExcelWorksheet sheet, ref int nRowIndex, int nStartCol, int nEndCol, string code, string ocec, DateTime salaryDate)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            #region Report Header


            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = ""; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;

            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = ""; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;

            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = unitName; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;



            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = address; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;

            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nStartCol + 1];
            cell.Merge = true;
            cell.Value = "কার্ড নংঃ" + code; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 10; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, nStartCol + 2, nRowIndex, nStartCol + 3];
            cell.Merge = true;
            cell.Value = "বেতন প্রদানের রশিদ" + ocec; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 9; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, nStartCol + 4, nRowIndex, nStartCol + 5];
            cell.Merge = true;
            cell.Value = "বেতন প্রদানের তারিখঃ " + NumberFormat(salaryDate.ToString("dd/MM/yyy")); cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 9; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;


            #endregion
        }


        public void ExcelPaySlip_F6_Bangla(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts, DateTime SalaryDate)//F6 XL
        {
            string BlockIds = string.Empty;
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, IsCompliance, ((User)Session[SessionInfo.CurrentUser]).UserID);


            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignatures = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            var oCompany = new Company();
            var results = Company.Gets("Select * from View_Company", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            if (results.Any())
                oCompany = results.First();

            #region Header


            #endregion


            #region Export Excel
            int nRowIndex = 1, nStartCol = 1, nEndCol = 0;
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Pay Slip");
                sheet.Name = "Pay Slip";
                sheet.PrinterSettings.TopMargin = 0;
                sheet.PrinterSettings.BottomMargin = 0;
                sheet.PrinterSettings.LeftMargin = 0;
                sheet.PrinterSettings.RightMargin = 0;

                //ExcelTool.SetColumnWidth(table_header, ref sheet, ref nStartCol, ref nEndCol);

                int n = 1;
                sheet.Column(n++).Width = 10; //1st
                sheet.Column(n++).Width = 14; //2nd
                sheet.Column(n++).Width = 17; //3rd
                sheet.Column(n++).Width = 14; //4th
                sheet.Column(n++).Width = 17; //5th
                sheet.Column(n++).Width = 17; //6th
                sheet.Column(n++).Width = 14; //6th


                #region Body
                int nCount = 0;
                float cellHeight = 32f;

                var data = oAMGSalarySheets.GroupBy(x => new { x.BUName, x.LocName, x.DptName }, (key, grp) => new
                {
                    BUName = key.BUName,
                    LocName = key.LocName,
                    DptName = key.DptName,
                    Results = grp.ToList()
                });

                string[] months = new string[] { "জানুয়ারী", "ফেব্রুয়ারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "অগাস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর" };
           

                foreach (var oItem in data)
                {
                    //FillCell(sheet, nRowIndex, nStartCol++, "Unit Name: " + oItem.BUName + ", Dept. Name: " + oItem.DptName, false);
                    foreach (var obj in oItem.Results)
                    {
                        for (int o = 1; o <= 2; o++)
                        {
                            nStartCol = 2;

                            //if (nCount % 7 == 0)
                            //{
                            //    ReportHeader(oItem.BUName, oItem.DptName, oItem.LocName, table_header, ref sheet, ref nRowIndex, nStartCol, nEndCol, nMonthID, nYear);
                            //}
                            nCount++;
                            string OCEC = "";
                            if (o == 1) OCEC = " (Office Copy)";
                            else OCEC = " (Employee Copy)";
                            ReportHeaderPaySlip(obj.BUName, obj.BUAddress, ref sheet, ref nRowIndex, nStartCol, 7, obj.Code, OCEC, SalaryDate);

                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;


                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মাস", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, months[nMonthID - 1] + " " + NumberFormat(nYear.ToString()), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "সেকশন", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, obj.DptName, false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "যোগদানের তারিখ", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.DOJ.ToString("dd/MM/yyyy")), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "কর্মচারীর নাম", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, (obj.EmpNameInBangla == "") ? obj.Name : obj.EmpNameInBangla, false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "পদবী", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, (obj.DsgNameInBangla == "") ? obj.DsgName : obj.DsgNameInBangla, false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "গ্রেড", false);
                            FillCell(sheet, nRowIndex, nStartCol++, obj.Grade, false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মোট বেতন", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Gross, 2)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মোট ছুটি", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(obj.DayOffHoliday.ToString()), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "ও.টি টাকা", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_Amount, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মূল বেতন", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Basics, 2)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মোট অনুপস্থিত দিবস", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(obj.Absent.ToString()), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "হাজিরা বোনাস", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.AttBonus, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "বাড়ী ভাড়া", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.HR, 0)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মোট উপস্থিত দিবস", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(obj.Present.ToString()), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "অনুপস্থিত কর্তন", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.AbsentAmount, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "চিকিৎসা", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Med, 0)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "অর্জিত বেতন", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.GrossEarning, 0)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "অগ্রিম/অন্যান্য কর্তন", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Advance, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "খাদ্য", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Food, 0)), false);
                            FillCellLeftSpan(sheet, nRowIndex, nStartCol, nRowIndex + 1, nStartCol++, "ও.টি. রেট", false);
                            FillCellLeftSpan(sheet, nRowIndex, nStartCol, nRowIndex + 1, nStartCol++, "(" + obj.Basics + " x 2" + ") / " + 208 + " = " + NumberFormat(Global.MillionFormat(((obj.Basics * 2) / 208), 0)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মোট প্রাপ্য বেতন", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Earning, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "যাতায়াত", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Conv, 0)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol += 2, "রাজস্ব", false);
                            FillCell(sheet, nRowIndex, nStartCol += 1, NumberFormat(Global.MillionFormat(obj.Stemp, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মোট কর্মদিবস", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(obj.TotalDays.ToString()), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "ও. টি. ঘণ্টা", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_HR, 0)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মোট নীট প্রাপ্য বেতন", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.NetAmount, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;


                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeftSpan(sheet, nRowIndex, nStartCol, nRowIndex, nStartCol += 3, "নীট প্রদেয় বেতন কথায় : " + Global.AmountInWords(obj.NetAmount, "", ""), false);
                            FillCell(sheet, nRowIndex, nStartCol += 1, "", false);
                            FillCell(sheet, nRowIndex, nStartCol += 1, "", false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeftSpan(sheet, nRowIndex, nStartCol, nRowIndex, nStartCol += 3, "বি:দ্র: ইহা একটি কম্পিউটার প্রণীত পে-স্লিপ, কোন সাক্ষর আবশ্যকীয় নয়।", false);
                            FillCell(sheet, nRowIndex, nStartCol += 1, "", false);
                            FillCell(sheet, nRowIndex, nStartCol += 1, "", false);


                            sheet.Row(nRowIndex).Height = cellHeight;
                            nRowIndex++;
                        }
                        if (nRowIndex % 28 == 0)
                        {
                            PageBreak(ref sheet, nRowIndex, nEndCol);
                        }

                    }
                }
                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=PaySlip.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }




        public void ReportHeaderPaySlipForOT(string unitName, string address, ref ExcelWorksheet sheet, ref int nRowIndex, int nStartCol, int nEndCol, string code, string ocec)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            #region Report Header


            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = ""; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;

            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = ""; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;

            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = unitName; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;



            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = address; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;

            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nStartCol + 1];
            cell.Merge = true;
            cell.Value = "কার্ড নংঃ" + code; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 10; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, nStartCol + 2, nRowIndex, nStartCol + 3];
            cell.Merge = true;
            cell.Value = "বেতন প্রদানের রশিদ" + ocec; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 9; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, nStartCol + 4, nRowIndex, nStartCol + 5];
            cell.Merge = true;
            cell.Value = "বেতন প্রদানের তারিখঃ " + NumberFormat(DateTime.Now.ToString("dd/MM/yyyy")); cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 9; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;


            #endregion
        }

        public void ExcelExtraOTConfPaySlip(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroubByDept, string sGroupIDs, string sBlockIDs, double ts, int nMOCID)//F6 XL
        {
            string BlockIds = string.Empty;
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.GetsPaySlip(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, nMOCID, ((User)Session[SessionInfo.CurrentUser]).UserID);


            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignatures = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            var oCompany = new Company();
            var results = Company.Gets("Select * from View_Company", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            if (results.Any())
                oCompany = results.First();

            #region Header


            #endregion


            #region Export Excel
            int nRowIndex = 1, nStartCol = 1, nEndCol = 0;
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Pay Slip");
                sheet.Name = "Pay Slip";
                sheet.PrinterSettings.TopMargin = 0;
                sheet.PrinterSettings.BottomMargin = 0;
                sheet.PrinterSettings.LeftMargin = 0;
                sheet.PrinterSettings.RightMargin = 0;

                //ExcelTool.SetColumnWidth(table_header, ref sheet, ref nStartCol, ref nEndCol);

                int n = 1;
                sheet.Column(n++).Width = 10; //1st
                sheet.Column(n++).Width = 17; //2nd
                sheet.Column(n++).Width = 17; //3rd
                sheet.Column(n++).Width = 16; //4th
                sheet.Column(n++).Width = 22; //5th
                sheet.Column(n++).Width = 17; //6th
                sheet.Column(n++).Width = 16; //6th


                #region Body
                int nCount = 0;
                float cellHeight = 32f;

                var data = oAMGSalarySheets.GroupBy(x => new { x.BUName, x.LocName, x.DptName }, (key, grp) => new
                {
                    BUName = key.BUName,
                    LocName = key.LocName,
                    DptName = key.DptName,
                    Results = grp.ToList()
                });

                string[] months = new string[] { "জানুয়ারী", "ফেব্রুয়ারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "অগাস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর" };


                foreach (var oItem in data)
                {
                    //FillCell(sheet, nRowIndex, nStartCol++, "Unit Name: " + oItem.BUName + ", Dept. Name: " + oItem.DptName, false);
                    foreach (var obj in oItem.Results)
                    {
                        //for (int o = 1; o <= 2; o++)
                        //{
                            nStartCol = 2;

                            //if (nCount % 7 == 0)
                            //{
                            //    ReportHeader(oItem.BUName, oItem.DptName, oItem.LocName, table_header, ref sheet, ref nRowIndex, nStartCol, nEndCol, nMonthID, nYear);
                            //}
                            nCount++;
                            string OCEC = "";
                            //if (o == 1) OCEC = " (Office Copy)";
                            //else OCEC = " (Employee Copy)";
                            ReportHeaderPaySlipForOT(obj.BUName, obj.BUAddress, ref sheet, ref nRowIndex, nStartCol, 7, obj.Code, OCEC);

                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;


                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মাস", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, months[nMonthID - 1] + " " + NumberFormat(nYear.ToString()), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "সেকশন", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, obj.DptName, false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "যোগদানের তারিখ", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.DOJ.ToString("dd/MM/yyyy")), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "কর্মচারীর নাম", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, (obj.EmpNameInBangla == "") ? obj.Name : obj.EmpNameInBangla, false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "পদবী", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, (obj.DsgNameInBangla == "") ? obj.DsgName : obj.DsgNameInBangla, false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "গ্রেড", false);
                            FillCell(sheet, nRowIndex, nStartCol++, obj.Grade, false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মোট বেতন", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Gross, 2)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মোট ছুটি", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(obj.DayOffHoliday.ToString()), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "ও.টি টাকা", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_Amount, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মূল বেতন", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Basics, 2)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মোট অনুপস্থিত দিবস", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(obj.Absent.ToString()), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "অতিরিক্ত ও.টি ঘণ্টা", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.ExtraOTHR, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "বাড়ী ভাড়া", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.HR, 0)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মোট উপস্থিত দিবস", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(obj.Present.ToString()), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "অতিরিক্ত ও.টি টাকা", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.ExtraOTAmount, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "চিকিৎসা", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Med, 0)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "অর্জিত বেতন", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.GrossEarning, 0)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "হাজিরা বোনাস", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.AttBonus, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "খাদ্য", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Food, 0)), false);
                            FillCellLeftSpan(sheet, nRowIndex, nStartCol, nRowIndex + 1, nStartCol++, "ও.টি. রেট", false);
                            FillCellLeftSpan(sheet, nRowIndex, nStartCol, nRowIndex + 1, nStartCol++, "(" + NumberFormat(obj.Basics.ToString()) + " x ২" + ") / " + "২০৮" + " = " + NumberFormat(Global.MillionFormat(((obj.Basics * 2) / 208), 0)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "অনুপস্থিত কর্তন", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.AbsentAmount, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "যাতায়াত", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Conv, 0)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol += 2, "অগ্রিম/অন্যান্য কর্তন", false);
                            FillCell(sheet, nRowIndex, nStartCol += 1, NumberFormat(Global.MillionFormat(obj.Advance, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মোট কর্মদিবস", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(obj.TotalDays.ToString()), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "ও. টি. ঘণ্টা", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_HR, 0)), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol++, "মোট প্রাপ্য বেতন", false);
                            FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Earning, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;


                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeftSpan(sheet, nRowIndex, nStartCol, nRowIndex, nStartCol += 3, "নীট প্রদেয় বেতন কথায় : " + Global.AmountInWords(obj.NetAmount, "", ""), false);
                            FillCellLeft(sheet, nRowIndex, nStartCol += 1, "রাজস্ব", false);
                            FillCell(sheet, nRowIndex, nStartCol += 1, NumberFormat(Global.MillionFormat(obj.Stemp, 0)), false);
                            nRowIndex++; nStartCol = 1;
                            sheet.Row(nRowIndex).Height = cellHeight;

                            FillCellLeftFirstCol(sheet, nRowIndex, nStartCol++, "", false);

                            FillCellLeftSpan(sheet, nRowIndex, nStartCol, nRowIndex, nStartCol += 3, "বি:দ্র: ইহা একটি কম্পিউটার প্রণীত পে-স্লিপ, কোন সাক্ষর আবশ্যকীয় নয়।", false);
                            FillCellLeft(sheet, nRowIndex, nStartCol += 1, "মোট নীট প্রাপ্য বেতন", false);
                            FillCell(sheet, nRowIndex, nStartCol += 1, NumberFormat(Global.MillionFormat(obj.NetAmount, 0)), false);


                            sheet.Row(nRowIndex).Height = cellHeight;
                            nRowIndex++;
                        //}
                        if (nRowIndex % 28 == 0)
                        {
                            PageBreak(ref sheet, nRowIndex, nEndCol);
                        }

                    }
                }
                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=PaySlip.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }


        #endregion
        private EmployeeSalary GetEmployeesSalaryFromSalarySheet(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, double nStartSalaryRange, double nEndSalaryRange, bool IsCompliance, string sGroupIDs, string sBlockIDs)
        {
            string sStartDate;
            string sEndDate;
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary.EmployeeSalarySheets = RPTSalarySheet.GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sBlockIDs, sGroupIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, IsCompliance, nPayType, false, 0);
            oEmployeeSalary.EmployeeSalarySheetDetails = RPTSalarySheetDetail.GetEmployeesSalaryDetail(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sBlockIDs, sGroupIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, IsCompliance);


            if (oEmployeeSalary.EmployeeSalarySheets.Count > 0)
            {
                sStartDate = oEmployeeSalary.EmployeeSalarySheets[0].StartDateInString;
                sEndDate = oEmployeeSalary.EmployeeSalarySheets[0].EndDateInString;
            }
            else
            {
                sStartDate = "01 JAN 1950";
                sEndDate = "01 JAN 1950";
            }

            string sSql_SalaryHead = "";
            if (IsCompliance)
            {
                sSql_SalaryHead = "SELECT * FROM SalaryHead";
                //sSql_SalaryHead = "SELECT * FROM SalaryHead WHERE SalaryHeadID IN(SELECT Distinct SalaryHeadID  FROM EmployeeSalaryDetail WHERE "
                //                        + " EmployeeSalaryID IN(SELECT Distinct EmployeeSalaryID FROM View_EmployeeSalary WHERE MonthID=" + nMonthID + " AND  DATEPART(YYYY,EndDate)=" + nYear + ") AND CompAmount>0)";
            }
            else
            {
                sSql_SalaryHead = "SELECT * FROM SalaryHead WHERE SalaryHeadID IN(SELECT SalaryHeadID  FROM EmployeeSalaryDetail WHERE "
                                        + " EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM View_EmployeeSalary WHERE MonthID=" + nMonthID + " AND  DATEPART(YYYY,EndDate)=" + nYear + ") AND Amount>0)";
            }

            oEmployeeSalary.SalaryHeads = SalaryHead.Gets(sSql_SalaryHead, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            oEmployeeSalary.ErrorMessage = sStartDate + "," + sEndDate;
            return oEmployeeSalary;
        }
        #region Golden Salry
        public ActionResult PrintSalarySheet_Corporate(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroubByDept, string sGroupIDs, string sBlockIDs, double ts)// F4
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, IsCompliance, sGroupIDs, sBlockIDs);

            string sStartDate = "";
            string sEndDate = "";
            string sSql = "";
            string sEmployeeIDs = "";
            List<EmployeeLeaveOnAttendance> oELOnAttendances = new List<EmployeeLeaveOnAttendance>();
            if (oEmployeeSalary.EmployeeSalarySheets.Count > 0)
            {
                sStartDate = oEmployeeSalary.EmployeeSalarySheets[0].StartDateInString;
                sEndDate = oEmployeeSalary.EmployeeSalarySheets[0].EndDateInString;
                sEmployeeIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Select(x => x.EmployeeID));
                sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + sEmployeeIDs + ")";
                oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oELOnAttendances = EmployeeLeaveOnAttendance.GetsComp(sEmployeeIDs, Convert.ToDateTime(sStartDate), Convert.ToDateTime(sEndDate), ((User)Session[SessionInfo.CurrentUser]).UserID);
                //oELOnAttendances.ForEach(x =>
                //{
                //    x.LeaveHeadID = x.CompLeaveHeadID;
                //});
            }
            else
            {
                sStartDate = DateTime.Now.ToString("dd MMM yyyy");
                sEndDate = DateTime.Now.ToString("dd MMM yyyy");
                oEmployeeSalary.Employees = new List<Employee>();
            }

            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();
            sSql = "Select * from LeaveHead Order By LeaveHeadID";
            oLeaveHeads = LeaveHead.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            List<PayrollProcessManagement> oPayrollProcessManagements = new List<PayrollProcessManagement>();
            sSql = "SELECT * FROM View_PayrollProcessManagement WHERE  SalaryFrom ='" + sStartDate + "' AND SalaryTo  ='" + sEndDate + "' ";
            oPayrollProcessManagements = PayrollProcessManagement.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            oEmployeeSalary.ErrorMessage = sStartDate + "," + sEndDate;
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);
            foreach (Employee oItem in oEmployeeSalary.Employees)
            {
                oItem.EmployeePhoto = GetEmployeePhoto(oItem);
            }

            rptGoldenSalarySheet_Corporate oReport = new rptGoldenSalarySheet_Corporate();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary, oLeaveHeads, oELOnAttendances, oPayrollProcessManagements, oSalarySheetPropertys, oSalarySheetSignature);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintSalarySheet_CorporateAsPerTimeCard(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, int nTimeCardID, double ts)// F4
        {
            AMGSalarySheet oAMGSalarySheet = new AMGSalarySheet();
            oAMGSalarySheet.AMGSalarySheets = AMGSalarySheet.GetsComp(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, nTimeCardID, ((User)Session[SessionInfo.CurrentUser]).UserID);




            string sStartDate = "";
            string sEndDate = "";
            string sSql = "";
            string sEmployeeIDs = "";
            List<EmployeeLeaveOnAttendance> oELOnAttendances = new List<EmployeeLeaveOnAttendance>();
            if (oAMGSalarySheet.AMGSalarySheets.Count > 0)
            {
                sStartDate = oAMGSalarySheet.AMGSalarySheets[0].StartDate.ToString("dd MMM yyyy");
                sEndDate = oAMGSalarySheet.AMGSalarySheets[0].EndDate.ToString("dd MMM yyyy");
                sEmployeeIDs = string.Join(",", oAMGSalarySheet.AMGSalarySheets.Select(x => x.EmployeeID));
                sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + sEmployeeIDs + ")";
                oAMGSalarySheet.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oELOnAttendances = EmployeeLeaveOnAttendance.GetsActulaForComp(sEmployeeIDs, Convert.ToDateTime(sStartDate), Convert.ToDateTime(sEndDate), ((User)Session[SessionInfo.CurrentUser]).UserID);

                string sEmployeeSalaryIDs = string.Join(",", oAMGSalarySheet.AMGSalarySheets.Select(x => x.EmployeeSalaryID));
                sSql = "SELECT * FROM View_ComplianceEmployeeSalaryDetail AS HH WHERE HH.EmployeeSalaryID IN (" + sEmployeeSalaryIDs + ")";
                oAMGSalarySheet.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));
                oAMGSalarySheet.SalaryHeads = SalaryHead.Gets("SELECT * FROM SalaryHead", (int)(Session[SessionInfo.currentUserID]));
            }
            else
            {
                sStartDate = DateTime.Now.ToString("dd MMM yyyy");
                sEndDate = DateTime.Now.ToString("dd MMM yyyy");
                oAMGSalarySheet.Employees = new List<Employee>();
            }

            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();
            sSql = "Select * from LeaveHead Order By LeaveHeadID";
            oLeaveHeads = LeaveHead.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            List<CompliancePayrollProcessManagement> oCompliancePayrollProcessManagements = new List<CompliancePayrollProcessManagement>();
            sSql = "SELECT * FROM View_CompliancePayrollProcessManagement WHERE  SalaryFrom ='" + sStartDate + "' AND SalaryTo  ='" + sEndDate + "' ";
            oCompliancePayrollProcessManagements = CompliancePayrollProcessManagement.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            oAMGSalarySheet.ErrorMessage = sStartDate + "," + sEndDate;
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAMGSalarySheet.Company = oCompanys.First();
            oAMGSalarySheet.Company.CompanyLogo = GetCompanyLogo(oAMGSalarySheet.Company);
            foreach (Employee oItem in oAMGSalarySheet.Employees)
            {
                oItem.EmployeePhoto = GetEmployeePhoto(oItem);
            }

            rptCompSalarySheetAsPerTimeCard oReport = new rptCompSalarySheetAsPerTimeCard();
            byte[] abytes = oReport.PrepareReport(oAMGSalarySheet, oLeaveHeads, oELOnAttendances, oCompliancePayrollProcessManagements, oSalarySheetPropertys, oSalarySheetSignature);
            return File(abytes, "application/pdf");
        }

        public void PrintSalarySheet_Corporate_XL(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroubByDept, string sGroupIDs, string sBlockIDs, double ts)// F4 XL
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, IsCompliance, sGroupIDs, sBlockIDs);

            string sStartDate = "";
            string sEndDate = "";
            string sSql = "";
            string sEmployeeIDs = "";
            List<EmployeeLeaveOnAttendance> oELOnAttendances = new List<EmployeeLeaveOnAttendance>();
            if (oEmployeeSalary.EmployeeSalarySheets.Count > 0)
            {
                sStartDate = oEmployeeSalary.EmployeeSalarySheets[0].StartDateInString;
                sEndDate = oEmployeeSalary.EmployeeSalarySheets[0].EndDateInString;
                sEmployeeIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Select(x => x.EmployeeID));
                sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + sEmployeeIDs + ")";
                oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oELOnAttendances = EmployeeLeaveOnAttendance.GetsComp(sEmployeeIDs, Convert.ToDateTime(sStartDate), Convert.ToDateTime(sEndDate), ((User)Session[SessionInfo.CurrentUser]).UserID);
                
            }
            else
            {
                sStartDate = DateTime.Now.ToString("dd MMM yyyy");
                sEndDate = DateTime.Now.ToString("dd MMM yyyy");
                oEmployeeSalary.Employees = new List<Employee>();
            }


            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();
            sSql = "Select * from LeaveHead Order By LeaveHeadID";
            oLeaveHeads = LeaveHead.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            List<PayrollProcessManagement> oPayrollProcessManagements = new List<PayrollProcessManagement>();
            sSql = "SELECT * FROM View_PayrollProcessManagement WHERE  SalaryFrom ='" + sStartDate + "' AND SalaryTo  ='" + sEndDate + "' ";
            oPayrollProcessManagements = PayrollProcessManagement.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            oEmployeeSalary.ErrorMessage = sStartDate + "," + sEndDate;
            SalarySheet_Corporate_XL(oEmployeeSalary, oLeaveHeads, oELOnAttendances, oPayrollProcessManagements, oSalarySheetPropertys);
        }
        public void SalarySheet_Corporate_XL(EmployeeSalary oEmployeeSalary, List<LeaveHead> oLeaveHeads, List<EmployeeLeaveOnAttendance> oELOnAttendances, List<PayrollProcessManagement> oPayrollProcessManagements, List<SalarySheetProperty> oSalarySheetPropertys)
        {

            bool bHasOTAllowance = oSalarySheetPropertys.Any(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTAllowance);

            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            double nTotalGrossPerDept = 0;
            double nTotalGross = 0;

            double nTotalAllowancePerDept = 0;
            double nTotalAllowance = 0;

            double nTotalDeductionPerDept = 0;
            double nTotalDeduction = 0;

            double nTotalNetSalaryPerDept = 0;
            double nTotalNetSalary = 0;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("SALARY SHEET");
                sheet.Name = "SALARY SHEET";

                sheet.Column(2).Width = 8; //SL
                sheet.Column(3).Width = 40; //EMPLOYEE
                sheet.Column(4).Width = 18; //SALARY POSITION
                sheet.Column(5).Width = 18; //ATTENDANCE STATUS
                sheet.Column(6).Width = 8; //LEAVE STATUS
                sheet.Column(7).Width = 40; //ALLOWANCE
                sheet.Column(8).Width = 18; //DEDUCTION
                sheet.Column(9).Width = 18; //NET SALARY
                sheet.Column(10).Width = 18; //SIGNATURE

                nMaxColumn = 11;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = "SALARY SHEET"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                string sStartDate = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[0]).ToString("dd MMM yyyy");
                string sEndDate = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[1]).ToString("dd MMM yyyy");

                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = "From " + sStartDate + " To " + sEndDate; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = "Salary Month-" + (oPayrollProcessManagements.Count > 0 ? oPayrollProcessManagements[0].MonthIDInString : ""); cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;

                #endregion

                #region Table Body
                List<RPTSalarySheet> oEmployeeSalarys = new List<RPTSalarySheet>();
                List<Employee> oEmployees = new List<Employee>();
                List<RPTSalarySheetDetail> oEmployeeSalaryDetails = new List<RPTSalarySheetDetail>();

                oEmployeeSalarys = oEmployeeSalary.EmployeeSalarySheets;
                oEmployees = oEmployeeSalary.Employees;
                oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalarySheetDetails;

                int nSL = 0;
                oEmployeeSalarys = oEmployeeSalarys.OrderBy(x => x.LocationName).ToList();
                while (oEmployeeSalarys.Count > 0)
                {
                    List<RPTSalarySheet> oTempEmployeeSalarys = new List<RPTSalarySheet>();
                    oTempEmployeeSalarys = oEmployeeSalarys.Where(x => x.LocationName == oEmployeeSalarys[0].LocationName).ToList();
                    string sLocationName = oTempEmployeeSalarys.Count > 0 ? oTempEmployeeSalarys[0].LocationName : "";
                    while (oTempEmployeeSalarys.Count > 0)
                    {

                        sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                        cell = sheet.Cells[rowIndex, 2]; cell.Value = "Unit:" + sLocationName + "   ||   " + "Department:" + oTempEmployeeSalarys[0].DepartmentName; cell.Style.Font.Bold = true;
                        cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        rowIndex = rowIndex + 1;


                        SalarySheet_Corporate_XL_Header(ref sheet, ref cell, ref rowIndex, ref colIndex);

                        List<RPTSalarySheet> oTempEmpSs = new List<RPTSalarySheet>();
                        oTempEmpSs = oTempEmployeeSalarys.Where(x => x.DepartmentName == oTempEmployeeSalarys[0].DepartmentName).ToList();

                        foreach (RPTSalarySheet oEmpSalaryItem in oTempEmpSs)
                        {
                            foreach (Employee OEmpItem in oEmployees)
                            {
                                if (OEmpItem.EmployeeID == oEmpSalaryItem.EmployeeID)
                                {
                                    nSL++;
                                    colIndex = 2;
                                    //SL
                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //EMPLOYEE
                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = false;
                                    cell.Value = "Card No : " + OEmpItem.Code + "\r\n"
                                                + "Name : " + OEmpItem.Name + "\r\n"
                                                + "Designation : " + OEmpItem.DesignationName + "\r\n"
                                                + "Date Of Join : " + OEmpItem.DateOfJoinInString + "\r\n"
                                                + "Employee Type : " + OEmpItem.EmployeeTypeName + "\r\n"
                                                + "Gender : " + OEmpItem.Gender + "\r\n"
                                                ;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //SALARY POSITION
                                    string sValue = "";
                                    foreach (RPTSalarySheetDetail oESDItem in oEmployeeSalaryDetails)
                                    {
                                        if (oESDItem.SalaryHeadType == 1 && oESDItem.EmployeeSalaryID == oEmpSalaryItem.EmployeeSalaryID)
                                        {
                                            sValue = sValue + oESDItem.SalaryHeadName + " : " + (oESDItem.Amount > 0 ? this.GetAmountInStr(oESDItem.Amount, true, false) : "-") + "\r\n";
                                        }
                                    }

                                    sValue = sValue + "Gross Salary : " + (oEmpSalaryItem.GrossAmount > 0 ? this.GetAmountInStr(oEmpSalaryItem.GrossAmount, true, false) : "-");
                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //ATTENDANCE STATUS
                                    double nAttTotal = 0;
                                    nAttTotal = oEmpSalaryItem.Present + oEmpSalaryItem.TotalAbsent + oEmpSalaryItem.TotalDayOff + oEmpSalaryItem.TotalHoliday + oEmpSalaryItem.TotalLeave;
                                    sValue = "";
                                    sValue = "Present : " + oEmpSalaryItem.Present + "\r\nAbsent : " + oEmpSalaryItem.TotalAbsent + "\r\nOff day : " + oEmpSalaryItem.TotalDayOff + "\r\nLeave : "
                                            + (oEmpSalaryItem.TotalLeave) + "\r\nHoliday: " + oEmpSalaryItem.TotalHoliday + "\r\nTotal=" + nAttTotal;

                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //LEAVE STATUS
                                    string Status = "";
                                    List<EmployeeLeaveOnAttendance> oELOnAtts = new List<EmployeeLeaveOnAttendance>();
                                    oELOnAtts = oELOnAttendances.Where(x => x.EmployeeID == OEmpItem.EmployeeID).ToList();
                                    foreach (LeaveHead oLeaveHead in oLeaveHeads)
                                    {
                                        sValue = "";
                                        if ((oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).Any())) { sValue = oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).FirstOrDefault().LeaveDays.ToString(); }
                                        Status += oLeaveHead.ShortName + "-" + sValue + ", ";
                                    }
                                    if (!string.IsNullOrEmpty(Status)) { Status = Status.Remove(Status.Length - 2); };
                                    sValue = "";
                                    sValue = Status;

                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //ALLOWANCE
                                    sValue = "";
                                    foreach (RPTSalarySheetDetail oESDItem in oEmployeeSalaryDetails)
                                    {
                                        if (oESDItem.SalaryHeadType == 2 && oESDItem.EmployeeSalaryID == oEmpSalaryItem.EmployeeSalaryID)
                                        {
                                            sValue = sValue + oESDItem.SalaryHeadName + " : " + (oESDItem.Amount > 0 ? this.GetAmountInStr(oESDItem.Amount, true, false) : "-") + "\r\n";
                                            nTotalAllowancePerDept += oESDItem.Amount;
                                            nTotalAllowance += oESDItem.Amount;
                                        }
                                    }
                                    if (bHasOTAllowance)
                                    {
                                        sValue = sValue + "OT Rate : " + (oEmpSalaryItem.OTRatePerHour > 0 ? this.GetAmountInStr(oEmpSalaryItem.OTRatePerHour, true, false) : "-") + "\r\n";
                                        sValue = sValue + "OT Hr. : " + (oEmpSalaryItem.OTHour > 0 ? this.GetAmountInStr(oEmpSalaryItem.OTHour, true, false) : "-") + "\r\n";
                                        sValue = sValue + "OT All. : " + (oEmpSalaryItem.OTHour * oEmpSalaryItem.OTRatePerHour > 0 ? this.GetAmountInStr(oEmpSalaryItem.OTHour * oEmpSalaryItem.OTRatePerHour, true, false) : "-");

                                        nTotalAllowancePerDept += oEmpSalaryItem.OTHour * oEmpSalaryItem.OTRatePerHour;
                                        nTotalAllowance += oEmpSalaryItem.OTHour * oEmpSalaryItem.OTRatePerHour;

                                    }
                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                    //DEDUCTION
                                    sValue = "";
                                    foreach (RPTSalarySheetDetail oESDItem in oEmployeeSalaryDetails)
                                    {
                                        if (oESDItem.SalaryHeadType == 3 && oESDItem.EmployeeSalaryID == oEmpSalaryItem.EmployeeSalaryID)
                                        {
                                            sValue = sValue + oESDItem.SalaryHeadName + " : " + (oESDItem.Amount > 0 ? this.GetAmountInStr(oESDItem.Amount, true, false) : "-") + "\r\n";
                                            nTotalDeductionPerDept += oESDItem.Amount;
                                            nTotalDeduction += oESDItem.Amount;
                                        }
                                    }

                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    oEmpSalaryItem.NetAmount += (bHasOTAllowance) ? 0 : -(oEmpSalaryItem.OTHour * oEmpSalaryItem.OTRatePerHour);
                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oEmpSalaryItem.NetAmount > 0 ? this.GetAmountInStr(oEmpSalaryItem.NetAmount, true, false) : "-"; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    rowIndex++;

                                    nTotalGrossPerDept = nTotalGrossPerDept + oEmpSalaryItem.GrossAmount;
                                    nTotalGross = nTotalGross + oEmpSalaryItem.GrossAmount;
                                    nTotalNetSalaryPerDept = nTotalNetSalaryPerDept + oEmpSalaryItem.NetAmount;
                                    nTotalNetSalary = nTotalNetSalary + oEmpSalaryItem.NetAmount;

                                }
                            }
                        }

                        //#region Total
                        ////SL//EMPLOYEE
                        //cell = sheet.Cells[rowIndex, colIndex,rowIndex, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "TOTAL"; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        ////SALARY POSITION
                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalAllowancePerDept > 0 ? this.GetAmountInStr(nTotalAllowancePerDept, true, false) : "-"; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        ////ATTENDANCE STATUS

                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        ////LEAVE STATUS

                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        ////ALLOWANCE
                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalAllowancePerDept > 0 ? this.GetAmountInStr(nTotalAllowancePerDept, true, false) : "-"; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        ////DEDUCTION
                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalDeductionPerDept > 0 ? this.GetAmountInStr(nTotalDeductionPerDept, true, false) : "-"; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalNetSalaryPerDept > 0 ? this.GetAmountInStr(nTotalNetSalaryPerDept, true, false) : "-"; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //rowIndex++;

                        //#endregion Total

                        oTempEmployeeSalarys.RemoveAll(x => x.DepartmentName == oTempEmpSs[0].DepartmentName);
                        nTotalGrossPerDept = 0;
                        nTotalAllowancePerDept = 0;
                        nTotalDeductionPerDept = 0;
                        nTotalNetSalaryPerDept = 0;
                    }
                    oEmployeeSalarys.RemoveAll(x => x.LocationName == sLocationName);
                }
                //#region Grand Total
                ////SL//EMPLOYEE
                //cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "GRAND TOTAL"; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                ////SALARY POSITION
                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalAllowance > 0 ? this.GetAmountInStr(nTotalAllowance, true, false) : "-"; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                ////ATTENDANCE STATUS

                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                ////LEAVE STATUS

                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                ////ALLOWANCE
                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalAllowance > 0 ? this.GetAmountInStr(nTotalAllowance, true, false) : "-"; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                ////DEDUCTION
                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalDeduction > 0 ? this.GetAmountInStr(nTotalDeduction, true, false) : "-"; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalNetSalary > 0 ? this.GetAmountInStr(nTotalNetSalary, true, false) : "-"; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //rowIndex++;

                //#endregion Grand Total
                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SALARY SHEET.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        public void SalarySheet_Corporate_XL_Header(ref ExcelWorksheet sheet, ref ExcelRange cell, ref int rowIndex, ref int colIndex)
        {
            ExcelFill fill; OfficeOpenXml.Style.Border border;
            #region Table Header 02
            colIndex = 2;
            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Employee"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Salary Position"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Attendance Status"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Leave Status"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Allowance"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Deduction"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Net Salary"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Signature"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            rowIndex++;
            #endregion

        }
              
        public Image GetEmployeePhoto(Employee oEmployee)
        {
            if (oEmployee.Photo != null)
            {
                string fileDirectory = Server.MapPath("~/Content/Employeeimage.jpg");
                if (System.IO.File.Exists(fileDirectory))
                {
                    System.IO.File.Delete(fileDirectory);
                }

                MemoryStream m = new MemoryStream(oEmployee.Photo);
                System.Drawing.Image img = System.Drawing.Image.FromStream(m);
                img.Save(fileDirectory, ImageFormat.Jpeg);
                return img;
            }
            else
            {
                return null;
            }
        }
        #endregion

        #region Search Att Summary

        [HttpPost]
        public JsonResult MonthlyAttendanceReportSearch(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sGroupIDs, string sBlockIDs)
        {
            List<MonthlyAttendanceReport> MonthlyAttendanceReports = new List<MonthlyAttendanceReport>();
            MonthlyAttendanceReport MonthlyAttendanceReport = new MonthlyAttendanceReport();
            try
            {
                MonthlyAttendanceReports = MonthlyAttendanceReport.Gets_F3_Comp(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, "", sGroupIDs, sBlockIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (MonthlyAttendanceReports.Count <= 0)
                {
                    throw new Exception("Data Not Found !");
                }
            }
            catch (Exception ex)
            {
                MonthlyAttendanceReport = new MonthlyAttendanceReport();
                MonthlyAttendanceReports = new List<MonthlyAttendanceReport>();
                MonthlyAttendanceReport.ErrorMessage = ex.Message;
                MonthlyAttendanceReports.Add(MonthlyAttendanceReport);
            }

            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(MonthlyAttendanceReports);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }


        #endregion

        #region Att. Summary F3
        public void PrintAttendanceSummary_F3_XL(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sWorkingStatus, string sGroupIDs, string sBlockIDs, double ts)
        {
            List<MonthlyAttendanceReport> oMonthlyAttendanceReports = new List<MonthlyAttendanceReport>();
            oMonthlyAttendanceReports = MonthlyAttendanceReport.Gets_F3_Comp(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, sWorkingStatus, sGroupIDs, sBlockIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<MonthlyAttendance_Leave> oMonthlyAttendance_Leaves = new List<MonthlyAttendance_Leave>();
            oMonthlyAttendance_Leaves = MonthlyAttendance_Leave.Gets_Comp(sEmployeeIDs, sBusinessUnitIds, sLocationID, sDepartmentIds, sDesignationIds, sSalarySchemeIDs, DateFrom, DateTo, sWorkingStatus, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<MonthlyAttendanceReport> oTempMonthlyAttendanceReports = new List<MonthlyAttendanceReport>();
            oMonthlyAttendanceReports.ForEach(x => oTempMonthlyAttendanceReports.Add(x));

            List<MonthlyAttendance_Leave> oDistinctLeaves = new List<MonthlyAttendance_Leave>();
            oDistinctLeaves = oMonthlyAttendance_Leaves.GroupBy(x => x.LeaveName).Select(x => x.First()).OrderBy(x => x.LeaveID).ToList();

            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 1;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("BONUS List");
                sheet.Name = "BONUS LIST";

                sheet.Column(2).Width = 6; //SL
                sheet.Column(3).Width = 15; //EmployeeCode
                sheet.Column(4).Width = 30; //EmployeeName
                sheet.Column(5).Width = 20; //DepartmentName
                sheet.Column(6).Width = 20; //DesignationName

                sheet.Column(7).Width = 20; //Joining Date
                sheet.Column(8).Width = 20; //Confirmation Date
                sheet.Column(9).Width = 20; //Service Year
                sheet.Column(10).Width = 20; //Employee Type
                sheet.Column(11).Width = 20; //Employee Category
                sheet.Column(12).Width = 20; //Reporting Person

                sheet.Column(13).Width = 15; //Education

                int n = 0;
                for (n = 14; n < 14 + oDistinctLeaves.Count; n++)
                {
                    sheet.Column(n).Width = 6; //LEAVES
                }

                sheet.Column(n++).Width = 10; //Half/Short Leave
                sheet.Column(n++).Width = 10; //EOutdays
                sheet.Column(n++).Width = 10; //EOutMins
                sheet.Column(n++).Width = 10; //Latedays
                sheet.Column(n++).Width = 10; //LateMins
                sheet.Column(n++).Width = 10; //Absent
                sheet.Column(n++).Width = 10; //Present

                sheet.Column(n++).Width = 10; //CWD(total working day)
                sheet.Column(n++).Width = 10; //NOTMins
                sheet.Column(n++).Width = 10; //HOTMins
                sheet.Column(n++).Width = 10; //NightAll

                sheet.Column(n++).Width = 20; //Dis. Action
                sheet.Column(n++).Width = 20; //remark
                sheet.Column(n++).Width = 20; //Status

                nMaxColumn = n - 1;

                List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
                string BUIDs = string.Join(",", oMonthlyAttendanceReports.Select(p => p.BusinessUnitID).Distinct().ToList());
                if (BUIDs != "")
                { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

                cell = sheet.Cells[rowIndex, 2];
                cell = sheet.Cells[rowIndex, 2]; cell.Value = ""; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex = rowIndex + 1;

                oMonthlyAttendanceReports = oMonthlyAttendanceReports.OrderBy(x => x.BusinessUnitID).ThenBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ToList();
                //while (oMonthlyAttendanceReports.Count > 0)
                //{
                //    var oResults = oMonthlyAttendanceReports.Where(x => x.BusinessUnitID == oMonthlyAttendanceReports[0].BusinessUnitID && x.LocationName == oMonthlyAttendanceReports[0].LocationName && x.DepartmentName == oMonthlyAttendanceReports[0].DepartmentName).ToList();
                List<BusinessUnit> oTempBusinessUnits = new List<BusinessUnit>();
                BusinessUnit oBusinessUnit = new BusinessUnit();
                oTempBusinessUnits = oBusinessUnits.Where(x => x.BusinessUnitID == oMonthlyAttendanceReports[0].BusinessUnitID).ToList();
                oBusinessUnit = oTempBusinessUnits.Count > 0 ? oTempBusinessUnits[0] : new BusinessUnit();

                this.AttSummaryReportHeaderXL_F3(ref  sheet, ref  cell, ref  rowIndex, ref  colIndex, nMaxColumn, oBusinessUnit, DateFrom.ToString("dd MMM yyyy"), DateTo.ToString("dd MMM yyyy"));
                this.AttSummaryColumnSetup_F3(ref  sheet, ref  cell, ref fill, ref border, ref rowIndex, ref colIndex, nMaxColumn, oMonthlyAttendanceReports[0], oDistinctLeaves);
                this.AttSummaryBodySetup_F3(ref  sheet, ref  cell, ref fill, ref border, ref rowIndex, ref colIndex, nMaxColumn, oMonthlyAttendanceReports, oMonthlyAttendance_Leaves, oDistinctLeaves);

                //    oMonthlyAttendanceReports.RemoveAll(x => x.BusinessUnitID == oResults[0].BusinessUnitID && x.LocationName == oResults[0].LocationName && x.DepartmentName == oResults[0].DepartmentName);
                //}

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=AttSummaryList.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        public void AttSummaryReportHeaderXL_F3(ref ExcelWorksheet sheet, ref ExcelRange cell, ref int rowIndex, ref int colIndex, int nMaxColumn, BusinessUnit oBusinessUnit, string sDateFrom, string sDateTo)
        {
            rowIndex = rowIndex + 1;

            cell = sheet.Cells[rowIndex, 2];
            cell = sheet.Cells[rowIndex, 2]; cell.Value = oBusinessUnit.Name; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            rowIndex = rowIndex + 1;

            cell = sheet.Cells[rowIndex, 2];
            cell = sheet.Cells[rowIndex, 2]; cell.Value = oBusinessUnit.Address; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            rowIndex = rowIndex + 1;

            cell = sheet.Cells[rowIndex, 2];
            cell = sheet.Cells[rowIndex, 2]; cell.Value = "Att. Summary From " + sDateFrom + " to " + sDateTo; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            rowIndex = rowIndex + 1;
        }

        public void AttSummaryColumnSetup_F3(ref ExcelWorksheet sheet, ref ExcelRange cell, ref ExcelFill fill, ref OfficeOpenXml.Style.Border border, ref int rowIndex, ref int colIndex, int nMaxColumn, MonthlyAttendanceReport oMonthlyAttendanceReport, List<MonthlyAttendance_Leave> oDistinctLeaves)
        {
            //colIndex = 2;

            //cell = sheet.Cells[rowIndex, 2, rowIndex, 5]; cell.Merge = true;
            //cell.Value = "Unit-" + oMonthlyAttendanceReport.LocationName; cell.Style.Font.Bold = true;
            //cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

            //cell = sheet.Cells[rowIndex, nMaxColumn - 4, rowIndex, nMaxColumn]; cell.Merge = true;
            //cell.Value = "Department-" + oMonthlyAttendanceReport.DepartmentName; cell.Style.Font.Bold = true;
            //cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

            //rowIndex++;

            colIndex = 2;
            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "SL"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Employee ID"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Name"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Department"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Designation"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Joining Date"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Confirmation Date"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Service Year"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Employee Type"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Employee CateGory"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Reporting Person"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Education"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex = colIndex + oDistinctLeaves.Count - 1 + 1]; cell.Merge = true; cell.Value = "Leave Information"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            colIndex = colIndex + 1;
            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex = colIndex + 9]; cell.Merge = true; cell.Value = "Attendance Information"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            colIndex = colIndex + 1;
            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Dis. Action"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Remarks"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true; cell.Value = "Employee Status"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            rowIndex++;

            colIndex = 14;

            foreach (MonthlyAttendance_Leave oitem in oDistinctLeaves)
            {
                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = oitem.LeaveName; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            }

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Half/Short L"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "E. Out Days"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "E. Out Mins."; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Late Days"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Late Mins"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Absent"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Present"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "TWD"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Normal OT Hr"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Holiday OT Hr"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex++]; cell.Merge = true; cell.Value = "Night All."; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            rowIndex++;
        }

        public void AttSummaryBodySetup_F3(ref ExcelWorksheet sheet, ref ExcelRange cell, ref ExcelFill fill, ref OfficeOpenXml.Style.Border border, ref int rowIndex, ref int colIndex, int nMaxColumn, List<MonthlyAttendanceReport> oMonthlyAttendanceReports, List<MonthlyAttendance_Leave> oMonthlyAttendance_Leaves, List<MonthlyAttendance_Leave> oDistinctLeaves)
        {
            int nSL = 0;

            foreach (MonthlyAttendanceReport oItem in oMonthlyAttendanceReports)
            {
                nSL++;
                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.ConfirmationDateInString; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                DateTime TempDateOfJoin = oItem.JoiningDate;
                TempDateOfJoin = TempDateOfJoin.AddDays(1);

                DateDifference dateDifference = new DateDifference(oItem.LastWorkingDate, TempDateOfJoin);

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = dateDifference.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeType; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCategoryInString; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.ReportingPerson; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Education; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (MonthlyAttendance_Leave oDistinctLeave in oDistinctLeaves)
                {
                    List<MonthlyAttendance_Leave> oTempMonthlyAtts = new List<MonthlyAttendance_Leave>();
                    oTempMonthlyAtts = oMonthlyAttendance_Leaves.Where(x => x.EmployeeID == oItem.EmployeeID && x.LeaveID == oDistinctLeave.LeaveID).ToList();
                    int nEnjoyed = 0;
                    nEnjoyed = oTempMonthlyAtts.Count > 0 ? oTempMonthlyAtts[0].Enjoyed : 0;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nEnjoyed.ToString(); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.LeaveHalfShortSt.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EarlyOutDays.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EarlyOutMins.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.LateDays.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.LateMins.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.AbsentDay.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.PresentDay.ToString(); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CWD.ToString(); cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Global.MinInHourMin(oItem.NOTMin); cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Global.MinInHourMin(oItem.HOTMin); ; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NightAllDaySt.ToString(); cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DisActionSt.ToString(); cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.WorkingStatusInString.ToString(); cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
            }
        }

        #endregion Att. Summary F3

        #region ExtraSearching_XL
        public void ExtraSearching_XL(string sParam, double ts)
        {

            DateTime StartDate = Convert.ToDateTime(sParam.Split('~')[0]);
            DateTime EndDate = Convert.ToDateTime(sParam.Split('~')[1]);

            int CriteriaType = Convert.ToInt32(sParam.Split('~')[8]);
            DateTime StartInTime = Convert.ToDateTime(sParam.Split('~')[9]);
            DateTime EndInTime = Convert.ToDateTime(sParam.Split('~')[10]);
            DateTime StartOutTime = Convert.ToDateTime(sParam.Split('~')[11]);
            DateTime EndOutTime = Convert.ToDateTime(sParam.Split('~')[12]);
            int StartLate = Convert.ToInt32(sParam.Split('~')[13]);
            int EndLate = Convert.ToInt32(sParam.Split('~')[14]);
            int StartEarly = Convert.ToInt32(sParam.Split('~')[15]);
            int EndEarly = Convert.ToInt32(sParam.Split('~')[16]);
            int StartDaysCount = Convert.ToInt32(sParam.Split('~')[17]);
            int EndDaysCount = Convert.ToInt32(sParam.Split('~')[18]);

            List<AttendanceWithExtraSearching> oAttendanceWithExtraSearchings = new List<AttendanceWithExtraSearching>();
            oAttendanceWithExtraSearchings = AttendanceWithExtraSearching.GetsComp(sParam, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("AttendanceRecord");
                sheet.Name = "AttendanceRecord";

                sheet.Column(2).Width = 8;//SL
                sheet.Column(3).Width = 20;//CODE
                sheet.Column(4).Width = 20;//NAME
                sheet.Column(5).Width = 20;//BU
                sheet.Column(6).Width = 20;//DEPARTMENT
                sheet.Column(7).Width = 20;//DESIGNATION
                sheet.Column(8).Width = 20;//JOINING
                sheet.Column(9).Width = 20;//Gross
                sheet.Column(10).Width = 20;//Date
                sheet.Column(11).Width = 20;//Total Days


                nMaxColumn = 11;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, 2, rowIndex, 2]; cell.Merge = true; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 2, rowIndex, 2]; cell.Merge = true; cell.Value = "Attendance Record"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = sheet.Cells[rowIndex, 2, rowIndex, 2]; cell.Merge = true; cell.Value = "Date Range : " + StartDate.ToString("dd MMM yyyy") + " To " + EndDate.ToString("dd MMM yyyy"); cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;


                string criteria = "Searching Criteria : ";

                if (CriteriaType == 1)
                {
                    if (StartInTime.ToString("HH:mm") != "00:00:00" && StartInTime.ToString("HH:mm") != "00:00:00")
                    { criteria += "InTime between " + StartInTime.ToString("HH:mm") + " and " + EndInTime.ToString("HH:mm"); }
                    if (StartOutTime.ToString("HH:mm") != "00:00:00" && StartOutTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " OutTime between " + StartOutTime.ToString("HH:mm") + " and " + EndOutTime.ToString("HH:mm"); }
                    if (StartLate > 0 && EndLate > 0)
                    { criteria += " Late between " + StartLate.ToString() + " and " + EndLate.ToString(); }
                    if (StartEarly > 0 && EndEarly > 0)
                    { criteria += " Early between " + StartEarly.ToString() + " and " + EndEarly.ToString(); }
                    if (StartDaysCount > 0 && EndDaysCount > 0)
                    { criteria += " Total Day between " + StartDaysCount.ToString() + " and " + EndDaysCount.ToString(); }
                }
                if (CriteriaType == 2)
                {
                    if (StartInTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " InTime = " + StartInTime.ToString("HH:mm"); }
                    if (StartOutTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " OutTime = " + StartOutTime.ToString("HH:mm"); }
                    if (StartLate > 0)
                    { criteria += " Late = " + StartLate.ToString() + " min. "; }
                    if (StartEarly > 0)
                    { criteria += " Early = " + StartEarly.ToString() + " min. "; }
                    if (StartDaysCount > 0)
                    { criteria += " Total Day = " + StartDaysCount.ToString() + " min. "; }
                }

                if (CriteriaType == 3)
                {
                    if (StartInTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " InTime : Before " + StartInTime.ToString("HH:mm"); }
                    if (StartOutTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " OutTime :  Before " + StartOutTime.ToString("HH:mm"); }
                    if (StartLate > 0)
                    { criteria += " Late : Less" + StartLate.ToString() + " min. "; }
                    if (StartEarly > 0)
                    { criteria += " Early : Less" + StartEarly.ToString() + " min. "; }
                    if (StartDaysCount > 0)
                    { criteria += " Total Day : Less " + StartDaysCount.ToString() + " min. "; }
                }

                if (CriteriaType == 4)
                {
                    if (StartInTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " InTime : After " + StartInTime.ToString("HH:mm"); }
                    if (StartOutTime.ToString("HH:mm") != "00:00:00")
                    { criteria += " OutTime :  After " + StartOutTime.ToString("HH:mm"); }
                    if (StartLate > 0)
                    { criteria += " Late : Greater" + StartLate.ToString() + " min. "; }
                    if (StartEarly > 0)
                    { criteria += " Early : Greater" + StartEarly.ToString() + " min. "; }
                    if (StartDaysCount > 0)
                    { criteria += " Total Day : Greater" + StartDaysCount.ToString() + " min. "; }
                }


                colIndex = 2;
                cell = sheet.Cells[rowIndex, 2, rowIndex, 2]; cell.Merge = true; cell.Value = criteria; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 12; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;

                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "CODE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "NAME"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "BUSINESS UNIT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "DEPARTMENT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "JOINING"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "PRESENT GROSS"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "DATE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex++]; cell.Merge = true;
                cell.Value = "TOTAL DAYS"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;

                int nSL = 0;
                foreach (AttendanceWithExtraSearching oItem in oAttendanceWithExtraSearchings)
                {
                    nSL++;
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = nSL.ToString(); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.BusinessUnitName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = Global.MillionFormat(oItem.PresentGross); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.AttDates; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++];
                    cell.Value = oItem.TotalDays; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;
                }

                //signature
                rowIndex = rowIndex + 4;
                int nColSpan1_From = 0;
                int nColSpan2_From = 0;
                int nColSpan3_From = 0;
                int nColSpan1_To = 0;
                int nColSpan2_To = 0;
                int nColSpan3_To = 0;

                if (nMaxColumn % 3 == 0)
                {
                    nColSpan1_From = 1;
                    nColSpan1_To = nColSpan1_From + nMaxColumn / 3;

                    nColSpan2_From = nColSpan1_To + 1;
                    nColSpan2_To = nColSpan2_From + nMaxColumn / 3;

                    nColSpan3_From = nColSpan2_To + 1;
                    nColSpan3_To = nMaxColumn;
                }
                else
                {
                    nColSpan1_From = 1;
                    nColSpan1_To = nColSpan1_From + (nMaxColumn - nMaxColumn % 3) / 3;

                    nColSpan2_From = nColSpan1_To + 1;
                    nColSpan2_To = nColSpan2_From + (nMaxColumn - nMaxColumn % 3) / 3;

                    nColSpan3_From = nColSpan2_To + 1;
                    nColSpan3_To = nMaxColumn;
                }

                cell = sheet.Cells[rowIndex, nColSpan1_From, rowIndex + 3, nColSpan1_To]; cell.Merge = true; cell.Value = "____________________\nPrepared By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, nColSpan2_From, rowIndex + 3, nColSpan2_To]; cell.Merge = true; cell.Value = "______________________\nChecked By APM/PM"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, nColSpan3_From, rowIndex + 3, nMaxColumn]; cell.Merge = true; cell.Value = "______________________\nApproved By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;


                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=AttendanceRecord.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }
        #endregion ExtraSearching_XL

        #region Date Wise Attendance XL
        public void PrintDateWiseAttendanceXL(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sGroupIDs, string sBlockIDs, double ts)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            string sSql = "SELECT * FROM View_AttendanceDaily WHERE AttendanceDate BETWEEN '" + DateFrom.ToString("dd MMM yyyy") + "' AND '" + DateTo.ToString("dd MMM yyyy") + "' ";
            if (sEmployeeIDs != "")
            {
                sSql += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (sBusinessUnitIds != "")
            {
                sSql = sSql + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSql = sSql + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIds != "")
            {
                sSql += " AND DepartmentID IN(" + sDepartmentIds + ")";
            }
            if (sDesignationIds != "")
            {
                sSql += " AND DesignationID IN(" + sDesignationIds + ")";
            }
            if (sSalarySchemeIDs != "")
            {
                sSql += " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
            }
            if (!string.IsNullOrEmpty(sGroupIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sGroupIDs + "))";
            }
            if (!string.IsNullOrEmpty(sBlockIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sBlockIDs + "))";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }
            sSql = sSql + " ORDER BY Department, Code";
            oAttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oAttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            int nDays = 0;
            int nColumns = 0;
            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("DTAE WISE ATTENDACE");
                sheet.Name = "DTAE WISE ATTENDACE";

                int ColSpan1 = 0;
                if (DateFrom.Month == DateTo.Month)
                {
                    ColSpan1 = DateTo.Day - DateFrom.Day + 1 + 6;
                }
                else
                {
                    ColSpan1 = DateTime.DaysInMonth(DateFrom.Year, DateFrom.Month) - Convert.ToInt32(DateFrom.Day) + 1 + 1 + 5;
                }

                TimeSpan diff = DateTo - DateFrom;
                nDays = diff.Days + 1;
                nColumns = nDays + 6;

                sheet.Column(2).Width = 8; //SL
                sheet.Column(3).Width = 30; //NAME
                sheet.Column(4).Width = 20; //CODE
                sheet.Column(5).Width = 28; //DEPARTMENT
                sheet.Column(6).Width = 28; //DESIGNATION

                for (int i = 7; i <= nColumns; i++)
                {
                    sheet.Column(i).Width = 8;
                }

                sheet.Column(nColumns++).Width = 10;//WD
                sheet.Column(nColumns++).Width = 10;//ABSENT
                sheet.Column(nColumns++).Width = 10;//HD
                sheet.Column(nColumns++).Width = 10;//DO
                sheet.Column(nColumns++).Width = 10;//LEAVE
                sheet.Column(nColumns++).Width = 10;//H/SLEAVE
                sheet.Column(nColumns++).Width = 10;//TOTAL WD
                sheet.Column(nColumns++).Width = 10;//LATE
                sheet.Column(nColumns++).Width = 10;//EARLY LEAVE
                sheet.Column(nColumns++).Width = 10;//OTH
                sheet.Column(nColumns++).Width = 15;//JOINING
                sheet.Column(nColumns++).Width = 15;//DOB

                nMaxColumn = nColumns;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, 2]; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 2]; cell.Value = "DTAE WISE ATTENDACE"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = sheet.Cells[rowIndex + 1, colIndex++];
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "NAME"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "CODE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "DEPARTMENT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = DateFrom.ToString("MMM"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                if (DateFrom.Month != DateTo.Month)
                {
                    ColSpan1 = ColSpan1 + DateTo.Day;
                    cell = sheet.Cells[rowIndex, ColSpan1 + 1]; cell.Value = DateTo.ToString("MMM"); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                colIndex = ColSpan1 + 1;
                cell = sheet.Cells[rowIndex + 1, colIndex++];
                cell.Value = "PD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "HD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Off"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "LD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Half/Short L"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "LATE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "EARLY LEAVE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "TD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "OT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Joining"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Date Of Birth"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;
                colIndex = 7;
                DateTime dStartDate = DateFrom;
                while (dStartDate <= DateTo)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = dStartDate.Day.ToString(); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    dStartDate = dStartDate.AddDays(1);
                }

                int nCount = 0;
                int nWorkingDay = 0;
                int nHDay = 0;
                int nDODay = 0;
                int nLDay = 0;
                int nSHLDay = 0;
                int nOTM = 0;
                int nAbsent = 0;
                int nLateArrivalMinute = 0;
                int nEarlyDepartureMinute = 0;

                while (oAttendanceDailys.Count > 0)
                {
                    nWorkingDay = 0;
                    nHDay = 0;
                    nDODay = 0;
                    nSHLDay = 0;
                    nLDay = 0;
                    nOTM = 0;
                    nAbsent = 0;
                    nLateArrivalMinute = 0;
                    nEarlyDepartureMinute = 0;

                    List<AttendanceDaily> oAttDailys = new List<AttendanceDaily>();
                    oAttDailys = oAttendanceDailys.Where(x => x.EmployeeID == oAttendanceDailys[0].EmployeeID).OrderBy(x => x.AttendanceDate).ToList();

                    if (oAttDailys.Count > 0)
                    {
                        nCount++;
                        rowIndex = rowIndex + 1;
                        colIndex = 2;
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = nCount.ToString(); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].EmployeeName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].EmployeeCode; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DepartmentName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DesignationName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        dStartDate = DateFrom;
                        while (dStartDate <= DateTo)
                        {
                            bool bFlag = false;
                            foreach (AttendanceDaily oADItem in oAttDailys)
                            {
                                if (dStartDate == oADItem.AttendanceDate)
                                {
                                    bFlag = true;

                                    cell = sheet.Cells[rowIndex, colIndex++];
                                    cell.Value = oADItem.AttStatusInStringInShortComp; cell.Style.Font.Bold = true;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                    if ((oADItem.CompInTimeInString != "-" || oADItem.CompOutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsCompDayOff == false && oADItem.IsCompHoliday == false && oADItem.IsCompLeave == false && oADItem.IsNoWork == false)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "P"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nWorkingDay++;
                                    }
                                    if ((oADItem.CompInTimeInString != "-" || oADItem.CompOutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsCompDayOff == false && oADItem.IsCompHoliday == false && oADItem.IsCompLeave == false && oADItem.IsNoWork == true)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "P,NW"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nWorkingDay++;
                                    }
                                    if (oADItem.IsCompHoliday == true)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "P,HD"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nHDay++;
                                    }
                                    if (oADItem.IsCompDayOff == true)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "P,Off"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nDODay++;
                                    }
                                    if ((oADItem.CompInTimeInString != "-" || oADItem.CompOutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.CompLateArrivalMinute > 0)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "L,P"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nLateArrivalMinute++;
                                    }
                                    if ((oADItem.CompInTimeInString != "-" || oADItem.CompOutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.CompEarlyDepartureMinute > 0)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "P,E"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nEarlyDepartureMinute++;
                                    }
                                    if (oADItem.CompInTimeInString == "-" && oADItem.CompOutTimeInString == "-" && oADItem.IsOSD == false && oADItem.IsCompDayOff == false && oADItem.IsCompLeave == false && oADItem.IsCompHoliday == false)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "A"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nAbsent++;
                                    }
                                    //if (oADItem.IsCompHoliday == true && oADItem.CompInTimeInString == "-" && oADItem.CompOutTimeInString == "-")
                                    //{
                                    //    //cell = sheet.Cells[rowIndex, colIndex++];
                                    //    //cell.Value = "HD"; cell.Style.Font.Bold = true;
                                    //    //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    //    //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //    nHDay++;
                                    //}
                                    //if (oADItem.IsCompDayOff == true && oADItem.CompInTimeInString == "-" && oADItem.CompOutTimeInString == "-")
                                    //{
                                    //    //cell = sheet.Cells[rowIndex, colIndex++];
                                    //    //cell.Value = "Off"; cell.Style.Font.Bold = true;
                                    //    //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    //    //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //    nDODay++;
                                    //}
                                    if (oADItem.IsCompLeave == true && oADItem.LeaveType == EnumLeaveType.Full)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "L"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nLDay++;
                                    }
                                    if (oADItem.IsCompLeave == true && oADItem.LeaveType == EnumLeaveType.Short || oADItem.LeaveType == EnumLeaveType.Half)
                                    {
                                        //cell = sheet.Cells[rowIndex, colIndex++];
                                        //cell.Value = "H/S L"; cell.Style.Font.Bold = true;
                                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                        nSHLDay++;
                                        nWorkingDay++;
                                    }
                                    //else
                                    //{
                                    //    cell = sheet.Cells[rowIndex, colIndex++];
                                    //    cell.Value = "N/A"; cell.Style.Font.Bold = true;
                                    //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //}
                                    nOTM += oADItem.CompOverTimeInMinute;
                                    break;
                                }
                            }
                            if (!bFlag)
                            {
                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = "N/A"; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                nAbsent++;
                            }
                            dStartDate = dStartDate.AddDays(1);
                        }

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nWorkingDay > 0 ? nWorkingDay.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nAbsent > 0 ? nAbsent.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nHDay > 0 ? nHDay.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nDODay > 0 ? nDODay.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nLDay > 0 ? nLDay.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nSHLDay > 0 ? nSHLDay.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nLateArrivalMinute > 0 ? nLateArrivalMinute.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nEarlyDepartureMinute > 0 ? nEarlyDepartureMinute.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nDays > 0 ? nDays.ToString() : "-"); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = ((nOTM / 60).ToString()).Split('.')[0] + ":" + (nOTM % 60).ToString(); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].JoiningDateInString; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DateOfBirthInString; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }
                    oAttendanceDailys.RemoveAll(x => x.EmployeeID == oAttDailys[0].EmployeeID);
                }

                //signature
                rowIndex = rowIndex + 4;
                int nColSpan1_From = 0;
                int nColSpan2_From = 0;
                int nColSpan3_From = 0;
                int nColSpan1_To = 0;
                int nColSpan2_To = 0;
                int nColSpan3_To = 0;

                if (nMaxColumn % 3 == 0)
                {
                    nColSpan1_From = 1;
                    nColSpan1_To = nColSpan1_From + nMaxColumn / 3;

                    nColSpan2_From = nColSpan1_To + 1;
                    nColSpan2_To = nColSpan2_From + nMaxColumn / 3;

                    nColSpan3_From = nColSpan2_To + 1;
                    nColSpan3_To = nMaxColumn;
                }
                else
                {
                    nColSpan1_From = 1;
                    nColSpan1_To = nColSpan1_From + (nMaxColumn - nMaxColumn % 3) / 3;

                    nColSpan2_From = nColSpan1_To + 1;
                    nColSpan2_To = nColSpan2_From + (nMaxColumn - nMaxColumn % 3) / 3;

                    nColSpan3_From = nColSpan2_To + 1;
                    nColSpan3_To = nMaxColumn;
                }

                cell = sheet.Cells[rowIndex, nColSpan1_From, rowIndex + 3, nColSpan1_To]; cell.Merge = true; cell.Value = "____________________\nPrepared By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, nColSpan2_From, rowIndex + 3, nColSpan2_To]; cell.Merge = true; cell.Value = "______________________\nChecked By APM/PM"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, nColSpan3_From, rowIndex + 3, nMaxColumn]; cell.Merge = true; cell.Value = "______________________\nApproved By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=DTAE_WISE_ATTENDACE.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }
        #endregion Date Wise Attendance XL

        #region Daily Attendance
        public ActionResult PrintDailyAttendance_LocationWise(string sParam, double nts)
        {
            //string Date = sParam.Split('~')[0];

            DateTime paramDate;
            string Date = sParam.Split('~')[0];
            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];
            string sChkType = sParam.Split('~')[7];
            string format = sParam.Split('~')[8];
            int CriteriaType = Convert.ToInt32(sParam.Split('~')[9]);
            string StartInTime = sParam.Split('~')[10];
            string EndInTime = sParam.Split('~')[11];
            string StartOutTime = sParam.Split('~')[12];
            string EndOutTime = sParam.Split('~')[13];
            int StartLate = Convert.ToInt32(sParam.Split('~')[14]);
            int EndLate = Convert.ToInt32(sParam.Split('~')[15]);
            int StartEarly = Convert.ToInt32(sParam.Split('~')[16]);
            int EndEarly = Convert.ToInt32(sParam.Split('~')[17]);
            string Remark = sParam.Split('~')[18];
            bool IsRemark = Convert.ToBoolean(sParam.Split('~')[19]);

            sFormat = format;

            DateTime dStartInTime;
            DateTime dEndInTime;
            DateTime dStartOutTime;
            DateTime dEndOutTime;

            DateTime dStartLate;
            DateTime dEndLate;
            DateTime dStartEarly;
            DateTime dEndEarly;

            _oAttendanceDaily = new AttendanceDaily();
            string sSQL = "";
            string sMsg = "";

            sSQL = "SELECT * FROM View_AttendanceDaily WHERE AttendanceID <>0 AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=1)";
            //if (sAttID != "") { sSQL += " WHERE AttendanceID IN(" + sAttID + ")"; }
            //else
            //{
            sSQL += " AND AttendanceDate ='" + Date + "'";
            if (sBusinessUnitIds != "")
            {
                sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSQL = sSQL + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIDs != "")
            {
                sSQL += " AND DepartmentID IN(" + sDepartmentIDs + ")";
            }
            if (sDesignationIDs != "")
            {
                sSQL += " AND DesignationID IN(" + sDesignationIDs + ")";
            }
            if (sEmployeeIDs != "")
            {
                sSQL += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (ShiftIds != "")
            {
                sSQL = sSQL + " AND ShiftID IN(" + ShiftIds + ")";
            }

            if (sChkType == "Present")
            {
                sSQL += " AND (CAST(CompInTime AS TIME(0))!='00:00:00' OR CAST(CompOutTime AS TIME(0))!='00:00:00' OR IsOSD=1)";
            }

            if (sChkType == "Absent")
            {
                sSQL += " AND (CAST(CompInTime AS TIME(0))='00:00:00'AND CAST(CompOutTime AS TIME(0))='00:00:00') AND CompLeaveHeadID=0 AND IsCompDayOff=0 AND IsCompHoliday=0 AND IsOSD!=1";
            }
            if (sChkType == "Late")
            {
                sSQL += " AND CompLateArrivalMinute>0";
            }

            if (sChkType == "Early")
            {
                sSQL += " AND CompEarlyDepartureMinute>0";
            }
            if (sChkType == "OT")
            {
                sSQL += " AND CompOverTimeInMinute>0";
            }
            if (sChkType == "NoWork")
            {
                sSQL += " AND IsNoWork=1";
            }
            if (sChkType == "Leave")
            {
                sSQL += " AND CompLeaveHeadID>0";
            }
            if (sChkType == "NOT")//No Out Time
            {
                sSQL += " AND (CAST(CompInTime AS TIME(0))!='00:00:00'AND CAST(CompOutTime AS TIME(0))='00:00:00')";
            }
            if (IsRemark)
            {
                sSQL += " AND (Remark IS NOT NULL OR Remark <> '')";
            }
            if (!string.IsNullOrEmpty(Remark))
            {
                sSQL += " AND Remark LIKE '%" + Remark + "%'";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSQL = sSQL + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }

            //dStartInTime = Convert.ToDateTime(StartInTime);
            //dEndInTime = Convert.ToDateTime(EndInTime);
            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            //dEndOutTime = Convert.ToDateTime(EndOutTime);

            DateTime d;

            //dStartInTime = Convert.ToDateTime(StartInTime);
            if (DateTime.TryParse(StartInTime, out d)) { dStartInTime = d; } else { dStartInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartInTime.Second);

            dStartInTime = paramDate;

            //dEndInTime = Convert.ToDateTime(EndInTime);
            if (DateTime.TryParse(EndInTime, out d)) { dEndInTime = d; } else { dEndInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndInTime.Second);
            dEndInTime = paramDate;

            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            if (DateTime.TryParse(StartOutTime, out d)) { dStartOutTime = d; } else { dStartOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartOutTime.Second);
            dStartOutTime = paramDate;

            //dEndOutTime = Convert.ToDateTime(EndOutTime);
            if (DateTime.TryParse(EndOutTime, out d)) { dEndOutTime = d; } else { dEndOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndOutTime.Second);
            dEndOutTime = paramDate;


            if (CriteriaType == 1)
            {

                if (StartInTime != "00:00:00" && EndInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00" && EndOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0 || EndLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartLate + "')" + " AND " + "CONVERT(varchar(50),'" + EndLate + "')";
                }
                if (StartEarly > 0 || EndEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartEarly + "')" + " AND " + "CONVERT(varchar(50),'" + EndEarly + "')";
                }
            }
            if (CriteriaType == 2)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute  = " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute  = " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }
            if (CriteriaType == 3)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartLate - 1) + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartEarly - 1) + "')";
                }
            }
            if (CriteriaType == 4)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute > " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute  > " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }

            //}
            sSQL += " ORDER BY Code";
            sMsg = sChkType;

            _oAttendanceDaily.AttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oAttendanceDaily.Company = oCompanys.First();
            _oAttendanceDaily.ErrorMessage = sMsg;

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", _oAttendanceDaily.AttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

            _oAttendanceDaily.AttendanceDailys.ForEach(x =>
            {
                x.TotalWorkingHourInMinute = x.CompTotalWorkingHourInMinute;
                x.LateArrivalMinute = x.CompLateArrivalMinute;
                x.EarlyDepartureMinute = x.CompEarlyDepartureMinute;
                x.InTime = x.CompInTime;
                x.OutTime = x.CompOutTime;
                x.IsHoliday = x.IsCompHoliday;
                x.IsDayOff = x.IsCompDayOff;
                x.LeaveHeadID = x.CompLeaveHeadID;
                x.OverTimeInMinute = x.CompOverTimeInMinute;
                
            });


            rptDailyAttendance_LocationWise oReport = new rptDailyAttendance_LocationWise();
            byte[] abytes = oReport.PrepareReport(_oAttendanceDaily, format, oBusinessUnits);
            return File(abytes, "application/pdf");
        }
        public ActionResult PrintDailyAttendance_DepartmentWise(string sParam, double nts)
        {
            //string Date = sParam.Split('~')[0];


            DateTime paramDate;
            string Date = sParam.Split('~')[0];
            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];
            string sChkType = sParam.Split('~')[7];
            string format = sParam.Split('~')[8];
            int CriteriaType = Convert.ToInt32(sParam.Split('~')[9]);
            string StartInTime = sParam.Split('~')[10];
            string EndInTime = sParam.Split('~')[11];
            string StartOutTime = sParam.Split('~')[12];
            string EndOutTime = sParam.Split('~')[13];
            int StartLate = Convert.ToInt32(sParam.Split('~')[14]);
            int EndLate = Convert.ToInt32(sParam.Split('~')[15]);
            int StartEarly = Convert.ToInt32(sParam.Split('~')[16]);
            int EndEarly = Convert.ToInt32(sParam.Split('~')[17]);
            string Remark = sParam.Split('~')[18];
            bool IsRemark = Convert.ToBoolean(sParam.Split('~')[19]);

            sFormat = format;

            DateTime dStartInTime;
            DateTime dEndInTime;
            DateTime dStartOutTime;
            DateTime dEndOutTime;

            DateTime dStartLate;
            DateTime dEndLate;
            DateTime dStartEarly;
            DateTime dEndEarly;

            _oAttendanceDaily = new AttendanceDaily();
            string sSQL = "";
            string sMsg = "";

            sSQL = "SELECT * FROM View_AttendanceDaily WHERE AttendanceID <>0 AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=1)";
            //if (sAttID != "") { sSQL += " WHERE AttendanceID IN(" + sAttID + ")"; }
            //else
            //{
            sSQL += " AND AttendanceDate ='" + Date + "'";
            if (sBusinessUnitIds != "")
            {
                sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSQL = sSQL + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIDs != "")
            {
                sSQL += " AND DepartmentID IN(" + sDepartmentIDs + ")";
            }
            if (sDesignationIDs != "")
            {
                sSQL += " AND DesignationID IN(" + sDesignationIDs + ")";
            }
            if (sEmployeeIDs != "")
            {
                sSQL += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (ShiftIds != "")
            {
                sSQL = sSQL + " AND ShiftID IN(" + ShiftIds + ")";
            }

            if (sChkType == "Present")
            {
                sSQL += " AND (CAST(CompInTime AS TIME(0))!='00:00:00' OR CAST(CompOutTime AS TIME(0))!='00:00:00' OR IsOSD=1)";
            }

            if (sChkType == "Absent")
            {
                sSQL += " AND (CAST(CompInTime AS TIME(0))='00:00:00'AND CAST(CompOutTime AS TIME(0))='00:00:00') AND CompLeaveHeadID=0 AND IsCompDayOff=0 AND IsCompHoliday=0 AND IsOSD=0";
            }
            if (sChkType == "Late")
            {
                sSQL += " AND CompLateArrivalMinute>0";
            }

            if (sChkType == "Early")
            {
                sSQL += " AND CompEarlyDepartureMinute>0";
            }
            if (sChkType == "OT")
            {
                sSQL += " AND CompOverTimeInMinute>0";
            }
            if (sChkType == "NoWork")
            {
                sSQL += " AND IsNoWork=1";
            }
            if (sChkType == "Leave")
            {
                sSQL += " AND CompLeaveHeadID>0";
            }
            if (sChkType == "NOT")//No Out Time
            {
                sSQL += " AND (CAST(CompInTime AS TIME(0))!='00:00:00'AND CAST(CompOutTime AS TIME(0))='00:00:00')";
            }
            if (IsRemark)
            {
                sSQL += " AND (Remark IS NOT NULL OR Remark <> '')";
            }
            if (!string.IsNullOrEmpty(Remark))
            {
                sSQL += " AND Remark LIKE '%" + Remark + "%'";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSQL = sSQL + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }

            //dStartInTime = Convert.ToDateTime(StartInTime);
            //dEndInTime = Convert.ToDateTime(EndInTime);
            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            //dEndOutTime = Convert.ToDateTime(EndOutTime);

            DateTime d;

            //dStartInTime = Convert.ToDateTime(StartInTime);
            if (DateTime.TryParse(StartInTime, out d)) { dStartInTime = d; } else { dStartInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartInTime.Second);

            dStartInTime = paramDate;

            //dEndInTime = Convert.ToDateTime(EndInTime);
            if (DateTime.TryParse(EndInTime, out d)) { dEndInTime = d; } else { dEndInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndInTime.Second);
            dEndInTime = paramDate;

            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            if (DateTime.TryParse(StartOutTime, out d)) { dStartOutTime = d; } else { dStartOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartOutTime.Second);
            dStartOutTime = paramDate;

            //dEndOutTime = Convert.ToDateTime(EndOutTime);
            if (DateTime.TryParse(EndOutTime, out d)) { dEndOutTime = d; } else { dEndOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndOutTime.Second);
            dEndOutTime = paramDate;

            if (CriteriaType == 1)
            {

                if (StartInTime != "00:00:00" && EndInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00" && EndOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0 || EndLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartLate + "')" + " AND " + "CONVERT(varchar(50),'" + EndLate + "')";
                }
                if (StartEarly > 0 || EndEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute BETWEEN " + "CONVERT(varchar(50),'" + StartEarly + "')" + " AND " + "CONVERT(varchar(50),'" + EndEarly + "')";
                }
            }
            if (CriteriaType == 2)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute  = " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute  = " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }
            if (CriteriaType == 3)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartLate - 1) + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartEarly - 1) + "')";
                }
            }
            if (CriteriaType == 4)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute  > " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute  > " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }

            //}
            sSQL += " ORDER BY Code";
            sMsg = sChkType;

            _oAttendanceDaily.AttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oAttendanceDaily.Company = oCompanys.First();
            _oAttendanceDaily.ErrorMessage = sMsg;


            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", _oAttendanceDaily.AttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

            _oAttendanceDaily.AttendanceDailys.ForEach(x =>
            {
                x.TotalWorkingHourInMinute = x.CompTotalWorkingHourInMinute;
                x.LateArrivalMinute = x.CompLateArrivalMinute;
                x.EarlyDepartureMinute = x.CompEarlyDepartureMinute;
                x.InTime = x.CompInTime;
                x.OutTime = x.CompOutTime;
                x.IsHoliday = x.IsCompHoliday;
                x.IsDayOff = x.IsCompDayOff;
                x.LeaveHeadID = x.CompLeaveHeadID;
                x.OverTimeInMinute = x.CompOverTimeInMinute;

            });

            if (sChkType == "NoWork")
            {
                rptDailyAttendance_DepartmentWise_NoWork oReport = new rptDailyAttendance_DepartmentWise_NoWork();
                byte[] abytes = oReport.PrepareReport(_oAttendanceDaily);
                return File(abytes, "application/pdf");
            }
            else
            {
                rptDailyAttendance_DepartmentWise oReport = new rptDailyAttendance_DepartmentWise();
                byte[] abytes = oReport.PrepareReport(_oAttendanceDaily, format, oBusinessUnits);
                return File(abytes, "application/pdf");
            }
        }

        #endregion

        #region Att. Ratio XL
        public void ExcelAttRatioSummary(string sParam, double nts)
        {


            DateTime paramDate;
            string Date = sParam.Split('~')[0];
            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];

            List<AttendanceRatioReport> oAttendanceRatioReports = new List<AttendanceRatioReport>();
            oAttendanceRatioReports = AttendanceRatioReport.GetsComp(paramDate, sBusinessUnitIds, sLocationID, sDepartmentIDs, sDesignationIDs, sEmployeeIDs, ShiftIds, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<AttendanceRatioReport> oAttRRShifts = new List<AttendanceRatioReport>();
            oAttRRShifts = oAttendanceRatioReports.GroupBy(x => x.ShiftID).Select(g => g.First()).ToList();

            List<AttendanceRatioReport> oAttDepts = new List<AttendanceRatioReport>();
            oAttDepts = oAttendanceRatioReports.GroupBy(x => x.DepartmentID).Select(g => g.First()).ToList();

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);


            int nMaxColumn = 0;
            int colIndex = 1;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;


            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Attendance Summary");
                sheet.Name = "Attendance Summary";

                int n = 1;
                sheet.Column(n++).Width = 6; //SL
                sheet.Column(n++).Width = 30; //NAME

                foreach (AttendanceRatioReport oItem in oAttRRShifts)
                {
                    sheet.Column(n++).Width = 15; //EMp Total
                    sheet.Column(n++).Width = 15; //Total Present
                    sheet.Column(n++).Width = 15; //OT Present
                    sheet.Column(n++).Width = 15; //Absent Leave
                }
                sheet.Column(n++).Width = 15; //EMp Total
                sheet.Column(n++).Width = 15; //Total Present
                sheet.Column(n++).Width = 15; //OT Present
                sheet.Column(n++).Width = 15; //Absent Leave

                sheet.Column(n++).Width = 15; //Absent Ratio

                sheet.Column(n++).Width = 15; //Permanent
                sheet.Column(n++).Width = 15; //Probationary
                sheet.Column(n++).Width = 15; //Contractual

                sheet.Column(n++).Width = 15; //New join
                sheet.Column(n++).Width = 15; //Lefty


                nMaxColumn = n;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header


                cell = sheet.Cells[rowIndex, 3]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = oCompanys.Count > 0 ? oCompanys[0].Name : ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                rowIndex = rowIndex + 1;



                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Date : " + Date; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;

                #endregion

                #region Table Body
                int nSL = 0;


                colIndex = 1;
                #region Table Header 02
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SHIFT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                colIndex = 1;
                rowIndex = rowIndex + 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (AttendanceRatioReport oItem in oAttRRShifts)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.ShiftName; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                }

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total Summary"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                colIndex = 1;
                rowIndex = rowIndex + 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Department"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (AttendanceRatioReport oItem in oAttRRShifts)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Emp. Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total Present"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Present"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Absent+Leave"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Emp. Total"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total Present"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Present"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Absent+Leave"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Department Wise Absent Ratio"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Permanent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Probationary"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Contractual"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "New Joining"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Left"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
                #endregion

                foreach (var data in oAttDepts)
                {
                    nSL++;
                    colIndex = 1;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = data.DepartmentName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    foreach (AttendanceRatioReport oItem in oAttRRShifts)
                    {
                        List<AttendanceRatioReport> oItems = new List<AttendanceRatioReport>();
                        oItems = oAttendanceRatioReports.Where(x => (x.DepartmentID == data.DepartmentID && x.ShiftID == oItem.ShiftID)).ToList();
                        if (oItems.Count > 0)
                        {
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItems[0].EmpTotal; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItems[0].TotalPresent; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItems[0].OTPresent; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItems[0].AbsentLeave; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        else
                        {
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    int EmpTotal = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.EmpTotal);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = EmpTotal; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    int TotalPresent = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.TotalPresent);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalPresent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    int OTPresent = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.OTPresent);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = OTPresent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    int AbsentLeave = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.AbsentLeave);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = AbsentLeave; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    double Ratio = Convert.ToDouble(AbsentLeave) * 100 / Convert.ToDouble(EmpTotal);

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Global.MillionFormat(Ratio); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                    int Permanent = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.Permanent);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Permanent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    int Probationary = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.Probationary);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Probationary; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    int Contractual = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.Contractual);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Contractual; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                    int New = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.New);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = New; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    int Lefty = oAttendanceRatioReports.Where(y => y.DepartmentID == data.DepartmentID).Sum(x => x.Lefty);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Lefty; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    rowIndex++;
                }

                colIndex = 1;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (AttendanceRatioReport oItem in oAttRRShifts)
                {
                    List<AttendanceRatioReport> oItems = new List<AttendanceRatioReport>();
                    oItems = oAttendanceRatioReports.Where(x => x.ShiftID == oItem.ShiftID).ToList();
                    if (oItems.Count > 0)
                    {
                        int EmpTotal = oItems.Sum(x => x.EmpTotal);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = EmpTotal; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        int TotalPresent = oItems.Sum(x => x.TotalPresent);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalPresent; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        int OTPresent = oItems.Sum(x => x.OTPresent);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = OTPresent; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        int AbsentLeave = oItems.Sum(x => x.AbsentLeave);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = AbsentLeave; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }
                    else
                    {
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }

                int GTEmpTotal = oAttendanceRatioReports.Sum(x => x.EmpTotal);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTEmpTotal; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                int GTTotalPresent = oAttendanceRatioReports.Sum(x => x.TotalPresent);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTTotalPresent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                int GTOTPresent = oAttendanceRatioReports.Sum(x => x.OTPresent);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTOTPresent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                int GTAbsentLeave = oAttendanceRatioReports.Sum(x => x.AbsentLeave);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTAbsentLeave; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                double GTRatio = Convert.ToDouble(GTAbsentLeave) * 100 / Convert.ToDouble(GTEmpTotal);

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Global.MillionFormat(GTRatio); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                int GTPermanent = oAttendanceRatioReports.Sum(x => x.Permanent);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTPermanent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                int GTProbationary = oAttendanceRatioReports.Sum(x => x.Probationary);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTProbationary; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                int GTContractual = oAttendanceRatioReports.Sum(x => x.Contractual);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTContractual; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                int GTNew = oAttendanceRatioReports.Sum(x => x.New);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTNew; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                int GTLefty = oAttendanceRatioReports.Sum(x => x.Lefty);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = GTLefty; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                colIndex = 1;
                rowIndex++;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Shift Wise Absent Ratio"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (AttendanceRatioReport oItem in oAttRRShifts)
                {
                    List<AttendanceRatioReport> oItems = new List<AttendanceRatioReport>();
                    oItems = oAttendanceRatioReports.Where(x => x.ShiftID == oItem.ShiftID).ToList();
                    if (oItems.Count > 0)
                    {
                        int EmpTotal = oItems.Sum(x => x.EmpTotal);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        int AbsentLeave = oItems.Sum(x => x.AbsentLeave);

                        double Ratio = Convert.ToDouble(AbsentLeave) * 100 / Convert.ToDouble(EmpTotal);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Global.MillionFormat(Ratio); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }
                    else
                    {
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                #endregion


                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=DepartmentWiseShiftWiseAttSummary.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }



        public void ExcelAttRatioSummaryF2(string sParam, double nts)
        {


            DateTime paramDate;
            string Date = sParam.Split('~')[0];
            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];

            List<AttendanceMonitoring> oAttendanceMonitorings = new List<AttendanceMonitoring>();
            oAttendanceMonitorings = AttendanceMonitoring.GetsComp(sBusinessUnitIds, sDepartmentIDs, sDepartmentIDs, sDesignationIDs, ShiftIds, "", paramDate, "","", ((User)(Session[SessionInfo.CurrentUser])).UserID);



            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);


            var AttendanceMonitorings = oAttendanceMonitorings.GroupBy(x => new { x.DepartmentID }, (key, grp) => new
            {
                LocationName = grp.First().LocationName,
                DepartmentID = key.DepartmentID,
                DesignationID = grp.First().DesignationID,
                DepartmentName = grp.First().DepartmentName,
                ExistsPerson = grp.Sum(x => x.Exists),
                TotalPresent = grp.Sum(x => x.Present),
                TotalAbsent = grp.Sum(x => x.Absent),
                AttList = grp
            }).OrderBy(x => x.DepartmentName).ToList();


            var AttendanceMonitoringsForDeptWise = oAttendanceMonitorings.GroupBy(x => new { x.DepartmentID }, (key, grp) => new AttendanceMonitoring
            {
                LocationName = grp.First().LocationName,
                DepartmentID = key.DepartmentID,
                DepartmentName = grp.First().DepartmentName,
                Exists = grp.Sum(x => x.Exists),
                Present = grp.Sum(x => x.Present),
                Absent = grp.Sum(x => x.Absent),
                Leave = grp.Sum(x => x.Leave),
                HoliDay = grp.Sum(x => x.HoliDay) + grp.Sum(x => x.DayOff)

            }).OrderBy(x => x.DepartmentName).ToList();



            var AttendanceMonitoringsForDesignationWise = oAttendanceMonitorings.GroupBy(x => new { x.DesignationID }, (key, grp) => new AttendanceMonitoring
            {
                LocationName = grp.First().LocationName,
                DesignationID = key.DesignationID,
                DesignationName = grp.First().DesignationName,
                Exists = grp.Sum(x => x.Exists),
                Present = grp.Sum(x => x.Present),
                Absent = grp.Sum(x => x.Absent),
                Leave = grp.Sum(x => x.Leave),
                HoliDay = grp.Sum(x => x.HoliDay) + grp.Sum(x => x.DayOff)
            }).OrderBy(x => x.DesignationName).ToList();


            List<string> oDeptName = new List<string>();
            List<int> nTotal = new List<int>();
            List<int> nPresent = new List<int>();
            List<int> nAbsent = new List<int>();
            int counter = 0;

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oAttendanceMonitorings.Select(p => p.BUID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            int nMaxColumn = 0;
            int colIndex = 1;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;


            OfficeOpenXml.Style.Border border;


            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Attendance Summary");
                sheet.Name = "Attendance Summary";

                int n = 1;
                sheet.Column(n++).Width = 6; //SL
                sheet.Column(n++).Width = 25; //Designation
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                sheet.Column(n++).Width = 15; //Male
                sheet.Column(n++).Width = 15; //Female
                sheet.Column(n++).Width = 15; //Total
                nMaxColumn = n;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header


                cell = sheet.Cells[rowIndex, 3]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? (oCompanys.Count > 0 ? oCompanys[0].Name : "") : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                rowIndex = rowIndex + 1;



                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Date : " + Date; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;

                #endregion

                #region Table Body
                int nSL = 0;
                foreach (var oItem in AttendanceMonitorings)
                {



                    colIndex = 1;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn - 1]; cell.Value = "Department: " + oItem.DepartmentName + ", " + oItem.LocationName; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; ;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    colIndex = 1;
                    rowIndex += 1;


                    cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex]; cell.Value = "SL"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex + 1, colIndex]; cell.Value = "Designation"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "Exist"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 3;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "Present"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 3;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "Absent"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 3;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "Late"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 3;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "Early Leave"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 3;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "Leave"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 3;

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 2]; cell.Value = "DayOff/Holiday"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    colIndex = 3;
                    rowIndex += 1;


                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Male"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Female"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    var List = oItem.AttList.GroupBy(x => new { x.DesignationID }, (key, grp) => new AttendanceMonitoring
                    {
                        DepartmentID = grp.First().DepartmentID,
                        DepartmentName = grp.First().DepartmentName,

                        DesignationName = grp.First().DesignationName,
                        MaleExistPerson = grp.Sum(x => x.MaleExistPerson),
                        FemaleExistPerson = grp.Sum(x => x.FemaleExistPerson),

                        MalePresent = grp.Sum(x => x.MalePresent),
                        FemalePresent = grp.Sum(x => x.FemalePresent),

                        MaleAbsent = grp.Sum(x => x.MaleAbsent),
                        FemaleAbsent = grp.Sum(x => x.FemaleAbsent),

                        MaleLate = grp.Sum(x => x.MaleLate),
                        FemaleLate = grp.Sum(x => x.FemaleLate),

                        MaleEarlyLeave = grp.Sum(x => x.MaleEarlyLeave),
                        FemaleEarlyLeave = grp.Sum(x => x.FemaleEarlyLeave),

                        MaleLeave = grp.Sum(x => x.MaleLeave),
                        FemaleLeave = grp.Sum(x => x.FemaleLeave),

                        MaleDayOff = grp.Sum(x => x.MaleDayOff),
                        FemaleDayOff = grp.Sum(x => x.FemaleDayOff),


                    }).OrderBy(x => x.DesignationName).ToList();

                    rowIndex += 1;
                    foreach (var data in List)
                    {


                        colIndex = 1;

                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = ++nSL;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.DesignationName;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;

                        //1
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleExistPerson;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.FemaleExistPerson;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleExistPerson + data.FemaleExistPerson;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        //2
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MalePresent;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.FemalePresent;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MalePresent + data.FemalePresent;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        //3
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleAbsent;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.FemaleAbsent;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleAbsent + data.FemaleAbsent;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        //4
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleLate;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.FemaleLate;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleLate + data.FemaleLate;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        //5
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleEarlyLeave;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.FemaleEarlyLeave;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleEarlyLeave + data.FemaleEarlyLeave;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        //6
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleLeave;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.FemaleLeave;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleLeave + data.FemaleLeave;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;


                        //7
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleDayOff;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleDayOff;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;
                        cell = sheet.Cells[rowIndex, colIndex]; cell.Value = data.MaleDayOff + data.MaleDayOff;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex += 1;

                        nTotal.Add(data.MaleExistPerson + data.FemaleExistPerson);
                        nPresent.Add(data.MalePresent + data.FemalePresent);
                        nAbsent.Add(data.MaleAbsent + data.FemaleAbsent);

                        rowIndex += 1;

                    }
                    nSL = 0;

                }
                rowIndex += 1;
                rowIndex += 1;
                colIndex = 2;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 5]; cell.Value = "Department Wise"; cell.Merge = true; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Gray); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Department Name"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Man Power"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Present"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Leave"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Holiday/Dayoff"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                rowIndex += 1;


                int TotalExist = 0, TotalPresent = 0, TotalAbsent = 0, TotalLeave = 0, TotalHoliday = 0;
                foreach (var item in AttendanceMonitoringsForDeptWise)
                {
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.DepartmentName;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Exists;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    TotalExist += item.Exists;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Present;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    TotalPresent += item.Present;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Absent;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    TotalAbsent += item.Absent;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Leave;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    TotalLeave += item.Leave;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.HoliDay;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    TotalHoliday += item.HoliDay;

                    rowIndex += 1;
                    counter++;

                }
                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = TotalExist; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = TotalPresent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = TotalAbsent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = TotalLeave; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = TotalHoliday; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                rowIndex++;

                //designationwise
                counter = 0;
                rowIndex += 1;
                rowIndex += 1;
                colIndex = 2;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 5]; cell.Value = "Designation Wise"; cell.Merge = true; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Gray); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Designation Name"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Man Power"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Present"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Leave"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Holiday/Dayoff"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                rowIndex += 1;


                int desTotalExist = 0, desTotalPresent = 0, desTotalAbsent = 0, desTotalLeave = 0, desTotalHoliday = 0;
                foreach (var item in AttendanceMonitoringsForDesignationWise)
                {
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.DesignationName;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Exists;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    desTotalExist += item.Exists;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Present;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    desTotalPresent += item.Present;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Absent;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    desTotalAbsent += item.Absent;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.Leave;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    desTotalLeave += item.Leave;

                    cell = sheet.Cells[rowIndex, colIndex]; cell.Value = item.HoliDay;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    colIndex += 1;
                    desTotalHoliday += item.HoliDay;

                    rowIndex += 1;
                    counter++;

                }
                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = desTotalExist; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = desTotalPresent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = desTotalAbsent; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = desTotalLeave; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;

                cell = sheet.Cells[rowIndex, colIndex]; cell.Value = desTotalHoliday; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                colIndex += 1;
                rowIndex++;


                #endregion





                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=AttendanceSunnryF2.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }
        #endregion

        #region Excel
        public void ExcelDailyAttendance_LocationWise(string sParam, double nts)
        {
            DateTime paramDate;

            string Date = sParam.Split('~')[0];

            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];
            string sChkType = sParam.Split('~')[7];
            string format = sParam.Split('~')[8];
            int CriteriaType = Convert.ToInt32(sParam.Split('~')[9]);
            string StartInTime = sParam.Split('~')[10];
            string EndInTime = sParam.Split('~')[11];
            string StartOutTime = sParam.Split('~')[12];
            string EndOutTime = sParam.Split('~')[13];
            int StartLate = Convert.ToInt32(sParam.Split('~')[14]);
            int EndLate = Convert.ToInt32(sParam.Split('~')[15]);
            int StartEarly = Convert.ToInt32(sParam.Split('~')[16]);
            int EndEarly = Convert.ToInt32(sParam.Split('~')[17]);
            string Remark = sParam.Split('~')[18];
            bool IsRemark = Convert.ToBoolean(sParam.Split('~')[19]);

            sFormat = format;

            DateTime dStartInTime;
            DateTime dEndInTime;
            DateTime dStartOutTime;
            DateTime dEndOutTime;

            DateTime dStartLate;
            DateTime dEndLate;
            DateTime dStartEarly;
            DateTime dEndEarly;

            _oAttendanceDaily = new AttendanceDaily();
            string sSQL = "";
            string sMsg = "";

            sSQL = "SELECT * FROM View_AttendanceDaily WHERE AttendanceID <>0 AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=1)";
            //if (sAttID != "") { sSQL += " WHERE AttendanceID IN(" + sAttID + ")"; }
            //else
            //{
            sSQL += " AND AttendanceDate ='" + Date + "'";
            if (sBusinessUnitIds != "")
            {
                sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSQL = sSQL + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIDs != "")
            {
                sSQL += " AND DepartmentID IN(" + sDepartmentIDs + ")";
            }
            if (sDesignationIDs != "")
            {
                sSQL += " AND DesignationID IN(" + sDesignationIDs + ")";
            }
            if (sEmployeeIDs != "")
            {
                sSQL += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (ShiftIds != "")
            {
                sSQL = sSQL + " AND ShiftID IN(" + ShiftIds + ")";
            }

            if (sChkType == "Present")
            {
                sSQL += " AND (CAST(CompInTime AS TIME(0))!='00:00:00' OR CAST(CompOutTime AS TIME(0))!='00:00:00' OR IsOSD=1)";
            }

            if (sChkType == "Absent")
            {
                sSQL += " AND (CAST(CompInTime AS TIME(0))='00:00:00'AND CAST(CompOutTime AS TIME(0))='00:00:00') AND CompLeaveHeadID=0 AND IsCompDayOff=0 AND IsCompHoliday=0 AND IsOSD!=1";
            }
            if (sChkType == "Late")
            {
                sSQL += " AND CompLateArrivalMinute>0";
            }

            if (sChkType == "Early")
            {
                sSQL += " AND CompEarlyDepartureMinute>0";
            }
            if (sChkType == "OT")
            {
                sSQL += " AND CompOverTimeInMinute>0";
            }
            if (sChkType == "NoWork")
            {
                sSQL += " AND IsNoWork=1";
            }
            if (sChkType == "Leave")
            {
                sSQL += " AND CompLeaveHeadID>0";
            }
            if (sChkType == "NOT")//No Out Time
            {
                sSQL += " AND (CAST(CompInTime AS TIME(0))!='00:00:00'AND CAST(CompOutTime AS TIME(0))='00:00:00')";
            }
            if (IsRemark)
            {
                sSQL += " AND (Remark IS NOT NULL OR Remark <> '')";
            }
            if (!string.IsNullOrEmpty(Remark))
            {
                sSQL += " AND Remark LIKE '%" + Remark + "%'";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSQL = sSQL + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }

            DateTime d;

            //dStartInTime = Convert.ToDateTime(StartInTime);
            if (DateTime.TryParse(StartInTime, out d)) { dStartInTime = d; } else { dStartInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartInTime.Second);

            dStartInTime = paramDate;

            //dEndInTime = Convert.ToDateTime(EndInTime);
            if (DateTime.TryParse(EndInTime, out d)) { dEndInTime = d; } else { dEndInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndInTime.Second);
            dEndInTime = paramDate;

            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            if (DateTime.TryParse(StartOutTime, out d)) { dStartOutTime = d; } else { dStartOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartOutTime.Second);
            dStartOutTime = paramDate;

            //dEndOutTime = Convert.ToDateTime(EndOutTime);
            if (DateTime.TryParse(EndOutTime, out d)) { dEndOutTime = d; } else { dEndOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndOutTime.Second);
            dEndOutTime = paramDate;


            if (CriteriaType == 1)
            {

                if (StartInTime != "00:00:00" && EndInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00" && EndOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0 || EndLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartLate + "')" + " AND " + "CONVERT(varchar(50),'" + EndLate + "')";
                }
                if (StartEarly > 0 || EndEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartEarly + "')" + " AND " + "CONVERT(varchar(50),'" + EndEarly + "')";
                }
            }
            if (CriteriaType == 2)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute  = " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute  = " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }
            if (CriteriaType == 3)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartLate - 1) + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartEarly - 1) + "')";
                }
            }
            if (CriteriaType == 4)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute  > " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute  > " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }

            //}
            sSQL += " ORDER BY Code";
            sMsg = sChkType;

            _oAttendanceDaily.AttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            string EmpIDs = string.Join(",", _oAttendanceDaily.AttendanceDailys.Where(x => x.AttendanceID > 0).Select(p => p.EmployeeID).Distinct().ToList());
            List<EmployeeSalaryStructure> oEmployeeSalaryStructures = new List<EmployeeSalaryStructure>();
            if (_oAttendanceDaily.AttendanceDailys.Count > 0)
            {
                oEmployeeSalaryStructures = EmployeeSalaryStructure.Gets("SELECT * FROM View_EmployeeSalaryStructure WHERE EmployeeID IN(" + EmpIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oAttendanceDaily.Company = oCompanys.First();
            _oAttendanceDaily.ErrorMessage = sMsg;


            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", _oAttendanceDaily.AttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            bool bView = false;
            List<AuthorizationRoleMapping> oARMs = new List<AuthorizationRoleMapping>();
            oARMs = AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.EmployeeSalaryStructure).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]);
            if (oARMs.Count > 0) { bView = true; }

            int nMaxColumn = 0;
            int nStartCol = 1, nEndCol = 13;
            int colIndex = 1;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;
            string makeFormat = "";


            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Location Wise Daily Attendance");
                sheet.Name = "LocationWiseDailyAttendace";

                int n = 1;
                sheet.Column(n++).Width = 6; //SL
                sheet.Column(n++).Width = 15; //CODE
                sheet.Column(n++).Width = 25; //NAME
                sheet.Column(n++).Width = 20; //DSIGNATION
                if (bView) { sheet.Column(n++).Width = 20; } //GROSS
                sheet.Column(n++).Width = 20; //Shift
                sheet.Column(n++).Width = 10; //IN TIME
                sheet.Column(n++).Width = 10; //OUT TIME
                sheet.Column(n++).Width = 10; //Total Hour
                sheet.Column(n++).Width = 10; //LATE(Hr)
                sheet.Column(n++).Width = 10; //EARLY LEAVING(Hr)
                sheet.Column(n++).Width = 15; //DESCTIPTION
                sheet.Column(n++).Width = 10; //OT(Hr)
                sheet.Column(n++).Width = 15; //REMARK

                nMaxColumn = n;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header
                //sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                //cell = sheet.Cells[rowIndex, 2]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                //cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                cell = sheet.Cells[rowIndex, 3]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;

                //sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                //cell = sheet.Cells[rowIndex, 2]; cell.Value = "Date : " + Date; cell.Style.Font.Bold = true;
                //cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                cell = sheet.Cells[rowIndex, 3]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = "Date : " + Date; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;


                //sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                //cell = sheet.Cells[rowIndex, 2]; cell.Value = "Location : " + _oAttendanceDaily.LocationName; cell.Style.Font.Bold = true;
                //cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                //rowIndex = rowIndex + 2;
                #endregion

                #region Table Body
                int nSL = 0;

                var LocWise = _oAttendanceDaily.AttendanceDailys.GroupBy(x => x.LocationID).Select(grp => new
                {
                    LocationID = grp.Key,
                    LocationName = grp.First().LocationName,
                    Result = grp
                }).ToList().OrderBy(x => x.LocationName);

                foreach (var data in LocWise)
                {
                    nSL = 0;
                    colIndex = 1;

                    //cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn];
                    cell = sheet.Cells[rowIndex, 2];
                    cell.Style.Font.Bold = true; cell.Value = "Location : " + data.LocationName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;

                    #region Table Header 02
                    colIndex = 1;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "CODE"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "NAME"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    if (bView)
                    {
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "GROSS"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SHIFT"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "IN TIME"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OUT TIME"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total (Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "LATE(Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "EARLY LEAVING(Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "DESCTIPTION"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT(Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "REMARKS"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;
                    #endregion





                    foreach (var oItem in data.Result)
                    {
                        //foreach (AttendanceDaily oItem in _oAttendanceDaily.AttendanceDailys)
                        //{
                        nSL++;
                        colIndex = 1;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (bView)
                        {
                            List<EmployeeSalaryStructure> oEmpSSs = new List<EmployeeSalaryStructure>();
                            oEmpSSs = oEmployeeSalaryStructures.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();

                            double nGross = 0;
                            if (oEmpSSs.Count > 0) { nGross = oEmpSSs[0].CompGrossAmount; }

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nGross; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0.00";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.HRM_ShiftName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (sFormat == "twelve")
                        {
                            makeFormat = oItem.CompInTimeInStringAMPM;
                        }
                        else makeFormat = oItem.CompInTimeInString;


                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = makeFormat; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (sFormat == "twelve")
                        {
                            makeFormat = oItem.CompOutTimeInStringAMPM;
                        }
                        else makeFormat = oItem.CompOutTimeInString;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = makeFormat; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompTotalWorkingHourSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompLateArrivalHourSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompEarlyDepartureHrSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.AttStatusInStringInShortComp; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompOTHrSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Remark; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex++;

                        if (oItem.CompOverTimeInMinute > 0) OT++;
                        if (oItem.CompEarlyDepartureMinute > 0) EarlyLeaving++;
                        if (oItem.CompLateArrivalMinute > 0) Late++;
                        if (oItem.IsCompLeave == true) Leave++;
                        if (oItem.IsNoWork == true) NoWork++;
                        if (oItem.CompOutTimeInString == "-") NoOutTime++;
                        if ((oItem.CompInTimeInString != "-" || oItem.CompOutTimeInString != "-" || oItem.IsOSD == true) && oItem.IsCompLeave == false && oItem.IsCompDayOff == false && oItem.IsCompHoliday == false) Present++;
                        if (oItem.CompInTimeInString == "-" && oItem.CompOutTimeInString == "-" && oItem.IsCompLeave == false && oItem.IsCompHoliday == false && oItem.IsCompDayOff == false && oItem.IsOSD == false) Absent++;

                    }

                    rowIndex++;
                    rowIndex++;
                    rowIndex++;

                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "Present "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = Present; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;

                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "Absent "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = Absent; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;

                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "Late "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = Late; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;

                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "EarlyLeaving "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = EarlyLeaving; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "OT "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = OT; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "No Work "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = NoWork; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "Leave "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = Leave; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    cell = sheet.Cells[rowIndex, 3];
                    cell.Style.Font.Bold = true; cell.Value = "No Out Time "; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, 4];
                    cell.Style.Font.Bold = true; cell.Value = NoOutTime; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;

                }
                #endregion


                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=LocationWiseDailyAttendance.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        public void ExcelDailyAttendance_DepartmentWise(string sParam, double nts)
        {
            //string Date = sParam.Split('~')[0];

            DateTime paramDate;
            string Date = sParam.Split('~')[0];
            paramDate = Convert.ToDateTime(Date);

            string sBusinessUnitIds = sParam.Split('~')[1];
            string sLocationID = sParam.Split('~')[2];
            string sDepartmentIDs = sParam.Split('~')[3];
            string sDesignationIDs = sParam.Split('~')[4];
            string sEmployeeIDs = sParam.Split('~')[5];
            string ShiftIds = sParam.Split('~')[6];
            string sChkType = sParam.Split('~')[7];
            string format = sParam.Split('~')[8];
            int CriteriaType = Convert.ToInt32(sParam.Split('~')[9]);
            string StartInTime = sParam.Split('~')[10];
            string EndInTime = sParam.Split('~')[11];
            string StartOutTime = sParam.Split('~')[12];
            string EndOutTime = sParam.Split('~')[13];
            int StartLate = Convert.ToInt32(sParam.Split('~')[14]);
            int EndLate = Convert.ToInt32(sParam.Split('~')[15]);
            int StartEarly = Convert.ToInt32(sParam.Split('~')[16]);
            int EndEarly = Convert.ToInt32(sParam.Split('~')[17]);
            string Remark = sParam.Split('~')[18];
            bool IsRemark = Convert.ToBoolean(sParam.Split('~')[19]);


            sFormat = format;

            DateTime dStartInTime;
            DateTime dEndInTime;
            DateTime dStartOutTime;
            DateTime dEndOutTime;

            DateTime dStartLate;
            DateTime dEndLate;
            DateTime dStartEarly;
            DateTime dEndEarly;

            _oAttendanceDaily = new AttendanceDaily();
            string sSQL = "";
            string sMsg = "";

            sSQL = "SELECT * FROM View_AttendanceDaily WHERE AttendanceID <>0 AND EmployeeID IN(SELECT EmployeeID FROM Employee WHERE IsActive=1)";
            //if (sAttID != "") { sSQL += " WHERE AttendanceID IN(" + sAttID + ")"; }
            //else
            //{
            sSQL += " AND AttendanceDate ='" + Date + "'";
            if (sBusinessUnitIds != "")
            {
                sSQL = sSQL + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSQL = sSQL + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIDs != "")
            {
                sSQL += " AND DepartmentID IN(" + sDepartmentIDs + ")";
            }
            if (sDesignationIDs != "")
            {
                sSQL += " AND DesignationID IN(" + sDesignationIDs + ")";
            }
            if (sEmployeeIDs != "")
            {
                sSQL += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (ShiftIds != "")
            {
                sSQL = sSQL + " AND ShiftID IN(" + ShiftIds + ")";
            }

            if (sChkType == "Present")
            {
                sSQL += " AND (CAST(CompInTime AS TIME(0))!='00:00:00' OR CAST(CompOutTime AS TIME(0))!='00:00:00' OR IsOSD=1)";
            }

            if (sChkType == "Absent")
            {
                sSQL += " AND (CAST(CompInTime AS TIME(0))='00:00:00'AND CAST(CompOutTime AS TIME(0))='00:00:00') AND CompLeaveHeadID=0 AND IsCompDayOff=0 AND IsCompHoliday=0 AND IsOSD!=1";
            }
            if (sChkType == "Late")
            {
                sSQL += " AND CompLateArrivalMinute>0";
            }

            if (sChkType == "Early")
            {
                sSQL += " AND CompEarlyDepartureMinute>0";
            }
            if (sChkType == "OT")
            {
                sSQL += " AND CompOverTimeInMinute>0";
            }
            if (sChkType == "NoWork")
            {
                sSQL += " AND IsNoWork=1";
            }
            if (sChkType == "Leave")
            {
                sSQL += " AND CompLeaveHeadID>0";
            }
            if (sChkType == "NOT")//No Out Time
            {
                sSQL += " AND (CAST(CompInTime AS TIME(0))!='00:00:00'AND CAST(CompOutTime AS TIME(0))='00:00:00')";
            }
            if (IsRemark)
            {
                sSQL += " AND (Remark IS NOT NULL OR Remark <> '')";
            }
            if (!string.IsNullOrEmpty(Remark))
            {
                sSQL += " AND Remark LIKE '%" + Remark + "%'";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSQL = sSQL + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }

            //dStartInTime = Convert.ToDateTime(StartInTime);
            //dEndInTime = Convert.ToDateTime(EndInTime);
            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            //dEndOutTime = Convert.ToDateTime(EndOutTime);

            DateTime d;

            //dStartInTime = Convert.ToDateTime(StartInTime);
            if (DateTime.TryParse(StartInTime, out d)) { dStartInTime = d; } else { dStartInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartInTime.Second);

            dStartInTime = paramDate;

            //dEndInTime = Convert.ToDateTime(EndInTime);
            if (DateTime.TryParse(EndInTime, out d)) { dEndInTime = d; } else { dEndInTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndInTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndInTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndInTime.Second);
            dEndInTime = paramDate;

            //dStartOutTime = Convert.ToDateTime(StartOutTime);
            if (DateTime.TryParse(StartOutTime, out d)) { dStartOutTime = d; } else { dStartOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dStartOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dStartOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dStartOutTime.Second);
            dStartOutTime = paramDate;

            //dEndOutTime = Convert.ToDateTime(EndOutTime);
            if (DateTime.TryParse(EndOutTime, out d)) { dEndOutTime = d; } else { dEndOutTime = new DateTime(); }

            paramDate = paramDate.AddHours(-paramDate.Hour);
            paramDate = paramDate.AddHours(dEndOutTime.Hour);
            paramDate = paramDate.AddMinutes(-paramDate.Minute);
            paramDate = paramDate.AddMinutes(dEndOutTime.Minute);
            paramDate = paramDate.AddSeconds(-paramDate.Second);
            paramDate = paramDate.AddSeconds(dEndOutTime.Second);
            dEndOutTime = paramDate;

            if (CriteriaType == 1)
            {

                if (StartInTime != "00:00:00" && EndInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00" && EndOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) BETWEEN " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))" + " AND " + "CONVERT(varchar(150),CAST('" + dEndOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0 || EndLate > 0)
                {
                    sSQL += " AND  CompLateArrivalMinute  BETWEEN " + "CONVERT(varchar(50),'" + StartLate + "')" + " AND " + "CONVERT(varchar(50),'" + EndLate + "')";
                }
                if (StartEarly > 0 || EndEarly > 0)
                {
                    sSQL += " AND  CompEarlyDepartureMinute   BETWEEN " + "CONVERT(varchar(50),'" + StartEarly + "')" + " AND " + "CONVERT(varchar(50),'" + EndEarly + "')";
                }
            }
            if (CriteriaType == 2)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) = " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND  CompLateArrivalMinute   = " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND  CompEarlyDepartureMinute   = " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }
            if (CriteriaType == 3)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) < " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartLate - 1) + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute  BETWEEN CONVERT(varchar(50),1) AND " + "CONVERT(varchar(50),'" + (StartEarly - 1) + "')";
                }
            }
            if (CriteriaType == 4)
            {
                if (StartInTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompInTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartInTime + "' AS TIME(0)))";
                }

                if (StartOutTime != "00:00:00")
                {
                    sSQL += " AND CAST(CompOutTime AS TIME(0)) > " + "CONVERT(varchar(150),CAST('" + dStartOutTime + "' AS TIME(0)))";
                }
                if (StartLate > 0)
                {
                    sSQL += " AND CompLateArrivalMinute  > " + "CONVERT(varchar(50),'" + StartLate + "')";
                }
                if (StartEarly > 0)
                {
                    sSQL += " AND CompEarlyDepartureMinute  > " + "CONVERT(varchar(50),'" + StartEarly + "')";
                }
            }

            //}
            sSQL += " ORDER BY Code";
            sMsg = sChkType;

            _oAttendanceDaily.AttendanceDailys = AttendanceDaily.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            string EmpIDs = string.Join(",", _oAttendanceDaily.AttendanceDailys.Where(x => x.AttendanceID > 0).Select(p => p.EmployeeID).Distinct().ToList());
            List<EmployeeSalaryStructure> oEmployeeSalaryStructures = new List<EmployeeSalaryStructure>();
            if (_oAttendanceDaily.AttendanceDailys.Count > 0)
            {
                oEmployeeSalaryStructures = EmployeeSalaryStructure.Gets("SELECT * FROM View_EmployeeSalaryStructure WHERE EmployeeID IN(" + EmpIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oAttendanceDaily.Company = oCompanys.First();
            _oAttendanceDaily.ErrorMessage = sMsg;


            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", _oAttendanceDaily.AttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            bool bView = false;
            List<AuthorizationRoleMapping> oARMs = new List<AuthorizationRoleMapping>();
            oARMs = AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.EmployeeSalaryStructure).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]);
            if (oARMs.Count > 0) { bView = true; }

            int nMaxColumn = 0;
            int nStartCol = 1, nEndCol = 13;
            int colIndex = 1;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;


            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Location Wise Daily Attendance");
                sheet.Name = "LocationWiseDailyAttendace";

                int n = 1;
                sheet.Column(n++).Width = 6; //SL
                sheet.Column(n++).Width = 15; //CODE
                sheet.Column(n++).Width = 25; //NAME
                sheet.Column(n++).Width = 20; //DSIGNATION
                if (bView) { sheet.Column(n++).Width = 20; } //GROSS
                sheet.Column(n++).Width = 20; //SHIFT
                sheet.Column(n++).Width = 10; //IN TIME
                sheet.Column(n++).Width = 10; //OUT TIME
                sheet.Column(n++).Width = 10; //Total Hour
                sheet.Column(n++).Width = 10; //LATE(Hr)
                sheet.Column(n++).Width = 10; //EARLY LEAVING(Hr)
                sheet.Column(n++).Width = 15; //DESCTIPTION
                sheet.Column(n++).Width = 10; //OT(Hr)
                sheet.Column(n++).Width = 15; //REMARK

                nMaxColumn = n;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetImage(oCompany.OrganizationLogo);

                #region Report Header
                //sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                //cell = sheet.Cells[rowIndex, 2]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                //cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //fill = cell.Style.Fill;

                cell = sheet.Cells[rowIndex, 3]; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.Font.Bold = true; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                rowIndex = rowIndex + 1;

                //sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                //cell = sheet.Cells[rowIndex, 2]; cell.Value = "Date : " + Date; cell.Style.Font.Bold = true;
                //cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                //fill = cell.Style.Fill;

                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Date : " + Date; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.Font.Size = 20;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;

                #endregion

                #region Table Body
                int nSL = 0;

                var deptWise = _oAttendanceDaily.AttendanceDailys.GroupBy(x => x.DepartmentID).Select(grp => new
                {
                    DepartmentID = grp.Key,
                    DepartmentName = grp.First().DepartmentName,
                    Result = grp
                }).ToList().OrderBy(x => x.DepartmentName);

                foreach (var data in deptWise)
                {
                    nSL = 0;
                    colIndex = 1;
                    string makeFormat = "";

                    //cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn];
                    cell = sheet.Cells[rowIndex, 2];
                    cell.Style.Font.Bold = true; cell.Value = "Department : " + data.DepartmentName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;
                    #region Table Header 02
                    colIndex = 1;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "CODE"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "NAME"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    if (bView)
                    {
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "GROSS"; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SHIFT"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "IN TIME"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OUT TIME"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total (Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "LATE(Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "EARLY LEAVING(Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "DESCTIPTION"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT(Hr)"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "REMARKS"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;
                    #endregion

                    foreach (var oItem in data.Result)
                    {
                        nSL++;
                        colIndex = 1;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (bView)
                        {
                            List<EmployeeSalaryStructure> oEmpSSs = new List<EmployeeSalaryStructure>();
                            oEmpSSs = oEmployeeSalaryStructures.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();

                            double nGross = 0;
                            if (oEmpSSs.Count > 0) { nGross = oEmpSSs[0].CompGrossAmount; }

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nGross; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0.00";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.HRM_ShiftName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (sFormat == "twelve")
                        {
                            makeFormat = oItem.CompInTimeInStringAMPM;
                        }
                        else makeFormat = oItem.CompInTimeInString;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = makeFormat; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (sFormat == "twelve")
                        {
                            makeFormat = oItem.CompOutTimeInStringAMPM;
                        }
                        else makeFormat = oItem.CompOutTimeInString;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = makeFormat; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompTotalWorkingHourSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompLateArrivalHourSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompEarlyDepartureHrSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.AttStatusInStringInShortComp; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompOTHrSt; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Remark; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex++;
                        if (oItem.CompOverTimeInMinute > 0) OT++;
                        if (oItem.CompEarlyDepartureMinute > 0) EarlyLeaving++;
                        if (oItem.CompLateArrivalMinute > 0) Late++;
                        if (oItem.IsCompLeave == true) Leave++;
                        if (oItem.IsNoWork == true) NoWork++;
                        if (oItem.CompOutTimeInString == "-") NoOutTime++;
                        if ((oItem.CompInTimeInString != "-" || oItem.CompOutTimeInString != "-" || oItem.IsOSD == true) && oItem.IsCompLeave == false && oItem.IsCompDayOff == false && oItem.IsCompHoliday == false) Present++;
                        if (oItem.CompInTimeInString == "-" && oItem.CompOutTimeInString == "-" && oItem.IsCompLeave == false && oItem.IsCompHoliday == false && oItem.IsCompDayOff == false && oItem.IsOSD == false) Absent++;

                    }
                    rowIndex++;
                }

                rowIndex++;
                rowIndex++;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Present "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = Present; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Absent "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = Absent; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Late "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = Late; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "EarlyLeaving "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = EarlyLeaving; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "OT "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = OT; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "No Work "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = NoWork; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "Leave "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = Leave; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                cell = sheet.Cells[rowIndex, 3];
                cell.Style.Font.Bold = true; cell.Value = "No Out Time "; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 4];
                cell.Style.Font.Bold = true; cell.Value = NoOutTime; cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                #endregion


                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=DepartmentWiseDailyAttendance.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        #endregion

        #region ManualUpdate


        [HttpPost]
        public JsonResult AttendanceDaily_Manual_Single_Comp_ForDailyAttendance(AttendanceDaily oAttendanceDaily)
        {
            try
            {
                oAttendanceDaily = oAttendanceDaily.AttendanceDaily_Manual_Single_Comp_ForDailyAttendance(((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            catch (Exception ex)
            {
                oAttendanceDaily = new AttendanceDaily();
                oAttendanceDaily.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDaily);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region bridgeabsent
        [HttpGet]
        public void MakeBridgeAbsent(string sAttendanceDate, bool bOperation, bool bIsLeaveBefore, bool bIsLeaveAfter, bool bIsAbsentBefore, bool bIsAbsentAfter, bool bIsHolidayBefore, bool bIsHolidayAfter, bool bIsDayOffBefore, bool bIsDayOffAfter, string BUIDs, string LocIDs, string DepartmentIDs, string DesignationIDs, bool IsComp)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            oAttendanceDailys = AttendanceDaily.MakeAbsent(sAttendanceDate, bOperation, bIsLeaveBefore, bIsLeaveAfter, bIsAbsentBefore, bIsAbsentAfter, bIsHolidayBefore, bIsHolidayAfter, bIsDayOffBefore, bIsDayOffAfter, BUIDs, LocIDs, DepartmentIDs, DesignationIDs, IsComp, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BusinessUnitIDs = string.Join(",", oAttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BusinessUnitIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BusinessUnitIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            int nDays = 0;
            int nColumns = 0;
            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("DTAE WISE ATTENDACE");
                sheet.Name = "DTAE WISE ATTENDACE";

                DateTime AttDate = Convert.ToDateTime(sAttendanceDate);

                DateTime DateFrom = new DateTime(1950, 1, 1);
                DateTime DateTo = new DateTime(1950, 1, 1);

                DateFrom = AttDate.AddDays(-1);
                DateTo = AttDate.AddDays(1);

                int ColSpan1 = 0;
                if (DateFrom.Month == DateTo.Month)
                {
                    ColSpan1 = DateTo.Day - DateFrom.Day + 1 + 6;
                }
                else
                {
                    ColSpan1 = DateTime.DaysInMonth(DateFrom.Year, DateFrom.Month) - Convert.ToInt32(DateFrom.Day) + 1 + 1 + 5;
                }

                TimeSpan diff = DateTo - DateFrom;
                nDays = diff.Days + 1;
                nColumns = nDays + 6;

                sheet.Column(2).Width = 8; //SL
                sheet.Column(3).Width = 30; //NAME
                sheet.Column(4).Width = 20; //CODE
                sheet.Column(5).Width = 28; //DEPARTMENT
                sheet.Column(6).Width = 28; //DESIGNATION

                for (int i = 7; i <= nColumns; i++)
                {
                    sheet.Column(i).Width = 8;
                }


                nMaxColumn = nColumns;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, 2]; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 2]; cell.Value = "DTAE WISE ATTENDACE"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = sheet.Cells[rowIndex + 1, colIndex++];
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "NAME"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "CODE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "DEPARTMENT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = DateFrom.ToString("MMM"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                if (DateFrom.Month != DateTo.Month)
                {
                    ColSpan1 = ColSpan1 + DateTo.Day;
                    cell = sheet.Cells[rowIndex, ColSpan1 + 1]; cell.Value = DateTo.ToString("MMM"); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                rowIndex = rowIndex + 1;
                colIndex = 7;
                DateTime dStartDate = DateFrom;
                while (dStartDate <= DateTo)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = dStartDate.Day.ToString(); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    dStartDate = dStartDate.AddDays(1);
                }

                int nCount = 0;
                int nWorkingDay = 0;
                int nHDay = 0;
                int nDODay = 0;
                int nLDay = 0;
                int nSHLDay = 0;
                int nOTM = 0;
                int nAbsent = 0;
                int nLateArrivalMinute = 0;
                int nEarlyDepartureMinute = 0;

                while (oAttendanceDailys.Count > 0)
                {
                    nWorkingDay = 0;
                    nHDay = 0;
                    nDODay = 0;
                    nSHLDay = 0;
                    nLDay = 0;
                    nOTM = 0;
                    nAbsent = 0;
                    nLateArrivalMinute = 0;
                    nEarlyDepartureMinute = 0;

                    List<AttendanceDaily> oAttDailys = new List<AttendanceDaily>();
                    oAttDailys = oAttendanceDailys.Where(x => x.EmployeeID == oAttendanceDailys[0].EmployeeID).OrderBy(x => x.AttendanceDate).ToList();

                    if (oAttDailys.Count > 0)
                    {
                        nCount++;
                        rowIndex = rowIndex + 1;
                        colIndex = 2;
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = nCount.ToString(); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].EmployeeName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].EmployeeCode; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DepartmentName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DesignationName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        dStartDate = DateFrom;
                        while (dStartDate <= DateTo)
                        {
                            bool bFlag = false;
                            foreach (AttendanceDaily oADItem in oAttDailys)
                            {
                                if (dStartDate == oADItem.AttendanceDate)
                                {
                                    bFlag = true;

                                    cell = sheet.Cells[rowIndex, colIndex++];
                                    cell.Value = oADItem.AttStatusInStringInShortComp; cell.Style.Font.Bold = true;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsHoliday == false && oADItem.IsLeave == false && oADItem.IsNoWork == false)
                                    {
                                        nWorkingDay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsHoliday == false && oADItem.IsLeave == false && oADItem.IsNoWork == true)
                                    {
                                        nWorkingDay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsHoliday == true)
                                    {
                                        nHDay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == true)
                                    {
                                        nDODay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.LateArrivalMinute > 0)
                                    {
                                        nLateArrivalMinute++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.EarlyDepartureMinute > 0)
                                    {
                                        nEarlyDepartureMinute++;
                                    }
                                    if (oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-" && oADItem.IsOSD == false && oADItem.IsDayOff == false && oADItem.IsLeave == false && oADItem.IsHoliday == false)
                                    {
                                        nAbsent++;
                                    }
                                    if (oADItem.IsHoliday == true && oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-")
                                    {
                                        nHDay++;
                                    }
                                    if (oADItem.IsDayOff == true && oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-")
                                    {
                                        nDODay++;
                                    }
                                    if (oADItem.IsLeave == true && oADItem.LeaveType == EnumLeaveType.Full)
                                    {
                                        nLDay++;
                                    }
                                    if (oADItem.IsLeave == true && oADItem.LeaveType == EnumLeaveType.Short || oADItem.LeaveType == EnumLeaveType.Half)
                                    {
                                        nSHLDay++;
                                        nWorkingDay++;
                                    }
                                    nOTM += oADItem.OverTimeInMinute;
                                    break;
                                }
                            }
                            if (!bFlag)
                            {
                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = "N/A"; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                nAbsent++;
                            }
                            dStartDate = dStartDate.AddDays(1);
                        }

                    }
                    oAttendanceDailys.RemoveAll(x => x.EmployeeID == oAttDailys[0].EmployeeID);
                }

                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=CheckAbsentList.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }

        }


        [HttpGet]
        public void DayoffListExcel(string sAttendanceDate, bool bIsDayoffThisDay, string BUIDs, string LocIDs, string DepartmentIDs, string DesignationIDs, bool IsComp, int nType)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            oAttendanceDailys = AttendanceDaily.DayoffListExcel(sAttendanceDate, bIsDayoffThisDay, BUIDs, LocIDs, DepartmentIDs, DesignationIDs, IsComp, nType, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BusinessUnitIDs = string.Join(",", oAttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BusinessUnitIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BusinessUnitIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            int nDays = 0;
            int nColumns = 0;
            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("DTAE WISE ATTENDACE");
                sheet.Name = "DTAE WISE ATTENDACE";

                DateTime AttDate = Convert.ToDateTime(sAttendanceDate);

                DateTime DateFrom = new DateTime(1950, 1, 1);
                DateTime DateTo = new DateTime(1950, 1, 1);

                DateFrom = AttDate.AddDays(0);
                DateTo = AttDate.AddDays(0);

                int ColSpan1 = 0;
                if (DateFrom.Month == DateTo.Month)
                {
                    ColSpan1 = DateTo.Day - DateFrom.Day + 1 + 6;
                }
                else
                {
                    ColSpan1 = DateTime.DaysInMonth(DateFrom.Year, DateFrom.Month) - Convert.ToInt32(DateFrom.Day) + 1 + 1 + 5;
                }

                TimeSpan diff = DateTo - DateFrom;
                nDays = diff.Days + 1;
                nColumns = nDays + 6;

                sheet.Column(2).Width = 8; //SL
                sheet.Column(3).Width = 30; //NAME
                sheet.Column(4).Width = 20; //CODE
                sheet.Column(5).Width = 28; //DEPARTMENT
                sheet.Column(6).Width = 28; //DESIGNATION

                for (int i = 7; i <= nColumns; i++)
                {
                    sheet.Column(i).Width = 8;
                }


                nMaxColumn = nColumns;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, 2]; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 2]; cell.Value = "DTAE WISE ATTENDACE"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = sheet.Cells[rowIndex + 1, colIndex++];
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "NAME"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "CODE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "DEPARTMENT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = DateFrom.ToString("MMM"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                if (DateFrom.Month != DateTo.Month)
                {
                    ColSpan1 = ColSpan1 + DateTo.Day;
                    cell = sheet.Cells[rowIndex, ColSpan1 + 1]; cell.Value = DateTo.ToString("MMM"); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                rowIndex = rowIndex + 1;
                colIndex = 7;
                DateTime dStartDate = DateFrom;
                while (dStartDate <= DateTo)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = dStartDate.Day.ToString(); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    dStartDate = dStartDate.AddDays(1);
                }

                int nCount = 0;
                int nWorkingDay = 0;
                int nHDay = 0;
                int nDODay = 0;
                int nLDay = 0;
                int nSHLDay = 0;
                int nOTM = 0;
                int nAbsent = 0;
                int nLateArrivalMinute = 0;
                int nEarlyDepartureMinute = 0;

                while (oAttendanceDailys.Count > 0)
                {
                    nWorkingDay = 0;
                    nHDay = 0;
                    nDODay = 0;
                    nSHLDay = 0;
                    nLDay = 0;
                    nOTM = 0;
                    nAbsent = 0;
                    nLateArrivalMinute = 0;
                    nEarlyDepartureMinute = 0;

                    List<AttendanceDaily> oAttDailys = new List<AttendanceDaily>();
                    oAttDailys = oAttendanceDailys.Where(x => x.EmployeeID == oAttendanceDailys[0].EmployeeID).OrderBy(x => x.AttendanceDate).ToList();

                    if (oAttDailys.Count > 0)
                    {
                        nCount++;
                        rowIndex = rowIndex + 1;
                        colIndex = 2;
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = nCount.ToString(); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].EmployeeName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].EmployeeCode; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DepartmentName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DesignationName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        dStartDate = DateFrom;
                        while (dStartDate <= DateTo)
                        {
                            bool bFlag = false;
                            foreach (AttendanceDaily oADItem in oAttDailys)
                            {
                                if (dStartDate == oADItem.AttendanceDate)
                                {
                                    bFlag = true;

                                    cell = sheet.Cells[rowIndex, colIndex++];
                                    cell.Value = oADItem.AttStatusInStringInShort; cell.Style.Font.Bold = true;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsHoliday == false && oADItem.IsLeave == false && oADItem.IsNoWork == false)
                                    {
                                        nWorkingDay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsHoliday == false && oADItem.IsLeave == false && oADItem.IsNoWork == true)
                                    {
                                        nWorkingDay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsHoliday == true)
                                    {
                                        nHDay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == true)
                                    {
                                        nDODay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.LateArrivalMinute > 0)
                                    {
                                        nLateArrivalMinute++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.EarlyDepartureMinute > 0)
                                    {
                                        nEarlyDepartureMinute++;
                                    }
                                    if (oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-" && oADItem.IsOSD == false && oADItem.IsDayOff == false && oADItem.IsLeave == false && oADItem.IsHoliday == false)
                                    {
                                        nAbsent++;
                                    }
                                    if (oADItem.IsHoliday == true && oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-")
                                    {
                                        nHDay++;
                                    }
                                    if (oADItem.IsDayOff == true && oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-")
                                    {
                                        nDODay++;
                                    }
                                    if (oADItem.IsLeave == true && oADItem.LeaveType == EnumLeaveType.Full)
                                    {
                                        nLDay++;
                                    }
                                    if (oADItem.IsLeave == true && oADItem.LeaveType == EnumLeaveType.Short || oADItem.LeaveType == EnumLeaveType.Half)
                                    {
                                        nSHLDay++;
                                        nWorkingDay++;
                                    }
                                    nOTM += oADItem.OverTimeInMinute;
                                    break;
                                }
                            }
                            if (!bFlag)
                            {
                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = "N/A"; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                nAbsent++;
                            }
                            dStartDate = dStartDate.AddDays(1);
                        }

                    }
                    oAttendanceDailys.RemoveAll(x => x.EmployeeID == oAttDailys[0].EmployeeID);
                }

                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=DayoffThisDayList.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }

        }
        #endregion


        #region Reconcilation
        public void PrintReconcilationXL(string sEmployeeIDs, string sBusinessUnitIds, string sLocationID, string sDepartmentIds, string sDesignationIds, string sSalarySchemeIDs, DateTime DateFrom, DateTime DateTo, string sGroupIDs, string sBlockIDs, double ts)
        {
            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            string sSql = "SELECT * FROM View_AttendanceDaily WHERE AttendanceDate BETWEEN '" + DateFrom.ToString("dd MMM yyyy") + "' AND '" + DateTo.ToString("dd MMM yyyy") + "' ";
            if (sEmployeeIDs != "")
            {
                sSql += " AND EmployeeID IN(" + sEmployeeIDs + ")";
            }
            if (sBusinessUnitIds != "")
            {
                sSql = sSql + " AND BusinessUnitID IN(" + sBusinessUnitIds + ")";
            }
            if (sLocationID != "")
            {
                sSql = sSql + " AND LocationID IN(" + sLocationID + ")";
            }
            if (sDepartmentIds != "")
            {
                sSql += " AND DepartmentID IN(" + sDepartmentIds + ")";
            }
            if (sDesignationIds != "")
            {
                sSql += " AND DesignationID IN(" + sDesignationIds + ")";
            }
            if (sSalarySchemeIDs != "")
            {
                sSql += " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
            }
            if (!string.IsNullOrEmpty(sGroupIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sGroupIDs + "))";
            }
            if (!string.IsNullOrEmpty(sBlockIDs))
            {
                sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sBlockIDs + "))";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentID IN( SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " ))";
            }
            sSql = sSql + " ORDER BY Department, Code";
            oAttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oAttendanceDailys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            int nDays = 0;
            int nAcDays = 0;
            int nColumns = 0;
            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("DTAE WISE ATTENDACE");
                sheet.Name = "DTAE WISE ATTENDACE";

                int ColSpan1 = 0;
                if (DateFrom.Month == DateTo.Month)
                {
                    ColSpan1 = DateTo.Day - DateFrom.Day + 1 + 6;
                }
                else
                {
                    ColSpan1 = DateTime.DaysInMonth(DateFrom.Year, DateFrom.Month) - Convert.ToInt32(DateFrom.Day) + 1 + 1 + 5;
                }

                TimeSpan diff = DateTo - DateFrom;
                nDays = diff.Days + 1;
                nAcDays = diff.Days + 1;
                nColumns = nDays + nAcDays + 6;

                sheet.Column(2).Width = 8; //SL
                sheet.Column(3).Width = 30; //NAME
                sheet.Column(4).Width = 20; //CODE
                sheet.Column(5).Width = 28; //DEPARTMENT
                sheet.Column(6).Width = 28; //DESIGNATION

                for (int i = 7; i <= nColumns; i++)
                {
                    sheet.Column(i).Width = 8;
                }
                nColumns++;
                sheet.Column(nColumns++).Width = 10;//WD
                sheet.Column(nColumns++).Width = 10;//ABSENT
                sheet.Column(nColumns++).Width = 10;//HD
                sheet.Column(nColumns++).Width = 10;//DO
                sheet.Column(nColumns++).Width = 10;//LEAVE
                sheet.Column(nColumns++).Width = 10;//H/SLEAVE
                sheet.Column(nColumns++).Width = 10;//TOTAL WD
                sheet.Column(nColumns++).Width = 10;//LATE
                sheet.Column(nColumns++).Width = 10;//EARLY LEAVE
                sheet.Column(nColumns++).Width = 10;//OTH
                sheet.Column(nColumns++).Width = 10;//WD
                sheet.Column(nColumns++).Width = 10;//ABSENT
                sheet.Column(nColumns++).Width = 10;//HD
                sheet.Column(nColumns++).Width = 10;//DO
                sheet.Column(nColumns++).Width = 10;//LEAVE
                sheet.Column(nColumns++).Width = 10;//H/SLEAVE
                sheet.Column(nColumns++).Width = 10;//TOTAL WD
                sheet.Column(nColumns++).Width = 10;//LATE
                sheet.Column(nColumns++).Width = 10;//EARLY LEAVE
                sheet.Column(nColumns++).Width = 10;//OTH
                sheet.Column(nColumns++).Width = 20;//JOINING
                sheet.Column(nColumns++).Width = 20;//DOB

                nMaxColumn = nColumns;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, 2]; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                cell = sheet.Cells[rowIndex, 5]; cell.Value = "Green=Compliance"; cell.Style.Font.Bold = true; fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green);
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, 5]; cell.Value = "Yellow=Actual"; cell.Style.Font.Bold = true; fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                cell = sheet.Cells[rowIndex, 2]; cell.Value = "DTAE WISE ATTENDACE"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = sheet.Cells[rowIndex + 1, colIndex++];
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "NAME"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "CODE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "DEPARTMENT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = DateFrom.ToString("MMM"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                if (DateFrom.Month != DateTo.Month)
                {
                    ColSpan1 = ColSpan1 + DateTo.Day;
                    cell = sheet.Cells[rowIndex, ColSpan1 + 1]; cell.Value = DateTo.ToString("MMM"); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                colIndex = (ColSpan1 * 2) + 1 - 6;
                cell = sheet.Cells[rowIndex + 1, colIndex++];
                cell.Value = "PD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex + 1, colIndex++];
                cell.Value = " Acc PD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Acc Absent"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "HD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Acc HD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Off"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Acc Off"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "LD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Acc LD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Half/Short L"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Acc Half/Short L"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "LATE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Acc LATE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "EARLY LEAVE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Acc EARLY LEAVE"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "TD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Acc TD"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "OT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Acc OT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Joining"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, colIndex++]; cell.Value = "Date Of Birth"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;
                colIndex = 7;
                DateTime dStartDate = DateFrom;
                while (dStartDate <= DateTo)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = dStartDate.Day.ToString(); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = dStartDate.Day.ToString(); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    dStartDate = dStartDate.AddDays(1);
                }

                int nCount = 0;
                int nWorkingDay = 0;
                int nHDay = 0;
                int nDODay = 0;
                int nLDay = 0;
                int nSHLDay = 0;
                int nOTM = 0;
                int nAbsent = 0;
                int nLateArrivalMinute = 0;
                int nEarlyDepartureMinute = 0;


                int nAcWorkingDay = 0;
                int nAcHDay = 0;
                int nAcDODay = 0;
                int nAcLDay = 0;
                int nAcSHLDay = 0;
                int nAcOTM = 0;
                int nAcAbsent = 0;
                int nAcLateArrivalMinute = 0;
                int nAcEarlyDepartureMinute = 0;

                while (oAttendanceDailys.Count > 0)
                {
                    nWorkingDay = 0;
                    nHDay = 0;
                    nDODay = 0;
                    nSHLDay = 0;
                    nLDay = 0;
                    nOTM = 0;
                    nAbsent = 0;
                    nLateArrivalMinute = 0;
                    nEarlyDepartureMinute = 0;

                    nAcWorkingDay = 0;
                    nAcHDay = 0;
                    nAcDODay = 0;
                    nAcSHLDay = 0;
                    nAcLDay = 0;
                    nAcOTM = 0;
                    nAcAbsent = 0;
                    nAcLateArrivalMinute = 0;
                    nAcEarlyDepartureMinute = 0;

                    List<AttendanceDaily> oAttDailys = new List<AttendanceDaily>();
                    oAttDailys = oAttendanceDailys.Where(x => x.EmployeeID == oAttendanceDailys[0].EmployeeID).OrderBy(x => x.AttendanceDate).ToList();

                    if (oAttDailys.Count > 0)
                    {
                        nCount++;
                        rowIndex = rowIndex + 1;
                        colIndex = 2;
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = nCount.ToString(); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].EmployeeName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].EmployeeCode; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DepartmentName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DesignationName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        dStartDate = DateFrom;
                        while (dStartDate <= DateTo)
                        {
                            bool bFlag = false;
                            foreach (AttendanceDaily oADItem in oAttDailys)
                            {
                                if (dStartDate == oADItem.AttendanceDate)
                                {
                                    bFlag = true;

                                    cell = sheet.Cells[rowIndex, colIndex++];
                                    cell.Value = oADItem.AttStatusInStringInShortComp; cell.Style.Font.Bold = true;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                    cell = sheet.Cells[rowIndex, colIndex++];
                                    cell.Value = oADItem.AttStatusInStringInShort; cell.Style.Font.Bold = true;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                    if ((oADItem.CompInTimeInString != "-" || oADItem.CompOutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsCompDayOff == false && oADItem.IsCompHoliday == false && oADItem.IsCompLeave == false && oADItem.IsNoWork == false)
                                    {
                                        nWorkingDay++;
                                    }
                                    if ((oADItem.CompInTimeInString != "-" || oADItem.CompOutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsCompDayOff == false && oADItem.IsCompHoliday == false && oADItem.IsCompLeave == false && oADItem.IsNoWork == true)
                                    {
                                        nWorkingDay++;
                                    }
                                    if (oADItem.IsCompHoliday == true)
                                    {
                                        nHDay++;
                                    }
                                    if (oADItem.IsCompDayOff == true)
                                    {
                                        nDODay++;
                                    }
                                    if ((oADItem.CompInTimeInString != "-" || oADItem.CompOutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.CompLateArrivalMinute > 0)
                                    {
                                        nLateArrivalMinute++;
                                    }
                                    if ((oADItem.CompInTimeInString != "-" || oADItem.CompOutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.CompEarlyDepartureMinute > 0)
                                    {
                                        nEarlyDepartureMinute++;
                                    }
                                    if (oADItem.CompInTimeInString == "-" && oADItem.CompOutTimeInString == "-" && oADItem.IsOSD == false && oADItem.IsCompDayOff == false && oADItem.IsCompLeave == false && oADItem.IsCompHoliday == false)
                                    {
                                        nAbsent++;
                                    }
                                    if (oADItem.IsCompLeave == true && oADItem.LeaveType == EnumLeaveType.Full)
                                    {
                                        nLDay++;
                                    }
                                    if (oADItem.IsCompLeave == true && oADItem.LeaveType == EnumLeaveType.Short || oADItem.LeaveType == EnumLeaveType.Half)
                                    {
                                        nSHLDay++;
                                        nWorkingDay++;
                                    }
                                    nOTM += oADItem.CompOverTimeInMinute;

                                    //Actual
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsHoliday == false && oADItem.IsLeave == false && oADItem.IsNoWork == false)
                                    {
                                        nAcWorkingDay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.IsDayOff == false && oADItem.IsHoliday == false && oADItem.IsLeave == false && oADItem.IsNoWork == true)
                                    {
                                        nAcWorkingDay++;
                                    }
                                    if (oADItem.IsCompHoliday == true)
                                    {
                                        nAcHDay++;
                                    }
                                    if (oADItem.IsCompDayOff == true)
                                    {
                                        nAcDODay++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.LateArrivalMinute > 0)
                                    {
                                        nAcLateArrivalMinute++;
                                    }
                                    if ((oADItem.InTimeInString != "-" || oADItem.OutTimeInString != "-" || oADItem.IsOSD == true) && oADItem.EarlyDepartureMinute > 0)
                                    {
                                        nAcEarlyDepartureMinute++;
                                    }
                                    if (oADItem.InTimeInString == "-" && oADItem.OutTimeInString == "-" && oADItem.IsOSD == false && oADItem.IsDayOff == false && oADItem.IsLeave == false && oADItem.IsHoliday == false)
                                    {
                                        nAcAbsent++;
                                    }
                                    if (oADItem.IsCompLeave == true && oADItem.LeaveType == EnumLeaveType.Full)
                                    {
                                        nAcLDay++;
                                    }
                                    if (oADItem.IsLeave == true && oADItem.LeaveType == EnumLeaveType.Short || oADItem.LeaveType == EnumLeaveType.Half)
                                    {
                                        nAcSHLDay++;
                                        nAcWorkingDay++;
                                    }
                                    nAcOTM += oADItem.OverTimeInMinute;

                                    break;
                                }
                            }
                            if (!bFlag)
                            {
                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = "N/A"; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                nAbsent++;
                            }
                            if (!bFlag)
                            {
                                cell = sheet.Cells[rowIndex, colIndex++];
                                cell.Value = "N/A"; cell.Style.Font.Bold = true;
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                nAcAbsent++;
                            }
                            dStartDate = dStartDate.AddDays(1);
                        }

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nWorkingDay > 0 ? nWorkingDay : 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Acc
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nAcWorkingDay > 0 ? nWorkingDay : 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nAbsent > 0 ? nAbsent : 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Acc
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nAcAbsent > 0 ? nAbsent: 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nHDay > 0 ? nHDay: 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Acc
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nAcHDay > 0 ? nHDay : 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nDODay > 0 ? nDODay : 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        //Acc
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nAcDODay > 0 ? nDODay : 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nLDay > 0 ? nLDay : 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        //Acc
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nAcLDay > 0 ? nLDay: 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nSHLDay > 0 ? nSHLDay : 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Acc
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nAcSHLDay > 0 ? nSHLDay : 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nLateArrivalMinute > 0 ? nLateArrivalMinute : 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Acc
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nAcLateArrivalMinute > 0 ? nLateArrivalMinute:0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nEarlyDepartureMinute > 0 ? nEarlyDepartureMinute : 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Acc
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nAcEarlyDepartureMinute > 0 ? nEarlyDepartureMinute : 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nDays > 0 ? nDays : 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Acc
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = (nAcDays > 0 ? nAcDays: 0); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = ((nOTM / 60).ToString()).Split('.')[0] + ":" + (nOTM % 60).ToString(); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //Acc
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = ((nAcOTM / 60).ToString()).Split('.')[0] + ":" + (nAcOTM % 60).ToString(); cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].JoiningDateInString; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = oAttDailys[0].DateOfBirthInString; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }
                    oAttendanceDailys.RemoveAll(x => x.EmployeeID == oAttDailys[0].EmployeeID);
                }

                //signature
                rowIndex = rowIndex + 4;
                int nColSpan1_From = 0;
                int nColSpan2_From = 0;
                int nColSpan3_From = 0;
                int nColSpan1_To = 0;
                int nColSpan2_To = 0;
                int nColSpan3_To = 0;

                if (nMaxColumn % 3 == 0)
                {
                    nColSpan1_From = 1;
                    nColSpan1_To = nColSpan1_From + nMaxColumn / 3;

                    nColSpan2_From = nColSpan1_To + 1;
                    nColSpan2_To = nColSpan2_From + nMaxColumn / 3;

                    nColSpan3_From = nColSpan2_To + 1;
                    nColSpan3_To = nMaxColumn;
                }
                else
                {
                    nColSpan1_From = 1;
                    nColSpan1_To = nColSpan1_From + (nMaxColumn - nMaxColumn % 3) / 3;

                    nColSpan2_From = nColSpan1_To + 1;
                    nColSpan2_To = nColSpan2_From + (nMaxColumn - nMaxColumn % 3) / 3;

                    nColSpan3_From = nColSpan2_To + 1;
                    nColSpan3_To = nMaxColumn;
                }

                cell = sheet.Cells[rowIndex, nColSpan1_From, rowIndex + 3, nColSpan1_To]; cell.Merge = true; cell.Value = "____________________\nPrepared By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, nColSpan2_From, rowIndex + 3, nColSpan2_To]; cell.Merge = true; cell.Value = "______________________\nChecked By APM/PM"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, nColSpan3_From, rowIndex + 3, nMaxColumn]; cell.Merge = true; cell.Value = "______________________\nApproved By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=DTAE_WISE_ATTENDACE.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        #endregion


        public ActionResult PrintTimeCard_Worker(string sTemp)
        {
            AttendanceDaily_ZN oAttendanceDaily_ZN = new AttendanceDaily_ZN();

            string sEmployeeIDs = sTemp.Split('~')[0];
            DateTime Startdate = Convert.ToDateTime(sTemp.Split('~')[1]);
            DateTime EndDate = Convert.ToDateTime(sTemp.Split('~')[2]);
            string sLocationID = sTemp.Split('~')[3];
            string sDepartmentIds = sTemp.Split('~')[4];
            string sBUnitIDs = sTemp.Split('~')[5];
            double nStartSalaryRange = Convert.ToDouble(sTemp.Split('~')[6]);
            double nEndSalaryRange = Convert.ToDouble(sTemp.Split('~')[7]);
            string sBMMIDs = sTemp.Split('~')[8];
            string sGroupIDs = sTemp.Split('~')[9];

            List<AttendanceDaily_ZN> AttendanceDaily_ZNs = new List<AttendanceDaily_ZN>();
            AttendanceDaily_ZNs = AttendanceDaily_ZN.GetsTimeCardComp(sEmployeeIDs, Startdate, EndDate, sLocationID, sDepartmentIds, "", sBUnitIDs, nStartSalaryRange, nEndSalaryRange, sBMMIDs, sGroupIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily_ZN.AttendanceDaily_ZNs = AttendanceDaily_ZNs;

            oAttendanceDaily_ZN.LeaveHeads = LeaveHead.Gets("SELECT * FROM LeaveHead", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oAttendanceDaily_ZN.Company = oCompanys.First();
            oAttendanceDaily_ZN.Company.CompanyLogo = GetImage(oAttendanceDaily_ZN.Company.OrganizationLogo);
            oAttendanceDaily_ZN.ErrorMessage = Startdate.ToString("dd MMM yyyy") + "~" + EndDate.ToString("dd MMM yyyy");
            rptTimeCard_Worker oReport = new rptTimeCard_Worker();
            byte[] abytes = oReport.PrepareReport(oAttendanceDaily_ZN);
            return File(abytes, "application/pdf");
        }


        #region FinalSettlementSalary PDF

        public ActionResult FinalSettlementSalaryPDF(string sParam)
        {
            DateTime dtStartDate = Convert.ToDateTime(sParam.Split('~')[0]);
            DateTime dtEndDate = Convert.ToDateTime(sParam.Split('~')[1]);
            Int16 nSettlementType = Convert.ToInt16(sParam.Split('~')[2]);
            string sDepartmentIds = sParam.Split('~')[3];
            string sDesignationIds = sParam.Split('~')[4];
            Int16 nClearanceStatus = Convert.ToInt16(sParam.Split('~')[5]);
            Int16 nApproveStatus = Convert.ToInt16(sParam.Split('~')[6]);

            string sBUIDs = sParam.Split('~')[7];
            string sLocationIds = sParam.Split('~')[8];
            string sEmpIDs = sParam.Split('~')[9];
            int nGroupDept = Convert.ToInt16(sParam.Split('~')[10]);

            List<EmployeeSettlement> oEmployeeSettlements = new List<EmployeeSettlement>();
            List<EmployeeSettlementSalary> oEmployeeSettlementSalarys = new List<EmployeeSettlementSalary>();
            List<EmployeeSettlementSalaryDetail> oEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
            string sSql = "";

            sSql = "SELECT * FROM View_EmployeeSettlement WHERE EmployeeSettlementID<>0 AND EffectDate BETWEEN '" + dtStartDate.ToString("dd MMM yyyy") + "' AND '" + dtEndDate.ToString("dd MMM yyyy") + "' ";
            if (!string.IsNullOrEmpty(sBUIDs))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE BusinessUnitID IN(" + sBUIDs + "))";
            }
            if (!string.IsNullOrEmpty(sLocationIds))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE LocationID IN(" + sLocationIds + "))";
            }
            if (!string.IsNullOrEmpty(sDepartmentIds))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE DepartmentID IN(" + sDepartmentIds + "))";
            }
            if (!string.IsNullOrEmpty(sDesignationIds))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeOfficial WHERE DesignationID IN(" + sDesignationIds + "))";
            }

            if (!string.IsNullOrEmpty(sEmpIDs))
            {
                sSql += " AND EmployeeID IN(" + sEmpIDs + ")";
            }


            if (nSettlementType > 0)
            {
                sSql = sSql + " AND SettlementType=" + nSettlementType;
            }

            if (nApproveStatus == 1)
            {
                sSql = sSql + " AND ApproveBy>0";
            }
            if (nApproveStatus == 2)
            {
                sSql = sSql + " AND ApproveBy<=0";
            }
            if (nClearanceStatus > 0)
            {
                sSql = sSql + " AND EmployeeSettlementID IN(SELECT EmployeeSettlementID  FROM EmployeeSettlementClearance WHERE CurrentStatus=" + nClearanceStatus + ")";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DRPID "
                            + "IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + ")";
            }

            oEmployeeSettlements = EmployeeSettlement.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            if (oEmployeeSettlements.Count > 0)
            {
                oEmployeeSettlements[0].ErrorMessage = dtStartDate.ToString("dd MMM yyyy") + "," + dtEndDate.ToString("dd MMM yyyy");
            }
            //End EmployeeSettlement


            string tEmpIDs = "";
            if (oEmployeeSettlements.Count > 0)
            {
                foreach (EmployeeSettlement oItem in oEmployeeSettlements)
                {
                    tEmpIDs += oItem.EmployeeID + ",";
                }
                tEmpIDs = tEmpIDs.Remove(tEmpIDs.Length - 1, 1);
            }

            List<EmployeeLeaveOnAttendance> oELOnAttendances = new List<EmployeeLeaveOnAttendance>();
            oELOnAttendances = EmployeeLeaveOnAttendance.Gets(tEmpIDs, Convert.ToDateTime(dtStartDate), Convert.ToDateTime(dtEndDate), ((User)Session[SessionInfo.CurrentUser]).UserID);

            List<Employee> oEmployees = new List<Employee>();
            sSql = "SELECT * FROM View_Employee WHERE EmployeeID IN ( " + tEmpIDs + ")";
            oEmployees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //EmployeeSettlementSalary
            string sSQL = "";
            if (!string.IsNullOrEmpty(tEmpIDs))
            {
                sSQL += "SELECT * FROM View_EmployeeSettlementSalary WHERE EmployeeID IN(" + tEmpIDs + ")";
                oEmployeeSettlementSalarys = EmployeeSettlementSalary.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                oEmployeeSettlementSalarys.ForEach(x =>
                {
                    x.GrossAmount = Math.Round(x.CompGrossAmount, 2);
                    x.NetAmount = Math.Round(x.CompNetAmount, 2);
                    x.OTHour = x.CompOTHour;
                    x.OTRatePerHour = Math.Round(x.CompOTRatePerHour, 2);
                    x.TotalWorkingDay = x.CompTotalWorkingDay;
                    x.TotalAbsent = x.CompTotalAbsent;
                    x.TotalLate = x.CompTotalLate;
                    x.TotalEarlyLeaving = x.CompTotalEarlyLeaving;
                    x.TotalDayOff = x.CompTotalDayOff;
                    x.TotalHoliday = x.CompTotalHoliday;
                    x.TotalPLeave = x.CompTotalLeave;
                    x.TotalUpLeave = 0;
                });
            
            }
            //EmployeeSettlementSalaryDetail
            string EmpIDs = "";
            if (oEmployeeSettlementSalarys.Count > 0)
            {
                string TempEmpIDs = "";
                int nCount = 0;
                oEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
                foreach (EmployeeSettlementSalary oItem in oEmployeeSettlementSalarys)
                {
                    TempEmpIDs += oItem.EmployeeID + ",";
                    EmpIDs += oItem.EmployeeID + ",";
                    nCount++;

                    if (nCount % 100 == 0 || nCount == oEmployeeSettlementSalarys.Count)
                    {
                        TempEmpIDs = TempEmpIDs.Remove(TempEmpIDs.Length - 1, 1);
                        sSql = "";
                        sSql = "SELECT * FROM View_EmployeeSettlementSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSettlementSalary WHERE EmployeeID IN (" + TempEmpIDs + ")) ORDER BY SalaryHeadID";
                        List<EmployeeSettlementSalaryDetail> oTempEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
                        oTempEmployeeSettlementSalaryDetails = EmployeeSettlementSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                        oEmployeeSettlementSalaryDetails.AddRange(oTempEmployeeSettlementSalaryDetails);
                        TempEmpIDs = "";
                    }
                }
                EmpIDs = EmpIDs.Remove(EmpIDs.Length - 1, 1);
            }
            else
            {
                oEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
            }
            oEmployeeSettlementSalaryDetails.ForEach(x =>
            {
                x.Amount = Math.Round(x.CompAmount, 2);
            });
            //List<string> ColEarnings = new List<string>();
            //ColEarnings = oEmployeeSettlementSalaryDetails.Where(x => (x.SalaryHeadType == (int)EnumSalaryHeadType.Addition)).Select(x => x.SalaryHeadName).ToList();
            //ColEarnings = ColEarnings.Distinct().ToList();

            //List<string> ColDeductions = new List<string>();
            //ColDeductions = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadType == (int)EnumSalaryHeadType.Deduction).Select(x => x.SalaryHeadName).ToList();
            //ColDeductions = ColDeductions.Distinct().ToList();

            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();
            oLeaveHeads = LeaveHead.Gets("SELECT * FROM LeaveHead WHERE IsActive <> 0", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            sSql = "SELECT * FROM View_AttendanceDaily WHERE AttendanceDate BETWEEN '" + dtStartDate.ToString("dd MMM yyyy") + "' AND '" + dtEndDate.ToString("dd MMM yyyy") + "' ";
            if (!string.IsNullOrEmpty(EmpIDs))
            {
                sSql += " AND EmployeeID IN(" + EmpIDs + ")";
            }
            oAttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            //var attList = oAttendanceDailys.GroupBy(x => x.LeaveHeadID).Select(y => y.First()).Distinct();
            //var attList = oAttendanceDailys.Where(x=>x.LeaveHeadID>0).GroupBy(x => new { x.LeaveHeadID}, (key, grp) => new
            //{
            //    LeaveHeadID = key.LeaveHeadID,
            //    result = grp,

            //}).OrderBy(x => x.LeaveHeadID).ToList();
            //List<string> ColLeaveHeads = new List<string>();
            //foreach (var col in attList)
            //{
            //    foreach (LeaveHead lh in oLeaveHeads)
            //    {
            //        if (col.LeaveHeadID == lh.LeaveHeadID)
            //        {
            //            ColLeaveHeads.Add(lh.ShortName);
            //        }
            //    }
            //}

            sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetPropertys = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            Company oCompany = new Company();
            oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            oCompany.CompanyLogo = GetCompanyLogo(oCompany);

            rptFinalSettlementSalary oReport = new rptFinalSettlementSalary();
            byte[] abytes = oReport.PrepareReport(oEmployeeSettlements, oEmployeeSettlementSalarys, oEmployeeSettlementSalaryDetails, oLeaveHeads, oAttendanceDailys, oCompany, oEmployees, oELOnAttendances, oSalarySheetPropertys,nGroupDept);
            return File(abytes, "application/pdf");
        }

        public ActionResult FinalSettlementSalaryPDFAMG(string sParam)
        {
            DateTime dtStartDate = Convert.ToDateTime(sParam.Split('~')[0]);
            DateTime dtEndDate = Convert.ToDateTime(sParam.Split('~')[1]);
            Int16 nSettlementType = Convert.ToInt16(sParam.Split('~')[2]);
            string sDepartmentIds = sParam.Split('~')[3];
            string sDesignationIds = sParam.Split('~')[4];
            Int16 nClearanceStatus = Convert.ToInt16(sParam.Split('~')[5]);
            Int16 nApproveStatus = Convert.ToInt16(sParam.Split('~')[6]);

            string sBUIDs = sParam.Split('~')[7];
            string sLocationIds = sParam.Split('~')[8];
            string sEmpIDs = sParam.Split('~')[9];
            int nGroupDept = Convert.ToInt16(sParam.Split('~')[10]);

            List<EmployeeSettlement> oEmployeeSettlements = new List<EmployeeSettlement>();
            List<EmployeeSettlementSalary> oEmployeeSettlementSalarys = new List<EmployeeSettlementSalary>();
            List<EmployeeSettlementSalaryDetail> oEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
            string sSql = "";

            sSql = "SELECT * FROM View_EmployeeSettlement WHERE EmployeeSettlementID<>0 AND EffectDate BETWEEN '" + dtStartDate.ToString("dd MMM yyyy") + "' AND '" + dtEndDate.ToString("dd MMM yyyy") + "' ";
            if (!string.IsNullOrEmpty(sBUIDs))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE BusinessUnitID IN(" + sBUIDs + "))";
            }
            if (!string.IsNullOrEmpty(sLocationIds))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE LocationID IN(" + sLocationIds + "))";
            }
            if (!string.IsNullOrEmpty(sDepartmentIds))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM VIEW_Employee WHERE DepartmentID IN(" + sDepartmentIds + "))";
            }
            if (!string.IsNullOrEmpty(sDesignationIds))
            {
                sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeOfficial WHERE DesignationID IN(" + sDesignationIds + "))";
            }

            if (!string.IsNullOrEmpty(sEmpIDs))
            {
                sSql += " AND EmployeeID IN(" + sEmpIDs + ")";
            }


            if (nSettlementType > 0)
            {
                sSql = sSql + " AND SettlementType=" + nSettlementType;
            }

            if (nApproveStatus == 1)
            {
                sSql = sSql + " AND ApproveBy>0";
            }
            if (nApproveStatus == 2)
            {
                sSql = sSql + " AND ApproveBy<=0";
            }
            if (nClearanceStatus > 0)
            {
                sSql = sSql + " AND EmployeeSettlementID IN(SELECT EmployeeSettlementID  FROM EmployeeSettlementClearance WHERE CurrentStatus=" + nClearanceStatus + ")";
            }
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DRPID "
                            + "IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + ")";
            }

            oEmployeeSettlements = EmployeeSettlement.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            if (oEmployeeSettlements.Count > 0)
            {
                oEmployeeSettlements[0].ErrorMessage = dtStartDate.ToString("dd MMM yyyy") + "," + dtEndDate.ToString("dd MMM yyyy");
            }
            //End EmployeeSettlement


            string tEmpIDs = "";
            if (oEmployeeSettlements.Count > 0)
            {
                foreach (EmployeeSettlement oItem in oEmployeeSettlements)
                {
                    tEmpIDs += oItem.EmployeeID + ",";
                }
                tEmpIDs = tEmpIDs.Remove(tEmpIDs.Length - 1, 1);
            }

            List<EmployeeLeaveOnAttendance> oELOnAttendances = new List<EmployeeLeaveOnAttendance>();
            oELOnAttendances = EmployeeLeaveOnAttendance.Gets(tEmpIDs, Convert.ToDateTime(dtStartDate), Convert.ToDateTime(dtEndDate), ((User)Session[SessionInfo.CurrentUser]).UserID);

            List<Employee> oEmployees = new List<Employee>();
            sSql = "SELECT * FROM View_Employee WHERE EmployeeID IN ( " + tEmpIDs + ")";
            oEmployees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //EmployeeSettlementSalary
            string sSQL = "";
            if (!string.IsNullOrEmpty(tEmpIDs))
            {
                sSQL += "SELECT * FROM View_EmployeeSettlementSalary WHERE EmployeeID IN(" + tEmpIDs + ")";
                oEmployeeSettlementSalarys = EmployeeSettlementSalary.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSettlementSalarys.ForEach(x =>
                {
                    x.GrossAmount = Math.Round(x.CompGrossAmount, 2);
                    x.NetAmount = Math.Round(x.CompNetAmount, 2);
                    x.OTHour = x.CompOTHour;
                    x.OTRatePerHour = Math.Round(x.CompOTRatePerHour, 2);
                    x.TotalWorkingDay = x.CompTotalWorkingDay;
                    x.TotalAbsent = x.CompTotalAbsent;
                    x.TotalLate = x.CompTotalLate;
                    x.TotalEarlyLeaving = x.CompTotalEarlyLeaving;
                    x.TotalDayOff = x.CompTotalDayOff;
                    x.TotalHoliday = x.CompTotalHoliday;
                    x.TotalPLeave = x.CompTotalLeave;
                    x.TotalUpLeave = 0;
                });
            }
            //EmployeeSettlementSalaryDetail
            string EmpIDs = "";
            if (oEmployeeSettlementSalarys.Count > 0)
            {
                string TempEmpIDs = "";
                int nCount = 0;
                oEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
                foreach (EmployeeSettlementSalary oItem in oEmployeeSettlementSalarys)
                {
                    TempEmpIDs += oItem.EmployeeID + ",";
                    EmpIDs += oItem.EmployeeID + ",";
                    nCount++;

                    if (nCount % 100 == 0 || nCount == oEmployeeSettlementSalarys.Count)
                    {
                        TempEmpIDs = TempEmpIDs.Remove(TempEmpIDs.Length - 1, 1);
                        sSql = "";
                        sSql = "SELECT * FROM View_EmployeeSettlementSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSettlementSalary WHERE EmployeeID IN (" + TempEmpIDs + ")) ORDER BY SalaryHeadID";
                        List<EmployeeSettlementSalaryDetail> oTempEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
                        oTempEmployeeSettlementSalaryDetails = EmployeeSettlementSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                        oEmployeeSettlementSalaryDetails.AddRange(oTempEmployeeSettlementSalaryDetails);
                        TempEmpIDs = "";
                    }
                }
                EmpIDs = EmpIDs.Remove(EmpIDs.Length - 1, 1);
            }
            else
            {
                oEmployeeSettlementSalaryDetails = new List<EmployeeSettlementSalaryDetail>();
            }
            oEmployeeSettlementSalaryDetails.ForEach(x =>
            {
                x.Amount = Math.Round(x.CompAmount, 2);
            });

            //List<string> ColEarnings = new List<string>();
            //ColEarnings = oEmployeeSettlementSalaryDetails.Where(x => (x.SalaryHeadType == (int)EnumSalaryHeadType.Addition)).Select(x => x.SalaryHeadName).ToList();
            //ColEarnings = ColEarnings.Distinct().ToList();

            //List<string> ColDeductions = new List<string>();
            //ColDeductions = oEmployeeSettlementSalaryDetails.Where(x => x.SalaryHeadType == (int)EnumSalaryHeadType.Deduction).Select(x => x.SalaryHeadName).ToList();
            //ColDeductions = ColDeductions.Distinct().ToList();

            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();
            oLeaveHeads = LeaveHead.Gets("SELECT * FROM LeaveHead WHERE IsActive <> 0", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            sSql = "SELECT * FROM View_AttendanceDaily WHERE AttendanceDate BETWEEN '" + dtStartDate.ToString("dd MMM yyyy") + "' AND '" + dtEndDate.ToString("dd MMM yyyy") + "' ";
            if (!string.IsNullOrEmpty(EmpIDs))
            {
                sSql += " AND EmployeeID IN(" + EmpIDs + ")";
            }
            oAttendanceDailys = AttendanceDaily.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            //var attList = oAttendanceDailys.GroupBy(x => x.LeaveHeadID).Select(y => y.First()).Distinct();
            //var attList = oAttendanceDailys.Where(x=>x.LeaveHeadID>0).GroupBy(x => new { x.LeaveHeadID}, (key, grp) => new
            //{
            //    LeaveHeadID = key.LeaveHeadID,
            //    result = grp,

            //}).OrderBy(x => x.LeaveHeadID).ToList();
            //List<string> ColLeaveHeads = new List<string>();
            //foreach (var col in attList)
            //{
            //    foreach (LeaveHead lh in oLeaveHeads)
            //    {
            //        if (col.LeaveHeadID == lh.LeaveHeadID)
            //        {
            //            ColLeaveHeads.Add(lh.ShortName);
            //        }
            //    }
            //}
            sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetPropertys = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            Company oCompany = new Company();
            oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            oCompany.CompanyLogo = GetCompanyLogo(oCompany);

            //oEmployeeSettlementSalarys.ForEach(x =>
            //{
            //    x.NetAmount = (x.NetAmount - x.NetAmount);
            //});

            rptFinalSettlementSalaryAMG oReport = new rptFinalSettlementSalaryAMG();
            byte[] abytes = oReport.PrepareReport(oEmployeeSettlements, oEmployeeSettlementSalarys, oEmployeeSettlementSalaryDetails, oLeaveHeads, oAttendanceDailys, oCompany, oEmployees, oELOnAttendances, oSalarySheetPropertys, nGroupDept);
            return File(abytes, "application/pdf");
        }

        #endregion

        
        #region crystal report payslip
        public ActionResult ExtraOT(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroubByDept, string sGroupIDs, string sBlockIDs, double ts, int nMOCID)
        {
            //string BlockIds = string.Empty;
            //List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            //oAMGSalarySheets = AMGSalarySheet.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, ((User)Session[SessionInfo.CurrentUser]).UserID);

            string BlockIds = string.Empty;
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.GetsPaySlip(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, nMOCID, ((User)Session[SessionInfo.CurrentUser]).UserID);


            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignatures = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            var oCompany = new Company();
            var results = Company.Gets("Select * from View_Company", ((User)(Session[SessionInfo.CurrentUser])).UserID);


            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "PaySlip.rpt"));
            rd.SetDataSource(oAMGSalarySheets);
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();
            try
            {
                //string[] months = new string[] { "জানুয়ারী", "ফেব্রুয়ারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "অগাস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর" };
                string[] months = new string[] { "Rvbyqvix", "‡deªyqvwi", "gvP©", "GwcÖj", "‡g", "Ryb", "RyjvB", "AMvó", "‡m‡Þ¤^i", "A‡±vei", "b‡f¤^i", "wW‡m¤^i" };
                string sMonthName =months[nMonthID - 1] + " " + NumberFormatWithBijoy(nYear.ToString());
                TextObject txtMonthWithYear = (TextObject)rd.ReportDefinition.Sections["Section3"].ReportObjects["txtMonthWithYear"];
                txtMonthWithYear.Text = sMonthName;


                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return File(stream, "application/pdf");
            }
            catch { throw; }
        }

        #endregion


        #region TimeCardAssign
        [HttpPost]
        public JsonResult SaveMaxOTConfigurationUser(MaxOTConfigurationUser oMaxOTConfigurationUser)
        {
            string sfeedBackMessage = "";
            try
            {
                sfeedBackMessage = oMaxOTConfigurationUser.IUD(oMaxOTConfigurationUser.IsShortList, oMaxOTConfigurationUser.IsUserBased, (int)Session[SessionInfo.currentUserID]).ToString();
            }
            catch (Exception ex)
            {
                _oMaxOTConfigurationUser = new MaxOTConfigurationUser();
                _oMaxOTConfigurationUser.ErrorMessage = ex.Message;
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(sfeedBackMessage);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }
        #endregion



        #region Compliance Salary As Per Configuration


        public ActionResult View_CompSalarySheet(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            _oEmployeeSalarys = new List<EmployeeSalary>();

            this.Session.Remove(SessionInfo.AuthorizationRolesMapping);
            this.Session.Add(SessionInfo.AuthorizationRolesMapping, AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.EmployeeSalary).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]));

            ViewBag.EmployeeTypes = EmployeeType.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.Months = Enum.GetValues(typeof(EnumMonth)).Cast<EnumMonth>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).Where(x => x.Value != 0.ToString()).ToList();
            ViewBag.EmployeeCategorys = Enum.GetValues(typeof(EnumEmployeeCategory)).Cast<EnumEmployeeCategory>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();

            string sSql = "SELECT * FROM BusinessUnit WHERE BusinessUnitID IN(SELECT BusinessUnitID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID<>0";
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " )";
            }
            sSql = sSql + ")";

            ViewBag.BusinessUnits = BusinessUnit.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));
            ViewBag.MaxOTTimeCard = MaxOTConfiguration.Gets((int)(Session[SessionInfo.currentUserID]));
            MaxOTConfiguration oMaxOTConfiguration = new MaxOTConfiguration();
            List<MaxOTConfiguration> oMaxOTConfigurationUsers = new List<MaxOTConfiguration>();
            List<MaxOTConfiguration> oMaxOTConfigurationTemps = new List<MaxOTConfiguration>();
            List<MaxOTConfiguration> oMaxOTConfigurations = MaxOTConfiguration.Gets((int)(Session[SessionInfo.currentUserID]));
            oMaxOTConfigurationUsers = MaxOTConfiguration.GetsByUser( (int)(Session[SessionInfo.currentUserID]));

            foreach (MaxOTConfiguration oItem1 in oMaxOTConfigurations)
            {
                foreach (MaxOTConfiguration oItem2 in oMaxOTConfigurationUsers)
                {
                    if (oItem1.MOCID == oItem2.MOCID)
                    {
                        oMaxOTConfigurationTemps.Add(oItem1);
                    }
                }
            }
            ViewBag.TimeCards = oMaxOTConfigurationTemps;
            return View(_oEmployeeSalarys);
        }

        #endregion







        #region Compliance Salary Sheets

        public ActionResult PrintSalarySheet_DetailFormat_F6_Bangla_Comp(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, int nTimeCardID, double ts)//F6 XL
        {
            string BlockIds = string.Empty;
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.GetsComp(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, nTimeCardID, ((User)Session[SessionInfo.CurrentUser]).UserID);

            foreach (AMGSalarySheet oItem in oAMGSalarySheets)
            {
                oItem.NetAmount = oItem.NetAmount + oItem.OT_Amount;
            }


            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "SalarySheet_DetailFormat_F6Com.rpt"));
            rd.SetDataSource(oAMGSalarySheets);
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();
            try
            {
                //string[] months = new string[] { "জানুয়ারী", "ফেব্রুয়ারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "অগাস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর" };
                string[] months = new string[] { "Rvbyqvix", "‡deªyqvwi", "gvP©", "GwcÖj", "‡g", "Ryb", "RyjvB", "AMvó", "‡m‡Þ¤^i", "A‡±vei", "b‡f¤^i", "wW‡m¤^i" };
                string sMonthName = "gvmt " + months[nMonthID - 1] + " " + NumberFormatWithBijoy(nYear.ToString());
                TextObject txtSalaryMonth = (TextObject)rd.ReportDefinition.Sections["Section2"].ReportObjects["txtSalaryMonth"];
                txtSalaryMonth.Text = sMonthName;

                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return File(stream, "application/pdf");
            }
            catch { throw; }
        }

        public ActionResult PrintSalarySheet_DetailFormat_F6_Comp(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, int nTimeCardID, double ts)
        {
            string BlockIds = string.Empty;
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.GetsComp(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, nTimeCardID, ((User)Session[SessionInfo.CurrentUser]).UserID);

            foreach (AMGSalarySheet oItem in oAMGSalarySheets)
            {
                oItem.NetAmount = oItem.NetAmount + oItem.OT_Amount;
            }

            DateTime dt = new DateTime(nYear, nMonthID, 1);

            string salaryMonth = dt.ToString("MMMM yyyy");



            var oCompany = new Company();
            var results = Company.Gets("Select * from View_Company", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            if (results.Any())
                oCompany = results.First();

            if (oAMGSalarySheets.Count == 0)
            {
                rptErrorMessage oReport = new rptErrorMessage();
                byte[] abytes = oReport.PrepareReport("No Data Found !");
                return File(abytes, "application/pdf");

            }
            else
            {
                rptAMGSalarySheet oReport = new rptAMGSalarySheet();
                byte[] abytes = oReport.PrepareReport(oAMGSalarySheets, oCompany, salaryMonth);
                return File(abytes, "application/pdf");
            }
        }

        public void ExportIntoExcelSalarySheet_F6_Comp(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, int nTimeCardID, double ts)//F6 XL
        {

            string BlockIds = string.Empty;
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.GetsComp(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, nTimeCardID, ((User)Session[SessionInfo.CurrentUser]).UserID);


            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignatures = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            var oCompany = new Company();
            var results = Company.Gets("Select * from View_Company", ((User)(Session[SessionInfo.CurrentUser])).UserID);

            if (results.Any())
            {
                oCompany = results.First();
            }

           
            #region Export Excel
            int nRowIndex = 1, colIndex =1, nStartCol = 1, nEndCol = 0;
            float nFontSize = 11f;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Salary Sheet");
                sheet.Name = "Salary Sheet";
                sheet.View.FreezePanes(5, 4);
                
                sheet.Column(colIndex++).Width = 10; //#SL
                sheet.Column(colIndex++).Width = 20; //Employee Code
                sheet.Column(colIndex++).Width = 30; //Employee Name
                sheet.Column(colIndex++).Width = 20; //Designation
                sheet.Column(colIndex++).Width = 15; //Join Date
                sheet.Column(colIndex++).Width = 15; //Total Days
                sheet.Column(colIndex++).Width = 15; //Present Day
                sheet.Column(colIndex++).Width = 20; //Day Off Holiday
                sheet.Column(colIndex++).Width = 15; //Absent Days
                sheet.Column(colIndex++).Width = 10; //CL
                sheet.Column(colIndex++).Width = 10; //SL
                sheet.Column(colIndex++).Width = 10; //EL
                sheet.Column(colIndex++).Width = 10; //LWP
                sheet.Column(colIndex++).Width = 15; //Leave Days
                sheet.Column(colIndex++).Width = 10; //EWD
                sheet.Column(colIndex++).Width = 20; //Gross Salary
                sheet.Column(colIndex++).Width = 20; //Att Bonous
                sheet.Column(colIndex++).Width = 20; //Gross Earnings
                sheet.Column(colIndex++).Width = 20; //Basic
                sheet.Column(colIndex++).Width = 20; //House Rent
                sheet.Column(colIndex++).Width = 20; //Conveyance
                sheet.Column(colIndex++).Width = 20; //Food
                sheet.Column(colIndex++).Width = 20; //Medical
                sheet.Column(colIndex++).Width = 20; //Absent Amt
                sheet.Column(colIndex++).Width = 20; //Stamp
                sheet.Column(colIndex++).Width = 20; //Total Deduct
                sheet.Column(colIndex++).Width = 20; //Net Amount
                sheet.Column(colIndex++).Width = 20; //Bank
                sheet.Column(colIndex++).Width = 20; //Cash
                sheet.Column(colIndex++).Width = 20; //Account No
                sheet.Column(colIndex++).Width = 35; //Bank Name
                sheet.Column(colIndex).Width = 20; //Signature
                nEndCol = colIndex;

                #region Report Header
                cell = sheet.Cells[nRowIndex, 1, nRowIndex, 7]; cell.Value = oCompany.Name; cell.Merge = true;
                cell.Style.Font.Bold = true; cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;

                string sSalaryMonth = ((EnumMonth)nMonthID).ToString();
                string sSalaryYear = nYear.ToString();
                cell = sheet.Cells[nRowIndex, 1, nRowIndex, 7]; cell.Value = oCompany.Name; cell.Merge = true;
                cell.Value = "Salary Sheet of " + sSalaryMonth + "/" + sSalaryYear; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 13; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex = nRowIndex + 2;
                #endregion
                
                #region Column Header 
                colIndex = 1;
                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Employee Code"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Employee Name"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Designation"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Join Date"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Total Days"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Present Day"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Day Off Holiday"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Absent Days"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "CL"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "EL"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "LWP"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Leave Days"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "EWD"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Gross Salary"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Att Bonous"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Gross Earnings"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Basic"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "House Rent"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Conveyance"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Food"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Medical"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Absent Amt"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Stamp"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Total Deduct"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Net Amount"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Bank"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Cash"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Account No"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Bank Name"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "Signature"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = nFontSize; fill = cell.Style.Fill; cell.Style.WrapText = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                #endregion
                                
                #region Report Body
                int nCount = 0;
                var data = oAMGSalarySheets.GroupBy(x => new { x.BUName, x.LocName, x.DptName }, (key, grp) => new
                {
                    BUName = key.BUName,
                    LocName = key.LocName,
                    DptName = key.DptName,
                    Results = grp.ToList()
                });

                foreach (var oItem in data)
                {
                    nRowIndex++;
                    cell = sheet.Cells[nRowIndex, 1, nRowIndex, 7]; cell.Value = "Unit Name: " + oItem.LocName + ", Dept. Name: " + oItem.DptName; cell.Merge = true;
                    cell.Style.Font.Bold = true; cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    nRowIndex++;


                    foreach (var obj in oItem.Results)
                    {
                        colIndex = 1;
                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = (++nCount); cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.Code; cell.Style.WrapText = true;
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = (obj.EmpNameInBangla == "") ? obj.Name : obj.EmpNameInBangla; cell.Style.WrapText = true;
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = (obj.DsgNameInBangla == "") ? obj.DsgName : obj.DsgNameInBangla; cell.Style.WrapText = true;
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.DOJInStr; cell.Style.WrapText = true;
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.TotalDays; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.Present; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.DayOffHoliday; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.Absent; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.CL; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.SL; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.EL; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.LWP; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.LeaveDays; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.EWD; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.Gross; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.AttBonus; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.GrossEarning; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.Basics; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.HR; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.Conv; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.Food; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.Med; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.AbsentAmount; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.Stemp; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.TotalDeduction; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.NetAmount; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)";
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = 0.00; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)"; //Bank Amount
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.NetAmount; cell.Style.WrapText = true; cell.Style.Numberformat.Format = "#,###;(#,###)"; //Cash Amount
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.AccountNo; cell.Style.WrapText = true;
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = obj.BankName; cell.Style.WrapText = true;
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        cell = sheet.Cells[nRowIndex, colIndex++]; cell.Value = "-"; cell.Style.WrapText = true;
                        cell.Style.Font.Size = nFontSize; cell.Style.Font.Bold = false; border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        nRowIndex++;
                    }
                }
                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SalarySheet-F6.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }


        public JsonResult SearchSalaryByDepartmentAndDateRangeComp(string sBU, string sLocationID, string sDepartmentIds, string sDesignationIDs, string sSalarySchemeIDs, string sEmployeeIDs, string BMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, int nLoadRecords, int nRowLength, double nStartSalaryRange, bool bIsOutSheet, double nEndSalaryRange, int nTimeCardID, double ts)
        {
            try
            {
                string sSql = "";
                sSql = "SELECT * FROM (SELECT top(" + nLoadRecords + ")* FROM (SELECT ROW_NUMBER() OVER(ORDER BY EmployeeSalaryID) Row,* FROM View_ComplianceEmployeeSalary WHERE MOCID = "+nTimeCardID+" AND MonthID=" + nMonthID + " AND DATEPART(YYYY,EndDate)=" + nYear;

                if (sBU.Trim() != "" && sBU.Trim() != "0")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeOfficial WHERE DRPID IN(SELECT DepartmentRequirementPolicyID FROM DepartmentRequirementPolicy WHERE BusinessUnitID=" + sBU + "))";
                }
                if (sLocationID.Trim() != "")
                {
                    sSql = sSql + " AND LocationID=" + sLocationID;
                }
                if (sDepartmentIds.Trim() != "")
                {
                    sSql = sSql + " AND DepartmentID IN(" + sDepartmentIds + ")";
                }
                if (sDesignationIDs.Trim() != "")
                {
                    sSql = sSql + " AND DesignationID IN(" + sDesignationIDs + ")";
                }
                if (sSalarySchemeIDs.Trim() != "")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
                }
                if (sEmployeeIDs.Trim() != "")
                {
                    sSql = sSql + " AND EmployeeID In (" + sEmployeeIDs + ")";
                }
                if (nPayType > 0)
                {
                    if (nPayType == 1)
                    {
                        sSql = sSql + " AND IsAllowBankAccount=1";
                    }
                    if (nPayType == 2)
                    {
                        sSql = sSql + " AND IsAllowBankAccount=0";
                    }
                }
                //if (nMonthID > 0)
                //{
                //    sSql = sSql + " AND MonthID=" + nMonthID;
                //}
                if (bNewJoin)
                {
                    sSql = sSql + " AND JoiningDate BETWEEN StartDate AND EndDate";
                }
                //if (bIsOutSheet)
                //{
                //    sSql = sSql + " AND IsOutSheet=1";
                //}
                //if (bIsOutSheet == false)
                //{
                //    sSql = sSql + " AND (IsOutSheet=0 OR IsOutSheet IS NULL)";
                //}
                if (BMMIDs != "")
                {
                    //sSql = sSql + "  AND EmployeeID IN(SELECT EmployeeID FROM View_BlockMachineMappingSupervisor WHERE BMMID " + nBlock + " AND IsActive=1)";
                    sSql = sSql + "  AND BMMID IN(" + BMMIDs + ")";
                }
                if (nStartSalaryRange > 0 && nEndSalaryRange > 0)
                {
                    sSql += " AND GrossAmount BETWEEN " + nStartSalaryRange + " AND " + nEndSalaryRange;
                }
                if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
                {
                    sSql = sSql + "AND DepartmentID IN(SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + "))";
                }
                sSql = sSql + ") aa WHERE Row >" + nRowLength + ") aaa ORDER BY EmployeeCode";
                //sSql = "SELECT * FROM View_EmployeeSalary WHERE DepartmentID =" + nID + " AND StartDate='" + dtDateFrom + "' AND EndDate='" + dtDateTo + "'";
                _oEmployeeSalarys = new List<EmployeeSalary>();
                _oEmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (_oEmployeeSalarys.Count == 0)
                {
                    throw new Exception("Data Not Found !");
                }
                //_oEmployeeSalarys.ForEach(x =>
                //{
                //    x.GrossAmount = x.CompGrossAmount;
                //    x.NetAmount = Math.Round(x.CompNetAmount, 2);
                //});
            }
            catch (Exception ex)
            {
                _oEmployeeSalarys = new List<EmployeeSalary>();
                _oEmployeeSalary = new EmployeeSalary();
                _oEmployeeSalary.ErrorMessage = ex.Message;
                _oEmployeeSalarys.Add(_oEmployeeSalary);
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oEmployeeSalarys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        public void ExcelSalarySheet_DetailFormat_F6_Bangla_Comp(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bIsOutSheet, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, int nTimeCardID, double ts)//F6 XL
        {
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.GetsComp(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, nTimeCardID, ((User)Session[SessionInfo.CurrentUser]).UserID);

            var oCompany = new Company();
            var results = Company.Gets("Select * from View_Company", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            if (results.Any())
                oCompany = results.First();


            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            #region Bank Reconcilation Statement
            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Excel Sheet");
                sheet.Name = "Salary Sheet.";
                int nColNumber = 2;

                #region Col
                sheet.Column(nColNumber++).Width = 5;
                sheet.Column(nColNumber++).Width = 20;
                sheet.Column(nColNumber++).Width = 30;
                sheet.Column(nColNumber++).Width = 25;
                sheet.Column(nColNumber++).Width = 30;
                sheet.Column(nColNumber++).Width = 20;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 10;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 15;
                sheet.Column(nColNumber++).Width = 25;
                #endregion

                nColNumber = 2;

                #region Report Header

                cell = sheet.Cells[rowIndex, 2, rowIndex, 43]; cell.Merge = true; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 16; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 2, rowIndex, 43]; cell.Merge = true; cell.Value = oCompany.Address; cell.Style.Font.Bold = false;
                cell.Style.Font.Size = 14; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 2, rowIndex, 43]; cell.Merge = true; cell.Value = oCompany.Phone; cell.Style.Font.Bold = false;
                cell.Style.Font.Size = 13; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex++;
                string sReportName = "";
                if (nTimeCardID == 5) sReportName = "Com-1(AKM)";
                if (nTimeCardID == 6) sReportName = "Com-2(AMG)";

                cell = sheet.Cells[rowIndex, 2, rowIndex, 43]; cell.Merge = true; cell.Value = "Salary Sheet " + sReportName; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                rowIndex++;

                cell = sheet.Cells[rowIndex, 2, rowIndex, 43]; cell.Merge = true; cell.Value = ""; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                rowIndex++;
                #endregion


                #region Header
                cell = sheet.Cells[rowIndex, 2, rowIndex + 2, 2]; cell.Value = "#SL"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 3, rowIndex, 8]; cell.Value = "Employee Information"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 9, rowIndex, 18]; cell.Value = "Attendance Details"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 19, rowIndex + 2, 19]; cell.Value = "Present Salary"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 20, rowIndex, 26]; cell.Value = "Earnings"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 27, rowIndex + 2, 27]; cell.Value = "Gross Earnings"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 28, rowIndex, 31]; cell.Value = "Deduction"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 32, rowIndex + 2, 32]; cell.Value = "Gross Deduction"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 33, rowIndex + 2, 33]; cell.Value = "Net Amount"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 34, rowIndex + 2, 34]; cell.Value = "Account No"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 35, rowIndex + 2, 35]; cell.Value = "Bank Name"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, 36, rowIndex + 2, 36]; cell.Value = "Signature"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                nColNumber = 3;
                rowIndex++;
                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Employee Code"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin; 

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Employee Name"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Department"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Designation Name"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Joining Date"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Employee Type"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Total Days"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Present Days"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Days Of Holidays"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Absent Days"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++, rowIndex, nColNumber]; cell.Value = "Leave Head"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                int tempCol = nColNumber-1;
                cell = sheet.Cells[rowIndex + 1, tempCol++]; cell.Value = "CL"; cell.Style.Font.Bold = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex + 1, tempCol++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                nColNumber++;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Leave Days"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Employee Working Days"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "OT Hours"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "OT Rate"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                nColNumber++;
                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Basic"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Conveyance"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Food"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "House Rent"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Medical"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Att. Bonus"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "OT Allowance"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                nColNumber++;
                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Absent Amount"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Advance"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "LWP"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber, rowIndex + 1, nColNumber++]; cell.Value = "Stamp"; cell.Style.Font.Bold = true; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.WhiteSmoke);
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                rowIndex++;
                #endregion

                #region data
                int nCount = 1;
                rowIndex++;
                int nGroupByID = 0;
                foreach (AMGSalarySheet oItem in oAMGSalarySheets)
                {
                    nColNumber = 2;
                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = nCount++.ToString(); cell.Style.Font.Bold = false; 
                    cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;    

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.Code; cell.Style.WrapText = true; cell.Style.Font.Bold = false; 
                    cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.Name; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.DptName; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.DsgName; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.DOJ.ToString("dd/MM/yyyy"); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin; 
                    
                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.Grade; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.TotalDays; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.Present; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.DayOffHoliday; cell.Style.WrapText = true; cell.Style.Font.Bold = false; 
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.Absent; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.CL; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.SL; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin; 

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.LeaveDays; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.EWD; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.OT_HR; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.OT_Rate; cell.Style.WrapText = true; cell.Style.Font.Bold = false; 
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.Basics + oItem.Conv + oItem.Food + oItem.HR + oItem.Med; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.Basics; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.Conv; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.Food ; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.HR; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.Med; cell.Style.WrapText = true; cell.Style.Font.Bold = false; 
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oItem.AttBonus,0); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oItem.OT_Amount,0); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oItem.GrossEarning,0); cell.Style.WrapText = true; cell.Style.Font.Bold = false; 
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oItem.AbsentAmount,0); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oItem.Advance,0); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.LWP; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oItem.Stemp,0); cell.Style.WrapText = true; cell.Style.Font.Bold = false; 
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oItem.TotalDeduction,0); cell.Style.WrapText = true; cell.Style.Font.Bold = false; 
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oItem.NetAmount,0); cell.Style.WrapText = true; cell.Style.Font.Bold = false; 
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                   
                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.AccountNo; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oItem.BankName; cell.Style.WrapText = true; cell.Style.Font.Bold = false; 
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = "" ; cell.Style.WrapText = true; cell.Style.Font.Bold = false; 
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                }

                #region Grand Total
                nColNumber = 2;
                cell = sheet.Cells[rowIndex, 2, rowIndex, 14]; cell.Value = "Grand Total :"; cell.Style.Font.Bold = false; cell.Merge = true;
                cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                nColNumber = 15;
                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oAMGSalarySheets.Sum(x=>x.LeaveDays); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = ""; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oAMGSalarySheets.Sum(x=>x.OT_HR); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oAMGSalarySheets.Sum(x => x.OT_Rate); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                double dSalary = oAMGSalarySheets.Sum(x => x.Basics) + oAMGSalarySheets.Sum(x => x.HR) + oAMGSalarySheets.Sum(x => x.Conv) + oAMGSalarySheets.Sum(x => x.Food) + oAMGSalarySheets.Sum(x => x.Med);
                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(dSalary,0); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oAMGSalarySheets.Sum(x => x.Basics); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oAMGSalarySheets.Sum(x => x.Conv); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oAMGSalarySheets.Sum(x => x.Food); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oAMGSalarySheets.Sum(x => x.HR); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oAMGSalarySheets.Sum(x => x.Med); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oAMGSalarySheets.Sum(x => x.AttBonus),0); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oAMGSalarySheets.Sum(x=>x.OT_Amount),0); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oAMGSalarySheets.Sum(x => x.GrossEarning),0); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oAMGSalarySheets.Sum(x => x.AbsentAmount),0); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oAMGSalarySheets.Sum(x => x.Advance),0); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = oAMGSalarySheets.Sum(x => x.LWP); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oAMGSalarySheets.Sum(x => x.Stemp),0); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oAMGSalarySheets.Sum(x => x.TotalDeduction),0); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = Math.Round(oAMGSalarySheets.Sum(x => x.NetAmount), 0); cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = ""; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = ""; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, nColNumber++]; cell.Value = ""; cell.Style.WrapText = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.Thin;
                #endregion
                #endregion
                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=" + sReportName + ".xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }
        private void ExcelSalarySheet(List<SalarySheetProperty> oSalarySheetPropertys, List<string> ColumnHeader, List<string> ColEmpInfo, List<string> ColAttDetail, List<string> ColIncrementDetail, List<string> ColEarnings, List<string> ColDeductions, List<string> ColBankDetail, ref int nRowIndex, ref ExcelWorksheet sheet, ref ExcelRange cell, ref OfficeOpenXml.Style.Border border, List<SalaryHead> oSalaryHeads, List<RPTSalarySheet> oResults, List<RPTSalarySheetDetail> oEmployeeSalaryDetails, List<LeaveHead> oLeaveHeads, List<EmployeeLeaveOnAttendance> oELOnAttendances, bool bWithPrecision, bool bHasOTAllowance, bool bHasParentDept, bool isRound)
        {


            int nStartCol = 2, nEndCol = 2;
            int nColumn = 2;
            sheet.Column(nColumn).Width = 5;

            foreach (string sColumn in ColEmpInfo)
            {
                sheet.Column(++nColumn).Width = 15;
            }

            if (oLeaveHeads.Count() > 0)
            {
                foreach (string sColumn in ColAttDetail)
                {
                    if (sColumn == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                    {
                        foreach (LeaveHead oItem in oLeaveHeads)
                        {
                            sheet.Column(++nColumn).Width = 7;
                        }
                    }
                    else
                    {
                        sheet.Column(++nColumn).Width = 12;
                    }
                }
            }
            else
            {
                foreach (string sColumn in ColAttDetail)
                {
                    sheet.Column(++nColumn).Width = 12;
                }
            }
            foreach (string sColumn in ColIncrementDetail)
            {
                sheet.Column(++nColumn).Width = 15;
            }

            sheet.Column(++nColumn).Width = 15; // Gross Amount

            foreach (string sColumn in ColEarnings)
            {
                sheet.Column(++nColumn).Width = 12;
            }
            if (ColEarnings.Count() > 0)
            {
                sheet.Column(++nColumn).Width = 15;
            }

            foreach (string sColumn in ColDeductions)
            {
                sheet.Column(++nColumn).Width = 12;
            }
            if (ColDeductions.Count() > 0)
            {
                sheet.Column(++nColumn).Width = 16;
            }
            sheet.Column(++nColumn).Width = 15;
            foreach (string sColumn in ColBankDetail)
            {
                sheet.Column(++nColumn).Width = 16;
            }
            sheet.Column(++nColumn).Width = 15;
            nEndCol = nColumn;

            ColGross = new string[] { "Gross Salary", ((ColEarnings.Count() > 0) ? "Gross Earnings" : ""), ((ColDeductions.Count() > 0) ? "Gross Deductions" : ""), "Net Amount" };
            ColGross = ColGross.Where(x => x != "").ToArray();

            if (bFlag)
            {
                foreach (string property in ColGross)
                {
                    _gross.Add(property, 0);
                }
                foreach (string property in ColIncrementDetail)
                {
                    if (property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LastGross.ToString()) || property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LastIncrement.ToString())) { _increment.Add(property, 0); }
                }
                foreach (string property in ColEarnings)
                {
                    _earnings.Add(property, 0);
                }
                foreach (string property in ColDeductions)
                {
                    _deductions.Add(property, 0);
                }
                foreach (string property in ColBankDetail)
                {
                    if (property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.BankAmount.ToString()) || property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.CashAmount.ToString())) { _banks.Add(property, 0); }
                }
                bFlag = false;
            }

            #region Column Header

            int nSpan = 0;
            int nAddSpan = (oLeaveHeads.Count() > 0) ? 1 : 0;
            foreach (string sColumn in ColumnHeader)
            {

                if (sColumn == "SL#")
                {
                    nStartCol = 2;
                    nEndCol = 2;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Employee Information")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += ColEmpInfo.Count();
                    nSpan = 0;
                }
                else if (sColumn == "Att. Detail")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += ColAttDetail.Count() + ((nAddSpan > 0) ? oLeaveHeads.Count() - 1 : 0);
                    nSpan = 0;
                }
                else if (sColumn == "Increment Detail")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += ColIncrementDetail.Count();
                    nSpan = 0;
                }
                else if (sColumn == "Gross Salary")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Earnings" && ColEarnings.Count() > 0)
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += ColEarnings.Count();
                    nSpan = 0;
                }
                else if (sColumn == "Gross Earnings")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Deduction" && ColDeductions.Count() > 0)
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += ColDeductions.Count();
                    nSpan = 0;
                }
                else if (sColumn == "Gross Deductions")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Net Amount")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Bank")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Cash")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Account No")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Bank Name")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Signature")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                string sColumnvalue = "";
                sColumnvalue = sColumn;
                if (sColumnvalue == "Deduction" && ColDeductions.Count() <= 0)
                {
                    continue;
                }
                if (ColIncrementDetail.Count > 0 && sColumn == "Gross Salary") { sColumnvalue = "Present Salary"; }
                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex + nSpan, nEndCol]; cell.Value = sColumnvalue; cell.Merge = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            }
            nRowIndex++;

            nStartCol = 3; nEndCol = 3;
            foreach (string sColumn in ColumnHeader)
            {
                if (sColumn == "Employee Information")
                {
                    foreach (string sItem in ColEmpInfo)
                    {
                        string sColName = "";
                        sColName = sItem;
                        if (bHasParentDept && sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.Department.ToString())) { sColName = "Sub Department"; }
                        if (bHasParentDept && sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.ParentDepartment.ToString())) { sColName = "Department"; }
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex + nAddSpan, nEndCol++]; cell.Value = sColName; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }
                else if (sColumn == "Att. Detail")
                {
                    foreach (string sItem in ColAttDetail)
                    {
                        if (sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()) && oLeaveHeads.Count() > 0)
                        {
                            nEndCol += oLeaveHeads.Count() - 1;
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sItem; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            nStartCol += oLeaveHeads.Count() - 1;
                        }
                        else
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex + nAddSpan, nEndCol++]; cell.Value = sItem; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                    }
                }
                else if (sColumn == "Increment Detail")
                {
                    foreach (string sItem in ColIncrementDetail)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex + nAddSpan, nEndCol++]; cell.Value = sItem; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }
                else if (sColumn == "Earnings" && ColEarnings.Count > 0)
                {
                    nStartCol++; nEndCol++;
                    foreach (string sItem in ColEarnings)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex + nAddSpan, nEndCol++]; cell.Value = sItem; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }
                else if (sColumn == "Deduction" && ColDeductions.Count > 0)
                {
                    nStartCol++; nEndCol++;
                    foreach (string sItem in ColDeductions)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex + nAddSpan, nEndCol++]; cell.Value = sItem; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }
            }
            nRowIndex += nAddSpan;
            if (nAddSpan > 0) // With leave Heads
            {
                nStartCol = 3 + ColEmpInfo.Count();
                foreach (string sItem in ColAttDetail)
                {
                    if (sItem != Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                    {
                        nStartCol++;
                    }
                    else
                    {
                        break;
                    }
                }
                nEndCol = nStartCol;

                foreach (LeaveHead oItem in oLeaveHeads)
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.ShortName; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                nRowIndex++;
            }
            else
            {
                nRowIndex++;
            }

            #endregion

            #region Date Manipulation

            var EmpInfoPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 1).ToList();
            var AttDetailPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty != EnumSalarySheetFormatProperty.OTAllowance).ToList();
            var oEarnings = oSalaryHeads.Where(x => (x.SalaryHeadType == EnumSalaryHeadType.Basic) || (x.SalaryHeadType == EnumSalaryHeadType.Addition) || (x.SalaryHeadType == EnumSalaryHeadType.Reimbursement)).ToList();

            //oEarnings = oEarnings.Where(p => oEmployeeSalaryDetails.Any(p2 => p2.SalaryHeadID == p.SalaryHeadID)).ToList();

            var oDeductions = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Deduction).ToList();

            //oDeductions = oDeductions.Where(p => oEmployeeSalaryDetails.Any(p2 => p2.SalaryHeadID == p.SalaryHeadID)).ToList();

            var IncrementPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 3).ToList();
            var BankPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 4).ToList();

            #region Data
            int nGrandTotalStartRowIndex = nRowIndex;
            //string sFormator = "_-* #,##0.00_-;-* #,##0.00_-;_-* \"-\"??_-;_-@_-";
            string sFormator = "_-* #,###_-;-* #,###_-;_-* \"-\"??_-;_-@_-";
            if (oResults.Count() > 0)
            {
                int nCount = 0;
                string Code = "";
                var oELOnAtts = new List<EmployeeLeaveOnAttendance>();
                Dictionary<string, object> gross = new Dictionary<string, object>();
                Dictionary<string, object> increment = new Dictionary<string, object>();
                Dictionary<string, object> earnings = new Dictionary<string, object>();
                Dictionary<string, object> deductions = new Dictionary<string, object>();
                Dictionary<string, object> banks = new Dictionary<string, object>();

                foreach (string property in _gross.Select(x => x.Key).ToArray())
                {
                    gross.Add(property, 0);
                }
                foreach (string property in _increment.Select(x => x.Key).ToArray())
                {
                    increment.Add(property, 0);
                }
                foreach (string property in _earnings.Select(x => x.Key).ToArray())
                {
                    earnings.Add(property, 0);
                }
                foreach (string property in _deductions.Select(x => x.Key).ToArray())
                {
                    deductions.Add(property, 0);
                }
                foreach (string property in _banks.Select(x => x.Key).ToArray())
                {
                    banks.Add(property, 0);
                }


                foreach (RPTSalarySheet oItem in oResults)
                {

                    oELOnAtts = oELOnAttendances.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();

                    Code = "";
                    nStartCol = 2; nEndCol = 2;
                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (++nCount); cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = "0";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    /*---- Employee Info -----*/
                    if (ColEmpInfo.Count() > 0)
                    {
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeCode).Any())
                        {
                            int nEmployeeCode = 0;
                            try
                            {
                                nEmployeeCode = Convert.ToInt32(oItem.EmployeeCode);
                                cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = nEmployeeCode; cell.Merge = true; cell.Style.Font.Bold = false;
                                cell.Style.Numberformat.Format = "#######"; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                            catch
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.EmployeeCode; cell.Merge = true; cell.Style.Font.Bold = false;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                        }

                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeName).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.EmployeeName; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ParentDepartment).Any())
                        {

                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.ParentDepartmentName; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Department).Any())
                        {

                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.DepartmentName; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Designation).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.DesignationName; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.JoiningDate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.JoiningDateInString; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ConfirmationDate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.DateOfConfirmationInString; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeType).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.EmployeeTypeName; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Gender).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.Gender; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeContactNo).Any())
                        {
                            cell.Style.Numberformat.Format = "";
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.ContactNo.ToString(); cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    if (ColAttDetail.Count() > 0)
                    {         /*---- Att. Detail -----*/
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.TotalDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.TotalDays > 0) ? (oItem.TotalDays) : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.PresentDay).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.Present > 0) ? oItem.Present : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.DayOffHolidays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = ((oItem.TotalDayOff) > 0) ? (oItem.TotalDayOff) : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.AbsentDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.TotalAbsent > 0) ? oItem.TotalAbsent : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveHead).Any())
                        {
                            foreach (LeaveHead oLeaveHead in oLeaveHeads)
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).Any()) ? oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).FirstOrDefault().LeaveDays : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                                cell.Style.Numberformat.Format = sFormator;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.TotalPLeave + oItem.TotalUpLeave > 0) ? (oItem.TotalPLeave + oItem.TotalUpLeave) : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeWorkingDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.EWD > 0) ? oItem.EWD : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EarlyOutDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.TotalEarlyLeaving > 0) ? oItem.TotalEarlyLeaving : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EarlyOutMins).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.EarlyInMin > 0) ? oItem.EarlyInMin : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LateDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.TotalLate > 0) ? oItem.TotalLate : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LateHrs).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.LateInMin > 0) ? Global.MinInHourMin(oItem.LateInMin) : ""; cell.Merge = true; cell.Style.Font.Bold = false;

                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTHours).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.OTHour > 0) ? oItem.OTHour : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTRate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.OTRatePerHour > 0) ? oItem.OTRatePerHour : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    /*Increment Detail */
                    if (ColIncrementDetail.Count() > 0)
                    {
                        double sValue = 0;
                        sValue = oItem.LastGross > 0 ? oItem.LastGross : 0;
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sValue; cell.Style.Font.Bold = false; cell.Merge = true;
                        cell.Style.Numberformat.Format = sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        increment["Last Gross"] = Convert.ToDouble(increment["Last Gross"]) + Math.Round(oItem.LastGross > 0 ? oItem.LastGross : 0);

                        sValue = oItem.IncrementAmount > 0 ? oItem.IncrementAmount : 0;
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sValue; cell.Style.Font.Bold = false; cell.Merge = true;
                        cell.Style.Numberformat.Format = sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        increment["Last Increment"] = Convert.ToDouble(increment["Last Increment"]) + Math.Round(oItem.IncrementAmount > 0 ? oItem.IncrementAmount : 0);

                        string sDate = "";
                        sDate = oItem.EffectedDateInStr;
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sDate; cell.Style.Font.Bold = false; cell.Merge = true;
                        //cell.Style.Numberformat.Format = sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }

                    /*--- Gross Salary ---- */
                    //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";

                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.GrossAmount > 0) ? Math.Round(oItem.GrossAmount) : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    gross["Gross Salary"] = Convert.ToDouble(gross["Gross Salary"]) + Math.Round(oItem.GrossAmount);
                    /*--- Earnings ---- */

                    double nAmount = 0, nAddAmount = 0, dAllSalaryTotal = 0;

                    foreach (SalaryHead oSalaryHead in oEarnings.OrderBy(x => x.SalaryHeadType))
                    {
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;

                        //nAmount = (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Basic) ? nAmount : Math.Round(nAmount);
                        nAmount = Math.Round(nAmount,0);
                        //dAllSalaryTotal += nAmount;
                        nAddAmount += (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Addition || oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Reimbursement) ? nAmount : 0;

                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (nAmount > 0) ? nAmount : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                        //cell.Style.Numberformat.Format = (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Basic) ? "#,##0.00;(#,##0.00)" : (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        //cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    double nOTAllowance = Math.Round(oItem.OTAmount);
                    if (bHasOTAllowance)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++];
                        //cell.Value = (nOTAllowance > 0) ? this.GetAmountInStr(nOTAllowance, isRound, true) : "-";
                        cell.Value = (nOTAllowance > 0) ? nOTAllowance : 0;                        
                        cell.Merge = true; cell.Style.Font.Bold = false;
                        //cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    if (oEarnings.Any())
                    {
                        double nEarnings = oItem.GrossAmount + ((bHasOTAllowance) ? nOTAllowance : 0) + nAddAmount;      //old code
                        //double nEarnings = dAllSalaryTotal + nOTAllowance + nAddAmount;// + nAddAmount;
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = nEarnings; cell.Merge = true; cell.Style.Font.Bold = false;
                        //cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        gross["Gross Earnings"] = Convert.ToDouble(gross["Gross Earnings"]) + nEarnings;
                    }

                    /*---deduction--*/
                    double nDeductionAmount = 0;

                    foreach (SalaryHead oSalaryHead in oDeductions)
                    {
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;
                        nDeductionAmount += nAmount;
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = nAmount; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    if (oDeductions.Count() > 0)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = nDeductionAmount; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        gross["Gross Deductions"] = Convert.ToDouble(gross["Gross Deductions"]) + nDeductionAmount;
                    }
                    /*---Net Amount--*/

                    double nNetAmount = oItem.NetAmount + ((bHasOTAllowance) ? 0 : -nOTAllowance);

                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = nNetAmount; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    gross["Net Amount"] = Convert.ToDouble(gross["Net Amount"]) + nNetAmount;

                    if (ColBankDetail.Count() > 0)
                    {
                        double sVal = 0;
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.BankAmount).Any())
                        {
                            sVal = (oItem.BankAmount > 0 ? oItem.BankAmount : 0);
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sVal; cell.Style.Font.Bold = false; cell.Merge = true;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            banks["Bank Amount"] = Convert.ToDouble(banks["Bank Amount"]) + (oItem.BankAmount > 0 ? oItem.BankAmount : 0);
                        }

                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.CashAmount).Any())
                        {
                            sVal = (oItem.CashAmount > 0 ? oItem.CashAmount : 0);
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sVal; cell.Style.Font.Bold = false; cell.Merge = true;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            banks["Cash Amount"] = Convert.ToDouble(banks["Cash Amount"]) + (oItem.CashAmount > 0 ? oItem.CashAmount : 0);
                        }

                        string sValue = "";
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.AccountNo).Any())
                        {
                            sValue = (oItem.AccountNo != "" ? oItem.AccountNo : "-");
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sValue; cell.Style.Font.Bold = false; cell.Merge = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.BankName).Any())
                        {
                            sValue = (oItem.BankName != "" ? oItem.BankName : "-");
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sValue; cell.Style.Font.Bold = false; cell.Merge = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    /*---Signature--*/
                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = "--"; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    ++_nEmpCount;
                    ++nRowIndex;
                }
            }
            #endregion

            #region Grand Total
            nStartCol = 3; nEndCol = 3;
            string sStartCell = "";
            string sEndCell = "";
            foreach (string sColumn in ColumnHeader)
            {
                if (sColumn == "SL#")
                {
                    nStartCol = 2;
                    nEndCol = 2;
                    cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                }
                else if (sColumn == "Employee Information")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += ColEmpInfo.Count();
                    cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = "Grand Total:"; cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                }
                else if (sColumn == "Att. Detail")
                {
                    foreach (string sItem in ColAttDetail)
                    {
                        if (sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()) && oLeaveHeads.Count() > 0)
                        {
                            foreach (LeaveHead oItem in oLeaveHeads)
                            {
                                nStartCol = nEndCol + 1;
                                nEndCol = nStartCol;

                                //sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                                //sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                                //cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                                //cell.Style.Font.UnderLine = true;
                                //cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                                //cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                //cell.Style.Numberformat.Format = sFormator;
                                //border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;

                                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = false;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                            }
                        }
                        else
                        {
                            nStartCol = nEndCol + 1;
                            nEndCol = nStartCol;

                            //sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                            //sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                            //cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                            //cell.Style.Font.UnderLine = true;
                            //cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                            //cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            //cell.Style.Numberformat.Format = sFormator;
                            //border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;

                            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                        }


                    }
                }
                else if (sColumn == "Increment Detail")
                {
                    foreach (string sItem in ColIncrementDetail)
                    {
                        nStartCol = nEndCol + 1;
                        nEndCol = nStartCol;

                        sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                        sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                        cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                        cell.Style.Font.UnderLine = true;
                        cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        cell.Style.Numberformat.Format = sFormator;
                        border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                    }

                }
                else if (sColumn == "Gross Salary")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol = nStartCol;

                    sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                    sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                    cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.Font.UnderLine = true;
                    cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = sFormator;
                    border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                }
                else if (sColumn == "Earnings" && ColEarnings.Count() > 0)
                {
                    foreach (string sItem in ColEarnings)
                    {
                        nStartCol = nEndCol + 1;
                        nEndCol = nStartCol;

                        sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                        sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                        cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                        cell.Style.Font.UnderLine = true;
                        cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        cell.Style.Numberformat.Format = sFormator;
                        border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                    }
                }
                else if (sColumn == "Gross Earnings")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol = nStartCol;

                    sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                    sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                    cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.Font.UnderLine = true;
                    cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = sFormator;
                    border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                }
                else if (sColumn == "Deduction" && ColDeductions.Count() > 0)
                {
                    foreach (string sItem in ColDeductions)
                    {
                        nStartCol = nEndCol + 1;
                        nEndCol = nStartCol;

                        sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                        sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                        cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                        cell.Style.Font.UnderLine = true;
                        cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        cell.Style.Numberformat.Format = sFormator;
                        border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                    }
                }
                else if (sColumn == "Gross Deductions")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol = nStartCol;

                    sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                    sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                    cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.Font.UnderLine = true;
                    cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = sFormator;
                    border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                }
                else if (sColumn == "Net Amount")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol = nStartCol;

                    sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                    sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                    cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.Font.UnderLine = true;
                    cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = sFormator;
                    border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                }
                else if (sColumn == "Bank")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol = nStartCol;

                    sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                    sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                    cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.Font.UnderLine = true;
                    cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = sFormator;
                    border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                }
                else if (sColumn == "Cash")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol = nStartCol;

                    sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                    sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                    cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.Font.UnderLine = true;
                    cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = sFormator;
                    border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                }
            }
            #endregion
            #endregion
        }


        [HttpPost]
        public JsonResult MakeLeaveOnDayoff(string sTemp)
        {

            string sAttendanceDate = sTemp.Split('~')[0];
            bool bIsDayoffThisDay = Convert.ToBoolean(sTemp.Split('~')[1]);
            string BUIDs = sTemp.Split('~')[2];
            string LocIDs = sTemp.Split('~')[3];
            string DepartmentIDs = sTemp.Split('~')[4];
            string DesignationIDs = sTemp.Split('~')[5];
            bool IsComp = Convert.ToBoolean(sTemp.Split('~')[6]);
            int nType =Convert.ToInt32(sTemp.Split('~')[7]);
            int nLeaveHeadID = Convert.ToInt32(sTemp.Split('~')[8]);
            DateTime sStartDate = Convert.ToDateTime(sTemp.Split('~')[9]);
            DateTime sEndDate = Convert.ToDateTime(sTemp.Split('~')[10]);


            List<AttendanceDaily> oAttendanceDailys = new List<AttendanceDaily>();
            AttendanceDaily oAttendanceDaily = new AttendanceDaily();
            string sMessage = "";

            try
            {
                oAttendanceDailys = AttendanceDaily.MakeLeave(sAttendanceDate, bIsDayoffThisDay, BUIDs, LocIDs, DepartmentIDs, DesignationIDs, IsComp, nType, nLeaveHeadID, sStartDate, sEndDate, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                
            }
            catch (Exception ex)
            {
                oAttendanceDaily.ErrorMessage = ex.Message;
                oAttendanceDailys.Add(oAttendanceDaily);
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oAttendanceDailys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

    }
 
}

