@{
    ViewBag.Title = "DUPSchedule";
}

@model ESimSol.BusinessObjects.DUPSchedule

<div ng-app="DUPScheduleModule" ng-controller="DUPScheduleController as MLCC">

    <section>
        <ul class="nav nav-tabs" style="background:#d6dbdf; color:white;">
            <li ng-class="{active:MLCC.IsSet(1)}">
                <a href="" ng-click="MLCC.SetTab(1)" style="color:black;">Detail View</a>
            </li>
            <li ng-class="{active:MLCC.IsSet(2)}">
                <a href="" ng-click="MLCC.SetTab(2)" style="color:black;">Buyer Wise</a>
            </li>
            <li ng-class="{active:MLCC.IsSet(3)}">
                <a href="" ng-click="MLCC.SetTab(3)" style="color:black;">Order Wise</a>
            </li>
            <li ng-class="{active:MLCC.IsSet(4)}">
                <a href="" ng-click="MLCC.SetTab(4)" style="color:black;">Yarn Wise</a>
            </li>
        </ul>

        <div ng-if="MLCC.IsSet(1)">
            <div class="col-md-12">
                <div class="form-inline">
                    <div class="input-group date date-container">
                        <input type="text" class="form-control" ng-init="initializeDatepicker()" style="width:100px" ng-model="dtStart"><span class="input-group-addon"><i class="glyphicon glyphicon-th" ng-disabled="disabled"></i></span>
                    </div>
                    <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="RefreshDefault()"> <span class="glyphicon glyphicon-refresh" aria-hidden="true"> Refresh</span></button>
                    <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="advanceSearch()"> <span class="glyphicon glyphicon-search" aria-hidden="true"> Adv. Search</span></button>
                    <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="print()"> <span class="glyphicon glyphicon-print" aria-hidden="true"> Print</span></button>
                    <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="print_Excel()"> <span class="glyphicon glyphicon-print" aria-hidden="true"> Export to XL</span></button>
                    @*<button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="Print_DUPS()"> <span class="glyphicon glyphicon-print" aria-hidden="true">Print (Machine Wise)</span></button>*@
                </div>
            </div>
            <div class="col-md-12">
                <div ui-grid="DefaultgridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav ui-grid-edit class="grid ui-grid-selectable"></div>
            </div>
        </div>

        <div ng-if="MLCC.IsSet(2)">
            <div class="col-md-12">
                <div class="form-inline">
                    <div class="input-group date date-container">
                        <input type="text" class="form-control" ng-init="initializeDatepicker()" style="width:100px" ng-model="dtStart"><span class="input-group-addon"><i class="glyphicon glyphicon-th" ng-disabled="disabled"></i></span>
                    </div>
                    <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="RefreshBuyer()"> <span class="glyphicon glyphicon-refresh" aria-hidden="true">Refresh</span></button>
                </div>
            </div>
            <div class="col-md-12">
                <div ui-grid="BuyergridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav ui-grid-edit class="grid ui-grid-selectable"></div>
            </div>
        </div>
        <div ng-if="MLCC.IsSet(3)">
            <div class="col-md-12">
                <div class="form-inline">
                    <div class="input-group date date-container">
                        <input type="text" class="form-control" ng-init="initializeDatepicker()" style="width:100px" ng-model="dtStart"><span class="input-group-addon"><i class="glyphicon glyphicon-th" ng-disabled="disabled"></i></span>
                    </div>
                    <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="RefreshExecution()"> <span class="glyphicon glyphicon-refresh" aria-hidden="true">Refresh</span></button>
                </div>
            </div>
            <div class="col-md-12">
                <div ui-grid="ExecutiongridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav ui-grid-edit class="grid ui-grid-selectable"></div>
            </div>
        </div>
        <div ng-if="MLCC.IsSet(4)">
            <div class="col-md-12">
                <div class="form-inline">
                    <div class="input-group date date-container">
                        <input type="text" class="form-control" ng-init="initializeDatepicker()" style="width:100px" ng-model="dtStart"><span class="input-group-addon"><i class="glyphicon glyphicon-th" ng-disabled="disabled"></i></span>
                    </div>
                    <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="RefreshProduct()"> <span class="glyphicon glyphicon-refresh" aria-hidden="true">Refresh</span></button>
                </div>
            </div>
            <div class="col-md-12">
                <div ui-grid="ProductgridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-exporter ui-grid-key-nav ui-grid-edit class="grid ui-grid-selectable"></div>
            </div>
        </div>

    </section>
</div>

<style type="text/css">
    .form-control {
        height: 26px;
        padding: 0px 6px;
        font-size: 12px;
    }

    .grid {
        height: 465px;
        width: 100%;
    }

    .angular-grid {
        height: 4100px;
        width: 100%;
    }

    .custom-pagination {
        margin-top: -15px;
        margin-bottom: -15px;
    }

    .spacing {
        padding-bottom: 5px;
    }

    .red {
        text-align: right;
        color: red;
    }

    .black {
        text-align: right;
        color: #000;
    }
</style>

<script src="~/Views/DUPSchedule/AdvSearchRS.js"></script>
<script type="text/javascript">
    var customizedCompareoperator = [];
    var BusinessUnitCustom = [];
    debugger;
    _sBaseAddress =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    var _oDUPSchedule =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    var _oDyeMachines=  @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(@ViewBag.CapitalResources));
    var oLocations=  @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(@ViewBag.Locations));
    var _oDUPSchedules= @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(@ViewBag.DUPSchedules));
    var _oDUOrderSetups = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.DUOrderSetups));
    var nBUID = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(@ViewBag.BUID));
    var oOrderType = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.OrderType));
    var oCompareOperators = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.CompareOperators));
    var _nBUID =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.Buid));
    var oMachineTypes =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.MachineTypes));
    var oBusinessUnits =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BusinessUnits));
    var oProductionScheduleStatusList =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.ProductionScheduleStatus));
    var oRSStates =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.RSStates));
    var oRSShifts =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.RSShifts));
    var oInOutTypes =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.InOutTypes));

    if(oInOutTypes!=null)
    {
        oInOutTypes[0].Value = "In House";
        oInOutTypes[1].Value = "Out Side";
    }

    var oDUPS =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.DUPS));
    var oDUPS_BuyerWise =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.DUPS_BuyerWise));
    var oDUPS_OrderWise =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.DUPS_OrderWise));

    var  DUPScheduleModule = angular.module('DUPScheduleModule', ['ngAnimate','ui.bootstrap','ui.grid','ui.grid.selection','ui.grid.resizeColumns','ms.service', 'DUPS.service']);
    DUPScheduleModule.controller('DUPScheduleController', function ($scope,$http,$uibModal,$log,uiGridConstants,msModal,userSession, DUPSservice) {

        debugger;
        $scope.DUPSchedule = _oDUPSchedule;
        $scope.DyeMachines = _oDyeMachines;
        $scope.Locations = oLocations;
        $scope.DUPSchedules = _oDUPSchedules;
        $scope.DUOrderSetups = _oDUOrderSetups;
        $scope.BUID = nBUID;
        $scope.OrderType = oOrderType;
        $scope.CompareOperators = oCompareOperators;


        var v = 0;
        for(var i = 0 ; i < oBusinessUnits.length; i++) {
            if(oBusinessUnits[i].BusinessUnitID == _nBUID) {
                BusinessUnitCustom[v] = oBusinessUnits[i];
                $scope.cboBusinessUnit = BusinessUnitCustom[v].BusinessUnitID;
                break;
            }

        }
        $scope.BusinessUnit = BusinessUnitCustom;

        var c = 0;
        for(var i = 0; i < $scope.CompareOperators.length; i++) {
            if(i == 0 || i == 1 || i == 5) {
                customizedCompareoperator[c] =$scope.CompareOperators[i];
                c++;
            }
        }
        $scope.CompareOperators = customizedCompareoperator;


        $scope.GridData = oDUPS;
        $scope.GridData2 = oDUPS_BuyerWise;
        $scope.GridData3 = oDUPS_OrderWise;



        $scope.advanceSearch = function ()
        {
            debugger;
            this.PINo="";
            var modalObj={
                modalcontroller:'ModalDUPSCtrl',
                appcontroller:'DUPScheduleController',
                OrderType:$scope.OrderType,
                CompareOperators:$scope.CompareOperators,
                Locations:$scope.Locations,
                MachineTypes:oMachineTypes,
                ProductionScheduleStatusList:oProductionScheduleStatusList,
                RSStates:oRSStates,
                RSShifts : oRSShifts,
                InOutTypes: oInOutTypes,
            }
            sessionStorage.setItem('BaseAddress',_sBaseAddress);
            var modalInstance=DUPSservice.Instance(modalObj);
            modalInstance.result.then(function (result)
            {
                debugger;
                if (result.Item1.length > 0) {
                    $scope.DefaultgridOptions.data = result.Item1;
                    $scope.BuyergridOptions.data =result.Item2;
                    $scope.ExecutiongridOptions.data =result.Item3;
                    $scope.ProductgridOptions.data =result.Item4;
                } else {
                    msModal.Message({ headerTitle: '', bodyText: 'No Data Found !!', sucessText: ' Yes', cancelText: ' Close', feedbackType: false, autoClose: false });
                    // alert("Data Not Found.");
                    return;
                }

            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.print = function() {
            var sTempString= sessionStorage.getItem("sTempString");

            if(sTempString==null || sTempString==undefined)
            {
                alert("Please select any searching criteria (advance) and try again!"); return;
            }
            window.open(_sBaseAddress + '/DUPSchedule/Print_DUPSReport_RS?sTemp='+sTempString+"&buid="+_nBUID, "_blank");
        }
        $scope.print_Excel = function() {
            var sTempString= sessionStorage.getItem("sTempString");

            if(sTempString==null || sTempString==undefined)
            {
                alert("Please select any searching criteria (advance) and try again!"); return;
            }
            window.open(_sBaseAddress + '/DUPSchedule/Print_DUPS_RS_Excel?sTemp='+sTempString+"&buid="+_nBUID, "_blank");
        }

        $scope.Print_DUPS = function ()
        {
            var sTempString= sessionStorage.getItem("sTempString");

            if(sTempString==null || sTempString==undefined)
            {
                alert("Please select any searching criteria (advance) and try again!"); return;
            }

            window.open(_sBaseAddress + '/DUPSchedule/PrintDUPSchedule_FR?sTemp='+sTempString+'&buid='+_nBUID, '_blank'); // Print in Portrait
        }

        //cellTemplate: '<div class="ui-grid-cell-contents" style="color:red;" >{{grid.getCellValue(row, col)}}</div>'
        $scope.DefaultgridOptions ={
            enableRowHeaderSelection: false,
            enableRowSelection: true,
            enableFullRowSelection: true,
            multiSelect: false,
            enableColumnResizing: true,
            enableHorizontalScrollbar : true,
            noUnselect : true,
            showColumnFooter: true,

            enableGridMenu: true,
            enableSelectAll: true,
            exporterMenuPdf: true, // ADD THIS
            exporterCsvFilename: 'myFile.csv',
            exporterCsvLinkElement: angular.element(document.querySelectorAll(".custom-csv-link-location")),

            columnDefs: [
                {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'MachineName', name: 'Machine Name', width:'15%', enableCellEdit: false,cellClass: 'text-left'},
                { field: 'ContractorName', name: 'Local Buyer', width:'15%', enableCellEdit: false,cellClass: 'text-left'},
                { field: 'BuyerName', name: 'End Buyer', width:'15%', enableCellEdit: false,cellClass: 'text-left'},
                { field: 'OrderNo', name: 'Order No', width:'15%', enableCellEdit: false,cellClass: 'text-left'},
                 { field: 'PSBatchNo', name: 'YP', width:'8%', enableCellEdit: false,cellClass: 'text-left'},
                { field: 'RouteSheetNo', name: 'Batch No', width:'15%', enableCellEdit: false,cellClass: 'text-left'},
                { field: 'ProductName', name: 'Yarn Type', width:'15%', enableCellEdit: false,cellClass: 'text-left'},
                { field: 'ColorName', name: 'Color Name', width:'15%', enableCellEdit: false,cellClass: 'text-left'},
                //{ field: 'Qty', name: 'Qty', width:'10%', enableCellEdit: false,cellClass: 'text-right'},
                { field: 'Qty',              name:'Qty',      width:'8%',     cellClass: 'text-right',  cellFilter: 'number:2'    ,  aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true,  type: 'number', enableCellEdit:true,footerCellClass: 'text-right' ,footerCellFilter: 'number:2'},
                //{ field: 'DeliveryDateSt', name: 'Delivery Date', width:'15%', enableCellEdit: false,cellClass: 'text-left'},
                //{ field: 'PSBatchNo', name: 'Batch No', width:'15%', enableCellEdit: false,cellClass: 'text-left'},

                { field: 'StartTimeInST', name: 'Start Date', width:'15%', enableCellEdit: false,cellClass: 'text-left'},
                { field: 'EndTimeInST', name: 'End Date', width:'15%', enableCellEdit: false,cellClass: 'text-left'},
                { field: 'DyeLoadNote', name: 'DyeLoadNote', width:'15%', enableCellEdit: false,cellClass: 'text-left'},
                { field: 'DyeUnloadNote', name: 'DyeUnoadNote', width:'15%', enableCellEdit: false,cellClass: 'text-left'},
            ],
            data:$scope.GridData,
            onRegisterApi:function(gridApi1) 
            {
                //$scope.gridApi1 = gridApi1;
                $scope.gridApi1 = gridApi1;
                $scope.gridApi1.selection.clearSelectedRows();

                $scope.gridApi1.core.refresh();
                if($scope.GridData.length>0 && userSession.getRowIndex()>=0)
                {
                    $scope.gridApi1.grid.modifyRows(scope.GridData);
                    $scope.gridApi1.selection.selectRow($scope.GridData[userSession.getRowIndex()]);
                }

            }
        };
        $scope.BuyergridOptions ={
            enableRowHeaderSelection: false,
            enableRowSelection: true,
            enableFullRowSelection: true,
            multiSelect: false,
            enableColumnResizing: true,
            noUnselect : true,
            showColumnFooter: true,
            enableGridMenu: true,
            columnDefs: [
                {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'ContractorName', name: 'Buyer Name', width:'25%', enableCellEdit: false,cellClass: 'text-left'},
                { field: 'ProductName', name: 'Product Name', width:'25%', enableCellEdit: false,cellClass: 'text-left'},
                //{ field: 'Qty', name: 'Qty', width:'25%', enableCellEdit: false,cellClass: 'text-right'}
            { field: 'Qty',              name:'Qty',      width:'8%',     cellClass: 'text-right',  cellFilter: 'number:2'    ,  aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true,  type: 'number', enableCellEdit:true,footerCellClass: 'text-right' ,footerCellFilter: 'number:2'},

            ],
            data:$scope.GridData,
            onRegisterApi:function(gridApi2) {
                //$scope.gridApi2 = gridApi2;
                $scope.gridApi2 = gridApi2;
                $scope.gridApi2.selection.clearSelectedRows();

                $scope.gridApi2.core.refresh();
                if($scope.GridData.length>0 && userSession.getRowIndex()>=0)
                {
                    $scope.gridApi2.grid.modifyRows(scope.GridData);
                    $scope.gridApi2.selection.selectRow($scope.GridData[userSession.getRowIndex()]);
                }

            }
        };
        $scope.ExecutiongridOptions ={
            enableRowHeaderSelection: false,
            enableRowSelection: true,
            enableFullRowSelection: true,
            multiSelect: false,
            enableColumnResizing: true,
            noUnselect : true,
            showColumnFooter: true,
            enableGridMenu: true,
            columnDefs: [
                {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'OrderNo', name: 'Order No', width:'25%', enableCellEdit: false,cellClass: 'text-left'},
                { field: 'ContractorName', name: 'Buyer Name', width:'25%', enableCellEdit: false,cellClass: 'text-left'},
                //{ field: 'Qty', name: 'Qty', width:'25%', enableCellEdit: false,cellClass: 'text-right'}
                { field: 'Qty',              name:'Qty',      width:'8%',     cellClass: 'text-right',  cellFilter: 'number:2'    ,  aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true,  type: 'number', enableCellEdit:true,footerCellClass: 'text-right' ,footerCellFilter: 'number:2'},

            ],
            data:$scope.GridData3,
            onRegisterApi:function(gridApi3) {
                $scope.gridApi3 = gridApi3;
                $scope.gridApi3.selection.clearSelectedRows();
                $scope.gridApi3.core.refresh();
                if($scope.GridData.length>0 && userSession.getRowIndex()>=0)
                {
                    $scope.gridApi3.grid.modifyRows(scope.GridData);
                    $scope.gridApi3.selection.selectRow($scope.GridData[userSession.getRowIndex()]);
                }

            }
        };
        $scope.ProductgridOptions ={
            enableRowHeaderSelection: false,
            enableRowSelection: true,
            enableFullRowSelection: true,
            multiSelect: false,
            enableColumnResizing: true,
            noUnselect : true,
            showColumnFooter: true,
            enableGridMenu: true,
            columnDefs: [
                {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'ProductName', name: 'Product Name', width:'25%', enableCellEdit: false,cellClass: 'text-left'},
                //{ field: 'Qty', name: 'Qty', width:'25%', enableCellEdit: false,cellClass: 'text-right'}
            { field: 'Qty',              name:'Qty',      width:'8%',     cellClass: 'text-right',  cellFilter: 'number:2'    ,  aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true,  type: 'number', enableCellEdit:true,footerCellClass: 'text-right' ,footerCellFilter: 'number:2'},

            ],
            data:$scope.GridData2,
            onRegisterApi:function(gridApi4) {
                $scope.gridApi4 = gridApi4;
                $scope.gridApi4.selection.clearSelectedRows();
                $scope.gridApi4.core.refresh();
                if($scope.GridData.length>0 && userSession.getRowIndex()>=0)
                {
                    $scope.gridApi4.grid.modifyRows(scope.GridData);
                    $scope.gridApi4.selection.selectRow($scope.GridData[userSession.getRowIndex()]);
                }
            }
        };

        $scope.RefreshDefault = function() {
            debugger;

            var sTempString = 1 + '~' + this.dtStart + '~' + this.dtStart + '~' +  '0~' +  '~' + "~"+ "0~~"+'~0~' + this.dtStart + '~' + this.dtStart + '~0~0';
            sessionStorage.setItem("sTempString", sTempString);

            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.get(_sBaseAddress + '/DUPSchedule/AdvSearchDUPSRS', { params: { sTemp: sTempString } }, config).then(
            //$http.post(_sBaseAddress + '/DUPSchedule/Refresh',JSON.stringify(obj)).then(
                function (response) {
                    debugger;
                    var results=(response.data);
                    if (results.Item1.length > 0)
                    {
                        $scope.DefaultgridOptions.data = results.Item1;
                        $scope.BuyergridOptions.data =results.Item2;
                        $scope.ExecutiongridOptions.data =results.Item3;
                        $scope.ProductgridOptions.data =results.Item4;
                    }
                    else {
                        msModal.Message({ headerTitle: '', bodyText: 'No Data Found !!', sucessText: ' Yes', cancelText: ' Close', feedbackType: false, autoClose: false });

                        return;
                    }
                },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage); }
            );
        }
        $scope.RefreshBuyer = function() {
            debugger;
            var obj= {
                StartTime : this.dtStart
            }
            $http.post(_sBaseAddress + '/DUPSchedule/Refresh',JSON.stringify(obj)).then(
                function (response) {
                    debugger;
                    var results=JSON.parse(response.data);
                    if (results.length > 0) {
                        $scope.BuyergridOptions.data= results;
                    }
                    else {
                        msModal.Message({ headerTitle: '', bodyText: 'No Data Found !!', sucessText: ' Yes', cancelText: ' Close', feedbackType: false, autoClose: false });

                        return;
                    }
                },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage); }
            );
        }
        $scope.RefreshExecution = function() {
            debugger;
            var obj= {
                StartTime : this.dtStart
            }
            $http.post(_sBaseAddress + '/DUPSchedule/Refresh',JSON.stringify(obj)).then(
                function (response) {
                    debugger;
                    var results=JSON.parse(response.data);
                    if (results.length > 0) {
                        $scope.ExecutiongridOptions.data= results;
                    }
                    else {
                        msModal.Message({ headerTitle: '', bodyText: 'No Data Found !!', sucessText: ' Yes', cancelText: ' Close', feedbackType: false, autoClose: false });

                        return;
                    }
                },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage); }
            );
        }
        $scope.RefreshProduct = function() {
            debugger;
            var obj= {
                StartTime : this.dtStart
            }
            $http.post(_sBaseAddress + '/DUPSchedule/Refresh',JSON.stringify(obj)).then(
                function (response) {
                    debugger;
                    var results=JSON.parse(response.data);
                    if (results.length > 0) {
                        $scope.ProductgridOptions.data= results;
                    }
                    else {
                        msModal.Message({ headerTitle: '', bodyText: 'No Data Found !!', sucessText: ' Yes', cancelText: ' Close', feedbackType: false, autoClose: false });

                        return;
                    }
                },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage); }
            );
        }


        //TAb selection
        this.tab = 1;
        this.SetTab = function (tabId)
        {

            this.tab = tabId;
        }
        this.IsSet = function (tabid)
        {

            return this.tab === tabid;
        }
        //this.PINo =this.LCNo =this.LDBCNo = "";
        ////$scope.sPINo =  this.PINo;

        $scope.initializeDatepicker  =function(){
            $('.date-container').datepicker({
                format: "dd M yyyy",
                calendarWeeks: true,
                autoclose: true,
                todayHighlight: true
            });
        };

        $scope.reset = function () {
            debugger;
            $scope.dtStart=icsdateformat(new Date());
        }
        $scope.reset();

    });

</script>




