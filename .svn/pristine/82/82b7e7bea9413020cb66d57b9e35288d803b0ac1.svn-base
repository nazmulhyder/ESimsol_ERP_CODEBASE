@{
    ViewBag.Title = "POS Sale";
}
@model ESimSol.BusinessObjects.TradingSaleInvoice
<div id="progbarParent" style="width:100%;height:100%;margin:0 auto;text-align:center; margin-left: auto;margin-right: auto;left: 0;right: 0;z-index: 1;">
    <div style="margin: 0px auto;margin-top: 251px;text-align:center;width:390px;">
        <label style="font-size:18px;">Please wait</label>
        <div id="progbar" style="width:100%;height:37px;"></div>
    </div>
</div>
<div class="menuMainCollectionTable">
    <div id="divTradingSaleInvoice" style="float:left; width:32%">
        <fieldset class="main-field">
            <legend>Sale Info</legend>
            <table class="tbl">
                <tr>
                    <td class="td-col-8 align-right"><label>Invoice No</label></td>
                    <td colspan="3" class="td-col-12">
                        <input type="text" id="txtInvoiceNo" class="cls-disabled" disabled />
                        <a id="btnPickTradingSaleInvoice" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-pick" plain="false"></a>
                    </td>
                </tr>
                <tr class="date">
                    <td class="td-col-8 align-right"><label>Invoice Date</label></td>
                    <td colspan="3" class="td-col-12"> <input id="dtInvoiceDate" type="text" style="width:100%;" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser" /> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>Customer</label></td>
                    <td colspan="3" class="td-col-12"> <input type="text" id="txtBuyerName" placeholder="Search Buyer" /> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>Address</label></td>
                    <td colspan="3" class="td-col-12"> <input type="text" id="txtAddress" /> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>Contact No</label></td>
                    <td colspan="3" class="td-col-12"> <input type="text" id="txtContactNo" /> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>Gross Amt.</label> <label class="default-currency"></label></td>
                    <td colspan="3" class="td-col-12"> <input type="text" class="number font-bold cls-disabled" id="txtGrossAmount" disabled /> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>Less Amt.</label><label class="default-currency"></label></td>
                    <td class="td-col-5"> <input type="text" class="number" id="txtLessAmount" /> </td>
                    <td class="td-col-2 align-right"> <label>(%)</label> </td>
                    <td class="td-col-5"> <input type="text" class="number" id="txtLessAmountInPercent" tabindex="-1" /> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>Vat</label><label class="default-currency"></label></td>
                    <td class="td-col-5"> <input type="text" class="number" id="txtVatAmount" /> </td>
                    <td class="td-col-2 align-right"> <label>(%)</label> </td>
                    <td class="td-col-5"> <input type="text" class="number" id="txtVatAmountInPercent" tabindex="-1" /> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>Service Charge</label><label class="default-currency"></label></td>
                    <td class="td-col-5"> <input type="text" class="number" id="txtServiceCharge" /> </td>
                    <td class="td-col-2 align-right"> <label>(%)</label> </td>
                    <td class="td-col-5"> <input type="text" class="number" id="txtServiceChargeInPercent" tabindex="-1" /> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>Net Payable</label><label class="default-currency"></label></td>
                    <td colspan="3" class="td-col-12"> <input type="text" class="number font-bold cls-disabled" style="font-size:20px; background-color:cyan" id="txtNetAmount" disabled /> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>ATM Card Name</label></td>
                    <td colspan="3" class="td-col-12"> <select id="cboATMCard"></select> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>Card No</label></td>
                    <td colspan="3" class="td-col-12"> <input type="text" id="txtCardNo" placeholder="ATM Card No" /> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>Card Receive</label><label class="default-currency"></label></td>
                    <td colspan="3" class="td-col-12"> <input type="text" class="number" id="txtCardPaid" /> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>Cash Receive</label><label class="default-currency"></label></td>
                    <td colspan="3" class="td-col-12"> <input type="text" class="number" id="txtCashPaid" /> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>Total Receive</label><label class="default-currency"></label></td>
                    <td colspan="3" class="td-col-12"> <input type="text" id="txtTotalPaid" class="number font-bold cls-disabled" disabled /> </td>
                </tr>
                <tr>
                    <td class="td-col-8 align-right"><label>Change Amt.</label><label class="default-currency"></label></td>
                    <td colspan="3" class="td-col-12"> <input type="text" id="txtChangeAmount" class="number font-bold cls-disabled" disabled /> </td>
                </tr>
                <tr class="tr-sale">
                    <td class="td-col-8 align-right">
                        <button type="button" id="btnReset" class="button-styler">Reset</button>
                    </td>
                    <td colspan="3" class="td-col-12">
                        <button type="button" id="btnSale" class="button-styler">Sale Confirm</button>
                    </td>
                </tr>
                <tr class="tr-sale">
                    <td class="td-col-8 align-right userInfo"><label>Salesman</label></td>
                    <td colspan="3" class="td-col-12 userInfo">
                        <input type="text" id="txtSalesman" class="cls-disabled" disabled />
                    </td>
                </tr>
                <tr class="tr-sale">
                    <td class="td-col-8 align-right"><label>Cash Amount</label><label class="default-currency"></label></td>
                    <td colspan="3" class="td-col-12">
                        <input type="text" id="txtSaleAmount" class="cls-disabled align-right font-bold" disabled />
                    </td>
                </tr>
            </table>
        </fieldset>
    </div>
    <div style="float:left; width:68%; padding-top:7px;">
        <table id="tblTradingSaleInvoiceDetail" title="Item Description" class="easyui-datagrid" style="width:100%;height:555px"
               data-options="singleSelect: true, fitColumns:false, rownumbers:true,pagination:false,autoRowHeight:false,toolbar: '#toolbar',onClickRow: onClickRow ">
            <thead>
                <tr>
                    <th field="ProductCode" width="8%" align="left">Code</th>
                    <th field="ProductName" width="17%" align="left">Product Name</th>
                    <th field="Symbol" width="8%" align="left">Unit</th>
                    <th field="CurrentStock" width="10%" align="right" formatter="formatPrice">Stock Qty</th>
                    <th width="8%" data-options="field:'InvoiceQty',align:'right',editor:{type:'numberbox',options:{precision:2}}" formatter="formatPrice" align="right">Qty</th>
                    <th width="8%" data-options="field:'UnitPrice',align:'right',editor:{type:'numberbox',options:{precision:3}}" formatter="formatPrice" align="right">Price</th>
                    <th width="10%" data-options="field:'DiscountInPercentage',align:'right',editor:{type:'numberbox',options:{precision:2}}" formatter="formatPrice" align="right">Discount(%)</th>
                    <th field="Discount" width="8%" align="right" formatter="formatPrice">Discount</th>
                    <th field="Amount" width="10%" align="right" formatter="formatPrice">Value</th>
                    <th field="NetAmount" width="11%" align="right" formatter="formatPrice">Net Amount</th>
                </tr>
            </thead>
        </table>
        <div id="toolbar" style=" height:25px">
            <input type="text" id="txtBarCode" class="new-add" placeholder="Search by Barcode" style="width: 20%" />
            <input type="text" id="txtProductName" class="new-add" placeholder="Search by Product Name/ Code" style="width: 30%" />
            <a id="btnRemove" href="javascript:void(0)" class="easyui-linkbutton new-add" iconcls="icon-remove" plain="true">Remove</a>
            <a id="btnRefresh" href="javascript:void(0)" class="easyui-linkbutton new-add" iconcls="icon-reload" plain="true">Refresh</a>
            <a id="btnPrintPos" href="javascript:void(0)" class="easyui-linkbutton new-add" iconcls="icon-print" plain="true">Print</a>
        </div>
    </div>

    <div id="winTradingSaleInvoice" class="easyui-window" title="Sale Invoice List" data-options="modal:true,closed:true,collapsible:false,minimizable:false,maximizable:false,closable:false">
        <fieldset>
            <table class="tbl-InvoiceSearch" cellpadding="0" cellspacing="0" style="text-align:center;">
                <tr>
                    <td class="td-col-3 align-right">
                        <select id="cboInvoiceDate"></select>
                    </td>
                    <td class="td-col-12 align-left">
                        <span style="padding-left:10px;"></span>
                        <input id="dtInvoiceDateFrom" type="text" style="width:110px;" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser" />
                        <span>To</span>
                        <input id="dtInvoiceDateTo" type="text" style="width:110px;" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser" />
                    </td>
                    <td class="td-col-5 align-right">
                        <input id="txtTradingSaleInvoiceSearch" class="reset-text" placeholder="Sale Invoice No" />
                    </td>
                </tr>
                <tr>
                    <td colspan="2" class="td-col-15 align-right">
                        <input id="txtBuyerSearch" class="reset-text" placeholder="Pick or Search Buyer" />
                    </td>
                    <td class="td-col-5 align-left">
                        <span style="padding-left:10px;"></span>
                        <a id="btnPickBuyerSearch" href="javascript:void(0)" class="easyui-linkbutton ics-pick" iconcls="icon-pick" plain="true"></a>
                        <a id="btnResetBuyerSearch" href="javascript:void(0)" class="easyui-linkbutton ics-pick" iconcls="icon-clear" plain="true"></a>
                        <a id="btnSearchInvoice" href="javascript:void(0)" class="easyui-linkbutton ics-pick" iconcls="icon-search" plain="true"></a>
                    </td>
                </tr>
                <tr>
                    <td colspan="3" class="td-col-20">
                        <table id="tblTradingSaleInvoices" title="Item Description" class="easyui-datagrid" style="width:100%;height:300px"
                               data-options="singleSelect: true, fitColumns:false, rownumbers:true,pagination:false,autoRowHeight:false">
                            <thead>
                                <tr>
                                    <th field="InvoiceNo" width="90">Invoice No</th>
                                    <th field="InvoiceDateInString" width="90">Invoice Date</th>
                                    <th field="BuyerName" width="130">Buyer</th>
                                    <th field="CurrencyName" width="60">Currency</th>
                                    <th field="GrossAmount" width="100" formatter="formatPrice" align="right">Gross Amount</th>
                                </tr>
                            </thead>
                        </table>
                    </td>
                </tr>
            </table>
        </fieldset>
        <fieldset class="actionfieldsetstyle">
            <legend>Actions : </legend>
            <div style="text-align:right;">
                <a id="btnOkTradingSaleInvoice" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-ok" plain="true">Ok</a>
                <a id="btnCloseTradingSaleInvoice" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="true">Close</a>
            </div>
        </fieldset>
    </div>
</div>

<style type="text/css">
    .tbl {
        height: 100%;
        width: 100%;
    }

    .main-field {
        min-height: 547px;
    }

    .td-col-8 label {
        width: 100%;
    }

    .td-col-12 input {
        width: 94%;
    }

    .td-col-12 select {
        width: 97%;
    }

    .td-col-5 input {
        width: 84%;
    }

    .td-col-12 .button-styler {
        width: 97%;
    }

    .userInfo {
        padding-top: 10px;
    }

    .font-bold {
        font-weight: bold;
    }

    .button-styler {
        background-color: #4CAF50; /* Green */
        border: none;
        color: white;
        padding: 5px 30px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 14px;
        cursor: pointer;
    }

    #txtInvoiceNo {
        width: 76%;
    }

    #winTradingSaleInvoice {
        width: 500px;
    }

        #winTradingSaleInvoice .tbl-InvoiceSearch {
            width: 100%;
        }

        #winTradingSaleInvoice .td-col-15 input {
            width: 100%;
        }

        #winTradingSaleInvoice .td-col-5 input {
            width: 95%;
        }

        #winTradingSaleInvoice .td-col-3 input, select {
            width: 100%;
        }
</style>

<script type="text/javascript">

    var _sBaseAddress="";
    var _oTradingSaleInvoice=null;

    $(document).ready(function () {
        _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
        _oTradingSaleInvoice =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
        var oDateCompareOperatorObjs =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.DateCompareOperatorObjs));
        var nBUID = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BUID));
        var nSalesmanID = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.SalesmanID));
        var nSalesAmount = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.SalesAmount));
        var oBU = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BusinessUnit));
        var oATMCards = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.ATMCards));
        $('.number').icsCurrencyBox();
        $('#divTradingSaleInvoice').data('BUID', nBUID);
        $('#divTradingSaleInvoice').data('CurrencyID', _oTradingSaleInvoice.CurrencyID);
        $('#divTradingSaleInvoice').data('CurrencySymbol', _oTradingSaleInvoice.CurrencySymbol);
        $('.default-currency').text(" ("+_oTradingSaleInvoice.CurrencySymbol+")")


        $('#txtBuyerName').data('DefaultBuyerID',oBU.BuyerID);
        $('#txtBuyerName').data('BuyerName',oBU.BuyerName);
        $('#txtAddress').data('BuyerAddress',oBU.BuyerAddress);
        $('#txtContactNo').data('BuyerContactNo',oBU.BuyerContactNo);

        $('#txtSalesman').data('SalesmanID',nSalesmanID);
        $('#txtSalesman').data('SalesmanName',_oTradingSaleInvoice.SalesmanName);
        $('#txtSaleAmount').data('SalesAmount', parseFloat(nSalesAmount));


        $("#cboATMCard").icsLoadCombo({
            List: oATMCards,
            OptionValue: "ATMCardID",
            DisplayText: "ATMCardName",
            InitialValue:"Default"
        });

        ResetControll();

        $("#cboInvoiceDate").icsLoadCombo({ List: oDateCompareOperatorObjs, OptionValue: "Id", DisplayText: "Value" });
        $("#progbar").progressbar({ value: 0 });
        $("#progbarParent").hide();
    });
    $(document).keydown(function (e) { if (e.keyCode == 27) { $('#div').icsWindow('close'); } });

    function updateProgress() {
        var value =$('#progbar').progressbar('getValue');
        if (value < 96){
            value += Math.floor(Math.random() * 10);
            $('#progbar').progressbar('setValue', value);
        }
    }

    function hideShow(miliseconds) {
        $("#progbarParent").hide();
    }

    function ResetControll(){
        debugger;
        _oTradingSaleInvoice=null;
        $('#btnReset').html("Reset");
        $('#btnSale, .new-add').show();
        $('#btnPrintPos').hide();
        $('.tbl input').not('.date input').val("");
        $('.tbl input,select').not('.cls-disabled').prop('disabled',false);
        $('#dtInvoiceDate').datebox({'disabled': false });
        $('#dtInvoiceDate').datebox('setValue', icsdateformat(new Date()));


        $('#txtBuyerName').data('BuyerID',parseInt($('#txtBuyerName').data('DefaultBuyerID')));
        $('#txtBuyerName').val($('#txtBuyerName').data('BuyerName'));
        $('#txtAddress').val($('#txtAddress').data('BuyerAddress'));
        $('#txtContactNo').val($('#txtContactNo').data('BuyerContactNo'));
        if(parseInt($('#txtBuyerName').data('DefaultBuyerID'))>0){
            $('#txtBuyerName').addClass('fontColorOfPickItem');
            LoadContactPerson(parseInt($('#txtBuyerName').data('DefaultBuyerID')));
        }
        else{
            $('#txtBuyerName').removeClass('fontColorOfPickItem');
        }
        $('cboATMCard').val(0);
        $('#txtSalesman').val($('#txtSalesman').data('SalesmanName'));
        $('#txtSaleAmount').val(formatPrice(parseFloat($('#txtSaleAmount').data('SalesAmount'))));

        if(parseInt($('#txtSalesman').data('SalesmanID'))<=0){
            $('.tr-sale').hide();
        }

        $('#txtBarCode,#txtProductName, #txtProductCode').val("");
        $('#txtProductName').data('Product', null);
        DynamicRefreshList([],'tblTradingSaleInvoiceDetail');
        editIndex = undefined;
        $('#txtBarCode').focus();
    }

    function RefreshControll(oTradingSaleInvoice){

        $('.tbl input,select').prop("disabled", true);
        $('#dtInvoiceDate').datebox({'disabled': true });
        _oTradingSaleInvoice=oTradingSaleInvoice;
        $('#txtInvoiceNo').val(oTradingSaleInvoice.InvoiceNo);
        $('#dtInvoiceDate').datebox('setValue',oTradingSaleInvoice.InvoiceDateInString)
        $('#txtBuyerName').val(oTradingSaleInvoice.BuyerName);
        $('#txtAddress').val(oTradingSaleInvoice.BuyerAddress);
        $('#txtContactNo').val(oTradingSaleInvoice.BuyerPhone);
        LoadContactPerson(oTradingSaleInvoice.BuyerID);
        $('#txtInvoiceNo').val(oTradingSaleInvoice.InvoiceNo);
        $('#txtGrossAmount').val(formatPrice(oTradingSaleInvoice.GrossAmount));
        $('#txtLessAmount').val(formatPrice(oTradingSaleInvoice.DiscountAmount));
        $('#txtVatAmount').val(formatPrice(oTradingSaleInvoice.VatAmount));
        $('#txtServiceCharge').val(formatPrice(oTradingSaleInvoice.ServiceCharge));
        $('#txtNetAmount').val(formatPrice(oTradingSaleInvoice.NetAmount));
        $('#cboATMCard').val(oTradingSaleInvoice.ATMCardID);
        $('#txtCardNo').val(oTradingSaleInvoice.CardNo);
        $('#txtCardPaid').val(formatPrice(oTradingSaleInvoice.CardPaid));
        $('#txtCashPaid').val(formatPrice(oTradingSaleInvoice.CashPaid));
        $('#txtTotalPaid').val(formatPrice(parseFloat(oTradingSaleInvoice.CardPaid) + parseFloat(oTradingSaleInvoice.CashPaid)));
        $('#txtChangeAmount').val(formatPrice(formatPrice((parseFloat(oTradingSaleInvoice.CardPaid) + parseFloat(oTradingSaleInvoice.CashPaid)) - parseFloat(oTradingSaleInvoice.NetAmount))));

        $('#txtLessAmountInPercent').val(icsFormatPrice((parseFloat(oTradingSaleInvoice.DiscountAmount) * 100) / parseFloat(oTradingSaleInvoice.GrossAmount)));
        $('#txtVatAmountInPercent').val(icsFormatPrice((parseFloat(oTradingSaleInvoice.VatAmount) * 100) / parseFloat(oTradingSaleInvoice.GrossAmount)));
        $('#txtServiceChargeInPercent').val(icsFormatPrice((parseFloat(oTradingSaleInvoice.ServiceCharge) * 100) / parseFloat(oTradingSaleInvoice.GrossAmount)));

        DynamicRefreshList(oTradingSaleInvoice.TradingSaleInvoiceDetails,'tblTradingSaleInvoiceDetail');

        $('.new-add').hide();
        $('#btnSale').hide();
        $('#btnPrintPos').show();
        $('#btnReset').html("New");
    }

    function RefreshSummery() {

        var nGrossAmount = 0; var nDisCountAmount = 0; var nVatAmount =0; var nServiceCharge = 0; var nNetAmount = 0;
        var oTradingSaleInvoiceDetails = $('#tblTradingSaleInvoiceDetail').datagrid('getRows');
        for (var i = 0; i < oTradingSaleInvoiceDetails.length; i++) {
            nGrossAmount = nGrossAmount + parseFloat(oTradingSaleInvoiceDetails[i].NetAmount);
        }
        nDisCountAmount = parseFloat(icsRemoveComma($('#txtLessAmount').val()));
        nVatAmount = parseFloat(icsRemoveComma($('#txtVatAmount').val()));
        nServiceCharge = parseFloat(icsRemoveComma($('#txtServiceCharge').val()));
        nNetAmount = ((nGrossAmount + nVatAmount + nServiceCharge) - nDisCountAmount);

        $('#txtGrossAmount').val(icsFormatPrice(nGrossAmount));
        //$('#txtLessAmount').val(icsFormatPrice(nDisCountAmount));
        //$('#txtVatAmount').val(icsFormatPrice(nVatAmount));
        //$('#txtServiceCharge').val(icsFormatPrice(nServiceCharge));

        $('#txtNetAmount').val(icsFormatPrice(nNetAmount));
    }

    function RefreshList(oTradingSaleInvoiceDetails) {
        data = oTradingSaleInvoiceDetails;
        data = { "total": "" + data.length + "", "rows": data };
        $('#tblTradingSaleInvoiceDetail').datagrid('loadData', data);
        RefreshSummery();
    }


    $("#btnRefresh").click(function () {
        endEditing();
        data = $('#tblTradingSaleInvoiceDetail').datagrid('getRows');
        data = { "total": "" + data.length + "", "rows": data };
        $('#tblTradingSaleInvoiceDetail').datagrid('loadData', data);
        RefreshSummery();
    });

    $("#btnRemove").click(function () {
        var oTradingSaleInvoiceDetail = $('#tblTradingSaleInvoiceDetail').datagrid('getSelected');
        if (oTradingSaleInvoiceDetail == null) {
            alert("Please select a item from list!");
            return;
        }
        var conf = confirm("Confirm to delete?");
        if (conf == false) return;

        endEditing();
        var SelectedRowIndex = $('#tblTradingSaleInvoiceDetail').datagrid('getRowIndex', oTradingSaleInvoiceDetail);
        $('#tblTradingSaleInvoiceDetail').datagrid('deleteRow', SelectedRowIndex);

        var oTradingSaleInvoiceDetails = $('#tblTradingSaleInvoiceDetail').datagrid('getRows');
        RefreshList(oTradingSaleInvoiceDetails);
    });

    function AddItem()
    {
        if (!ValidateTradingSaleInvoiceDetail()) return;

        var oProduct = $('#txtProductName').data('Product');
        oProduct.BUID= parseInt($('#divTradingSaleInvoice').data('BUID'));

        var obj={
            BaseAddress: sessionStorage.getItem("BaseAddress"),
            Object: oProduct,
            ControllerName: "Product",
            ActionName: "GetStockQuantity",
            IsWinClose: false
        };

        $.icsDataGet(obj, function (response){
            debugger;
            if (response.status) {
                var nInvoiceQty=1;
                var nUnitPrice=oProduct.SalePrice;

                var hasProduct=false;
                var oTradingSaleInvoiceDetail=null;
                var oTradingSaleInvoiceDetails = $('#tblTradingSaleInvoiceDetail').datagrid('getRows');
                for (var i = 0; i < oTradingSaleInvoiceDetails.length; i++) {
                    if (parseInt(oTradingSaleInvoiceDetails[i].ProductID) == parseInt(oProduct.ProductID)) {
                        oTradingSaleInvoiceDetail=oTradingSaleInvoiceDetails[i];
                        hasProduct=true;
                        break;
                    }
                }
                if(hasProduct){
                    var nIndex=$('#tblTradingSaleInvoiceDetail').datagrid('getRowIndex',oTradingSaleInvoiceDetail);
                    nInvoiceQty = parseFloat(nInvoiceQty)+parseFloat(oTradingSaleInvoiceDetail.InvoiceQty);
                    var nAmount= parseFloat(nInvoiceQty) * parseFloat(oTradingSaleInvoiceDetail.UnitPrice);
                    oTradingSaleInvoiceDetail.InvoiceQty= parseFloat(nInvoiceQty);
                    oTradingSaleInvoiceDetail.Discount= parseFloat(parseFloat(oTradingSaleInvoiceDetail.DiscountInPercentage)/100);
                    oTradingSaleInvoiceDetail.Amount= parseFloat(nAmount);
                    oTradingSaleInvoiceDetail.NetAmount= parseFloat(nAmount) - parseFloat(nAmount*oTradingSaleInvoiceDetail.Discount) ;
                    oTradingSaleInvoiceDetail.CurrentStock = parseFloat(response.obj);
                    $('#tblTradingSaleInvoiceDetail').datagrid('updateRow', { index: nIndex, row: oTradingSaleInvoiceDetail });
                    onClickRow(nIndex);
                }
                else{
                    var oTradingSaleInvoiceDetail = {
                        TradingSaleInvoiceDetailID: 0,
                        TradingSaleInvoiceID: 0,
                        ProductID: oProduct.ProductID,
                        ItemDescription: "",
                        MeasurementUnitID: oProduct.MeasurementUnitID,
                        InvoiceQty: nInvoiceQty,
                        UnitPrice: nUnitPrice,
                        Discount : 0,
                        DiscountInPercentage : 0,
                        Amount: (nInvoiceQty * nUnitPrice),
                        NetAmount : (nInvoiceQty * nUnitPrice),
                        ProductCode: oProduct.ProductCode,
                        ProductName: oProduct.ProductName,
                        UnitName: oProduct.MUnitName,
                        Symbol: oProduct.MUnit,
                        CurrentStock: parseFloat(response.obj),
                        ProductCategoryName: oProduct.ProductCategoryName
                    };
                    $('#tblTradingSaleInvoiceDetail').datagrid('appendRow', oTradingSaleInvoiceDetail);
                    onClickRow($('#tblTradingSaleInvoiceDetail').datagrid('getRows').length-1);
                }
                endEditing();
            }
            else{
                alert("Invalid Item");
            }

        });
    }

    function ValidateTradingSaleInvoiceDetail() {
        var oProduct = $('#txtProductName').data('Product');
        if (oProduct == null || parseInt(oProduct.ProductID) <= 0) {
            alert("Please Pick Product!");
            $('#txtProductName').focus();
            return false;
        }

        return true;
    }



    function ValidateInput() {
        if(parseInt($('#divTradingSaleInvoice').data('BUID'))<=0)
        {
            alert("Invalid Business Unit!");
            return false;
        }
        var dtInvoiceDate = $('#dtInvoiceDate').datebox('getValue');
        if (dtInvoiceDate == null || dtInvoiceDate == "") {
            alert("Please enter Invocie Date!");
            $('#dtInvoiceDate').select().focus();
            return false;
        }
        if ($('#divTradingSaleInvoice').data('CurrencyID') === null ||  parseInt($('#divTradingSaleInvoice').data('CurrencyID')) <=0) {
            alert("Please configure your default currency!");
            return false;
        }

        var nBuyerID = parseInt($('#txtBuyerName').data('BuyerID'));
        if (nBuyerID <= 0) {
            var sBuyerName = $.trim($('#txtBuyerName').val());
            if(sBuyerName===null || sBuyerName==="")
            {
                alert("Please enter Buyer Name!");
                $('#txtBuyerName').select().focus();
                return false;
            }
        }

        var oTradingSaleInvoiceDetails = $('#tblTradingSaleInvoiceDetail').datagrid('getRows');
        if (oTradingSaleInvoiceDetails == null || oTradingSaleInvoiceDetails.length <= 0) {
            alert("Please enter at least one item!");
            return false;
        }

        for (var i = 0; i < oTradingSaleInvoiceDetails.length; i++) {
            if (parseFloat(oTradingSaleInvoiceDetails[i].CurrentStock) < parseFloat(oTradingSaleInvoiceDetails[i].InvoiceQty)) {
                alert("Stock not available for : " + oTradingSaleInvoiceDetails[i].ProductName);

                return false;
            }
            if (parseFloat(oTradingSaleInvoiceDetails[i].InvoiceQty) <= 0) {
                alert("Invoice Quantity Should be greater than 0 for  : " + oTradingSaleInvoiceDetails[i].ProductName);
                onClickRow(i);
                return false;
            }
            if (parseFloat(oTradingSaleInvoiceDetails[i].UnitPrice) <= 0) {
                alert("Unit price Should be greater than 0 for : " + oTradingSaleInvoiceDetails[i].ProductName);
                onClickRow(i);
                return false;
            }

        }
        var nNetAmount =parseFloat(icsRemoveComma($('#txtNetAmount').val()));
        if (nNetAmount <= 0) {
            alert("Please enter Net Amount!");
            $('#txtNetAmount').select().focus();
            return false;
        }


        if(($.trim($('#txtCardNo').val())!='' || parseFloat(icsRemoveComma($('#txtCardPaid').val()))>0) && $('#cboATMCard').val()<=0){
            alert("Please select ATM card.!");
            $('#cboATMCard').select().focus();
            return false;
        }

        if($('#cboATMCard').val()>0 && parseFloat(icsRemoveComma($('#txtCardPaid').val()))>0 && $.trim($('#txtCardNo').val())==''){
            alert("Please enter card no!");
            $('#txtCardNo').select().focus();
            return false;
        }

        if($('#cboATMCard').val()>0  && $.trim($('#txtCardNo').val())!='' && parseFloat(icsRemoveComma($('#txtCardPaid').val()))<=0){
            alert("Please enter card paid amount!");
            $('#txtCardPaid').select().focus();
            return false;
        }

        if(($('#cboATMCard').val()>0  && $.trim($('#txtCardNo').val())!='' && parseFloat(icsRemoveComma($('#txtCardPaid').val()))>0)>0 && parseFloat(icsRemoveComma($('#txtCardPaid').val())) > parseFloat(icsRemoveComma($('#txtNetAmount').val()))){
            alert("Card paid amount must be less or equal to "+ $('#divTradingSaleInvoice').data('CurrencySymbol') +" "+  $('#txtNetAmount').val() +"");
            $('#txtCardPaid').select().focus();
            return false;
        }

        if(parseFloat(icsRemoveComma($('#txtCashPaid').val()))<0){
            alert("Cash paid amount must be greater than zero.!");
            $('#txtCashPaid').select().focus();
            return false;
        }


        if(parseFloat(icsRemoveComma($('#txtNetAmount').val())) > parseFloat(icsRemoveComma($('#txtTotalPaid').val()))){
            alert("Received amount must be grater than net payable amount.!");
            $('#txtCashPaid').select().focus();
            return false;
        }
        return true;
    }



    function RefreshObject() {
        var oTradingSaleInvoice = {
            TradingSaleInvoiceID: (_oTradingSaleInvoice==null || _oTradingSaleInvoice.TradingSaleInvoiceID<=0)? 0 :_oTradingSaleInvoice.TradingSaleInvoiceID,
            BUID : parseInt($('#divTradingSaleInvoice').data('BUID')),
            InvoiceNo: $.trim($('#txtInvoiceNo').val()),
            InvoiceDate: $('#dtInvoiceDate').datebox('getValue'),
            BuyerID: parseInt($('#txtBuyerName').data('BuyerID')),
            ContactPersonID: parseInt($('#txtBuyerName').data('ContactPersonID')),
            CurrencyID: parseInt($('#divTradingSaleInvoice').data('CurrencyID')),
            Note: $.trim($('#txtNote').val()),
            ApprovedBy: (_oTradingSaleInvoice==null || _oTradingSaleInvoice.TradingSaleInvoiceID<=0)? 0 : _oTradingSaleInvoice.ApprovedBy,
            GrossAmount: parseFloat(icsRemoveComma($('#txtGrossAmount').val())),
            DiscountAmount: parseFloat(icsRemoveComma($('#txtLessAmount').val())),
            VatAmount: parseFloat(icsRemoveComma($('#txtVatAmount').val())),
            ServiceCharge: parseFloat(icsRemoveComma($('#txtServiceCharge').val())),
            NetAmount: parseFloat(icsRemoveComma($('#txtNetAmount').val())),
            TradingSaleInvoiceDetails: $('#tblTradingSaleInvoiceDetail').datagrid('getRows'),
            CardNo :  (($('#cboATMCard').val()>0  && $.trim($('#txtCardNo').val())!='' && parseFloat(icsRemoveComma($('#txtCardPaid').val()))>0)? $.trim($('#txtCardNo').val()) : ''),
            CardPaid: (($('#cboATMCard').val()>0  && $.trim($('#txtCardNo').val())!='' && parseFloat(icsRemoveComma($('#txtCardPaid').val()))>0)? parseFloat(icsRemoveComma($('#txtCardPaid').val())) : 0),
            CashPaid: parseFloat(icsRemoveComma($('#txtCashPaid').val())),
            ATMCardID : (($('#cboATMCard').val()>0  && $.trim($('#txtCardNo').val())!='' && parseFloat(icsRemoveComma($('#txtCardPaid').val()))>0)? $('#cboATMCard').val(): 0),
            BuyerName : $.trim($('#txtBuyerName').val()),
            BuyerAddress : $.trim($('#txtAddress').val()),
            BuyerPhone : $.trim($('#txtContactNo').val())
        };
        return oTradingSaleInvoice;
    }

    $("#btnSale").click(function () {
        debugger;
        endEditing();
        if (!ValidateInput()) return;
        var oTradingSaleInvoice = RefreshObject();
        $.ajax({
            type: "POST",
            dataType: "json",
            url: sessionStorage.getItem("BaseAddress")+  "/TradingSaleInvoice/SavePosSale",
            traditional: true,
            data: JSON.stringify(oTradingSaleInvoice),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                oTradingSaleInvoice = jQuery.parseJSON(data);
                if (oTradingSaleInvoice.TradingSaleInvoiceID > 0) {
                    alert("Sold Sucessfully");
                    var nAmount = parseFloat($('#txtSaleAmount').data('SalesAmount')) +  (parseFloat(oTradingSaleInvoice.NetAmount) - parseFloat(oTradingSaleInvoice.CardPaid));
                    $('#txtSaleAmount').data('SalesAmount',nAmount)

                    ResetControll();
                    PrintPOS(oTradingSaleInvoice.TradingSaleInvoiceID);
                }
                else {
                    alert(oTradingSaleInvoice.ErrorMessage);
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });
    });

    $("#btnReset").click(function (){
        ResetControll();
    });


    var bDisCountInPercent = false;
    $("#txtLessAmount").on('change keyup paste', function() {
        if (bTotalDiscount) {
            bDisCountInPercent = false;
            return;
        }
        bDisCountInPercent = true;
        var nDiscountAmountInPercent = (parseFloat(icsRemoveComma($('#txtLessAmount').val())) * 100) / parseFloat(icsRemoveComma($('#txtGrossAmount').val()));
        $('#txtLessAmountInPercent').val(icsFormatPrice(nDiscountAmountInPercent));
        bDisCountInPercent = false;
        RefreshSummery();
    });

    var bTotalDiscount = false;
    $("#txtLessAmountInPercent").on('change keyup paste', function() {

        if (bDisCountInPercent) {
            bTotalDiscount = false;
            return;
        }
        bTotalDiscount = true;
        var nDisCountAmount = (parseFloat(icsRemoveComma($('#txtGrossAmount').val())) * parseFloat(icsRemoveComma($('#txtLessAmountInPercent').val())))/100;
        $('#txtLessAmount').val(icsFormatPrice(nDisCountAmount));
        bTotalDiscount = false;
        RefreshSummery();


    });

    var bVatInPercent = false;
    $("#txtVatAmount").on('change keyup paste', function() {
        if (bTotalVat) {
            bVatInPercent = false;
            return;
        }
        bVatInPercent = true;
        var nVatAmountInPercent = (parseFloat(icsRemoveComma($('#txtVatAmount').val())) * 100) / parseFloat(icsRemoveComma($('#txtGrossAmount').val()));
        $('#txtVatAmountInPercent').val(icsFormatPrice(nVatAmountInPercent));
        bVatInPercent = false;
        RefreshSummery();
    });

    var bTotalVat = false;
    $("#txtVatAmountInPercent").on('change keyup paste', function() {
        if (bVatInPercent) {
            bTotalVat = false;
            return;
        }
        bTotalVat = true;
        var nVatAmount = (parseFloat(icsRemoveComma($('#txtGrossAmount').val())) * parseFloat(icsRemoveComma($('#txtVatAmountInPercent').val())))/100;
        $('#txtVatAmount').val(icsFormatPrice(nVatAmount));
        bTotalVat = false;
        RefreshSummery();
    });

    var bServiceChargeInPercent = false;
    $("#txtServiceCharge").on('change keyup paste', function() {
        if (bTotalServiceCharge) {
            bServiceChargeInPercent = false;
            return;
        }
        bServiceChargeInPercent = true;
        var nServiceChargeInPercent = (parseFloat(icsRemoveComma($('#txtServiceCharge').val())) * 100) / parseFloat(icsRemoveComma($('#txtGrossAmount').val()));
        $('#txtServiceChargeInPercent').val(icsFormatPrice(nServiceChargeInPercent));
        bServiceChargeInPercent = false;
        RefreshSummery();

    });

    var bTotalServiceCharge = false;
    $("#txtServiceChargeInPercent").on('change keyup paste', function() {
        if (bServiceChargeInPercent) {
            bTotalServiceCharge = false;
            return;
        }
        bTotalServiceCharge = true;
        var nServiceChargeAmount = (parseFloat(icsRemoveComma($('#txtGrossAmount').val())) * parseFloat(icsRemoveComma($('#txtServiceChargeInPercent').val())))/100;
        $('#txtServiceCharge').val(icsFormatPrice(nServiceChargeAmount));
        bTotalServiceCharge = false;
        RefreshSummery();

    });

    function ChangeAmount(){
        var nAmount = parseFloat(icsRemoveComma($('#txtCardPaid').val())) + parseFloat(icsRemoveComma($('#txtCashPaid').val()));
        $('#txtTotalPaid').val(formatPrice(nAmount));

        var nChangeAmount = parseFloat(parseFloat(nAmount)-parseFloat(icsRemoveComma($('#txtNetAmount').val())));

        $('#txtChangeAmount').val((nChangeAmount<0)? "("+ formatPrice(nChangeAmount*-1) +")" : formatPrice(nChangeAmount));

    }

    $("#txtCardNo").on('change keyup paste', function() {
        ChangeAmount();
    });

    $("#txtCardPaid").on('change keyup paste', function() {
        ChangeAmount();
    });
    $("#txtCashPaid").on('change keyup paste', function() {
        ChangeAmount();
    });


    function LoadContactPerson(nContractorID) {
        $('#txtBuyerName').data('ContactPersonID',0);
        if (parseInt(nContractorID) > 0) {
            var oContractor = {
                ContractorID: nContractorID
            };
            $.ajax
            ({
                type: "POST",
                dataType: "json",
                url: sessionStorage.getItem("BaseAddress") + "/Contractor/GetContactPersonnels",
                data: JSON.stringify(oContractor),
                contentType: "application/json; charset=utf-8",
                success: function (data) {

                    var oContractorPersonals = jQuery.parseJSON(data);
                    if (oContractorPersonals.length > 0) {
                        if(_oTradingSaleInvoice!=null && _oTradingSaleInvoice.TradingSaleInvoiceID>0){
                            $('#txtBuyerName').data('ContactPersonID',((_oTradingSaleInvoice!=null && _oTradingSaleInvoice.TradingSaleInvoiceID>0)? _oTradingSaleInvoice.ContactPersonID :0));
                        }
                        else{
                            $('#txtBuyerName').data('ContactPersonID',oContractorPersonals[0].ContactPersonnelID);
                        }
                    }

                },
                error: function (xhr, status, error) {
                    alert(error);
                }

            });
        }
    }


    $("#txtBuyerName").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) // Enter Press
        {
            var nBUID = $('#divTradingSaleInvoice').data('BUID');
            var oContractor = { Params: 2 + '~' + $.trim($('#txtBuyerName').val())+'~'+ nBUID };//here 2 is Buyer
            var obj = {
                BaseAddress: sessionStorage.getItem("BaseAddress"),
                Object: oContractor,
                ControllerName: "Contractor",
                ActionName: "ContractorSearchByNameType",
                IsWinClose: false
            };
            $("#progbar").progressbar({ value: 0 });
            $("#progbarParent").show();
            var intervalID = setInterval(updateProgress, 250);
            $.icsDataGets(obj, function (response) {
                clearInterval(intervalID);
                $("#progbarParent").hide();
                if (response.status && response.objs.length > 0) {
                    if (response.objs[0].ContractorID > 0) {
                        var tblColums = []; var oColumn = { field: "Name", title: "Name", width: 200, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "Address", title: "Address", width: 120, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "Email", title: "Email", width: 90, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "Phone", title: "Phone Number", width: 110, align: "left" }; tblColums.push(oColumn);
                        var oPickerParam = {
                            winid: 'winBuyers',
                            winclass: 'clsBuyer',
                            winwidth: 600,
                            winheight: 460,
                            tableid: 'tblBuyers',
                            tablecolumns: tblColums,
                            datalist: response.objs,
                            multiplereturn: false,
                            searchingbyfieldName: 'Name',
                            windowTittle: 'Buyer List'
                        };
                        $.icsPicker(oPickerParam);
                        IntializePickerbutton(oPickerParam);
                    }
                    else { alert(response.objs[0].ErrorMessage); }
                }else{
                    alert("Data Not Found.");
                    return;
                }
            });
        }
        else if (code == 8) //backspace=8
        {
            $("#txtBuyerName").removeClass("fontColorOfPickItem");
            $('#txtBuyerName').data('BuyerID', 0);
            $('#txtBuyerName').data('ContactPersonID',0);

            if($('#txtBuyerName').val()==="")
            {
                $('#txtAddress').val('');
                $('#txtContactNo').val('');
            }
        }
    });

    $("#txtBarCode").keyup(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);

        if($.trim($("#txtBarCode").val()).length==7){
            var nBUID = $('#divTradingSaleInvoice').data('BUID');
            var oProduct = { BUID: nBUID, ProductName: $.trim($('#txtBarCode').val())};
            var obj = {
                BaseAddress: sessionStorage.getItem("BaseAddress"),
                Object: oProduct,
                ControllerName: "Product",
                ActionName: "SearchByProductBUWise",
                IsWinClose: false
            };
            $.icsDataGets(obj, function (response) {
                debugger;
                if (response.status && response.objs.length > 0) {
                    if (response.objs[0].ProductID >0) {

                        if(response.objs[0].ProductCode==$.trim($("#txtBarCode").val())){
                            $('#txtBarCode').addClass('fontColorOfPickItem');
                            $('#txtProductName').data('Product', response.objs[0]);
                            AddItem();
                            $('#txtBarCode').val('');
                        }
                        //else{
                        //    alert("Item doesn't not found.");
                        //}
                    }
                    else
                    {
                        alert(response.objs[0].ErrorMessage);
                    }

                }else{
                    alert("Data Not Found.");
                }
            });

        }
        else if(code == 8) //backspace=8
        {
            $("#txtBarCode").removeClass("fontColorOfPickItem");
            $('#txtProductName').data('Product', null);
        }
        else if (code == 13) {
            $('#txtBuyerName').focus();
        }
    });



    $("#txtProductName").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) // Enter Press
        {
            if($('#txtProductName').val()==null || $('#txtProductName').val()=="")
            {
                alert("Please Type Product and Press Enter.");
                $('#txtProductName').focus();
                return;
            }
            var nBUID = $('#divTradingSaleInvoice').data('BUID');
            var oProduct = { BUID: nBUID, ProductName: $.trim($('#txtProductName').val())};
            var obj = {
                BaseAddress: sessionStorage.getItem("BaseAddress"),
                Object: oProduct,
                ControllerName: "Product",
                ActionName: "SearchByProductBUWise",
                IsWinClose: false
            };
            $.icsDataGets(obj, function (response) {
                debugger;
                if (response.status && response.objs.length > 0) {
                    if (response.objs[0].ProductID > 0) {
                        var tblColums = [];
                        var oColumn = { field: "ProductCode", title: "Product Code", width: 75, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "ProductName", title: "Product Name", width: 190, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "MUnit", title: "Unit", width: 50, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "ShortName", title: "Short Name", width: 100, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "ProductCategoryName", title: "Category", width: 100, align: "left" }; tblColums.push(oColumn);
                        var oPickerParam = {
                            winid: 'winProductPicker',
                            winclass: 'clsProductPicker',
                            winwidth: 600,
                            winheight: 460,
                            tableid: 'tblProductPicker',
                            tablecolumns: tblColums,
                            datalist: response.objs,
                            multiplereturn: false,
                            searchingbyfieldName: 'NameCode',
                            windowTittle: 'Product List'
                        };
                        $.icsPicker(oPickerParam);
                        IntializePickerbutton(oPickerParam);
                    }
                    else {
                        alert(response.objs[0].ErrorMessage);
                    }

                }else{
                    alert("Data Not Found.");
                }
            });
        }
        else if(code == 8) //backspace=8
        {
            $("#txtProductName").removeClass("fontColorOfPickItem");
            $('#txtProductName').data('Product', null);
        }
    });

    function IntializePickerbutton(oPickerobj) {
        $("#" + oPickerobj.winid).find("#btnOk").click(function () {
            //for Single Select
            SetPickerValueAssign(oPickerobj);
        });
        $(document).find('.' + oPickerobj.winclass).keydown(function (e) {
            if (e.which == 13)//enter=13
            {
                SetPickerValueAssign(oPickerobj);
            }
        });
    }

    function SetPickerValueAssign(oPickerobj) {
        var oreturnObj = null, oreturnobjs = [];
        if (oPickerobj.multiplereturn) {
            oreturnobjs = $('#' + oPickerobj.tableid).datagrid('getChecked');
        } else {
            oreturnObj = $('#' + oPickerobj.tableid).datagrid('getSelected');
        }
        $("#" + oPickerobj.winid).icsWindow("close");
        $("#" + oPickerobj.winid).remove();
        $('#txtBuyerSearch').data('BuyerIDs','');
        if (oPickerobj.winid === 'winBuyers')
        {
            if (oreturnObj != null && parseInt(oreturnObj.ContractorID) > 0) {
                $('#txtBuyerName').val(oreturnObj.Name);
                $('#txtAddress').val(oreturnObj.Address);
                $('#txtContactNo').val(oreturnObj.Phone);
                $('#txtBuyerName').addClass('fontColorOfPickItem');
                $('#txtBuyerName').data('BuyerID', parseInt(oreturnObj.ContractorID));
                LoadContactPerson(parseInt(oreturnObj.ContractorID));
                $('#txtBarCode').focus();
            }
        }
        if (oPickerobj.winid === 'winBuyerSearch')
        {
            if (oreturnobjs != null && oreturnobjs.length>0 && parseInt(oreturnobjs[0].ContractorID) > 0) {

                $('#txtBuyerSearch').val(((oreturnobjs.length>1)? oreturnobjs.length +" Buyers Selected." : oreturnobjs[0].Name));
                $('#txtBuyerSearch').addClass('fontColorOfPickItem');
                var Ids="";
                for(i=0;i<oreturnobjs.length;i++){
                    Ids+=oreturnobjs[i].ContractorID+',';
                }
                Ids=Ids.substring(0,Ids.length-1);
                $('#txtBuyerSearch').data('BuyerIDs', Ids);
                $('#txtBuyerSearch').focus();
            }
        }
        else if (oPickerobj.winid == 'winProductPicker')
        {
            if (oreturnObj != null && parseInt(oreturnObj.ProductID) > 0)
            {
                $('#txtProductName').val(oreturnObj.ProductName);
                $('#txtProductName').addClass('fontColorOfPickItem');
                $('#txtProductName').data('Product', oreturnObj);
                endEditing();
                AddItem();
                $('#txtProductName').val('');
                //LoadMeasurementUnit(parseInt(oreturnObj.ProductID), oreturnObj);
            }
        }
    }


    var editIndex = undefined;

    function endEditing() {
        debugger;
        if (editIndex == undefined) { return true }
        if ($('#tblTradingSaleInvoiceDetail').datagrid('validateRow', editIndex)) {
            $('#tblTradingSaleInvoiceDetail').datagrid('endEdit', editIndex);
            $('#tblTradingSaleInvoiceDetail').datagrid('selectRow', editIndex);
            var oTradingSaleInvoiceDetail = $('#tblTradingSaleInvoiceDetail').datagrid('getSelected');
            oTradingSaleInvoiceDetail.Amount = parseFloat(parseFloat(oTradingSaleInvoiceDetail.InvoiceQty) * parseFloat(oTradingSaleInvoiceDetail.UnitPrice));
            oTradingSaleInvoiceDetail.Discount = parseFloat((parseFloat(oTradingSaleInvoiceDetail.Amount)*parseFloat(oTradingSaleInvoiceDetail.DiscountInPercentage)/100).toFixed(2));
            oTradingSaleInvoiceDetail.NetAmount= parseFloat(oTradingSaleInvoiceDetail.Amount)-parseFloat(oTradingSaleInvoiceDetail.Discount);
            $('#tblTradingSaleInvoiceDetail').datagrid('updateRow', { index: editIndex, row: oTradingSaleInvoiceDetail });
            RefreshSummery();
            editIndex = undefined;
            return true;
        } else {
            return false;
        }
    }

    function onClickRow(index) {

        if (editIndex != index) {
            if (endEditing()) {
                $('#tblTradingSaleInvoiceDetail').datagrid('selectRow', index)
                        .datagrid('beginEdit', index);
                editIndex = index;
            } else {
                $('#tblTradingSaleInvoiceDetail').datagrid('selectRow', editIndex);
            }
        }
    }

    $('#cboInvoiceDate').change(function(e){
        //EqualTo = 1, NotEqualTo = 2, GreaterThen = 3, SmallerThen = 4, Between = 5, NotBetween = 6
        var nCompareOperator =   parseInt($('#cboInvoiceDate').val());
        if(nCompareOperator===0)
        {
            $('#dtInvoiceDateFrom').datebox({ disabled : true });
            $('#dtInvoiceDateTo').datebox({ disabled : true });
        }
        else if (nCompareOperator===1 || nCompareOperator===2 || nCompareOperator===3 || nCompareOperator===4)
        {
            $('#dtInvoiceDateFrom').datebox({ disabled : false });
            $('#dtInvoiceDateTo').datebox({ disabled : true });
        }
        else
        {
            $('#dtInvoiceDateFrom').datebox({ disabled : false });
            $('#dtInvoiceDateTo').datebox({ disabled : false });
        }
        $('#dtInvoiceDateFrom').datebox('setValue', icsdateformat(new Date()));
        $('#dtInvoiceDateTo').datebox('setValue', icsdateformat(new Date()));
    });

    function ResetTradingSaleInvoice(){
        $('#cboInvoiceDate').val(0);
        $('#dtInvoiceDateFrom').datebox('setValue', icsdateformat(new Date()));
        $('#dtInvoiceDateTo').datebox('setValue', icsdateformat(new Date()));
        $('#txtTradingSaleInvoiceSearch').val('');
        $('#txtBuyerSearch').data('BuyerIDs','');
        $('#txtBuyerSearch').val('');
        $("#txtBuyerSearch").removeClass("fontColorOfPickItem");
    }

    $('#btnPickTradingSaleInvoice').click(function (e) {
        ResetTradingSaleInvoice();
        $("#winTradingSaleInvoice").icsWindow('open');
    });

    $('#btnSearchInvoice').click(function (e) {
        if($('#cboInvoiceDate').val()<=0 && $.trim($('#txtBuyerSearch').data('BuyerIDs'))=='' && $.trim($('#txtTradingSaleInvoiceSearch').val())==''){
            alert("No searching criteria found."); return false;
        }
        var oTradingSaleInvoice = {
            Note : $.trim($('#txtTradingSaleInvoiceSearch').val())+'~'+$('#cboInvoiceDate').val() +'~'+ $('#dtInvoiceDateFrom').datebox('getValue')+'~'+$('#dtInvoiceDateTo').datebox('getValue')+'~'+$.trim($('#txtBuyerSearch').data('BuyerIDs')),
            BUID : parseInt(sessionStorage.getItem("BUID"))
        };
        $.ajax({
            type: "POST",
            dataType: "JSON",
            url: sessionStorage.getItem("BaseAddress")+  "/TradingSaleInvoice/GetsCashTradingSaleInvoice",
            data:  JSON.stringify(oTradingSaleInvoice),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                var  oTradingSaleInvoices = jQuery.parseJSON(data);
                if (oTradingSaleInvoices != null) {
                    if(oTradingSaleInvoices.length>0)
                    {
                        debugger;
                        if(oTradingSaleInvoices[0].ErrorMessage=="")
                        {
                            DynamicRefreshList(oTradingSaleInvoices, 'tblTradingSaleInvoices');
                        }
                        else
                        {
                            alert(oTradingSaleInvoices[0].ErrorMessage);
                        }
                    }
                    else
                    {
                        alert("Data not found!!");
                    }
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });
    });


    $("#btnOkTradingSaleInvoice").click(function () {

        var oTradingSaleInvoice=$('#tblTradingSaleInvoices').datagrid('getSelected');

        if(oTradingSaleInvoice==null || oTradingSaleInvoice.TradingSaleInvoiceID<=0){
            alert("Please select a valid item from list");
            return false;
        }

        $.ajax({
            type: "POST",
            dataType: "JSON",
            url: sessionStorage.getItem("BaseAddress")+  "/TradingSaleInvoice/GetTradingSaleInvoice",
            data:  JSON.stringify(oTradingSaleInvoice),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                oTradingSaleInvoice = jQuery.parseJSON(data);
                if (oTradingSaleInvoice != null && oTradingSaleInvoice.TradingSaleInvoiceID>0) {
                    RefreshControll(oTradingSaleInvoice);
                    $("#winTradingSaleInvoice").icsWindow('close');
                }
                else{
                    alert(oTradingSaleInvoice.ErrorMessage);
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });


    });

    $("#btnCloseTradingSaleInvoice").click(function () {
        $('#winTradingSaleInvoice').icsWindow('close');
    });

    $("#btnResetBuyerSearch").click(function () {
        $('#txtBuyerSearch').data('BuyerIDs','');
        $('#txtBuyerSearch').val('');
        $("#txtBuyerSearch").removeClass("fontColorOfPickItem");
    });

    $("#btnPickBuyerSearch").click(function () {
        GetsBuyer();
    });

    $("#txtBuyerSearch").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) // Enter Press
        {
            GetsBuyer();
        }
        else if (code == 8) //backspace=8
        {
            $("#txtBuyerSearch").removeClass("fontColorOfPickItem");
            $('#txtBuyerSearch').data('BuyerIDs', '');
        }
    });

    function GetsBuyer(){
        var nBUID = $('#divTradingSaleInvoice').data('BUID');
        var oContractor = { Params: 2 + '~' + $.trim($('#txtBuyerSearch').val())+'~'+ nBUID };//here 2 is Buyer
        var obj = {
            BaseAddress: sessionStorage.getItem("BaseAddress"),
            Object: oContractor,
            ControllerName: "Contractor",
            ActionName: "ContractorSearchByNameType",
            IsWinClose: false
        };
        //$("#progbar").progressbar({ value: 0 });
        //$("#progbarParent").show();
        //var intervalID = setInterval(updateProgress, 250);
        $.icsDataGets(obj, function (response) {
            //clearInterval(intervalID);
            //$("#progbarParent").hide();
            if (response.status && response.objs.length > 0) {
                if (response.objs[0].ContractorID > 0) {
                    var tblColums = []; var oColumn = { field: "Name", title: "Name", width: 200, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "Address", title: "Address", width: 120, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "Email", title: "Email", width: 90, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "ShortName", title: "Short Name", width: 90, align: "left" }; tblColums.push(oColumn);
                    var oPickerParam = {
                        winid: 'winBuyerSearch',
                        winclass: 'clsBuyerSearch',
                        winwidth: 600,
                        winheight: 460,
                        tableid: 'tblBuyers',
                        tablecolumns: tblColums,
                        datalist: response.objs,
                        multiplereturn: true,
                        searchingbyfieldName: 'Name',
                        windowTittle: 'Buyer List'
                    };
                    $.icsPicker(oPickerParam);
                    IntializePickerbutton(oPickerParam);
                }
                else { alert(response.objs[0].ErrorMessage); }
            }else{
                alert("Data Not Found.");
                return;
            }
        });
    }

    $('#btnPrintPos').click(function(e){

        if(_oTradingSaleInvoice==null || _oTradingSaleInvoice.TradingSaleInvoiceID<=0){
            alert("No invoice found to print");
            return false;
        }
        PrintPOS(_oTradingSaleInvoice.TradingSaleInvoiceID)
    });

    function PrintPOS(nTradingSaleInvoiceID){
        var tsv = ((new Date()).getTime())/1000;
        window.open(sessionStorage.getItem("BaseAddress")+'/TradingSaleInvoice/POSPrint?id='+nTradingSaleInvoiceID+"&ts="+tsv, "_blank")
    }

</script>
