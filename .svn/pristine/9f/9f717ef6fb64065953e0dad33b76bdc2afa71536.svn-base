@{
    ViewBag.Title = "Sample Adjustment List";
}
@model IEnumerable<ESimSol.BusinessObjects.SampleAdjustment> 
    <div class="menuMainCollectionTable" ng-app="SampleAdjustmentApp" style="height:520px">
        <div ng-controller="SampleAdjustmentController">
            <div title="SampleAdjustment List" class="row ui-grid-top-panel">
                <div class="container">
                    <div class="form-inline">
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="Search()"> <span class="glyphicon glyphicon-search" aria-hidden="true"></span> Search</button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="Process()"> <span class="glyphicon glyphicon-refresh" aria-hidden="true"></span> Process</button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="Adjust()"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> New Adjust</button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="View()"> <span class="glyphicon glyphicon-list-alt" aria-hidden="true"></span> View</button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="Approve()" ng-hide="btnApprove"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Approve</button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="UnApprove()" ng-hide="btnUnApprove"> <span class="glyphicon glyphicon-export" aria-hidden="true"></span> Un-Approve</button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="Delete()" ng-hide="btnDelete"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Delete</button>
                        <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="PrintPreview()"><span class="glyphicon glyphicon-print" aria-hidden="true"> Priview</span></button>
                    </div>
                </div>
            </div>
            <div ui-grid="gridOptions" ui-grid-selection  class="grid-angular" style="width:100%"></div>
        </div>
    </div>
<style type="text/css">
    .grid-angular {
        width: 100%;
        height:520px;
    }
</style>
<script type="text/javascript">
    debugger;
    var oSampleAdjustments =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    var oSampleAdjustmentTypes =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(@ViewBag.SampleAdjustmentTypes));
    var oCompareOperators = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(@ViewBag.CompareOperators));
    var _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    debugger;
    var CCapp= angular.module('SampleAdjustmentApp', ['ngAnimate','ui.bootstrap','ui.grid','ui.grid.selection','ms.service']);
    CCapp.controller('SampleAdjustmentController',function ($scope,$http,$uibModal,$log,uiGridConstants,msModal,userSession, advanceSearch)
    {
        oSampleAdjustments= (userSession.getData('SampleAdjustments').length>0)? userSession.getData('SampleAdjustments'):oSampleAdjustments;
        debugger;
        $scope.gridOptions= {
            multiSelect: false,
            enableFullRowSelection: true,
            showColumnFooter: true,
            columnDefs: [
              { field: 'AdjustmentNo', name:'Adjustment No', width:'10%' },
              { field: 'ContractorName', name:'Party', width:'10%' },
              { field: 'SANNo', name:'SAN No', width:'10%' , enableSorting: false},
              { field: 'ApprovedByName', name:'Approved By', width:'10%' , enableSorting: false},
              { field: 'SANAdjustInSt', name:'SAN Amount', cellClass: 'text-right', width:'13%' },
              { field: 'AlreadyAdjustInSt', name:'Already Adjust', cellClass: 'text-right', width:'13%' },
              { field: 'RemainingAdjustInSt', name:'Remaining Adjust', cellClass: 'text-right', width:'13%' },
              { field: 'WaitingAdjustInSt', name:'Waiting Adjust', cellClass: 'text-right', width:'15%' },
              //{ field: 'AdjustAmountInSt', name:'Adjust Value', cellClass: 'text-right', width:'10%' },
               { field: 'AdjustAmount',              name:'Adjust Value',                   width:'8%',     cellClass: 'text-right',  cellFilter: 'number:2'    ,  aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true,  type: 'number', enableCellEdit:true,footerCellClass: 'text-right' ,footerCellFilter: 'number:0'}
            ],
            data: oSampleAdjustments,
            onRegisterApi : function(gridApi)
            {
                $scope.gridApi = gridApi;
                $scope.gridApi.selection.clearSelectedRows();
                userSession.clear();
            }
        };


        $scope.Search = function()
        {
            debugger;

            var oContractor = {
                Name: '@@ContractorID',
                Params:'1~'+sessionStorage.getItem('BUID')
            };

            var oColumns = [];
            var oColumn = { field: 'ContractorID', name: 'Code',width: '20%'  };oColumns.push(oColumn);
            oColumn = { field: 'Name', name: 'Applicant Name',width: '50%', enableSorting: false  };oColumns.push(oColumn);
            oColumn = { field: 'Address', name: 'Address',width: '30%', enableSorting: false  };oColumns.push(oColumn);

            var paramObj_Contractor={
                obj: oContractor,//{ContractorTypeInt:1, Name:'@@ContractorID'},
                objName:'Name',
                url:_sBaseAddress+'/Contractor/ContractorSearchByNameType',
                title:'Party List',
                multiSelect:true,
                columns:oColumns
            }
            var oElementList = [{ DisplayName: "Adjustment No",           BOField: "AdjustmentNo",          InputType: 'text' },
                                { DisplayName: "SAN No",           BOField: "SANNo",          InputType: 'text' },
                                { DisplayName: "Issue Date",    BOField: "IssueDate",   InputType: 'date' },
                                { DisplayName: "SAN Date",    BOField: "SANDate",   InputType: 'date' },
                                { DisplayName: "Party Name",          BOField: "ContractorID",  InputType: 'picker', PickerObject:paramObj_Contractor }
                                //{ DisplayName: "Process",      BOField: "FNProcess",     InputType: 'select', OptionList:oFNProcessList}
                                //{ DisplayName: "Customer ",         BOField: "ContractorID",    InputType: 'picker', PickerObject:paramObj_Contractor }

            ];
            var modalObj={
                size:'md',
                title:"Advance Search",
                url:_sBaseAddress+'/Home/AdvanceSearch',
                CompareOperators:oCompareOperators,
                HtmlElements:oElementList,
                isAdvanceSearch:true, // if TRUE: 'urlAdvanceSearch' should be define
                urlAdvanceSearch:_sBaseAddress + '/SampleAdjustment/Search'
            }

            var modalInstance=advanceSearch.Instance(modalObj);
            modalInstance.result.then(function (result)
            {
                console.log(result);
                $scope.gridOptions.data=result;
            }, function ()
            {
                $log.info('Modal dismissed at: ' + new Date());
            });
        }


        $scope.Adjust=function()
        {
            debugger;
            var oSampleAdjustment=$scope.gridApi.selection.getSelectedRows().first();
            if(oSampleAdjustment==null || oSampleAdjustment.ContractorID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            if(parseInt(oSampleAdjustment.ApprovedBy)!=0)
            {
                alert("Sorry, Selected Item Already Approved.");
                return;
            }
            var SelectedRowIndex= $scope.gridOptions.data.indexOf(oSampleAdjustment);
            sessionStorage.setItem("SampleAdjustments", JSON.stringify($scope.gridOptions.data));
            sessionStorage.setItem("SampleAdjustment", JSON.stringify(oSampleAdjustment));
            sessionStorage.setItem("SelectedRowIndex",SelectedRowIndex);
            sessionStorage.setItem("SampleAdjustmentHeader", "Add Sample Adjustment");
            sessionStorage.setItem("BackLink", window.location.href);
            window.location.href = _sBaseAddress+"/SampleAdjustment/ViewSampleAdjustment?id="+oSampleAdjustment.SampleAdjustmentID;
        }
       
        $scope.View= function ()
        {
            //debugger;
            var oSampleAdjustment=$scope.gridApi.selection.getSelectedRows().first();
            if(oSampleAdjustment==null || oSampleAdjustment.SampleAdjustmentID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            var SelectedRowIndex= $scope.gridOptions.data.indexOf(oSampleAdjustment);
            sessionStorage.setItem("SampleAdjustments", JSON.stringify($scope.gridOptions.data));
            sessionStorage.setItem("SelectedRowIndex", SelectedRowIndex);
            sessionStorage.setItem("SampleAdjustmentHeader", "View Sample Adjustment");
            sessionStorage.setItem("BackLink", window.location.href);
            window.location.href = _sBaseAddress+  "/SampleAdjustment/ViewSampleAdjustment?id="+oSampleAdjustment.SampleAdjustmentID;
        }
 
        $scope.Approve= function ()
        {
            //debugger;
            var oSampleAdjustment=$scope.gridApi.selection.getSelectedRows().first();
            if(oSampleAdjustment==null || oSampleAdjustment.SampleAdjustmentID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            if(parseInt(oSampleAdjustment.ApprovedBy)!=0)
            {
                alert("Sorry, Selected Item Already Approved.");
                return;
            }
            var SelectedRowIndex= $scope.gridOptions.data.indexOf(oSampleAdjustment);
            sessionStorage.setItem("SampleAdjustments", JSON.stringify($scope.gridOptions.data));
            sessionStorage.setItem("SelectedRowIndex", SelectedRowIndex);
            sessionStorage.setItem("SampleAdjustmentHeader", "Approve Sample Adjustment");
            sessionStorage.setItem("BackLink", window.location.href);
            window.location.href = _sBaseAddress+"/SampleAdjustment/ViewSampleAdjustment?id="+oSampleAdjustment.SampleAdjustmentID;
        }

        $scope.UnApprove = function()
        {
            var oSampleAdjustment=$scope.gridApi.selection.getSelectedRows().first();
            if(oSampleAdjustment==null || oSampleAdjustment.ContractorID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            if(parseInt(oSampleAdjustment.ApprovedBy)==0)
            {
                alert("Sorry, Selected Item Is Not Approved.");
                return;
            }
            if (!confirm("Confirm to Un-Approve?")) return ;
            var SelectedRowIndex= $scope.gridOptions.data.indexOf(oSampleAdjustment);
            if (oSampleAdjustment.SampleAdjustmentID > 0)
            {
                $.ajax
                ({
                    type: "POST",
                    dataType: "json",
                    url : _sBaseAddress+ "/SampleAdjustment/UnApprove",
                    data:  JSON.stringify(oSampleAdjustment),                    
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {                        
                        var oSampleAdjustment = jQuery.parseJSON(data);
                        if (oSampleAdjustment.ErrorMessage=="" || oSampleAdjustment.ErrorMessage==null)
                        {
                            alert("Un-Approved sucessfully");
                            $scope.gridOptions.data[SelectedRowIndex]=oSampleAdjustment;
                            $scope.gridApi.grid.modifyRows($scope.gridOptions.data);
                            $scope.gridApi.selection.selectRow($scope.gridOptions.data[SelectedRowIndex]);
                        }
                        else
                        {
                            alert(oSampleAdjustment.ErrorMessage);
                        }
                    },
                    error: function (xhr, status, error)
                    {
                        alert(error);
                    }

                });
            }
        }

        $scope.Delete = function()
        {
            var oSampleAdjustment=$scope.gridApi.selection.getSelectedRows().first();
            if(oSampleAdjustment==null || oSampleAdjustment.ContractorID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            if(parseInt(oSampleAdjustment.ApprovedBy)!=0)
            {
                alert("Sorry, Selected Item Already Approved.");
                return;
            }
            if (!confirm("Confirm to Delete?")) return ;
            var SelectedRowIndex= $scope.gridOptions.data.indexOf(oSampleAdjustment);
            if (oSampleAdjustment.SampleAdjustmentID > 0)
            {
                $.ajax
                ({
                    type: "GET",
                    dataType: "json",
                    url : _sBaseAddress+ "/SampleAdjustment/Delete",
                    data: { id: oSampleAdjustment.SampleAdjustmentID},
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        debugger;
                        feedbackmessage = jQuery.parseJSON(data);
                        if (feedbackmessage == "Deleted")
                        {
                            alert("Delete sucessfully");
                            $scope.gridOptions.data.splice(SelectedRowIndex,1);
                            $scope.gridApi.core.refresh();
                        }
                        else
                        {
                            alert(feedbackmessage);
                        }
                    },
                    error: function (xhr, status, error)
                    {
                        alert(error);
                    }

                });
            }
        }
    
        $scope.Process= function ()
        {
            debugger;
            $.icsProgressBar(true);
            var oSampleAdjustment = {BUID:sessionStorage.getItem('BUID')};
            $.ajax({
                type: "POST",
                dataType: "json",
                url : _sBaseAddress+"/SampleAdjustment/Process",
                traditional: true,
                data:  JSON.stringify(oSampleAdjustment),
                contentType: "application/json; charset=utf-8",
                success: function (data)
                {
                    debugger;
                    var oSampleAdjustmentList = data;
                    $scope.gridOptions.data=oSampleAdjustmentList;
                    $.icsProgressBar(false);
                },
                error: function (xhr, status, error)
                {
                    alert(error);
                }
            });
        }

        $scope.PrintPreview = function ()
        {
            debugger;
            var oSampleAdjustment=$scope.gridApi.selection.getSelectedRows().first();
            if(oSampleAdjustment==null || oSampleAdjustment.SampleAdjustmentID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            window.open(sessionStorage.getItem('BaseAddress') + '/SampleAdjustment/PrintSampleAdjustmentPreview?id='+oSampleAdjustment.SampleAdjustmentID);
        };
    });


</script>