using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ESimSol.BusinessObjects;
using System.Web.Script.Serialization;
using System.Globalization;

using ESimSol.Reports;
using System.Drawing.Imaging;
using System.IO;
using System.Drawing;
using System.Xml.Serialization;
using ESimSol.BusinessObjects.ReportingObject;
using ICS.Core;
using ICS.Core.Framework;
using ICS.Core.Utility;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using ReportManagement;
using System.Reflection;
using System.Globalization;
using CrystalDecisions.CrystalReports.Engine;

namespace ESimSolFinancial.Controllers
{
    public class EmployeeSalaryController : PdfViewController
    {
        #region Declaration
        Company _oCompany = new Company();
        EmployeeSalary _oEmployeeSalary;
        private List<EmployeeSalary> _oEmployeeSalarys;
        List<AttendanceDaily> _oAttendanceDailys;
        List<EmployeeSalaryDetailDisciplinaryAction> _oEmployeeSalaryDetailDisciplinaryActions;
        List<TransferPromotionIncrement> _oTransferPromotionIncrements = new List<TransferPromotionIncrement>();
        List<EmployeeBankAccount> _oEmployeeBankAccounts = new List<EmployeeBankAccount>();
        List<SalarySummaryDetail_F2> _oAdditionSalaryHeads = new List<SalarySummaryDetail_F2>();
        List<SalarySummary_F2> oSalarySummerys = new List<SalarySummary_F2>();
        List<SalarySummaryDetail_F2> oSalarySummaryDetail_F2s = new List<SalarySummaryDetail_F2>();
        List<EmployeeSalaryDetail> _oEmployeeSalaryDetails = new List<EmployeeSalaryDetail>();
        bool IsComp;
        bool bFlag = true;


        string[] ColGross = new string[] { };
        Dictionary<string, object> _gross = new Dictionary<string, object>();
        Dictionary<string, object> _increment = new Dictionary<string, object>();
        Dictionary<string, object> _earnings = new Dictionary<string, object>();
        Dictionary<string, object> _deductions = new Dictionary<string, object>();
        Dictionary<string, object> _banks = new Dictionary<string, object>();


        List<SalarySummary_F2> _oSalarySummary_F2s = new List<SalarySummary_F2>();
        List<SalarySummary_F2> _oTempSalarySummary_F2s = new List<SalarySummary_F2>();
        List<SalarySummaryDetail_F2> _oSalarySummaryDetail_F2s = new List<SalarySummaryDetail_F2>();
        List<SalarySummaryDetail_F2> _oDeductionSalaryHeads = new List<SalarySummaryDetail_F2>();
        List<SalarySummary_F2> _oSalarySummary_F2s_Location = new List<SalarySummary_F2>();
        int _nEmpCount;

        #endregion

        #region Views

        public ActionResult View_EmployeeSalarys(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            _oEmployeeSalarys = new List<EmployeeSalary>();

            this.Session.Remove(SessionInfo.AuthorizationRolesMapping);
            this.Session.Add(SessionInfo.AuthorizationRolesMapping, AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.EmployeeSalary).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]));

            ViewBag.EmployeeTypes = EmployeeType.Gets("select * from EmployeeType where EmployeeGrouping=" + (int)EnumEmployeeGrouping.EmployeeType, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.Months = Enum.GetValues(typeof(EnumMonth)).Cast<EnumMonth>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).Where(x => x.Value != 0.ToString()).ToList();
            ViewBag.EmployeeCategorys = Enum.GetValues(typeof(EnumEmployeeCategory)).Cast<EnumEmployeeCategory>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();

            string sSql = "SELECT * FROM BusinessUnit WHERE BusinessUnitID IN(SELECT BusinessUnitID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID<>0";
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " )";
            }
            sSql = sSql + ")";

            ViewBag.BusinessUnits = BusinessUnit.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));

            return View(_oEmployeeSalarys);
        }
        public ActionResult View_ComparisonReport(int menuid)
        {
            this.Session.Remove(SessionInfo.MenuID);
            this.Session.Add(SessionInfo.MenuID, menuid);
            _oEmployeeSalarys = new List<EmployeeSalary>();

            this.Session.Remove(SessionInfo.AuthorizationRolesMapping);
            this.Session.Add(SessionInfo.AuthorizationRolesMapping, AuthorizationRoleMapping.GetsByModuleAndUser(((int)EnumModuleName.EmployeeSalary).ToString(), (int)Session[SessionInfo.currentUserID], (int)Session[SessionInfo.currentUserID]));

            ViewBag.EmployeeTypes = EmployeeType.Gets("select * from EmployeeType where EmployeeGrouping=" + (int)EnumEmployeeGrouping.EmployeeType, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.Shifts = HRMShift.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            ViewBag.EmployeeCSs = Enum.GetValues(typeof(EnumEmployeeCardStatus)).Cast<EnumEmployeeCardStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.EmployeeWSs = Enum.GetValues(typeof(EnumEmployeeWorkigStatus)).Cast<EnumEmployeeWorkigStatus>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            ViewBag.Months = Enum.GetValues(typeof(EnumMonth)).Cast<EnumMonth>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).Where(x => x.Value != 0.ToString()).ToList();
            ViewBag.EmployeeCategorys = Enum.GetValues(typeof(EnumEmployeeCategory)).Cast<EnumEmployeeCategory>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();

            string sSql = "SELECT * FROM BusinessUnit WHERE BusinessUnitID IN(SELECT BusinessUnitID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID<>0";
            if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
            {
                sSql = sSql + " AND DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + " )";
            }
            sSql = sSql + ")";

            ViewBag.BusinessUnits = BusinessUnit.Gets(sSql, (int)(Session[SessionInfo.currentUserID]));

            return View(_oEmployeeSalarys);
        }

        public ActionResult View_EmployeeSalary(int nId, double ts)
        {
            _oEmployeeSalary = new EmployeeSalary();

            if (nId > 0)
            {
                _oEmployeeSalary = EmployeeSalary.Get(nId, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }

            return PartialView(_oEmployeeSalary);
        }

        public ActionResult View_PrintSpecificEmployeeSalary(int nId, double ts)
        {
            _oEmployeeSalary = new EmployeeSalary();
            string sSql = "SELECT * FROM VIEW_EmployeeSalary WHERE  EmployeeSalaryID=" + nId;
            string sSqlDetail = "SELECT *FROM VIEW_EmployeeSalaryDetail WHERE EmployeeSalaryID=" + nId;
            string sSqlDAction = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID=" + nId;
            _oEmployeeSalary = EmployeeSalary.Get(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSqlDetail, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSqlDAction, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            return PartialView(_oEmployeeSalary);

        }

        public ActionResult View_PrintMultiplePaySlip(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false, sGroupIDs, sBlockIDs, "");

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            //oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);

            return PartialView(oEmployeeSalary);
        }

        public ActionResult View_PrintMultiplePaySlip_Self(string sEmpIDs, string sDate, int nLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, int nMonthID, bool bNewJoin, int nYear, bool IsDate, double ts)
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();

            string sStartDate = sDate.Split(',')[0];
            string sEndDate = sDate.Split(',')[1];
            string sSql = "";

            if (sEmpIDs != "")
            {
                sSql = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeID IN (" + sEmpIDs + ") ";
                if (IsDate) { sSql += "AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "'"; }
                if (nMonthID > 0 && nYear > 0)
                {
                    sSql = sSql + " AND PayrollProcessID IN (SELECT PPMID FROM PayrollProcessManagement WHERE MonthID=" + nMonthID + " AND DATEPART(YEAR,EndDate)=" + nYear + ")";
                }
                sSql += " ORDER BY EmployeeCode";

                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                sSql = "";
                sSql = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
                oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                sSql = "";
                sSql = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + ")" + " AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "')";
                oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            else
            {
                sSql = "SELECT * FROM View_EmployeeSalary WHERE EmployeeSalaryID>0";
                if (IsDate) { sSql += " AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "'"; }
                if (nLocationID > 0)
                {
                    sSql = sSql + " AND LocationID=" + nLocationID;
                }
                if (sDepartmentIDs != "")
                {
                    sSql += " AND DepartmentID IN(" + sDepartmentIDs + ")";
                }
                if (sDesignationIDs != "")
                {
                    sSql += " AND DesignationID IN(" + sDesignationIDs + ")";
                }
                if (sSalarySchemeIDs != "")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
                }
                if (nMonthID > 0)
                {
                    sSql = sSql + " AND MonthID=" + nMonthID;
                }
                if (bNewJoin)
                {
                    sSql = sSql + " AND JoiningDate BETWEEN '" + sStartDate + "' AND '" + sEndDate + "'";
                }

                if (nMonthID > 0 && nYear > 0)
                {
                    sSql = sSql + " AND PayrollProcessID IN (SELECT PPMID FROM PayrollProcessManagement WHERE MonthID=" + nMonthID + " AND DATEPART(YEAR,EndDate)=" + nYear + ")";
                }

                sSql += " ORDER BY EmployeeCode";

                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //List<int> EmpIDs = new List<int>();
                //EmpIDs = oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeID).ToList();

                string EmpIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeID));
                if (EmpIDs != "")
                {
                    sSql = "";
                    sSql = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + EmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
                    oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                    sSql = "";
                    sSql = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + ")" + " AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "')";
                    oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                }
            }

            oEmployeeSalary.ErrorMessage = sDate;
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            //oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);

            return PartialView(oEmployeeSalary);

        }

        public ActionResult View_PrintNPMultiplePaySlip(string EmployeeSalaryIDs, string sDate, double ts)
        {
            _oEmployeeSalary = new EmployeeSalary();
            string sSql = "SELECT * FROM VIEW_EmployeeSalary WHERE  EmployeeSalaryID IN(" + EmployeeSalaryIDs + ") Order by EmployeeCode";
            string sSqlDetail = "SELECT *FROM VIEW_EmployeeSalaryDetail WHERE EmployeeSalaryID IN(" + EmployeeSalaryIDs + ")";
            string sSqlDAction = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(" + EmployeeSalaryIDs + ")";
            _oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSqlDetail, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSqlDAction, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oEmployeeSalary.ErrorMessage = sDate;
            return PartialView(_oEmployeeSalary);

        }

        public ActionResult View_PrintMultiplePaySlipV2(string EmployeeSalaryIDs, string sDate, double ts)
        {
            _oEmployeeSalary = new EmployeeSalary();
            string sSql = "SELECT * FROM VIEW_EmployeeSalary WHERE  EmployeeSalaryID IN(" + EmployeeSalaryIDs + ")";
            string sSqlDetail = "SELECT *FROM VIEW_EmployeeSalaryDetail WHERE EmployeeSalaryID IN(" + EmployeeSalaryIDs + ")";
            string sSqlDAction = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(" + EmployeeSalaryIDs + ")";
            _oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSqlDetail, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSqlDAction, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oEmployeeSalary.ErrorMessage = sDate;
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oEmployeeSalary.Company = oCompanys.First();
            //_oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(_oEmployeeSalary.Company);

            return PartialView(_oEmployeeSalary);

        }

        #endregion

        #region Salary Search

        [HttpPost]
        public JsonResult SearchSalary(string sIDs, string dtDateFrom, string dtDateTo, double ts)
        {
            try
            {
                string sSql = "";
                sSql = "SELECT * FROM View_EmployeeSalary WHERE EmployeeID IN(" + sIDs + ") AND StartDate='" + dtDateFrom + "' AND EndDate='" + dtDateTo + "' ORDER BY EmployeeCode";
                _oEmployeeSalarys = new List<EmployeeSalary>();
                _oEmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (_oEmployeeSalarys.Count == 0)
                {
                    throw new Exception("Data Not Found !");
                }
            }
            catch (Exception ex)
            {
                _oEmployeeSalarys = new List<EmployeeSalary>();
                _oEmployeeSalary = new EmployeeSalary();
                _oEmployeeSalary.ErrorMessage = ex.Message;
                _oEmployeeSalarys.Add(_oEmployeeSalary);
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oEmployeeSalarys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult SearchSalaryByDepartmentAndDateRange(string sBU, string sLocationID, string sDepartmentIds, string sDesignationIDs, string sSalarySchemeIDs, string sEmployeeIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, int nLoadRecords, int nRowLength, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)
        {
            try
            {
                string sSql = "";
                sSql = "SELECT * FROM (SELECT top(" + nLoadRecords + ")* FROM (SELECT ROW_NUMBER() OVER(ORDER BY EmployeeSalaryID) Row,* FROM View_EmployeeSalary WHERE MonthID=" + nMonthID + " AND DATEPART(YYYY,EndDate)=" + nYear;

                if (sBU.Trim() != "" && sBU.Trim() != "0")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeOfficial WHERE DRPID IN(SELECT DepartmentRequirementPolicyID FROM DepartmentRequirementPolicy WHERE BusinessUnitID=" + sBU + "))";
                }
                if (sLocationID.Trim() != "")
                {
                    sSql = sSql + " AND LocationID=" + sLocationID;
                }
                if (sDepartmentIds.Trim() != "")
                {
                    sSql = sSql + " AND DepartmentID IN(" + sDepartmentIds + ")";
                }
                if (sDesignationIDs.Trim() != "")
                {
                    sSql = sSql + " AND DesignationID IN(" + sDesignationIDs + ")";
                }
                if (sSalarySchemeIDs.Trim() != "")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
                }
                if (sEmployeeIDs.Trim() != "")
                {
                    sSql = sSql + " AND EmployeeID In (" + sEmployeeIDs + ")";
                }
                if (nPayType > 0)
                {
                    if (nPayType == 1)
                    {
                        sSql = sSql + " AND IsAllowBankAccount=1";
                    }
                    if (nPayType == 2)
                    {
                        sSql = sSql + " AND IsAllowBankAccount=0";
                    }
                }
                //if (nMonthID > 0)
                //{
                //    sSql = sSql + " AND MonthID=" + nMonthID;
                //}
                if (bNewJoin)
                {
                    sSql = sSql + " AND JoiningDate BETWEEN StartDate AND EndDate";
                }
                if (!string.IsNullOrEmpty(sGroupIDs))
                {
                    sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sGroupIDs + "))";
                }
                if (!string.IsNullOrEmpty(sBlockIDs))
                {
                    sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sBlockIDs + "))";
                }

                if (nStartSalaryRange > 0 && nEndSalaryRange > 0)
                {
                    sSql += " AND GrossAmount BETWEEN " + nStartSalaryRange + " AND " + nEndSalaryRange;
                }
                if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
                {
                    sSql = sSql + "AND DepartmentID IN(SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + "))";
                }
                sSql = sSql + ") aa WHERE Row >" + nRowLength + ") aaa ORDER BY EmployeeCode";
                //sSql = "SELECT * FROM View_EmployeeSalary WHERE DepartmentID =" + nID + " AND StartDate='" + dtDateFrom + "' AND EndDate='" + dtDateTo + "'";
                _oEmployeeSalarys = new List<EmployeeSalary>();
                _oEmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (_oEmployeeSalarys.Count == 0)
                {
                    throw new Exception("Data Not Found !");
                }
            }
            catch (Exception ex)
            {
                _oEmployeeSalarys = new List<EmployeeSalary>();
                _oEmployeeSalary = new EmployeeSalary();
                _oEmployeeSalary.ErrorMessage = ex.Message;
                _oEmployeeSalarys.Add(_oEmployeeSalary);
            }
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(_oEmployeeSalarys);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }

        #endregion Salary Search

        #region Report

        private EmployeeSalary GetEmployeesSalaryFromSalarySheet(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, double nStartSalaryRange, double nEndSalaryRange, bool IsCompliance, string sGroupIDs, string sBlockIDs, bool IsMatchExact, int BankAccID=0)
        {
            string sStartDate;
            string sEndDate;
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary.EmployeeSalarySheets = RPTSalarySheet.GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sBlockIDs, sGroupIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, IsCompliance, nPayType, IsMatchExact, BankAccID);
            oEmployeeSalary.EmployeeSalarySheetDetails = RPTSalarySheetDetail.GetEmployeesSalaryDetail(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sBlockIDs, sGroupIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, IsCompliance);


            if (oEmployeeSalary.EmployeeSalarySheets.Count > 0)
            {
                sStartDate = oEmployeeSalary.EmployeeSalarySheets[0].StartDateInString;
                sEndDate = oEmployeeSalary.EmployeeSalarySheets[0].EndDateInString;
            }
            else
            {
                sStartDate = "01 JAN 1950";
                sEndDate = "01 JAN 1950";
            }

            string sSql_SalaryHead = "";
            if (IsCompliance)
            {
                sSql_SalaryHead = "SELECT * FROM SalaryHead WITH (NOLOCK) WHERE SalaryHeadID IN(SELECT SalaryHeadID  FROM EmployeeSalaryDetail WITH (NOLOCK) WHERE "
                                        + " EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WITH (NOLOCK) WHERE DATEPART(MONTH,EndDate)=" + nMonthID + " AND  DATEPART(YYYY,EndDate)=" + nYear + ") AND CompAmount>0) ORDER BY SalaryHeadID ASC";
            }
            else
            {
                sSql_SalaryHead = "SELECT * FROM SalaryHead WITH (NOLOCK) WHERE SalaryHeadID IN(SELECT SalaryHeadID  FROM EmployeeSalaryDetail WITH (NOLOCK) WHERE "
                                        + " EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WITH (NOLOCK) WHERE DATEPART(MONTH,EndDate)=" + nMonthID + " AND  DATEPART(YYYY,EndDate)=" + nYear + ") AND Amount>0) ORDER BY SalaryHeadID ASC";
            }

            oEmployeeSalary.SalaryHeads = SalaryHead.Gets(sSql_SalaryHead, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            oEmployeeSalary.ErrorMessage = sStartDate + "," + sEndDate;
            return oEmployeeSalary;
        }


        public EmployeeSalary GetEmployeesSalary(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, double nStartSalaryRange, double nEndSalaryRange, bool IsCompliance, string sGroupIDs, string sBlockIDs, string sMultipleMonthParam)
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            string sSql = "";
            string sStartDate;
            string sEndDate;

            if (sEmpIDs != "")
            {
                if (sMultipleMonthParam.Trim() == "")
                {
                    sSql = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeID IN (" + sEmpIDs + ") AND MonthID=" + nMonthID + " AND DATEPART(YYYY,EndDate)=" + nYear;
                    sSql += " ORDER BY EmployeeCode";
                    oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                    sSql = "";
                    sSql = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + sEmpIDs + ") AND PayrollProcessID IN (SELECT   PPMID FROM PayrollProcessManagement WHERE  MonthID=" + nMonthID + ") AND DATEPART(YYYY,EndDate)=" + nYear + ") ORDER BY SalaryHeadID";
                    oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                    sSql = "";
                    sSql = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + ") AND PayrollProcessID IN (SELECT   PPMID FROM PayrollProcessManagement WHERE  MonthID=" + nMonthID + ")  AND DATEPART(YYYY,EndDate)=" + nYear + ")";
                    oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                    oEmployeeSalary.EmployeeBankAccounts = EmployeeBankAccount.Gets("SELECT * FROM VIEW_EmployeeBankAccount WHERE EmployeeID IN(" + sEmpIDs + ") AND IsActive=1", ((User)(Session[SessionInfo.CurrentUser])).UserID);

                }
                else
                {
                    sSql = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeID IN (" + sEmpIDs + ") AND CONVERT(DATE,CONVERT(VARCHAR(12),EndDate,106))  BETWEEN CONVERT(DATE,CONVERT(VARCHAR,'" + sMultipleMonthParam.Split('~')[0] + "')) AND CONVERT(DATE,CONVERT(VARCHAR,'" + sMultipleMonthParam.Split('~')[1] + "')) ORDER BY EmployeeCode";
                    oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                    sSql = "";
                    sSql = "SELECT * FROM View_EmployeeSalaryDetail AS HH WHERE HH.EmployeeSalaryID IN (SELECT MM.EmployeeSalaryID FROM View_EmployeeSalary AS MM WHERE  EmployeeID IN (" + sEmpIDs + ") AND CONVERT(DATE,CONVERT(VARCHAR(12),EndDate,106))  BETWEEN CONVERT(DATE,CONVERT(VARCHAR,'" + sMultipleMonthParam.Split('~')[0] + "')) AND CONVERT(DATE,CONVERT(VARCHAR,'" + sMultipleMonthParam.Split('~')[1] + "')))";
                    oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                    sSql = "";
                    sSql = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + ") AND PayrollProcessID IN (SELECT   PPMID FROM PayrollProcessManagement WHERE  MonthID=" + nMonthID + ")  AND DATEPART(YYYY,EndDate)=" + nYear + ")";
                    oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                    oEmployeeSalary.EmployeeBankAccounts = EmployeeBankAccount.Gets("SELECT * FROM VIEW_EmployeeBankAccount WHERE EmployeeID IN(" + sEmpIDs + ") AND IsActive=1", ((User)(Session[SessionInfo.CurrentUser])).UserID);

                }
            }
            else
            {
                if (sMultipleMonthParam.Trim() == "")
                {
                    sSql = "SELECT * FROM View_EmployeeSalary WHERE MonthID=" + nMonthID + " AND DATEPART(YYYY,EndDate)=" + nYear;
                }
                else
                {
                    sSql = "SELECT * FROM View_EmployeeSalary WHERE  CONVERT(DATE,CONVERT(VARCHAR(12),EndDate,106))  BETWEEN CONVERT(DATE,CONVERT(VARCHAR,'" + sMultipleMonthParam.Split('~')[0] + "')) AND CONVERT(DATE,CONVERT(VARCHAR,'" + sMultipleMonthParam.Split('~')[1] + "')) ";
                }

                if (sBU.Trim() != "")
                {
                    //sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeOfficial WHERE DRPID IN(SELECT DepartmentRequirementPolicyID FROM DepartmentRequirementPolicy WHERE BusinessUnitID IN(" + sBU + ")))";
                    sSql = sSql + " AND BusinessUnitID IN(" + sBU + ")";
                }

                if (sLocationID.Trim() != "")
                {
                    sSql = sSql + " AND LocationID IN(" + sLocationID + ")";
                }
                if (sDepartmentIDs != "")
                {
                    sSql += " AND DepartmentID IN(" + sDepartmentIDs + ")";
                }
                if (sDesignationIDs != "")
                {
                    sSql += " AND DesignationID IN(" + sDesignationIDs + ")";
                }
                if (sSalarySchemeIDs != "")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
                }
                if (nPayType > 0)
                {
                    if (nPayType == 1)
                    {
                        sSql = sSql + " AND IsAllowBankAccount=1";
                    }
                    if (nPayType == 2)
                    {
                        sSql = sSql + " AND IsAllowBankAccount=0";
                    }
                }
                if (bNewJoin)
                {
                    sSql = sSql + " AND JoiningDate BETWEEN StartDate AND EndDate";
                }
                if (!string.IsNullOrEmpty(sGroupIDs))
                {
                    sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sGroupIDs + "))";
                }
                if (!string.IsNullOrEmpty(sBlockIDs))
                {
                    sSql += " AND EmployeeID IN( SELECT EmployeeID From View_EmployeeGroup WHERE EmployeeTypeID IN(" + sBlockIDs + "))";
                }
                if (nStartSalaryRange > 0 && nEndSalaryRange > 0)
                {
                    sSql += " AND GrossAmount BETWEEN " + nStartSalaryRange + " AND " + nEndSalaryRange;
                }
                if (((User)(Session[SessionInfo.CurrentUser])).FinancialUserType != EnumFinancialUserType.GroupAccounts)
                {
                    sSql = sSql + "AND DepartmentID IN(SELECT DepartmentID FROM DepartmentRequirementPolicy WHERE DepartmentRequirementPolicyID IN(SELECT DRPID FROM DepartmentRequirementPolicyPermission WHERE UserID =" + ((User)(Session[SessionInfo.CurrentUser])).UserID + "))";
                }

                sSql += " ORDER BY DepartmentID, EmployeeCode";

                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                string EmpIDs = "";
                if (oEmployeeSalary.EmployeeSalarys.Count > 0)
                {
                    string TempEmpIDs = "";
                    int nCount = 0;
                    oEmployeeSalary.EmployeeSalaryDetails = new List<EmployeeSalaryDetail>();
                    foreach (EmployeeSalary oItem in oEmployeeSalary.EmployeeSalarys)
                    {
                        TempEmpIDs += oItem.EmployeeID + ",";
                        EmpIDs += oItem.EmployeeID + ",";
                        nCount++;

                        if (nCount % 100 == 0 || nCount == oEmployeeSalary.EmployeeSalarys.Count)
                        {
                            TempEmpIDs = TempEmpIDs.Remove(TempEmpIDs.Length - 1, 1);
                            sSql = "";
                            sSql = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + TempEmpIDs + ") AND PayrollProcessID IN (SELECT   PPMID FROM PayrollProcessManagement WHERE  MonthID=" + nMonthID + ") AND DATEPART(YYYY,EndDate)=" + nYear + ") ORDER BY SalaryHeadID";
                            List<EmployeeSalaryDetail> oEmployeeSalaryDetails = new List<EmployeeSalaryDetail>();
                            oEmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                            oEmployeeSalary.EmployeeSalaryDetails.AddRange(oEmployeeSalaryDetails);
                            TempEmpIDs = "";
                        }
                    }
                    EmpIDs = EmpIDs.Remove(EmpIDs.Length - 1, 1);
                    oEmployeeSalary.EmployeeBankAccounts = EmployeeBankAccount.Gets("SELECT * FROM VIEW_EmployeeBankAccount WHERE EmployeeID IN(" + EmpIDs + ") AND IsActive=1", ((User)(Session[SessionInfo.CurrentUser])).UserID);
                }
                else
                {
                    oEmployeeSalary.Employees = new List<Employee>();
                    oEmployeeSalary.EmployeeSalaryDetails = new List<EmployeeSalaryDetail>();
                    oEmployeeSalary.EmployeeBankAccounts = new List<EmployeeBankAccount>();
                }
                oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = new List<EmployeeSalaryDetailDisciplinaryAction>();
            }

            if (oEmployeeSalary.EmployeeSalarys.Count > 0)
            {
                sStartDate = oEmployeeSalary.EmployeeSalarys[0].StartDateInString;
                sEndDate = oEmployeeSalary.EmployeeSalarys[0].EndDateInString;
            }
            else
            {
                sStartDate = "01 JAN 1950";
                sEndDate = "01 JAN 1950";
            }

            string sSql_SalaryHead = "";
            if (IsCompliance)
            {
                sSql_SalaryHead = "SELECT * FROM SalaryHead WHERE SalaryHeadID IN(SELECT SalaryHeadID  FROM EmployeeSalaryDetail WHERE "
                                        + " EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM View_EmployeeSalary WHERE MonthID=" + nMonthID + " AND  DATEPART(YYYY,EndDate)=" + nYear + ") AND CompAmount>0)";
            }
            else
            {
                sSql_SalaryHead = "SELECT * FROM SalaryHead WHERE SalaryHeadID IN(SELECT SalaryHeadID  FROM EmployeeSalaryDetail WHERE "
                                        + " EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM View_EmployeeSalary WHERE MonthID=" + nMonthID + " AND  DATEPART(YYYY,EndDate)=" + nYear + ") AND Amount>0)";
            }
            if (sMultipleMonthParam.Trim() != "")
            {
                sSql_SalaryHead = "SELECT * FROM SalaryHead WHERE SalaryHeadID IN(SELECT SalaryHeadID  FROM EmployeeSalaryDetail WHERE  EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM View_EmployeeSalary WHERE CONVERT(DATE,CONVERT(VARCHAR(12),EndDate,106))  BETWEEN CONVERT(DATE,CONVERT(VARCHAR,'" + sMultipleMonthParam.Split('~')[0] + "')) AND CONVERT(DATE,CONVERT(VARCHAR,'" + sMultipleMonthParam.Split('~')[1] + "')) AND Amount>0))";
            }

            oEmployeeSalary.SalaryHeads = SalaryHead.Gets(sSql_SalaryHead, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            oEmployeeSalary.ErrorMessage = sStartDate + "," + sEndDate;
            return oEmployeeSalary;
        }

        public ActionResult rptPaySlipInBangla(int nEmpID, string sDate, double nts)
        {
            string sStartDate = sDate.Split(',')[0];
            string sEndDate = sDate.Split(',')[1];

            _oEmployeeSalary = new EmployeeSalary();
            string sSql = "SELECT * FROM VIEW_EmployeeSalary WHERE  EmployeeID IN(" + nEmpID + ") And StartDate='" + sStartDate + "' And EndDate='" + sEndDate + "'  Order by EmployeeCode";
            _oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            if (_oEmployeeSalary.EmployeeSalarys.Count() > 0)
            {

                string sSalaryIDs = string.Join(",", _oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeSalaryID));
                string sSqlDetail = "SELECT *FROM VIEW_EmployeeSalaryDetail WHERE EmployeeSalaryID IN(" + sSalaryIDs + ")";
                string sSqlDAction = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(" + sSalaryIDs + ")";

                _oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSqlDetail, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                _oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSqlDAction, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }


            _oEmployeeSalary.ErrorMessage = sDate;

            return PartialView(_oEmployeeSalary);

        }

        public ActionResult PrintPaySlipEnglsih(int nEmpID, string sDate, double nts)
        {
            string sStartDate = sDate.Split(',')[0];
            string sEndDate = sDate.Split(',')[1];

            _oEmployeeSalary = new EmployeeSalary();
            string sSql = "SELECT * FROM VIEW_EmployeeSalary WHERE  EmployeeID IN(" + nEmpID + ") And StartDate='" + sStartDate + "' And EndDate='" + sEndDate + "'  Order by EmployeeCode";
            _oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            if (_oEmployeeSalary.EmployeeSalarys.Count() > 0)
            {

                string sSalaryIDs = string.Join(",", _oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeSalaryID));
                string sSqlDetail = "SELECT *FROM VIEW_EmployeeSalaryDetail WHERE EmployeeSalaryID IN(" + sSalaryIDs + ")";
                string sSqlDAction = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(" + sSalaryIDs + ")";

                _oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSqlDetail, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                _oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSqlDAction, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", _oEmployeeSalary.EmployeeSalarys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { _oEmployeeSalary.BusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            _oEmployeeSalary.ErrorMessage = sDate;
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oEmployeeSalary.Company = oCompanys.First();
            _oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(_oEmployeeSalary.Company);


            rptPaySlip_DetailFormat oReport = new rptPaySlip_DetailFormat();
            byte[] abytes = oReport.PrepareReport(_oEmployeeSalary, false, false);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintEmployeeSalary(string sESID, string sDate, double ts)
        {

            EmployeeSalary oEmployeeSalary = new EmployeeSalary();

            string sSql = "SELECT * FROM VIEW_EmployeeSalaryDetail WHERE EmployeeSalaryID IN(" + sESID + ") ORDER BY SalaryHeadID";
            string sSql1 = "SELECT*FROM View_EmployeeSalary WHERE EmployeeSalaryID IN(" + sESID + ") ORDER BY EmployeeCode";
            string sSql2 = "SELECT * FROM SalaryHead WHERE SalaryHeadType=1";
            string sSql3 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(" + sESID + ")";
            oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.SalaryHeads = SalaryHead.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.ErrorMessage = sDate;

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();

            rptEmployeeSalary oReport = new rptEmployeeSalary();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintPaySlip(int nEmpID, string sDate, double ts)
        {

            EmployeeSalary oEmployeeSalary = new EmployeeSalary();

            string sStartDate = sDate.Split(',')[0];
            string sEndDate = sDate.Split(',')[1];

            string sSql = "SELECT * FROM View_EmployeeOfficial WHERE EmployeeID=" + nEmpID;
            string sSql1 = "SELECT * FROM View_AttendanceDaily  WHERE EmployeeID=" + nEmpID + " AND AttendanceDate  BETWEEN '" + sStartDate + "' AND '" + sEndDate + "'";
            string sSql2 = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID=" + nEmpID + " AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "')";
            string sSql3 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID=" + nEmpID + " AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "')";
            oEmployeeSalary.EmployeeOfficial = EmployeeOfficial.Get(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.ErrorMessage = sDate;

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();

            rptPaySlip oReport = new rptPaySlip();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintSalarySheet(string sEmpIDs, string sDate, int nLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, double ts)
        {

            EmployeeSalary oEmployeeSalary = new EmployeeSalary();

            string sStartDate = sDate.Split(',')[0];
            string sEndDate = sDate.Split(',')[1];
            string sSql = "";
            string sSql2 = "";
            string sSql3 = "";
            string sSql4 = "";

            if (sEmpIDs != "")
            {
                sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + sEmpIDs + ")";
                //string sSql1 = "SELECT * FROM View_AttendanceDaily  WHERE EmployeeID IN (" + sEmpIDs + ") AND AttendanceDate  BETWEEN '" + sStartDate + "' AND '" + sEndDate + "'";
                sSql2 = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
                sSql3 = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "' ORDER BY EmployeeCode";
                sSql4 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + ")" + " AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "')";
                oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            else
            {
                sSql3 = "SELECT * FROM View_EmployeeSalary WHERE StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "' ";
                if (nLocationID > 0)
                {
                    sSql = sSql + " AND LocationID=" + nLocationID;
                }
                if (sDepartmentIDs != "")
                {
                    sSql3 += " AND DepartmentID IN(" + sDepartmentIDs + ")";
                }
                if (sDesignationIDs != "")
                {
                    sSql3 += " AND DesignationID IN(" + sDesignationIDs + ")";
                }
                if (sSalarySchemeIDs != "")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
                }
                sSql3 += " ORDER BY EmployeeCode";

                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //List<int> EmpIDs = new List<int>();
                //EmpIDs = oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeID).ToList();

                string EmpIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeID));
                sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + EmpIDs + ")";
                sSql2 = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + EmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
                sSql4 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + ")" + " AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "')";
                oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            }


            oEmployeeSalary.ErrorMessage = sDate;
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);
            foreach (Employee oItem in oEmployeeSalary.Employees)
            {
                oItem.EmployeePhoto = GetEmployeePhoto(oItem);
            }

            rptSalarySheet oReport = new rptSalarySheet();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintSalarySheet_Corporate(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroupByDept, bool bGroupBySerial, string sGroupIDs, string sBlockIDs, bool IsMatchExact, double ts)// F4
        {
            bool bIsGroupBySerial = bGroupBySerial;
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, IsCompliance, sGroupIDs, sBlockIDs, IsMatchExact);

            string sStartDate = "";
            string sEndDate = "";
            string sSql = "";
            string sEmployeeIDs = "";
            List<EmployeeLeaveOnAttendance> oELOnAttendances = new List<EmployeeLeaveOnAttendance>();
            if (oEmployeeSalary.EmployeeSalarySheets.Count > 0)
            {
                sStartDate = oEmployeeSalary.EmployeeSalarySheets[0].StartDateInString;
                sEndDate = oEmployeeSalary.EmployeeSalarySheets[0].EndDateInString;
                sEmployeeIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Select(x => x.EmployeeID));
                sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + sEmployeeIDs + ")";
                oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (IsCompliance == false)
                {
                    oELOnAttendances = EmployeeLeaveOnAttendance.Gets(sEmployeeIDs, Convert.ToDateTime(sStartDate), Convert.ToDateTime(sEndDate), ((User)Session[SessionInfo.CurrentUser]).UserID);
                }
                else
                {
                    oELOnAttendances = EmployeeLeaveOnAttendance.GetsComp(sEmployeeIDs, Convert.ToDateTime(sStartDate), Convert.ToDateTime(sEndDate), ((User)Session[SessionInfo.CurrentUser]).UserID);
                }
            }
            else
            {
                sStartDate = DateTime.Now.ToString("dd MMM yyyy");
                sEndDate = DateTime.Now.ToString("dd MMM yyyy");
                oEmployeeSalary.Employees = new List<Employee>();
            }

            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();
            sSql = "Select * from LeaveHead Order By LeaveHeadID";
            oLeaveHeads = LeaveHead.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            List<PayrollProcessManagement> oPayrollProcessManagements = new List<PayrollProcessManagement>();
            sSql = "SELECT * FROM View_PayrollProcessManagement WHERE  SalaryFrom ='" + sStartDate + "' AND SalaryTo  ='" + sEndDate + "' ";
            oPayrollProcessManagements = PayrollProcessManagement.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            oEmployeeSalary.ErrorMessage = sStartDate + "," + sEndDate;
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);
            foreach (Employee oItem in oEmployeeSalary.Employees)
            {
                oItem.EmployeePhoto = GetEmployeePhoto(oItem);
            }

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            oBusinessUnits = BusinessUnit.Gets((int)Session[SessionInfo.currentUserID]);

            rptSalarySheet_Corporate oReport = new rptSalarySheet_Corporate();
            byte[] abytes = oReport.PrepareReport(bIsGroupBySerial, oEmployeeSalary, oLeaveHeads, oELOnAttendances, oPayrollProcessManagements, oSalarySheetPropertys, oSalarySheetSignature, IsCompliance, oBusinessUnits);
            return File(abytes, "application/pdf");
        }

        public void PrintSalarySheet_Corporate_XL(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroupByDept, string sGroupIDs, string sBlockIDs, bool IsMatchExact, double ts)// F4 XL
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, IsCompliance, sGroupIDs, sBlockIDs, IsMatchExact);

            string sStartDate = "";
            string sEndDate = "";
            string sSql = "";
            string sEmployeeIDs = "";
            List<EmployeeLeaveOnAttendance> oELOnAttendances = new List<EmployeeLeaveOnAttendance>();
            if (oEmployeeSalary.EmployeeSalarySheets.Count > 0)
            {
                sStartDate = oEmployeeSalary.EmployeeSalarySheets[0].StartDateInString;
                sEndDate = oEmployeeSalary.EmployeeSalarySheets[0].EndDateInString;
                sEmployeeIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Select(x => x.EmployeeID));
                sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + sEmployeeIDs + ")";
                oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oELOnAttendances = EmployeeLeaveOnAttendance.Gets(sEmployeeIDs, Convert.ToDateTime(sStartDate), Convert.ToDateTime(sEndDate), ((User)Session[SessionInfo.CurrentUser]).UserID);

            }
            else
            {
                sStartDate = DateTime.Now.ToString("dd MMM yyyy");
                sEndDate = DateTime.Now.ToString("dd MMM yyyy");
                oEmployeeSalary.Employees = new List<Employee>();
            }

            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();
            sSql = "Select * from LeaveHead Order By LeaveHeadID";
            oLeaveHeads = LeaveHead.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            List<PayrollProcessManagement> oPayrollProcessManagements = new List<PayrollProcessManagement>();
            sSql = "SELECT * FROM View_PayrollProcessManagement WHERE  SalaryFrom ='" + sStartDate + "' AND SalaryTo  ='" + sEndDate + "' ";
            oPayrollProcessManagements = PayrollProcessManagement.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            oEmployeeSalary.ErrorMessage = sStartDate + "," + sEndDate;
            SalarySheet_Corporate_XL(oEmployeeSalary, oLeaveHeads, oELOnAttendances, oPayrollProcessManagements, oSalarySheetPropertys, IsCompliance);
        }

        public ActionResult PrintMultiplePaySlip_DetailFormat(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroupByDept, bool bGroupBySerial, string sGroupIDs, string sBlockIDs, double ts)
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false, sGroupIDs, sBlockIDs, "");

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oEmployeeSalary.BusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

            string monthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(nMonthID);
            string DateHeader = "For The Month of " + monthName + ", " + nYear;
            oEmployeeSalary.Params = DateHeader;

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);

            rptPaySlip_DetailFormat oReport = new rptPaySlip_DetailFormat();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary, bGroupBySerial, bGroupByDept);
            return File(abytes, "application/pdf");
        }



        public ActionResult PrintMultiplePaySlip_DetailFormatMultiMonth(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroupByDept, bool bGroupBySerial, string sGroupIDs, string sBlockIDs, double ts, string sMultipleMonthParam)
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false, sGroupIDs, sBlockIDs, sMultipleMonthParam);

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oEmployeeSalary.BusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

            string DateHeader = "For " + sMultipleMonthParam;
            oEmployeeSalary.Params = DateHeader;

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);

            EmployeeSalary oTempEmployeeSalary = new EmployeeSalary();
            List<EmployeeSalary> oTempEmployeeSalarys = oEmployeeSalary.EmployeeSalarys.GroupBy(x => x.EmployeeID)
                                            .Select(cl => new EmployeeSalary
                                            {
                                                EmployeeSalaryID = cl.First().EmployeeSalaryID,
                                                EmployeeID = cl.First().EmployeeID,
                                                LocationID = cl.First().LocationID,
                                                DepartmentID = cl.First().DepartmentID,
                                                DesignationID = cl.First().DesignationID,
                                                EmployeeName = cl.First().EmployeeName,
                                                StartDate = cl.Min(c => c.EndDate),
                                                EndDate = cl.Max(c => c.EndDate),
                                                EmployeeCode = cl.First().EmployeeCode,
                                                DesignationName = cl.First().DesignationName,
                                                JoiningDate = cl.First().JoiningDate,
                                                LocationName = cl.First().LocationName,
                                                ETIN = cl.First().ETIN,
                                                GrossAmount = cl.Sum(c => c.GrossAmount),
                                                NetAmount = cl.Sum(c => c.NetAmount),
                                                BankAmount = cl.Sum(c => c.BankAmount),
                                                CompGrossAmount = cl.Sum(c => c.CompGrossAmount),
                                                CashAmount = cl.Sum(c => c.CashAmount),
                                            }).ToList();

            List<EmployeeSalaryDetail> oEmployeeSalaryDetail = new List<EmployeeSalaryDetail>();
            var oTemoEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalaryDetails.GroupBy(x => new { x.SalaryHeadID, x.SalaryHeadName, x.SalaryHeadType, x.EmployeeID }).Select(grp => new
             {
                 SalaryHeadID = grp.Key.SalaryHeadID,
                 SalaryHeadName = grp.Key.SalaryHeadName,
                 SalaryHeadType = grp.Key.SalaryHeadType,
                 EmployeeID = grp.Key.EmployeeID,
                 Amount = grp.Sum(x => x.Amount),
                 CompAmount = grp.Sum(x => x.CompAmount)
             }).OrderBy(x => x.EmployeeID);

            EmployeeSalaryDetail oTempEmployeeSalaryDetail = new EmployeeSalaryDetail();
            List<EmployeeSalaryDetail> oEmployeeSalaryDetails = new List<EmployeeSalaryDetail>();
            foreach (var oItem in oTemoEmployeeSalaryDetails)
            {
                oTempEmployeeSalaryDetail = new EmployeeSalaryDetail();
                oTempEmployeeSalaryDetail.SalaryHeadID = oItem.SalaryHeadID;
                oTempEmployeeSalaryDetail.SalaryHeadName = oItem.SalaryHeadName;
                oTempEmployeeSalaryDetail.SalaryHeadType = oItem.SalaryHeadType;
                oTempEmployeeSalaryDetail.EmployeeID = oItem.EmployeeID;
                oTempEmployeeSalaryDetail.Amount = oItem.Amount;
                oTempEmployeeSalaryDetail.CompAmount = oItem.CompAmount;
                oEmployeeSalaryDetails.Add(oTempEmployeeSalaryDetail);
            }

            oEmployeeSalary.EmployeeSalarys = oTempEmployeeSalarys;
            oEmployeeSalary.EmployeeSalaryDetails = oEmployeeSalaryDetails;

            rptMultiMonthPaySlip oReport = new rptMultiMonthPaySlip();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary, bGroupBySerial, bGroupByDept);
            return File(abytes, "application/pdf");
        }
        public ActionResult PrintMultiplePaySlip_DetailFormat_Self(string sEmpIDs, string sDate, int nLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, int nMonthID, bool bNewJoin, int nYear, bool IsDate, double ts, string MultipleMonthParam)
        {

            EmployeeSalary oEmployeeSalary = new EmployeeSalary();

            string sStartDate = sDate.Split(',')[0];
            string sEndDate = sDate.Split(',')[1];
            string sSql = "";

            if (sEmpIDs != "")
            {
                sSql = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeID IN (" + sEmpIDs + ") ";
                if (IsDate) { sSql += "AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "'"; }

                if (nMonthID > 0 && nYear > 0)
                {
                    sSql = sSql + " AND PayrollProcessID IN (SELECT PPMID FROM PayrollProcessManagement WHERE MonthID=" + nMonthID + " AND DATEPART(YEAR,EndDate)=" + nYear + ")";
                }

                sSql += " ORDER BY EmployeeCode";
                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                if (oEmployeeSalary.EmployeeSalarys.Count > 0)
                {
                    string EmployeeSalaryIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeSalaryID));
                    oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.GetsForPaySlip(EmployeeSalaryIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                    sSql = "";
                    sSql = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(" + EmployeeSalaryIDs + ")";
                    oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                }
            }
            else
            {
                sSql = "";
                sSql = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeSalaryID>0";
                if (IsDate) { sSql += "AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "'"; }
                if (nLocationID > 0)
                {
                    sSql = sSql + " AND LocationID=" + nLocationID;
                }
                if (sDepartmentIDs != "")
                {
                    sSql += " AND DepartmentID IN(" + sDepartmentIDs + ")";
                }
                if (sDesignationIDs != "")
                {
                    sSql += " AND DesignationID IN(" + sDesignationIDs + ")";
                }
                if (sSalarySchemeIDs != "")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
                }

                if (nMonthID > 0)
                {
                    sSql = sSql + " AND MonthID=" + nMonthID;
                }
                if (bNewJoin)
                {
                    sSql = sSql + " AND JoiningDate BETWEEN '" + sStartDate + "' AND '" + sEndDate + "'";
                }

                if (nMonthID > 0 && nYear > 0)
                {
                    sSql = sSql + " AND PayrollProcessID IN (SELECT PPMID FROM PayrollProcessManagement WHERE MonthID=" + nMonthID + " AND DATEPART(YEAR,EndDate)=" + nYear + ")";
                }

                sSql += " ORDER BY EmployeeCode";

                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                if (oEmployeeSalary.EmployeeSalarys.Count > 0)
                {
                    string EmployeeSalaryIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeSalaryID));
                    oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.GetsForPaySlip(EmployeeSalaryIDs, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                    sSql = "";
                    sSql = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(" + EmployeeSalaryIDs + ")";
                    oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                }
            }

            oEmployeeSalary.EmployeeBankAccounts = new List<EmployeeBankAccount>();
            if (oEmployeeSalary.EmployeeSalarys.Count > 0)
            {
                string EmpIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeID));
                string sSql_Bank = "SELECT * FROM VIEW_EmployeeBankAccount WHERE EmployeeID IN(" + EmpIDs + ")";
                oEmployeeSalary.EmployeeBankAccounts = EmployeeBankAccount.Gets(sSql_Bank, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }

            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Where(x => x.EmployeeSalaryID > 0).Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oEmployeeSalary.BusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            string monthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(nMonthID);
            string DateHeader = "For The Month of " + monthName + ", " + nYear;
            oEmployeeSalary.Params = DateHeader;

            oEmployeeSalary.ErrorMessage = sDate;
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);

            rptPaySlip_DetailFormat oReport = new rptPaySlip_DetailFormat();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary, false, false);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintSalarySheet_DetailFormat(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroupByDept, bool bGroupBySerial, string sGroupIDs, string sBlockIDs, bool bRound, bool IsMatchExact, double ts)//F3
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, IsCompliance, sGroupIDs, sBlockIDs, IsMatchExact);

            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
            bool bWithLeaveHeads = oSalarySheetPropertys.Exists(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveHead);


            List<EmployeeLeaveOnAttendance> oELOnAttendances = new List<EmployeeLeaveOnAttendance>();
            List<EmployeeOTonAttendance> oEOTonAttendances = new List<EmployeeOTonAttendance>();
            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();

            string EmpIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Where(x => x.EmployeeSalaryID > 0).Select(p => p.EmployeeID).Distinct().ToList());

            DateTime dtFrom = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[0]);
            DateTime dtTo = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[1]);

            if (EmpIDs != "")
            {


                if (bWithLeaveHeads)
                {
                    sSQL = "Select * from LeaveHead Order By LeaveHeadID";
                    oLeaveHeads = LeaveHead.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
                    oELOnAttendances = EmployeeLeaveOnAttendance.Gets(EmpIDs, dtFrom, dtTo, ((User)Session[SessionInfo.CurrentUser]).UserID);
                }
            }

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);

            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Where(x => x.EmployeeSalaryID > 0).Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oEmployeeSalary.BusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }



            sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            rptSalarySheet_DetailFormat oReport = new rptSalarySheet_DetailFormat();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary, oSalarySheetPropertys, oLeaveHeads, bWithLeaveHeads, oELOnAttendances, bWithPrecision, oSalarySheetSignature, bGroupByDept, bGroupBySerial, bRound);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintSalarySheet_DetailFormat_F5(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, bool IsMatchExact, double ts)//F3
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, IsCompliance, sGroupIDs, sBlockIDs, IsMatchExact);

            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
            bool bWithLeaveHeads = oSalarySheetPropertys.Exists(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveHead);

            List<EmployeeLeaveOnAttendance> oELOnAttendances = new List<EmployeeLeaveOnAttendance>();
            List<EmployeeOTonAttendance> oEOTonAttendances = new List<EmployeeOTonAttendance>();
            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();

            string EmpIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Where(x => x.EmployeeSalaryID > 0).Select(p => p.EmployeeID).Distinct().ToList());

            DateTime dtFrom = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[0]);
            DateTime dtTo = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[1]);

            if (EmpIDs != "")
            {
                if (bWithLeaveHeads)
                {
                    sSQL = "Select * from LeaveHead Order By LeaveHeadID";
                    oLeaveHeads = LeaveHead.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
                    oELOnAttendances = EmployeeLeaveOnAttendance.Gets(EmpIDs, dtFrom, dtTo, ((User)Session[SessionInfo.CurrentUser]).UserID);
                }
            }

            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Where(x => x.EmployeeSalaryID > 0).Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oEmployeeSalary.BusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

            sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            rptSalarySheet_DetailFormat_F5 oReport = new rptSalarySheet_DetailFormat_F5();
            byte[] abytes = oReport.PrepareReport(IsCompliance, oEmployeeSalary, oSalarySheetPropertys, oLeaveHeads, bWithLeaveHeads, oELOnAttendances, bWithPrecision, oSalarySheetSignature);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintSalarySheet_DetailFormat_F6(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, bool IsMatchExact, double ts)
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, IsCompliance, sGroupIDs, sBlockIDs, IsMatchExact);

            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
            bool bWithLeaveHeads = oSalarySheetPropertys.Exists(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveHead);

            List<EmployeeLeaveOnAttendance> oELOnAttendances = new List<EmployeeLeaveOnAttendance>();
            List<EmployeeOTonAttendance> oEOTonAttendances = new List<EmployeeOTonAttendance>();
            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();

            string EmpIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Where(x => x.EmployeeSalaryID > 0).Select(p => p.EmployeeID).Distinct().ToList());

            DateTime dtFrom = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[0]);
            DateTime dtTo = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[1]);

            if (EmpIDs != "")
            {
                //if (IsCompliance)// if this report is for compliance, then map comp OT with the actual OT . there is no condition for comp in report .
                //{
                //    oEmployeeSalary.EmployeeSalarys.ForEach(x =>
                //    {
                //        x.OTHour = x.CompOTHour;
                //        x.OTRatePerHour = Math.Round(x.CompOTRatePerHour, 2);
                //        x.NetAmount = Math.Round(x.CompNetAmount, 2);
                //        x.GrossAmount = Math.Round(x.CompGrossAmount, 2);
                //    });
                //    oEmployeeSalary.EmployeeSalaryDetails.ForEach(x =>
                //    {
                //        x.Amount = x.CompAmount;
                //    });
                //}


                if (bWithLeaveHeads)
                {
                    sSQL = "Select * from LeaveHead Order By LeaveHeadID";
                    oLeaveHeads = LeaveHead.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
                    oELOnAttendances = EmployeeLeaveOnAttendance.Gets(EmpIDs, dtFrom, dtTo, ((User)Session[SessionInfo.CurrentUser]).UserID);
                }
                //sSQL = "";
                //sSQL = "SELECT * FROM View_TransferPromotionIncrement WHERE IsIncrement=1 AND ActualEffectedDate IN(SELECT MAX(ActualEffectedDate) FROM TransferPromotionIncrement WHERE EmployeeID IN(" + EmpIDs + ") Group By EmployeeID) AND ApproveBy>0  AND actualEffectedDate IS NOT NULL";
                //oEmployeeSalary.TransferPromotionIncrements = TransferPromotionIncrement.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
            }

            //List<Company> oCompanys = new List<Company>();
            //oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.Company = oCompanys.First();
            //oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);
            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Where(x => x.EmployeeSalaryID > 0).Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oEmployeeSalary.BusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

            sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            rptSalarySheet_DetailFormat_F5 oReport = new rptSalarySheet_DetailFormat_F5();
            byte[] abytes = oReport.PrepareReport(IsCompliance, oEmployeeSalary, oSalarySheetPropertys, oLeaveHeads, bWithLeaveHeads, oELOnAttendances, bWithPrecision, oSalarySheetSignature);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintDSalarySheet(string sEmpIDs, string sDate, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, double ts)
        {

            EmployeeSalary oEmployeeSalary = new EmployeeSalary();

            string sStartDate = sDate.Split(',')[0];
            string sEndDate = sDate.Split(',')[1];

            //string sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + sEmpIDs + ")";
            ////string sSql1 = "SELECT * FROM View_AttendanceDaily  WHERE EmployeeID IN (" + sEmpIDs + ") AND AttendanceDate  BETWEEN '" + sStartDate + "' AND '" + sEndDate + "'";
            //string sSql2 = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
            //string sSql3 = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "' ORDER BY EmployeeCode";
            //string sSql4 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + "))";
            //oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ////oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            string sSql = "";
            string sSql2 = "";
            string sSql3 = "";
            string sSql4 = "";

            if (sEmpIDs != "")
            {
                sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + sEmpIDs + ")";
                //string sSql1 = "SELECT * FROM View_AttendanceDaily  WHERE EmployeeID IN (" + sEmpIDs + ") AND AttendanceDate  BETWEEN '" + sStartDate + "' AND '" + sEndDate + "'";
                sSql2 = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
                sSql3 = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "' ORDER BY EmployeeCode";
                sSql4 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + ")" + " AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "')";
                oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            else
            {
                sSql3 = "SELECT * FROM View_EmployeeSalary WHERE StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "' ";
                if (sDepartmentIDs != "")
                {
                    sSql3 += " AND DepartmentID IN(" + sDepartmentIDs + ")";
                }
                if (sDesignationIDs != "")
                {
                    sSql3 += " AND DesignationID IN(" + sDesignationIDs + ")";
                }
                if (sSalarySchemeIDs != "")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
                }
                sSql3 += " ORDER BY EmployeeCode";
                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //List<int> EmpIDs = new List<int>();
                //EmpIDs = oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeID).ToList();

                string EmpIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeID));
                sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + EmpIDs + ")";
                sSql2 = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + EmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
                sSql4 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + ")" + " AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "')";
                oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            }

            oEmployeeSalary.ErrorMessage = sDate;

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);
            foreach (Employee oItem in oEmployeeSalary.Employees)
            {
                oItem.EmployeePhoto = GetEmployeePhoto(oItem);
            }

            rptDSalarySheet oReport = new rptDSalarySheet();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintNPSalarySheetV1(string sEmpIDs, string sDate, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, double ts)
        {

            EmployeeSalary oEmployeeSalary = new EmployeeSalary();

            string sStartDate = sDate.Split(',')[0];
            string sEndDate = sDate.Split(',')[1];

            //string sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + sEmpIDs + ")";
            ////string sSql1 = "SELECT * FROM View_AttendanceDaily  WHERE EmployeeID IN (" + sEmpIDs + ") AND AttendanceDate  BETWEEN '" + sStartDate + "' AND '" + sEndDate + "'";
            //string sSql2 = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
            //string sSql3 = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "' ORDER BY EmployeeCode";
            //string sSql4 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + "))";
            //oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ////oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            string sSql = "";
            string sSql2 = "";
            string sSql3 = "";
            string sSql4 = "";

            if (sEmpIDs != "")
            {
                sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + sEmpIDs + ")";
                //string sSql1 = "SELECT * FROM View_AttendanceDaily  WHERE EmployeeID IN (" + sEmpIDs + ") AND AttendanceDate  BETWEEN '" + sStartDate + "' AND '" + sEndDate + "'";
                sSql2 = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
                sSql3 = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "' ORDER BY EmployeeCode";
                sSql4 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + ")" + " AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "')";
                oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            else
            {
                sSql3 = "SELECT * FROM View_EmployeeSalary WHERE  StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "' ";
                if (sDepartmentIDs != "")
                {
                    sSql3 += " AND DepartmentID IN(" + sDepartmentIDs + ")";
                }
                if (sDesignationIDs != "")
                {
                    sSql3 += " AND DesignationID IN(" + sDesignationIDs + ")";
                }
                if (sSalarySchemeIDs != "")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
                }
                sSql3 += " ORDER BY EmployeeCode";
                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //List<int> EmpIDs = new List<int>();
                //EmpIDs = oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeID).ToList();

                string EmpIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeID));
                sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + EmpIDs + ")";
                sSql2 = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + EmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
                sSql4 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + ")" + " AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "')";
                oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            }

            oEmployeeSalary.ErrorMessage = sDate;

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);
            foreach (Employee oItem in oEmployeeSalary.Employees)
            {
                oItem.EmployeePhoto = GetEmployeePhoto(oItem);
            }

            rptNPSalarySheetV1 oReport = new rptNPSalarySheetV1();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintNPSalarySheetV2(string sEmpIDs, string sDate, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, double ts)
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();

            string sStartDate = sDate.Split(',')[0];
            string sEndDate = sDate.Split(',')[1];

            //string sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + sEmpIDs + ")";
            ////string sSql1 = "SELECT * FROM View_AttendanceDaily  WHERE EmployeeID IN (" + sEmpIDs + ") AND AttendanceDate  BETWEEN '" + sStartDate + "' AND '" + sEndDate + "'";
            //string sSql2 = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
            //string sSql3 = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "' ORDER BY EmployeeCode";
            //string sSql4 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + "))";
            //oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            ////oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            string sSql = "";
            string sSql2 = "";
            string sSql3 = "";
            string sSql4 = "";

            if (sEmpIDs != "")
            {
                sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + sEmpIDs + ")";
                //string sSql1 = "SELECT * FROM View_AttendanceDaily  WHERE EmployeeID IN (" + sEmpIDs + ") AND AttendanceDate  BETWEEN '" + sStartDate + "' AND '" + sEndDate + "'";
                sSql2 = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
                sSql3 = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "' ORDER BY EmployeeCode";
                sSql4 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + ")" + " AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "')";
                oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            }
            else
            {
                sSql3 = "SELECT * FROM View_EmployeeSalary WHERE  StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "' ";
                if (sDepartmentIDs != "")
                {
                    sSql3 += " AND DepartmentID IN(" + sDepartmentIDs + ")";
                }
                if (sDesignationIDs != "")
                {
                    sSql3 += " AND DesignationID IN(" + sDesignationIDs + ")";
                }
                if (sSalarySchemeIDs != "")
                {
                    sSql = sSql + " AND EmployeeID IN(SELECT EmployeeID FROM EmployeeSalaryStructure WHERE SalarySchemeID IN(" + sSalarySchemeIDs + "))";
                }
                sSql3 += " ORDER BY EmployeeCode";
                oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //List<int> EmpIDs = new List<int>();
                //EmpIDs = oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeID).ToList();

                string EmpIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(x => x.EmployeeID));
                sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + EmpIDs + ")";
                sSql2 = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + EmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
                sSql4 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + ")" + " AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "')";
                oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                //oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            }

            oEmployeeSalary.ErrorMessage = sDate;

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);
            foreach (Employee oItem in oEmployeeSalary.Employees)
            {
                oItem.EmployeePhoto = GetEmployeePhoto(oItem);
            }

            rptNPSalarySheetV2 oReport = new rptNPSalarySheetV2();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary);
            return File(abytes, "application/pdf");
        }
        public Image GetEmployeePhoto(Employee oEmployee)
        {
            if (oEmployee.Photo != null)
            {
                string fileDirectory = Server.MapPath("~/Content/Employeeimage.jpg");
                if (System.IO.File.Exists(fileDirectory))
                {
                    System.IO.File.Delete(fileDirectory);
                }

                MemoryStream m = new MemoryStream(oEmployee.Photo);
                System.Drawing.Image img = System.Drawing.Image.FromStream(m);
                img.Save(fileDirectory, ImageFormat.Jpeg);
                return img;
            }
            else
            {
                return null;
            }
        }

        public ActionResult PrintEmployeeSalarySheet(string sESID, string sDate, double ts)
        {

            EmployeeSalary oEmployeeSalary = new EmployeeSalary();


            string sSql = "SELECT * FROM VIEW_EmployeeSalaryDetail WHERE EmployeeSalaryID IN(" + sESID + ") ORDER BY SalaryHeadID";
            string sSql1 = "SELECT*FROM View_EmployeeSalary WHERE EmployeeSalaryID IN(" + sESID + ") ORDER BY EmployeeCode";
            string sSql2 = "SELECT * FROM SalaryHead WHERE SalaryHeadType=1 ORDER BY SalaryHeadID";
            string sSql3 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(" + sESID + ")";
            string sSql4 = "SELECT * FROM  View_AttendanceDaily WHERE EmployeeID IN(SELECT EmployeeID FROM EmployeeSalary WHERE EmployeeSalaryID  IN(" + sESID + "))";
            oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.SalaryHeads = SalaryHead.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.ErrorMessage = sDate;

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);

            rptEmployeeSalarySheet oReport = new rptEmployeeSalarySheet();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary);
            return File(abytes, "application/pdf");

        }

        public ActionResult PrintDEmployeeSalarySheet(string sESID, string sDate, double ts)
        {

            EmployeeSalary oEmployeeSalary = new EmployeeSalary();


            string sSql = "SELECT * FROM VIEW_EmployeeSalaryDetail WHERE EmployeeSalaryID IN(" + sESID + ") ORDER BY SalaryHeadID";
            string sSql1 = "SELECT*FROM View_EmployeeSalary WHERE EmployeeSalaryID IN(" + sESID + ") ORDER BY EmployeeCode";
            string sSql2 = "SELECT * FROM SalaryHead WHERE SalaryHeadType=1 ORDER BY SalaryHeadID";
            string sSql3 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(" + sESID + ")";
            string sSql4 = "SELECT * FROM  View_AttendanceDaily WHERE EmployeeID IN(SELECT EmployeeID FROM EmployeeSalary WHERE EmployeeSalaryID  IN(" + sESID + "))";
            oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.SalaryHeads = SalaryHead.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.ErrorMessage = sDate;

            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);

            rptDEmployeeSalarySheet oReport = new rptDEmployeeSalarySheet();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary);
            return File(abytes, "application/pdf");

        }

        public ActionResult PrintEmployeeSalarySheetInXL(string sESID, string sDate, double ts)
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();

            string sSql = "SELECT * FROM VIEW_EmployeeSalaryDetail WHERE EmployeeSalaryID IN(" + sESID + ") ORDER BY SalaryHeadID";
            string sSql1 = "SELECT*FROM View_EmployeeSalary WHERE EmployeeSalaryID IN(" + sESID + ") ORDER BY EmployeeCode";
            //string sSql2 = "SELECT * FROM SalaryHead WHERE SalaryHeadType=1 ORDER BY SalaryHeadID";
            string sSql3 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(" + sESID + ")";
            oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.SalaryHeads = SalaryHead.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oEmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.ErrorMessage = sDate;
            //List<Company> oCompanys = new List<Company>();
            //oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.Company = oCompanys.First();
            //oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);

            string sSql4 = "SELECT * FROM  View_AttendanceDaily WHERE EmployeeID IN(SELECT EmployeeID FROM EmployeeSalary WHERE EmployeeSalaryID  IN(" + sESID + "))";
            _oAttendanceDailys = AttendanceDaily.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            var stream = new MemoryStream();
            var serializer = new XmlSerializer(typeof(List<TempEmployeeSalary>));

            TempEmployeeSalary oTES = new TempEmployeeSalary();
            List<TempEmployeeSalary> oTESs = new List<TempEmployeeSalary>();

            int nCount = 0;
            foreach (EmployeeSalary oESItem in oEmployeeSalary.EmployeeSalarys)
            {
                nCount++;
                oTES = new TempEmployeeSalary();
                oTES.SerialNo = nCount;
                oTES.EmployeeNameCode = oESItem.EmployeeNameCode;
                oTES.DesignationName = oESItem.DesignationName;
                oTES.Grade = "";

                List<EmployeeSalaryDetail> oEmployeeSalaryDetails = (from oESD in oEmployeeSalary.EmployeeSalaryDetails
                                                                     where oESItem.EmployeeSalaryID == oESD.EmployeeSalaryID
                                                                     orderby oESD.SalaryHeadID
                                                                     select oESD).ToList();

                foreach (EmployeeSalaryDetail oESDItem in oEmployeeSalaryDetails)
                {
                    if (oESDItem.SalaryHeadID == 1)
                    {
                        oTES.Basic = Global.MillionFormat(oESDItem.Amount);
                    }
                    else if (oESDItem.SalaryHeadID == 2)
                    {
                        oTES.HouseRent = Global.MillionFormat(oESDItem.Amount);
                    }
                    else if (oESDItem.SalaryHeadID == 3)
                    {
                        oTES.Medical = Global.MillionFormat(oESDItem.Amount);
                    }
                    else if (oESDItem.SalaryHeadID == 4)
                    {
                        oTES.Conveyance = Global.MillionFormat(oESDItem.Amount);
                    }
                    else if (oESDItem.SalaryHeadID == 5)
                    {
                        oTES.FoodAll = Global.MillionFormat(oESDItem.Amount);
                    }
                    else if (oESDItem.SalaryHeadID == 6)
                    {
                        oTES.FestivalBonus = Global.MillionFormat(oESDItem.Amount);
                    }
                }

                oTES.GrossSalary = Global.MillionFormat(oESItem.GrossAmount);
                oTES.ProductionAmount = Global.MillionFormat(oESItem.ProductionAmount);
                oTES.PBonus = Global.MillionFormat(oESItem.ProductionBonus);
                oTES.WD = oESItem.TotalWorkingDay;
                oTES.ABonus = Global.MillionFormat(GetAttBonus(oESItem.EmployeeSalaryID));
                oTES.ApprovedLeave = GetLeave(oESItem.EmployeeID);
                oTES.LA = Global.MillionFormat(GetLeaveAllowance(oESItem.EmployeeSalaryID));
                oTES.OTH = Global.MillionFormat(oESItem.OTHour);
                oTES.OTR = oESItem.OTRatePerHour;
                oTES.OTA = Global.MillionFormat(oESItem.OverTimeAmount);
                oTES.AddShort = Global.MillionFormat(oESItem.AddShort);
                oTES.Advance = 0;
                oTES.Deduction = Global.MillionFormat(GetAbsentDeduction(oESItem.EmployeeSalaryID));
                oTES.TotalNoWorkDay = oESItem.TotalNoWorkDay;
                oTES.TotalNoWorkAllowance = Global.MillionFormat(oESItem.TotalNoWorkDayAllowance);
                oTES.RS = Global.MillionFormat(oESItem.RevenueStemp);
                oTES.NetAmount = Global.MillionFormat(oESItem.NetAmount);
                oTES.Signature = "";
                oTES.JD = oESItem.JoiningDateInString;

                oTESs.Add(oTES);
            }

            //serializer.Serialize(stream, oTESs);
            serializer.Serialize(stream, oTESs);
            stream.Position = 0;
            return File(stream, "application/vnd.ms-excel", "EmplyeeSalaryReport.xls");
            //return File(stream, "application/vnd.ms-excel", "EmplyeeSalaryReport.xls");
        }

        public ActionResult PrintDEmployeeSalarySheetInXL(string sESID, string sDate, double ts)
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();

            string sSql = "SELECT * FROM VIEW_EmployeeSalaryDetail WHERE EmployeeSalaryID IN(" + sESID + ") ORDER BY SalaryHeadID";
            string sSql1 = "SELECT*FROM View_EmployeeSalary WHERE EmployeeSalaryID IN(" + sESID + ") ORDER BY EmployeeCode";
            //string sSql2 = "SELECT * FROM SalaryHead WHERE SalaryHeadType=1 ORDER BY SalaryHeadID";
            string sSql3 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(" + sESID + ")";
            oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.SalaryHeads = SalaryHead.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            _oEmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.ErrorMessage = sDate;
            //List<Company> oCompanys = new List<Company>();
            //oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.Company = oCompanys.First();
            //oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);

            string sSql4 = "SELECT * FROM  View_AttendanceDaily WHERE EmployeeID IN(SELECT EmployeeID FROM EmployeeSalary WHERE EmployeeSalaryID  IN(" + sESID + "))";
            _oAttendanceDailys = AttendanceDaily.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            var stream = new MemoryStream();
            var serializer = new XmlSerializer(typeof(List<TempDEmployeeSalary>));

            TempDEmployeeSalary oDTES = new TempDEmployeeSalary();
            List<TempDEmployeeSalary> oDTESs = new List<TempDEmployeeSalary>();

            int nCount = 0;
            foreach (EmployeeSalary oESItem in oEmployeeSalary.EmployeeSalarys)
            {
                nCount++;
                oDTES = new TempDEmployeeSalary();
                oDTES.SerialNo = nCount;
                oDTES.EmployeeNameCode = oESItem.EmployeeNameCode;
                oDTES.DesignationName = oESItem.DesignationName;
                oDTES.Grade = "";

                List<EmployeeSalaryDetail> oEmployeeSalaryDetails = (from oESD in oEmployeeSalary.EmployeeSalaryDetails
                                                                     where oESItem.EmployeeSalaryID == oESD.EmployeeSalaryID
                                                                     orderby oESD.SalaryHeadID
                                                                     select oESD).ToList();

                foreach (EmployeeSalaryDetail oESDItem in oEmployeeSalaryDetails)
                {
                    if (oESDItem.SalaryHeadID == 1)
                    {
                        oDTES.Basic = Global.MillionFormat(oESDItem.Amount);
                    }
                    else if (oESDItem.SalaryHeadID == 2)
                    {
                        oDTES.HouseRent = Global.MillionFormat(oESDItem.Amount);
                    }
                    else if (oESDItem.SalaryHeadID == 3)
                    {
                        oDTES.Medical = Global.MillionFormat(oESDItem.Amount);
                    }
                    else if (oESDItem.SalaryHeadID == 4)
                    {
                        oDTES.Conveyance = Global.MillionFormat(oESDItem.Amount);
                    }
                    else if (oESDItem.SalaryHeadID == 5)
                    {
                        oDTES.FoodAll = Global.MillionFormat(oESDItem.Amount);
                    }
                    else if (oESDItem.SalaryHeadID == 6)
                    {
                        oDTES.FestivalBonus = Global.MillionFormat(oESDItem.Amount);
                    }
                }

                oDTES.GrossSalary = Global.MillionFormat(oESItem.GrossAmount);
                oDTES.ProductionAmount = Global.MillionFormat(oESItem.ProductionAmount);
                oDTES.PBonus = Global.MillionFormat(oESItem.ProductionBonus);
                oDTES.WD = oESItem.TotalWorkingDay;
                oDTES.ABonus = Global.MillionFormat(GetAttBonus(oESItem.EmployeeSalaryID));
                oDTES.ApprovedLeave = GetLeave(oESItem.EmployeeID);
                oDTES.LA = Global.MillionFormat(GetLeaveAllowance(oESItem.EmployeeSalaryID));
                oDTES.OTH = Global.MillionFormat(oESItem.OTHour);
                oDTES.OTR = oESItem.OTRatePerHour;
                oDTES.OTA = Global.MillionFormat(oESItem.OverTimeAmount);
                oDTES.AddShort = Global.MillionFormat(oESItem.AddShort);
                oDTES.Advance = 0;
                oDTES.Deduction = Global.MillionFormat(GetAbsentDeduction(oESItem.EmployeeSalaryID));
                oDTES.RS = Global.MillionFormat(oESItem.RevenueStemp);
                oDTES.NetAmount = Global.MillionFormat(oESItem.NetAmount - oESItem.AddShort);
                oDTES.Signature = "";
                oDTES.JD = oESItem.JoiningDateInString;

                oDTESs.Add(oDTES);
            }

            //serializer.Serialize(stream, oDTESs);
            serializer.Serialize(stream, oDTES);
            stream.Position = 0;
            return File(stream, "application/vnd.ms-excel", "EmplyeeSalaryReport.xls");
            //return File(stream, "application/vnd.ms-excel", "EmplyeeSalaryReport.xls");
        }

        public double GetAttBonus(int nEmployeeSalaryID)
        {

            double nAttBonus = 0;// allowance is considered as Bonus

            foreach (EmployeeSalaryDetailDisciplinaryAction oESDDA in _oEmployeeSalaryDetailDisciplinaryActions)
            {
                if (nEmployeeSalaryID == oESDDA.EmployeeSalaryID && oESDDA.ActionName == "Addition" && oESDDA.Note == "AttBonus")
                {
                    nAttBonus = nAttBonus + oESDDA.Amount;

                }

            }
            return nAttBonus;
        }

        public int GetLeave(int nEmpID)
        {

            int nLeave = 0;

            foreach (AttendanceDaily oATDItem in _oAttendanceDailys)
            {
                if (oATDItem.EmployeeID == nEmpID && oATDItem.IsLeave == true)
                {

                    nLeave++;

                }

            }
            return nLeave;
        }

        public double GetLeaveAllowance(int nEmployeeSalaryID)
        {

            double nLeaveAllowance = 0;

            foreach (EmployeeSalaryDetailDisciplinaryAction oESDDA in _oEmployeeSalaryDetailDisciplinaryActions)
            {
                if (nEmployeeSalaryID == oESDDA.EmployeeSalaryID && oESDDA.ActionName == "Addition" && oESDDA.Note == "PaidLeave")
                {
                    nLeaveAllowance = nLeaveAllowance + oESDDA.Amount;

                }


            }
            return nLeaveAllowance;
        }

        public double GetAbsentDeduction(int nEmployeeSalaryID)
        {

            double nAbsentDeduction = 0;

            foreach (EmployeeSalaryDetailDisciplinaryAction oESDDA in _oEmployeeSalaryDetailDisciplinaryActions)
            {

                if (nEmployeeSalaryID == oESDDA.EmployeeSalaryID && oESDDA.ActionName == "Deduction" && oESDDA.Note != "UnPaidLeave")
                {
                    nAbsentDeduction = nAbsentDeduction + oESDDA.Amount;

                }

            }
            return nAbsentDeduction;
        }

        public Image GetCompanyLogo(Company oCompany)
        {
            if (oCompany.OrganizationLogo != null)
            {
                string fileDirectory = Server.MapPath("~/Content/CompanyLogo.jpg");
                if (System.IO.File.Exists(fileDirectory))
                {
                    System.IO.File.Delete(fileDirectory);
                }

                MemoryStream m = new MemoryStream(oCompany.OrganizationLogo);
                System.Drawing.Image img = System.Drawing.Image.FromStream(m);
                img.Save(fileDirectory, ImageFormat.Jpeg);
                return img;
            }
            else
            {
                return null;
            }
        }

        public ActionResult PrintSalarySheetXL(string sEmpIDs, string sDate, double ts)//SalarySheetV1
        {

            EmployeeSalary oEmployeeSalary = new EmployeeSalary();

            string sStartDate = sDate.Split(',')[0];
            string sEndDate = sDate.Split(',')[1];

            string sSql = "SELECT * FROM View_Employee_WithImage WHERE EmployeeID IN ( " + sEmpIDs + ")";
            //string sSql1 = "SELECT * FROM View_AttendanceDaily  WHERE EmployeeID IN (" + sEmpIDs + ") AND AttendanceDate  BETWEEN '" + sStartDate + "' AND '" + sEndDate + "'";
            string sSql2 = "SELECT * FROM View_EmployeeSalaryDetail WHERE EmployeeSalaryID IN (SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "') ORDER BY SalaryHeadID";
            string sSql3 = "SELECT * FROM View_EmployeeSalary WHERE  EmployeeID IN (" + sEmpIDs + ") AND StartDate='" + sStartDate + "' AND EndDate='" + sEndDate + "' ORDER BY EmployeeCode";
            string sSql4 = "SELECT * FROM EmployeeSalaryDetailDisciplinaryAction WHERE EmployeeSalaryID IN(SELECT EmployeeSalaryID FROM EmployeeSalary WHERE EmployeeID IN(" + sEmpIDs + "))";
            oEmployeeSalary.Employees = Employee.Gets(sSql, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.AttendanceDailys = AttendanceDaily.Gets(sSql1, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.EmployeeSalaryDetails = EmployeeSalaryDetail.Gets(sSql2, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions = EmployeeSalaryDetailDisciplinaryAction.Gets(sSql4, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.EmployeeSalarys = EmployeeSalary.Gets(sSql3, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.ErrorMessage = sDate;

            //List<Company> oCompanys = new List<Company>();
            //oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oEmployeeSalary.Company = oCompanys.First();
            //oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);
            //foreach (Employee oItem in oEmployeeSalary.Employees)
            //{
            //    oItem.EmployeePhoto = GetEmployeePhoto(oItem);
            //}

            var stream = new MemoryStream();
            var serializer = new XmlSerializer(typeof(List<XLSalarySheetV1>));

            XLSalarySheetV1 oXLSalarySheetV1 = new XLSalarySheetV1();
            List<XLSalarySheetV1> oXLSalarySheetV1s = new List<XLSalarySheetV1>();

            foreach (EmployeeSalary oEmpSalaryItem in oEmployeeSalary.EmployeeSalarys)
            {
                oXLSalarySheetV1 = new XLSalarySheetV1();
                foreach (Employee OEmpItem in oEmployeeSalary.Employees)
                {
                    if (OEmpItem.EmployeeID == oEmpSalaryItem.EmployeeID)
                    {
                        //P1 start
                        oXLSalarySheetV1.EmployeeDetails = "Card no : " + OEmpItem.Code + "\nName : " + OEmpItem.Name + "\nDesignation : " + OEmpItem.DesignationName + "\nDate Of Join : " + OEmpItem.DateOfJoinInString;
                        //P1 end

                        //P2 start
                        string sSalaryHeads = "";
                        double nGrossPerEmployee = 0;
                        foreach (EmployeeSalaryDetail oESDItem in oEmployeeSalary.EmployeeSalaryDetails)
                        {
                            if (oESDItem.SalaryHeadType == 1 && oESDItem.EmployeeSalaryID == oEmpSalaryItem.EmployeeSalaryID)
                            {
                                sSalaryHeads = sSalaryHeads + oESDItem.SalaryHeadName + " : " + Global.MillionFormat(oESDItem.Amount) + "\n";
                                nGrossPerEmployee = nGrossPerEmployee + oESDItem.Amount;
                            }
                        }
                        sSalaryHeads = sSalaryHeads + "Gross Salary : " + Global.MillionFormat(nGrossPerEmployee);
                        oXLSalarySheetV1.SalaryPosition = sSalaryHeads;
                        //P2 end

                        //P3 start
                        double nAttTotal = 0;
                        nAttTotal = oEmpSalaryItem.TotalPresent + oEmpSalaryItem.TotalAbsent + oEmpSalaryItem.TotalDayOff + oEmpSalaryItem.TotalPLeave + oEmpSalaryItem.TotalUpLeave;
                        oXLSalarySheetV1.AttStatus = "Present: " + oEmpSalaryItem.TotalPresent + "\nAbsent: " + oEmpSalaryItem.TotalAbsent + "\nOff day: " + oEmpSalaryItem.TotalDayOff + "\nLeave: " + (oEmpSalaryItem.TotalPLeave + oEmpSalaryItem.TotalUpLeave) + "\nTotal=" + nAttTotal;
                        //P3 end

                        // EmployeeSalaryDetailDisciplinaryActions loop  start
                        double nAttBonus = 0;// allowance is considered as Bonus
                        double nLeaveBonus = 0;
                        double nAbsentDeduction = 0;
                        foreach (EmployeeSalaryDetailDisciplinaryAction oESDDA in oEmployeeSalary.EmployeeSalaryDetailDisciplinaryActions)
                        {
                            if (oEmpSalaryItem.EmployeeSalaryID == oESDDA.EmployeeSalaryID && oESDDA.ActionName == "Addition" && oESDDA.Note == "AttBonus")
                            {
                                nAttBonus = nAttBonus + oESDDA.Amount;

                            }
                            if (oEmpSalaryItem.EmployeeSalaryID == oESDDA.EmployeeSalaryID && oESDDA.ActionName == "Addition" && oESDDA.Note == "PaidLeave")
                            {
                                nLeaveBonus = nLeaveBonus + oESDDA.Amount;

                            }
                            if (oEmpSalaryItem.EmployeeSalaryID == oESDDA.EmployeeSalaryID && oESDDA.ActionName == "Deduction" && oESDDA.Note != "UnPaidLeave")
                            {
                                nAbsentDeduction = nAbsentDeduction + oESDDA.Amount;

                            }
                        }
                        // EmployeeSalaryDetailDisciplinaryActions loop  end

                        //P4 start
                        string sAdShort = "";
                        if (oEmpSalaryItem.AddShort < 0)
                        {
                            sAdShort = "(" + Global.MillionFormat((-1) * oEmpSalaryItem.AddShort) + ")";
                        }
                        else
                        {
                            sAdShort = Global.MillionFormat(oEmpSalaryItem.AddShort);
                        }

                        oXLSalarySheetV1.BonusAndShortFall = "Pro. : " + Global.MillionFormat(oEmployeeSalary.ProductionAmount) + "\nP. Bonus : " + Global.MillionFormat(oEmployeeSalary.ProductionBonus) + "\nA. Bonus:" + Global.MillionFormat(nAttBonus) + "\nShort Fall: " + sAdShort;
                        //P4 end

                        //p5 start
                        oXLSalarySheetV1.Allowance = "Leave: " + Global.MillionFormat(nLeaveBonus) + "\nOthers: 0";
                        //p5 end

                        //p6 start
                        oXLSalarySheetV1.AttDeduction = "Absent: " + Global.MillionFormat(nAbsentDeduction);
                        //p6 end

                        //p7 start
                        oXLSalarySheetV1.OverTime = "H: " + oEmpSalaryItem.OTHour + "\nR: " + oEmpSalaryItem.OTRatePerHour + "\nA: " + (oEmpSalaryItem.OTHour * oEmpSalaryItem.OTRatePerHour);
                        //p7 end

                        //p8 start
                        oXLSalarySheetV1.NoWork = "No work day: " + oEmpSalaryItem.TotalNoWorkDay + "\nNo work All.: " + Global.MillionFormat(oEmpSalaryItem.TotalNoWorkDayAllowance);
                        //p8 end

                        //p9 start
                        oXLSalarySheetV1.Deduction = "R. Sta.:" + oEmpSalaryItem.RevenueStemp + "\nAdvance: 0.00 \nTax: 0.00 \nOthers : 0";
                        //p9 end

                        //p10 start
                        oXLSalarySheetV1.NetSalary = Global.MillionFormat(oEmpSalaryItem.DeriveNetAmount);
                        //p10 end

                    }
                }
                oXLSalarySheetV1s.Add(oXLSalarySheetV1);
            }

            serializer.Serialize(stream, oXLSalarySheetV1s);
            stream.Position = 0;
            return File(stream, "application/vnd.ms-excel", "XLSalarySheetV1.xls");
        }

        public ActionResult PrintBankSheet(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, bool bRound, bool IsMatchExact, string SelectedColNames, double ts, string dDateTime, string BankAccID, bool bSearchByBank, string sPrintHeader, float HeaderHeightInch, float FooterHeightInch)
        {
            int nSearchByBankAccID = 0;
            if (bSearchByBank)
            {
                nSearchByBankAccID =Convert.ToInt32(BankAccID);
            }
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false, sGroupIDs, sBlockIDs, IsMatchExact, nSearchByBankAccID);


            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
            string monthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(nMonthID);
            string DateHeader = "Date : " + monthName + ", " + nYear;
            oEmployeeSalary.Params = DateHeader;

            BankAccount oBankAccount = new BankAccount();
            if (Convert.ToInt32(BankAccID) > 0)
            {
                oBankAccount = oBankAccount.Get(Convert.ToInt32(BankAccID), ((User)Session[SessionInfo.CurrentUser]).UserID);
            }
            DateTime dApplyDate = Convert.ToDateTime(dDateTime);
            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Where(x => x.EmployeeSalaryID > 0).Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oEmployeeSalary.BusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }
            oEmployeeSalary.Company = (new Company()).Get(1, (int)Session[SessionInfo.currentUserID]);
            oEmployeeSalary.Company.CompanyLogo = GetCompanyLogo(oEmployeeSalary.Company);
            rptBankSheet oReport = new rptBankSheet();

            List<SignatureSetup> oSignatureSetups = new List<SignatureSetup>();
            oSignatureSetups = SignatureSetup.GetsByReportModule(EnumReportModule.BankPaymentAdvice, (int)Session[SessionInfo.currentUserID]);

            byte[] abytes = oReport.PrepareReport(oEmployeeSalary, oSalarySheetPropertys, SelectedColNames, bRound, oBankAccount, dApplyDate, nMonthID, nYear, oSignatureSetups, sPrintHeader, HeaderHeightInch, FooterHeightInch);
            return File(abytes, "application/pdf");
        }

        public void PrintBankSheet_XL(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, bool bRound, bool IsMatchExact, double ts, string dDateTime, string BankAccID, bool bSearchByBank, string sPrintHeader, float HeaderHeightInch, float FooterHeightInch)
        {
            //List<EmployeeBankAccount> oEmployeeBankAccounts = new List<EmployeeBankAccount>();
            //List<EmployeeSalary> oEmployeeSalarys = new List<EmployeeSalary>();
            //EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            //oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false,sGroupIDs,sBlockIDs);
            //oEmployeeSalarys = oEmployeeSalary.EmployeeSalarys;
            //oEmployeeBankAccounts = oEmployeeSalary.EmployeeBankAccounts;
            int nSearchByBankAccID = 0;
            if (bSearchByBank)
            {
                nSearchByBankAccID = Convert.ToInt32(BankAccID);
            }
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false, sGroupIDs, sBlockIDs, IsMatchExact, nSearchByBankAccID);


            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            bool _bHasOTAllowance = false;
            if (oSalarySheetPropertys.Any(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTAllowance))
            {
                _bHasOTAllowance = true;
            }

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("BANK ADVICE");
                sheet.Name = "BANK ADVICE";

                sheet.Column(2).Width = 8; //SL
                sheet.Column(3).Width = 15; //CODE
                sheet.Column(4).Width = 20; //NAME
                sheet.Column(5).Width = 18; //DEPRTMENT
                sheet.Column(6).Width = 20; //DESIGNATION
                sheet.Column(7).Width = 15; //JOINING
                sheet.Column(8).Width = 20; //CONTACT NO
                sheet.Column(9).Width = 18; //ACCOUNT
                sheet.Column(10).Width = 15; //AMOUNT

                nMaxColumn = 11;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = oBusinessUnits.Count == 1 ? oBusinessUnits[0].Name : oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = "BANK ADVICE"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = (oEmployeeSalary.EmployeeSalarySheets.Count > 0 ? ("From " + oEmployeeSalary.EmployeeSalarySheets[0].StartDateInString + " To " + oEmployeeSalary.EmployeeSalarySheets[0].EndDateInString) : ""); cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;

                #endregion

                #region Table Header 02
                if (oEmployeeSalary.EmployeeSalarySheets.Count <= 0)
                {
                    sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                    cell = sheet.Cells[rowIndex, 2]; cell.Value = "NOTHING TO PRINT"; cell.Style.Font.Bold = true;
                    cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                }
                else
                {
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "CODE"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "NAME"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "DEPARTMENT"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "DESIGNATION"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "JOINING"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "CONTACT NO"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "BANK ACCOUNT"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "AMOUNT PAYBALE"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;
                #endregion

                    #region Table Body

                    int nCount = 0;
                    double nTotalAmount = 0;

                    foreach (RPTSalarySheet oItem in oEmployeeSalary.EmployeeSalarySheets)
                    {
                        if (oItem.BankAmount > 0)
                        {
                            nCount++;
                            colIndex = 2;
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nCount.ToString(); cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.ContactNo; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //List<EmployeeBankAccount> oEBAs = new List<EmployeeBankAccount>();
                            //oEBAs = oEmployeeBankAccounts.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.AccountNo; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                            double nOTAllowance = Math.Round(oItem.OTAmount);
                            double nEmpAmount = 0;

                            if (oItem.BankAmount > 0)
                            {
                                oItem.BankAmount -= ((_bHasOTAllowance) ? 0 : nOTAllowance);
                            }

                            nEmpAmount = oItem.BankAmount;
                            nTotalAmount += nEmpAmount;


                            //double nEmpAmount = 0;
                            //nEmpAmount = oItem.NetAmount - oItem.CashAmount;
                            //nTotalAmount += nEmpAmount;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (bRound == true) ? Math.Round(nEmpAmount, 0) : Math.Round(nEmpAmount, 0); cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            rowIndex++;
                        }
                    }
                    colIndex = 2;
                    sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn - 2].Merge = true;
                    cell = sheet.Cells[rowIndex, 2]; cell.Value = "GRAND TOTAL"; cell.Style.Font.Bold = true; border = cell.Style.Border;
                    cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    cell = sheet.Cells[rowIndex, nMaxColumn - 1]; cell.Value = (bRound == true) ? Math.Round(nTotalAmount, 0) : Math.Round(nTotalAmount, 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                    #endregion
                }
                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=BANK_ADVICE.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        public ActionResult PrintCashSheet(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, bool IsMatchExact, double ts)
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false, sGroupIDs, sBlockIDs, IsMatchExact);

            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);


            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            rptCashSheet oReport = new rptCashSheet();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary, oSalarySheetPropertys);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintSalaryCertificate(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false, sGroupIDs, sBlockIDs, "");
            List<Company> oCompanys = new List<Company>();
            oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            oEmployeeSalary.Company = oCompanys.First();
            rptSalaryCertificate oReport = new rptSalaryCertificate();
            byte[] abytes = oReport.PrepareReport(oEmployeeSalary);
            return File(abytes, "application/pdf");
        }

        #region Salary Summery
        public ActionResult PrintSalarySummary_F2(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, bool bRound, double ts)
        {
            List<SalarySummary_F2> oSalarySummerys = new List<SalarySummary_F2>();
            List<SalarySummaryDetail_F2> oSalarySummaryDetail_F2s = new List<SalarySummaryDetail_F2>();

            oSalarySummerys = SalarySummary_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oSalarySummaryDetail_F2s = SalarySummaryDetail_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            rptSalarySummary_F2 oReport = new rptSalarySummary_F2();
            byte[] abytes = oReport.PrepareReport(oSalarySummerys, oSalarySummaryDetail_F2s, oSalarySheetSignature, oSalarySheetPropertys, bRound);
            return File(abytes, "application/pdf");
        }
        public ActionResult PrintSalarySummary_F5(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, bool bRound, double ts)
        {
            #region Old Code
            //List<SalarySummary_F2> oSalarySummerys = new List<SalarySummary_F2>();
            //List<SalarySummaryDetail_F2> oSalarySummaryDetail_F2s = new List<SalarySummaryDetail_F2>();

            //oSalarySummerys = SalarySummary_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            //oSalarySummaryDetail_F2s = SalarySummaryDetail_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            //string sSQL = "Select * from SalarySheetSignature";
            //var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            //sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            //var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            //rptSalarySummary_F5 oReport = new rptSalarySummary_F5();
            //byte[] abytes = oReport.PrepareReport(oSalarySummerys, oSalarySummaryDetail_F2s, oSalarySheetSignature, oSalarySheetPropertys, bRound);
            //return File(abytes, "application/pdf");
            #endregion

            List<SalarySummary_F2> oSalarySummerys = new List<SalarySummary_F2>();
            List<SalarySummaryDetail_F2> oSalarySummaryDetail_F2s = new List<SalarySummaryDetail_F2>();

            oSalarySummerys = SalarySummary_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oSalarySummaryDetail_F2s = SalarySummaryDetail_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            _oAdditionSalaryHeads = new List<SalarySummaryDetail_F2>();
            _oDeductionSalaryHeads = new List<SalarySummaryDetail_F2>();
            _oAdditionSalaryHeads = oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Addition).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).OrderBy(x => x.SalaryHeadSequence).ToList();
            _oDeductionSalaryHeads = oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Deduction && (x.SalaryHeadID != 8 && x.SalaryHeadID != 20 && x.SalaryHeadID != 25 && x.SalaryHeadID != 26)).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).OrderBy(x => x.SalaryHeadSequence).ToList();
            _oSalarySummary_F2s_Location = oSalarySummerys.GroupBy(x => x.LocationID).Select(x => x.First()).ToList();




            rptSalarySummaryNew_F5 oReport = new rptSalarySummaryNew_F5();
            byte[] abytes = oReport.PrepareReport(oSalarySummerys, oSalarySummaryDetail_F2s, oSalarySheetSignature, oSalarySheetPropertys, bRound);
            return File(abytes, "application/pdf");
        }
        public void ExportIntoExcelSalarySummary_F5(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, bool bRound, double ts)
        {
            List<SalarySummary_F2> oSalarySummerys = new List<SalarySummary_F2>();
            List<SalarySummaryDetail_F2> oSalarySummaryDetail_F2s = new List<SalarySummaryDetail_F2>();

            oSalarySummerys = SalarySummary_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oSalarySummaryDetail_F2s = SalarySummaryDetail_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            _oAdditionSalaryHeads = new List<SalarySummaryDetail_F2>();
            _oDeductionSalaryHeads = new List<SalarySummaryDetail_F2>();
            _oAdditionSalaryHeads = oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Addition).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).OrderBy(x => x.SalaryHeadSequence).ToList();
            _oDeductionSalaryHeads = oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Deduction && (x.SalaryHeadID != 8 && x.SalaryHeadID != 20 && x.SalaryHeadID != 25 && x.SalaryHeadID != 26)).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).OrderBy(x => x.SalaryHeadSequence).ToList();
            _oSalarySummary_F2s_Location = oSalarySummerys.GroupBy(x => x.LocationID).Select(x => x.First()).ToList();



            #region Excel Export
            int nRowIndex = 2, nStartRow = 2, nEndRow = 0, nStartCol = 2, nEndCol = 0;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;
            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Commission Relised");
                sheet.Name = "Commission Relised";

                #region SHEET COLUMN WIDTH
                int nColumn = 1;
                sheet.Column(++nColumn).Width = 6;   // SL NO                
                sheet.Column(++nColumn).Width = 20;  //Department
                sheet.Column(++nColumn).Width = 15;  // ManPower
                sheet.Column(++nColumn).Width = 20;  // Salary/Wages                   
                sheet.Column(++nColumn).Width = 20;  //Total Payable
                foreach (SalarySummaryDetail_F2 oItem in _oAdditionSalaryHeads)
                {
                    sheet.Column(++nColumn).Width = 20;  // Earnings
                }
                sheet.Column(++nColumn).Width = 15;  // Earnings On Att.
                foreach (SalarySummaryDetail_F2 oItem in _oDeductionSalaryHeads)
                {
                    sheet.Column(++nColumn).Width = 20;  // Earnings
                }
                sheet.Column(++nColumn).Width = 15; // Net Payable
                sheet.Column(++nColumn).Width = 15; // Bank
                sheet.Column(++nColumn).Width = 15; // Cash
                nEndCol = nColumn;
                #endregion

                #region Report Header
                Company oCompany = new Company();
                oCompany = oCompany.Get(1, 0);
                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Merge = true;
                cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                nRowIndex = nRowIndex + 1;

                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Merge = true;
                cell.Value = oCompany.Address; cell.Style.Font.Bold = false;
                cell.Style.Font.Size = 12; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                nRowIndex = nRowIndex + 1;

                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Merge = true;
                cell.Value = oCompany.Phone + ";  " + oCompany.Email + ";  " + oCompany.WebAddress; cell.Style.Font.Bold = false;
                cell.Style.Font.Size = 12; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                nRowIndex = nRowIndex + 2;

                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Merge = true;
                cell.Value = "Salary Summery @ " + oSalarySummerys[0].EndDateInString.Remove(0, 3); cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.Font.UnderLine = true; cell.Style.Font.UnderLineType = ExcelUnderLineType.Single;
                nRowIndex = nRowIndex + 1;
                #endregion

                #region Column Header
                int nHeaderIndex = 1;
                cell = sheet.Cells[nRowIndex, ++nHeaderIndex, (nRowIndex + 1), nHeaderIndex]; cell.Merge = true; cell.Value = "SL NO"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, ++nHeaderIndex, (nRowIndex + 1), nHeaderIndex]; cell.Merge = true; cell.Value = "Department"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, ++nHeaderIndex, (nRowIndex + 1), nHeaderIndex]; cell.Merge = true; cell.Value = "ManPower"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, ++nHeaderIndex, (nRowIndex + 1), nHeaderIndex]; cell.Merge = true; cell.Value = "Salary/Wages"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, ++nHeaderIndex, (nRowIndex + 1), nHeaderIndex]; cell.Merge = true; cell.Value = "Total Payable"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, ++nHeaderIndex, nRowIndex, ((nHeaderIndex - 1) + _oAdditionSalaryHeads.Count)]; cell.Merge = true; cell.Value = "Earnings"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nHeaderIndex = (nHeaderIndex + (_oAdditionSalaryHeads.Count - 1));

                cell = sheet.Cells[nRowIndex, ++nHeaderIndex, (nRowIndex + 1), nHeaderIndex]; cell.Merge = true; cell.Value = "Earnings On Att."; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, ++nHeaderIndex, nRowIndex, ((nHeaderIndex - 1) + _oDeductionSalaryHeads.Count)]; cell.Merge = true; cell.Value = "Deduction"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nHeaderIndex = (nHeaderIndex + (_oDeductionSalaryHeads.Count - 1));

                cell = sheet.Cells[nRowIndex, ++nHeaderIndex, (nRowIndex + 1), nHeaderIndex]; cell.Merge = true; cell.Value = "Net Payable"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, ++nHeaderIndex, (nRowIndex + 1), nHeaderIndex]; cell.Merge = true; cell.Value = "Bank Amount"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, ++nHeaderIndex, (nRowIndex + 1), nHeaderIndex]; cell.Merge = true; cell.Value = "Cash Amount"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex = nRowIndex + 1;

                nHeaderIndex = 6;
                foreach (SalarySummaryDetail_F2 oItem in _oAdditionSalaryHeads)
                {
                    cell = sheet.Cells[nRowIndex, ++nHeaderIndex]; cell.Value = oItem.SalaryHeadName; cell.Style.Font.Bold = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                nHeaderIndex = nHeaderIndex + 1;
                foreach (SalarySummaryDetail_F2 oItem in _oDeductionSalaryHeads)
                {
                    cell = sheet.Cells[nRowIndex, ++nHeaderIndex]; cell.Value = oItem.SalaryHeadName; cell.Style.Font.Bold = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                nRowIndex = nRowIndex + 1;
                #endregion

                Dictionary<string, string> aGrandTotals = new Dictionary<string, string>();
                string sStartCell = "", sEndCell = ""; int nCount = 0; int nBUID = 0; int nLocationID = 0; bool bIsPrintSubTotal = false; int nTotalIndex = 0;
                nStartRow = nRowIndex;
                foreach (SalarySummary_F2 oItem in oSalarySummerys)
                {
                    if (oItem.BusinessUnitID != nBUID || oItem.LocationID != nLocationID)
                    {
                        if (bIsPrintSubTotal)
                        {
                            #region Sub Total
                            nTotalIndex = 3;
                            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nTotalIndex]; cell.Merge = true;
                            cell.Value = "Sub Total :"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //Man Power
                            aGrandTotals.Add((aGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + nEndRow.ToString()));
                            sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                            sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                            cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //Salary & Wages
                            sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                            sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                            cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //Total Payable
                            sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                            sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                            cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //Addition
                            foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                            {
                                sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }

                            //Earnings On Att.
                            sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                            sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                            cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //Deductions
                            foreach (SalarySummaryDetail_F2 oDetailDeductItem in _oDeductionSalaryHeads)
                            {
                                sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                                sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }

                            //Net Payable
                            sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                            sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                            cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //Bank Amount
                            sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                            sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                            cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            //Cash Amount
                            sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                            sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                            cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            nRowIndex = nRowIndex + 1;
                            nCount = 0;
                            #endregion
                        }

                        #region Sub Total & Location Caption
                        cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Merge = true;
                        cell.Value = "BU Name :" + oItem.BusinessUnitName + ", Location Name :" + oItem.LocationName; cell.Style.Font.Bold = true;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        nRowIndex = nRowIndex + 1;
                        nStartRow = nRowIndex;
                        #endregion
                    }
                    #region Data
                    nCount++;
                    int nDataIndex = 1;
                    cell = sheet.Cells[nRowIndex, ++nDataIndex]; cell.Value = nCount.ToString(); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                    cell.Style.Numberformat.Format = "###0;(###0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, ++nDataIndex]; cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, ++nDataIndex]; cell.Value = oItem.NoOfEmp; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                    cell.Style.Numberformat.Format = "###0;(###0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, ++nDataIndex]; cell.Value = Math.Round(oItem.GrossSalary); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, ++nDataIndex]; cell.Value = Math.Round(oItem.TotalPayable); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    List<SalarySummaryDetail_F2> oTempDetails = new List<SalarySummaryDetail_F2>();
                    foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                    {
                        oTempDetails = new List<SalarySummaryDetail_F2>();
                        oTempDetails = oSalarySummaryDetail_F2s.Where(x => x.BusinessUnitID == oItem.BusinessUnitID && x.LocationID == oItem.LocationID && x.DepartmentID == oItem.DepartmentID && x.SalaryHeadID == oDetailAddItem.SalaryHeadID).ToList();
                        cell = sheet.Cells[nRowIndex, ++nDataIndex]; cell.Value = oTempDetails.Count > 0 ? Math.Round(oTempDetails[0].Amount) : 0.00; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                        border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    cell = sheet.Cells[nRowIndex, ++nDataIndex]; cell.Value = Math.Round(oItem.EOA); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    foreach (SalarySummaryDetail_F2 oDetailDeductItem in _oDeductionSalaryHeads)
                    {
                        oTempDetails = new List<SalarySummaryDetail_F2>();
                        oTempDetails = oSalarySummaryDetail_F2s.Where(x => x.BusinessUnitID == oItem.BusinessUnitID && x.LocationID == oItem.LocationID && x.DepartmentID == oItem.DepartmentID && x.SalaryHeadID == oDetailDeductItem.SalaryHeadID).ToList();
                        cell = sheet.Cells[nRowIndex, ++nDataIndex]; cell.Value = oTempDetails.Count > 0 ? Math.Round(oTempDetails[0].Amount) : 0.00; cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                        border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    cell = sheet.Cells[nRowIndex, ++nDataIndex]; cell.Value = Math.Round(oItem.NetPay); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, ++nDataIndex]; cell.Value = Math.Round(oItem.BankPay); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, ++nDataIndex]; cell.Value = Math.Round(oItem.CashPay); cell.Style.Font.Bold = false; cell.Style.WrapText = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    #endregion


                    nBUID = oItem.BusinessUnitID;
                    nLocationID = oItem.LocationID;
                    bIsPrintSubTotal = true;
                    nEndRow = nRowIndex;
                    nRowIndex++;
                }

                #region Sub Total
                nTotalIndex = 3;
                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nTotalIndex]; cell.Merge = true;
                cell.Value = "Sub Total :"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Man Power
                aGrandTotals.Add((aGrandTotals.Count + 1).ToString(), (nStartRow.ToString() + "," + nEndRow.ToString()));
                sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Salary & Wages
                sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Total Payable
                sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Addition
                foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                //Earnings On Att.
                sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Deductions
                foreach (SalarySummaryDetail_F2 oDetailDeductItem in _oDeductionSalaryHeads)
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                //Net Payable
                sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Bank Amount
                sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Cash Amount
                sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;
                #endregion


                #region Grand Total
                string sFormula = ""; int nTempStartRow = 0, nTempEndRow = 0;
                nTotalIndex = 3;
                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nTotalIndex]; cell.Merge = true;
                cell.Value = "Grand Total :"; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Man Power
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Salary & Wages
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Total Payable
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Addition
                foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                {
                    #region Formula
                    sFormula = "";
                    if (aGrandTotals.Count > 0)
                    {
                        nTotalIndex = nTotalIndex + 1;
                        sFormula = "SUM(";
                        for (int i = 1; i <= aGrandTotals.Count; i++)
                        {
                            nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                            nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                            sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                            sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                            sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                        }
                        if (sFormula.Length > 0)
                        {
                            sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                        }
                        sFormula = sFormula + ")";
                    }
                    else
                    {
                        sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                        sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                    }
                    #endregion
                    cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                //Earnings On Att.
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Deductions
                foreach (SalarySummaryDetail_F2 oDetailDeductItem in _oDeductionSalaryHeads)
                {
                    #region Formula
                    sFormula = "";
                    if (aGrandTotals.Count > 0)
                    {
                        nTotalIndex = nTotalIndex + 1;
                        sFormula = "SUM(";
                        for (int i = 1; i <= aGrandTotals.Count; i++)
                        {
                            nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                            nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                            sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                            sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                            sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                        }
                        if (sFormula.Length > 0)
                        {
                            sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                        }
                        sFormula = sFormula + ")";
                    }
                    else
                    {
                        sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                        sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                    }
                    #endregion
                    cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                    border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                //Net Payable
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Bank Amount
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //Cash Amount
                #region Formula
                sFormula = "";
                if (aGrandTotals.Count > 0)
                {
                    nTotalIndex = nTotalIndex + 1;
                    sFormula = "SUM(";
                    for (int i = 1; i <= aGrandTotals.Count; i++)
                    {
                        nTempStartRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[0]);
                        nTempEndRow = Convert.ToInt32(Convert.ToString(aGrandTotals[i.ToString()]).Split(',')[1]);
                        sStartCell = Global.GetExcelCellName(nTempStartRow, nTotalIndex);
                        sEndCell = Global.GetExcelCellName(nTempEndRow, nTotalIndex);
                        sFormula = sFormula + sStartCell + ":" + sEndCell + ",";
                    }
                    if (sFormula.Length > 0)
                    {
                        sFormula = sFormula.Remove(sFormula.Length - 1, 1);
                    }
                    sFormula = sFormula + ")";
                }
                else
                {
                    sStartCell = Global.GetExcelCellName(nStartRow, ++nTotalIndex);
                    sEndCell = Global.GetExcelCellName(nEndRow, nTotalIndex);
                    sFormula = "SUM(" + sStartCell + ":" + sEndCell + ")";
                }
                #endregion
                cell = sheet.Cells[nRowIndex, nTotalIndex]; cell.Formula = sFormula; cell.Style.Font.Bold = true;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                border = cell.Style.Border; border.Top.Style = border.Bottom.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;
                #endregion

                cell = sheet.Cells[1, 1, nRowIndex, nEndCol + 1];
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SalarySummery.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }

        public ActionResult PrintOTSummary(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, string sGroupIDs, string sBlockIDs, bool bRound, double ts)
        {
            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            var oOTExceptCompliances = new List<OTExceptCompliance>();
            var oCompany = new Company();
            List<PayrollProcessManagement> oPayrollProcessManagements = new List<PayrollProcessManagement>();
            try
            {
                //DateTime dtFrom = DateTime.MinValue;
                //DateTime dtTo = DateTime.MinValue;

                //DateTime.TryParse(sDate.Split(',')[0], out dtFrom);
                //DateTime.TryParse(sDate.Split(',')[1], out dtTo);
                //string sLocationIDs = (nLocationID > 0) ? nLocationID.ToString() : "";

                oOTExceptCompliances = OTExceptCompliance.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, sBlockIDs, nPayType, nMonthID, nYear, bNewJoin, false, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                string BUIDs = string.Join(",", oOTExceptCompliances.Select(p => p.BusinessUnitID).Distinct().ToList());
                if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

                var oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
                oCompany = (oCompanys != null && oCompanys.Count() > 0) ? oCompanys.FirstOrDefault() : new Company();

                string sSql = "SELECT * FROM View_PayrollProcessManagement WHERE  MonthID=" + nMonthID + " AND DATEPART(YYYY,SalaryTo)= Convert(varchar," + nYear + ")";
                oPayrollProcessManagements = PayrollProcessManagement.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            }
            catch (Exception e)
            {
                var oOTExceptCompliance = new OTExceptCompliance();
                oOTExceptCompliance.ErrorMessage = e.Message;
            }

            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            string sDate = "";
            if (oPayrollProcessManagements.Count > 0)
            {
                sDate = oPayrollProcessManagements[0].SalaryFromInString + "," + oPayrollProcessManagements[0].SalaryToInString;
            }
            bool bExceptComp = false;
            rptOTSummary oReport = new rptOTSummary();
            byte[] abytes = oReport.PrepareReport(oOTExceptCompliances, oCompany, oPayrollProcessManagements, sDate, oSalarySheetSignature, bExceptComp, oBusinessUnits, true);//compliance
            return File(abytes, "application/pdf");
        }
        public ActionResult PrintOTSummaryF2(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, string sGroupIDs, string sBlockIDs, bool bRound, double ts)
        {
            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            var oOTExceptCompliances = new List<OTExceptCompliance>();
            var oCompany = new Company();
            List<PayrollProcessManagement> oPayrollProcessManagements = new List<PayrollProcessManagement>();
            try
            {
                //DateTime dtFrom = DateTime.MinValue;
                //DateTime dtTo = DateTime.MinValue;

                //DateTime.TryParse(sDate.Split(',')[0], out dtFrom);
                //DateTime.TryParse(sDate.Split(',')[1], out dtTo);
                //string sLocationIDs = (nLocationID > 0) ? nLocationID.ToString() : "";

                oOTExceptCompliances = OTExceptCompliance.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, sBlockIDs, nPayType, nMonthID, nYear, bNewJoin, false, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                string BUIDs = string.Join(",", oOTExceptCompliances.Select(p => p.BusinessUnitID).Distinct().ToList());
                if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

                var oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
                oCompany = (oCompanys != null && oCompanys.Count() > 0) ? oCompanys.FirstOrDefault() : new Company();

                string sSql = "SELECT * FROM View_PayrollProcessManagement WHERE  MonthID=" + nMonthID + " AND DATEPART(YYYY,SalaryTo)= Convert(varchar," + nYear + ")";
                oPayrollProcessManagements = PayrollProcessManagement.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            }
            catch (Exception e)
            {
                var oOTExceptCompliance = new OTExceptCompliance();
                oOTExceptCompliance.ErrorMessage = e.Message;
            }

            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            string sDate = "";
            if (oPayrollProcessManagements.Count > 0)
            {
                sDate = oPayrollProcessManagements[0].SalaryFromInString + "," + oPayrollProcessManagements[0].SalaryToInString;
            }
            bool bExceptComp = false;
            rptOTSummary oReport = new rptOTSummary();
            byte[] abytes = oReport.PrepareReport(oOTExceptCompliances, oCompany, oPayrollProcessManagements, sDate, oSalarySheetSignature, bExceptComp, oBusinessUnits, false);
            return File(abytes, "application/pdf");
        }

        public ActionResult PrintSalarySummary_BUWise(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)
        {
            List<SalarySummary_F2> oSalarySummerys = new List<SalarySummary_F2>();
            List<SalarySummaryDetail_F2> oSalarySummaryDetail_F2s = new List<SalarySummaryDetail_F2>();
            List<SalarySummary_F2> oSalarySummeryGroups = new List<SalarySummary_F2>();
            List<SalarySummaryDetail_F2> oSalarySummeryGroupDetails = new List<SalarySummaryDetail_F2>();

            oSalarySummerys = SalarySummary_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oSalarySummaryDetail_F2s = SalarySummaryDetail_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            oSalarySummeryGroups = SalarySummary_F2.GetsGroup(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, (int)EnumEmployeeGrouping.StaffWorker, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oSalarySummeryGroupDetails = SalarySummaryDetail_F2.GetsGroupDetail(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, (int)EnumEmployeeGrouping.StaffWorker, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            rptSalarySummary_BUWise oReport = new rptSalarySummary_BUWise();
            byte[] abytes = oReport.PrepareReport(oSalarySummerys, oSalarySummaryDetail_F2s, oSalarySheetSignature, oSalarySheetPropertys, oSalarySummeryGroups, oSalarySummeryGroupDetails);
            return File(abytes, "application/pdf");
        }

        public void BUWiseSalaryExcel(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)
        {
            bool _bHasOTAllowance = false;
            List<SalarySummary_F2> oSalarySummarys = new List<SalarySummary_F2>();
            List<SalarySummary_F2> oSalarySummaryTotals = new List<SalarySummary_F2>();
            List<SalarySummaryDetail_F2> oSalarySummaryDetail_F2s = new List<SalarySummaryDetail_F2>();
            List<SalarySummary_F2> oSalarySummeryGroups = new List<SalarySummary_F2>();
            List<SalarySummaryDetail_F2> oSalarySummeryGroupDetails = new List<SalarySummaryDetail_F2>();
            List<SalarySummaryDetail_F2> _oAdditionSalaryHeadGroups = new List<SalarySummaryDetail_F2>();
            List<SalarySummaryDetail_F2> _oDeductionSalaryHeadGroups = new List<SalarySummaryDetail_F2>();
            List<SalarySummaryDetail_F2> _oSalarySummaryDetail_Groups = new List<SalarySummaryDetail_F2>();


            oSalarySummarys = SalarySummary_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oSalarySummaryDetail_F2s = SalarySummaryDetail_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            oSalarySummarys.ForEach(x => oSalarySummaryTotals.Add(x));

            oSalarySummeryGroups = SalarySummary_F2.GetsGroup(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, (int)EnumEmployeeGrouping.StaffWorker, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oSalarySummeryGroupDetails = SalarySummaryDetail_F2.GetsGroupDetail(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, (int)EnumEmployeeGrouping.StaffWorker, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);


            //_oSalarySummaryDetail_Groups = oSalarySummaryDetail_Groups;

            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            if (oSalarySheetPropertys.Any(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTAllowance))
            {
                _bHasOTAllowance = true;
            }
            _oAdditionSalaryHeads = oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Addition).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).ToList();
            _oDeductionSalaryHeads = oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Deduction).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).ToList();

            _oAdditionSalaryHeadGroups = oSalarySummeryGroupDetails.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Addition).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).ToList();
            _oDeductionSalaryHeadGroups = oSalarySummeryGroupDetails.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Deduction).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).ToList();

            int nMaxColumn = 0;
            int colIndex = 1;
            int rowIndex = 2;
            int _nColumns = 0;

            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("BUWise Salary");
                sheet.Name = "BUWise Salary";

                int nCol = 6;
                if (_bHasOTAllowance)
                {
                    nCol = 8;
                }
                _nColumns = nCol + _oAdditionSalaryHeads.Count + _oDeductionSalaryHeads.Count + 3;

                int nCount = 1;
                sheet.Column(nCount++).Width = 8;
                sheet.Column(nCount++).Width = 25;
                sheet.Column(nCount++).Width = 15;
                if (_bHasOTAllowance)
                {
                    sheet.Column(nCount++).Width = 15;
                }
                sheet.Column(nCount++).Width = 15;
                if (_bHasOTAllowance)
                {
                    sheet.Column(nCount++).Width = 15;
                }
                sheet.Column(nCount++).Width = 15;
                sheet.Column(nCount++).Width = 15;
                int i = 0;
                for (i = nCol; i < _nColumns - 3; i++)
                {
                    sheet.Column(i).Width = 15;
                }
                sheet.Column(i++).Width = 15;
                sheet.Column(i++).Width = 15;
                sheet.Column(i++).Width = 15;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                nMaxColumn = i;
                int midIndex = i / 2;
                cell = sheet.Cells[rowIndex, midIndex]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, midIndex]; cell.Value = "BUWise Salary"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                rowIndex = rowIndex + 1;
                colIndex = 1;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Business Unit"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "ManPower"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                if (_bHasOTAllowance)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OTHr"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Salary/Wages"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                if (_bHasOTAllowance)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Payable"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total Payable"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Earnings On Att."; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (SalarySummaryDetail_F2 oItem in _oAdditionSalaryHeads)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.SalaryHeadName; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }
                foreach (SalarySummaryDetail_F2 oItem in _oDeductionSalaryHeads)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.SalaryHeadName; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Net Payable"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Bank"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Cash"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                colIndex = 1;


                oSalarySummarys = oSalarySummarys.OrderBy(x => x.BusinessUnitName).ToList();
                while (oSalarySummarys.Count > 0)
                {
                    List<SalarySummary_F2> oTempSS = new List<SalarySummary_F2>();
                    oTempSS = oSalarySummarys.Where(x => x.BusinessUnitID == oSalarySummarys[0].BusinessUnitID).ToList();

                    var data = oTempSS.GroupBy(x => new { x.BusinessUnitID }, (key, grp) => new
                    {
                        BusinessUnitID = key.BusinessUnitID,
                        BusinessUnitName = grp.First().BusinessUnitName,
                        NoOfEmp = grp.Sum(x => x.NoOfEmp),
                        OTHr = grp.Sum(x => x.OTHr),
                        EOA = grp.Sum(x => x.EOA),
                        GrossSalary = grp.Sum(x => x.GrossSalary),
                        OTAmount = grp.Sum(x => x.OTAmount),
                        TotalPayable = grp.Sum(x => x.TotalPayable),
                        NetPay = grp.Sum(x => x.NetPay),
                        BankPay = grp.Sum(x => x.BankPay),
                        CashPay = grp.Sum(x => x.CashPay),
                        List = grp,

                    }).OrderBy(x => x.BusinessUnitName).ToList();
                    foreach (var oItem in data)
                    {
                        nCount++;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nCount; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.BusinessUnitName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NoOfEmp; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        if (_bHasOTAllowance)
                        {
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTHr; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.GrossSalary; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        if (_bHasOTAllowance)
                        {
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTAmount; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.TotalPayable; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = this.GetAmountInStr(oItem.EOA, true, true); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        List<SalarySummaryDetail_F2> oTempDetails = new List<SalarySummaryDetail_F2>();

                        foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                        {
                            oTempDetails = new List<SalarySummaryDetail_F2>();
                            oTempDetails = oSalarySummaryDetail_F2s.Where(x => x.BusinessUnitID == oItem.BusinessUnitID && x.SalaryHeadID == oDetailAddItem.SalaryHeadID).ToList();
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oTempDetails.Count > 0 ? this.GetAmountInStr(oSalarySummaryDetail_F2s.Where(x => x.BusinessUnitID == oItem.BusinessUnitID && x.SalaryHeadID == oDetailAddItem.SalaryHeadID).Sum(x => x.Amount), true, true) : "-"; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                        {
                            oTempDetails = new List<SalarySummaryDetail_F2>();
                            oTempDetails = oSalarySummaryDetail_F2s.Where(x => x.BusinessUnitID == oItem.BusinessUnitID && x.SalaryHeadID == oDeductionAddItem.SalaryHeadID).ToList();
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oTempDetails.Count > 0 ? this.GetAmountInStr(oSalarySummaryDetail_F2s.Where(x => x.BusinessUnitID == oItem.BusinessUnitID && x.SalaryHeadID == oDeductionAddItem.SalaryHeadID).Sum(x => x.Amount), true, true) : "-"; cell.Style.Font.Bold = false;
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        double nNetPay = oItem.NetPay;
                        if (_bHasOTAllowance == false)
                        {
                            double nTotalOTAmount = oItem.OTAmount;
                            nNetPay -= nTotalOTAmount;
                        }
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NetPay > 0 ? this.GetAmountInStr(nNetPay, true, true) : "-"; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.BankPay > 0 ? this.GetAmountInStr(oItem.BankPay, true, true) : "-"; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CashPay > 0 ? this.GetAmountInStr(oItem.CashPay, true, true) : "-"; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        rowIndex++;
                        colIndex = 1;
                    }


                    oSalarySummarys.RemoveAll(x => x.BusinessUnitID == oTempSS[0].BusinessUnitID);

                }

                colIndex = 1;
                cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex + 1]; cell.Value = "GRAND TOTAL"; cell.Style.Font.Bold = true; cell.Merge = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                colIndex += 2;

                double TotalNoOfEmp = oSalarySummaryTotals.Sum(x => x.NoOfEmp);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalNoOfEmp; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                if (_bHasOTAllowance)
                {
                    double TotalOTHour = oSalarySummaryTotals.Sum(x => x.OTHr);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalOTHour; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }
                double nTotalGrossSalary = oSalarySummaryTotals.Sum(x => x.GrossSalary);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalGrossSalary; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                if (_bHasOTAllowance)
                {
                    double nTotalOTAmount = oSalarySummaryTotals.Sum(x => x.OTAmount);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalOTAmount; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }
                double nTotalPayable = oSalarySummaryTotals.Sum(x => x.TotalPayable);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalPayable; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                double nEOA = oSalarySummaryTotals.Sum(x => x.EOA);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = this.GetAmountInStr(nEOA, true, true); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                double nHAmount = 0;
                foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                {
                    nHAmount = oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID).Sum(x => x.Amount);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nHAmount > 0 ? this.GetAmountInStr(nHAmount, true, true) : "-"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }
                foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                {
                    nHAmount = oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID).Sum(x => x.Amount);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nHAmount > 0 ? this.GetAmountInStr(nHAmount, true, true) : "-"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }

                double nTotalNetPay = oSalarySummaryTotals.Sum(x => x.NetPay);
                if (_bHasOTAllowance == false)
                {
                    double nTotalOTAmount = oSalarySummaryTotals.Sum(x => x.OTAmount);
                    nTotalNetPay -= nTotalOTAmount;
                }
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalNetPay > 0 ? this.GetAmountInStr(nTotalNetPay, true, true) : "-"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                double nTotalBankPay = oSalarySummaryTotals.Sum(x => x.BankPay);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalBankPay > 0 ? this.GetAmountInStr(nTotalBankPay, true, true) : "-"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                double nTotalCashPay = oSalarySummaryTotals.Sum(x => x.CashPay);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalCashPay > 0 ? this.GetAmountInStr(nTotalCashPay, true, true) : "-"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex++;
                colIndex = 1;

                rowIndex++;
                int nCountGroup = 0;

                //Group
                foreach (var oItem in oSalarySummeryGroups)
                {
                    nCountGroup++;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nCountGroup; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;



                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.GroupName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NoOfEmp; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    if (_bHasOTAllowance)
                    {
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTHr; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.GrossSalary; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    if (_bHasOTAllowance)
                    {
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = this.GetAmountInStr(oItem.OTAmount, true, true); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = this.GetAmountInStr(oItem.TotalPayable, true, true); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = this.GetAmountInStr(oItem.EOA, true, true); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    List<SalarySummaryDetail_F2> oTempDetails = new List<SalarySummaryDetail_F2>();

                    foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeadGroups)
                    {
                        oTempDetails = new List<SalarySummaryDetail_F2>();
                        oTempDetails = oSalarySummeryGroupDetails.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID && x.EmployeeTypeID == oDetailAddItem.EmployeeTypeID).ToList();

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oTempDetails.Count > 0 ? this.GetAmountInStr(oSalarySummeryGroupDetails.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID && x.EmployeeTypeID == oDetailAddItem.EmployeeTypeID).Sum(x => x.Amount), true, true) : "-"; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }
                    foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeadGroups)
                    {
                        oTempDetails = new List<SalarySummaryDetail_F2>();
                        oTempDetails = oSalarySummeryGroupDetails.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID && x.EmployeeTypeID == oDeductionAddItem.EmployeeTypeID).ToList();
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oTempDetails.Count > 0 ? this.GetAmountInStr(oSalarySummeryGroupDetails.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID && x.EmployeeTypeID == oDeductionAddItem.EmployeeTypeID).Sum(x => x.Amount), true, true) : "-"; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }

                    //_oPdfPCell = new PdfPCell(new Phrase(oItem.Stamp>0?this.GetAmountInStr(oItem.Stamp, true, true):"-", _oFontStyle));  _oPdfPCell.FixedHeight = RowHeight;
                    //_oPdfPCell.HorizontalAlignment = Element.ALIGN_RIGHT; _oPdfPCell.VerticalAlignment = Element.ALIGN_MIDDLE; _oPdfPCell.BackgroundColor = BaseColor.WHITE; _oPdfPTable.AddCell(_oPdfPCell);

                    double nNetPay = oItem.NetPay;
                    if (_bHasOTAllowance == false)
                    {
                        double nTotalOTAmount = oItem.OTAmount;
                        nNetPay -= nTotalOTAmount;
                    }

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NetPay > 0 ? this.GetAmountInStr(nNetPay, true, true) : "-"; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.BankPay > 0 ? this.GetAmountInStr(oItem.BankPay, true, true) : "-"; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CashPay > 0 ? this.GetAmountInStr(oItem.CashPay, true, true) : "-"; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 1;
                }

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=BUWise Salary.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }

        }

        public ActionResult PrintSalarySummary_F3(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)
        {
            List<SalarySummary_F2> oSalarySummerys = new List<SalarySummary_F2>();
            List<SalarySummaryDetail_F2> oSalarySummaryDetail_F2s = new List<SalarySummaryDetail_F2>();

            oSalarySummerys = SalarySummary_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oSalarySummaryDetail_F2s = SalarySummaryDetail_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);

            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            rptSalarySummary_F3 oReport = new rptSalarySummary_F3();
            byte[] abytes = oReport.PrepareReport(oSalarySummerys, oSalarySummaryDetail_F2s, oSalarySheetSignature);
            return File(abytes, "application/pdf");
        }
        //Excel salary summery F2
        public void ExcelSalarySummery_F2(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, bool bRound, double ts, int PrintFormat)
        {
            bool isRound = bRound;

            oSalarySummerys = SalarySummary_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oSalarySummaryDetail_F2s = SalarySummaryDetail_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);


            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            int _nColumns = 0;

            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Salary Summery");
                sheet.Name = "Salary Summery";

                _oSalarySummary_F2s = oSalarySummerys;
                _oSalarySummaryDetail_F2s = oSalarySummaryDetail_F2s;

                _oAdditionSalaryHeads = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Addition).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).ToList();
                _oDeductionSalaryHeads = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Deduction).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).ToList();
                _oSalarySummary_F2s_Location = oSalarySummerys.GroupBy(x => x.LocationID).Select(x => x.First()).ToList();

                _nColumns = 7 + _oAdditionSalaryHeads.Count + _oDeductionSalaryHeads.Count + 4;

                int i = 1;
                sheet.Column(i++).Width = 15;
                sheet.Column(i++).Width = 20;
                sheet.Column(i++).Width = 15;
                sheet.Column(i++).Width = 15;
                //
                if (PrintFormat == 4)
                {
                    for (int j = 0; j < 3; j++)
                    {
                        sheet.Column(i++ + j).Width = 15;
                    }
                }
                //
                sheet.Column(i++).Width = 15;
                sheet.Column(i++).Width = 15;
                sheet.Column(i++).Width = 15;
                for (; i < _nColumns - 4; i++)
                {
                    sheet.Column(i).Width = 20;
                }
                sheet.Column(i++).Width = 15;
                //sheet.Column(i++).Width = 15;
                sheet.Column(i++).Width = 20;
                sheet.Column(i++).Width = 20;
                sheet.Column(i++).Width = 20;

                nMaxColumn = i;
                int midIndex = i / 2;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, midIndex]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, midIndex]; cell.Value = "Salary Summery"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                rowIndex = rowIndex + 1;
                cell = sheet.Cells[rowIndex, midIndex]; cell.Value = "From " + _oSalarySummary_F2s[0].StartDateInString + " To " + _oSalarySummary_F2s[0].EndDateInString; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 2;

                #endregion

                _oSalarySummary_F2s = _oSalarySummary_F2s.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ToList();
                _oSalarySummary_F2s.ForEach(x => _oTempSalarySummary_F2s.Add(x));


                colIndex = 1;
                int nCount = 0;
                int _nRowCount = 0;
                while (_oSalarySummary_F2s.Count > 0)
                {
                    List<SalarySummary_F2> oTempSS = new List<SalarySummary_F2>();
                    oTempSS = _oSalarySummary_F2s.Where(x => x.BusinessUnitID == _oSalarySummary_F2s[0].BusinessUnitID && x.LocationID == _oSalarySummary_F2s[0].LocationID).ToList();
                    //PrintSalarySummary_F2_Ex(oTempSS, rowIndex);
                    colIndex = 1;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "BusinessUnit-" + _oSalarySummary_F2s[0].BusinessUnitName + "Location-" + _oSalarySummary_F2s[0].LocationName; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex = rowIndex + 1;
                    colIndex = 1;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Department"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "ManPower"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OTHr"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    if (PrintFormat == 4)
                    {
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "1st OT"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "2nd OT"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "3rd OT"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Salary/Wages"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Payable"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total Payable"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    foreach (SalarySummaryDetail_F2 oItem in _oAdditionSalaryHeads)
                    {
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.SalaryHeadName; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }
                    foreach (SalarySummaryDetail_F2 oItem in _oDeductionSalaryHeads)
                    {
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.SalaryHeadName; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }
                    //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Stamp"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Net Payable"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Bank"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Cash"; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex = rowIndex + 1;
                    foreach (SalarySummary_F2 oItem in oTempSS)
                    {
                        colIndex = 1;
                        _nRowCount++;
                        nCount++;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nCount;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DepartmentName; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NoOfEmp;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (isRound) ? Math.Round(oItem.OTHr, 0) : Math.Round(oItem.OTHr, 2);
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (PrintFormat == 4)
                        {
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (isRound) ? Math.Round(oItem.FirstOT, 0) : Math.Round(oItem.FirstOT, 2);
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (isRound) ? Math.Round(oItem.SecondOT, 0) : Math.Round(oItem.SecondOT, 2);
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (isRound) ? Math.Round(oItem.ThirdOT, 0) : Math.Round(oItem.ThirdOT, 2);
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (isRound) ? Math.Round(oItem.GrossSalary, 0) : Math.Round(oItem.GrossSalary, 2); //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (isRound) ? Math.Round(oItem.OTAmount, 0) : Math.Round(oItem.OTAmount, 2); //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (isRound) ? Math.Round(oItem.TotalPayable, 0) : Math.Round(oItem.TotalPayable, 2); //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        List<SalarySummaryDetail_F2> oTempDetails = new List<SalarySummaryDetail_F2>();

                        foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                        {
                            oTempDetails = new List<SalarySummaryDetail_F2>();
                            oTempDetails = _oSalarySummaryDetail_F2s.Where(x => x.BusinessUnitID == oItem.BusinessUnitID && x.LocationID == oItem.LocationID && x.DepartmentID == oItem.DepartmentID && x.SalaryHeadID == oDetailAddItem.SalaryHeadID).ToList();

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oTempDetails.Count > 0 ? (isRound) ? Math.Round(oTempDetails[0].Amount, 0) : Math.Round(oTempDetails[0].Amount, 2) : 0; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                        {
                            oTempDetails = new List<SalarySummaryDetail_F2>();
                            oTempDetails = _oSalarySummaryDetail_F2s.Where(x => x.BusinessUnitID == oItem.BusinessUnitID && x.LocationID == oItem.LocationID && x.DepartmentID == oItem.DepartmentID && x.SalaryHeadID == oDeductionAddItem.SalaryHeadID).ToList();

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oTempDetails.Count > 0 ? (isRound) ? Math.Round(oTempDetails[0].Amount, 0) : Math.Round(oTempDetails[0].Amount, 2) : 0; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Stamp > 0 ? oItem.Stamp : 0; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NetPay > 0 ? (isRound) ? Math.Round(oItem.NetPay, 0) : Math.Round(oItem.NetPay, 2) : 0; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.BankPay > 0 ? (isRound) ? Math.Round(oItem.BankPay, 0) : Math.Round(oItem.BankPay, 2) : 0; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CashPay > 0 ? (isRound) ? Math.Round(oItem.CashPay, 0) : Math.Round(oItem.CashPay, 2) : 0; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex = rowIndex + 1;

                    }
                    if (_oTempSalarySummary_F2s.Count != _nRowCount)
                    {
                        //this.PrintGT(oTempSS, "TOTAL", ref sheet, rowIndex);
                        cell = sheet.Cells[rowIndex, 1, rowIndex, 2]; cell.Style.Font.Bold = true; cell.Value = "TOTAL"; cell.Merge = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex = 3;

                        double TotalNoOfEmp = oTempSS.Sum(x => x.NoOfEmp);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = TotalNoOfEmp; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double TotalOTHour = (isRound) ? Math.Round(oTempSS.Sum(x => x.OTHr), 0) : Math.Round(oTempSS.Sum(x => x.OTHr), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = TotalOTHour; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalGrossSalary = (isRound) ? Math.Round(oTempSS.Sum(x => x.GrossSalary), 0) : Math.Round(oTempSS.Sum(x => x.GrossSalary), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalGrossSalary; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalOTAmount = (isRound) ? Math.Round(oTempSS.Sum(x => x.OTAmount), 0) : Math.Round(oTempSS.Sum(x => x.OTAmount), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalOTAmount; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalPayable = (isRound) ? Math.Round(oTempSS.Sum(x => x.TotalPayable), 0) : Math.Round(oTempSS.Sum(x => x.TotalPayable), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalPayable; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nHAmount = 0;
                        foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                        {
                            nHAmount = (isRound) ? Math.Round(_oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.Amount), 0) : Math.Round(_oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.Amount), 2);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nHAmount; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                        {
                            nHAmount = (isRound) ? Math.Round(_oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.Amount), 0) : Math.Round(_oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.Amount), 2);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nHAmount; cell.Style.Font.Bold = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        //double nTotalStamp = oTempSS.Sum(x => x.Stamp);

                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalStamp; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalNetPay = (isRound) ? Math.Round(oTempSS.Sum(x => x.NetPay), 0) : Math.Round(oTempSS.Sum(x => x.NetPay), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalNetPay; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalBankPay = (isRound) ? Math.Round(oTempSS.Sum(x => x.BankPay), 0) : Math.Round(oTempSS.Sum(x => x.BankPay), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalBankPay; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalCashPay = (isRound) ? Math.Round(oTempSS.Sum(x => x.CashPay), 0) : Math.Round(oTempSS.Sum(x => x.CashPay), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalCashPay; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex = rowIndex + 1;
                    }
                    else
                    {
                        if (_oSalarySummary_F2s_Location.Count > 1)
                        {
                            //this.PrintGT(oTempSS, "TOTAL", ref sheet, rowIndex); 
                            cell = sheet.Cells[rowIndex, 1, rowIndex, 2]; cell.Value = "TOTAL"; cell.Style.Font.Bold = true; cell.Merge = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            colIndex = 3;

                            double TotalNoOfEmp = oTempSS.Sum(x => x.NoOfEmp);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = TotalNoOfEmp; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double TotalOTHour = (isRound) ? Math.Round(oTempSS.Sum(x => x.OTHr), 0) : Math.Round(oTempSS.Sum(x => x.OTHr), 2);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = TotalOTHour; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalGrossSalary = (isRound) ? Math.Round(oTempSS.Sum(x => x.GrossSalary), 0) : Math.Round(oTempSS.Sum(x => x.GrossSalary), 2);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalGrossSalary; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalOTAmount = (isRound) ? Math.Round(oTempSS.Sum(x => x.OTAmount), 0) : Math.Round(oTempSS.Sum(x => x.OTAmount), 2);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalOTAmount; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalPayable = (isRound) ? Math.Round(oTempSS.Sum(x => x.TotalPayable), 0) : Math.Round(oTempSS.Sum(x => x.TotalPayable), 2);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalPayable; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nHAmount = 0;
                            foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                            {
                                nHAmount = (isRound) ? Math.Round(_oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.Amount), 0) : Math.Round(_oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.Amount), 2);

                                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nHAmount; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            }
                            foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                            {
                                nHAmount = (isRound) ? Math.Round(_oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.Amount), 0) : Math.Round(_oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.Amount), 2);

                                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nHAmount; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            }

                            //double nTotalStamp = oTempSS.Sum(x => x.Stamp);

                            //cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalStamp; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalNetPay = (isRound) ? Math.Round(oTempSS.Sum(x => x.NetPay), 0) : Math.Round(oTempSS.Sum(x => x.NetPay), 2);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalNetPay; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalBankPay = (isRound) ? Math.Round(oTempSS.Sum(x => x.BankPay), 0) : Math.Round(oTempSS.Sum(x => x.BankPay), 2);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalBankPay; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalCashPay = (isRound) ? Math.Round(oTempSS.Sum(x => x.CashPay), 0) : Math.Round(oTempSS.Sum(x => x.CashPay), 2);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalCashPay; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            rowIndex = rowIndex + 1;
                        }
                        //this.PrintGT(_oTempSalarySummary_F2s, "GRAND TOTAL", ref sheet, rowIndex);

                        cell = sheet.Cells[rowIndex, 1, rowIndex, 2]; cell.Style.Font.Bold = true; cell.Value = "GRAND TOTAL"; cell.Merge = true; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex = 3;
                        double nTotalNoOfEmp = _oTempSalarySummary_F2s.Sum(x => x.NoOfEmp);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalNoOfEmp; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalOTHour = (isRound) ? Math.Round(_oTempSalarySummary_F2s.Sum(x => x.OTHr), 0) : Math.Round(_oTempSalarySummary_F2s.Sum(x => x.OTHr), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalOTHour; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        if (PrintFormat == 4)
                        {
                            double dFirstOT = (isRound) ? Math.Round(_oTempSalarySummary_F2s.Sum(x => x.FirstOT), 0) : Math.Round(_oTempSalarySummary_F2s.Sum(x => x.FirstOT), 2);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = dFirstOT; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double dSecondOT = (isRound) ? Math.Round(_oTempSalarySummary_F2s.Sum(x => x.SecondOT), 0) : Math.Round(_oTempSalarySummary_F2s.Sum(x => x.SecondOT), 2);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = dSecondOT; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double dThirdOT = (isRound) ? Math.Round(_oTempSalarySummary_F2s.Sum(x => x.ThirdOT), 0) : Math.Round(_oTempSalarySummary_F2s.Sum(x => x.ThirdOT), 2);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = dThirdOT; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        double nnTotalGrossSalary = (isRound) ? Math.Round(_oTempSalarySummary_F2s.Sum(x => x.GrossSalary), 0) : Math.Round(_oTempSalarySummary_F2s.Sum(x => x.GrossSalary), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalGrossSalary; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalOTAmount = (isRound) ? Math.Round(_oTempSalarySummary_F2s.Sum(x => x.OTAmount), 0) : Math.Round(_oTempSalarySummary_F2s.Sum(x => x.OTAmount), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalOTAmount; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalPayable = (isRound) ? Math.Round(_oTempSalarySummary_F2s.Sum(x => x.TotalPayable), 0) : Math.Round(_oTempSalarySummary_F2s.Sum(x => x.TotalPayable), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalPayable; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnHAmount = 0;
                        foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                        {
                            nnHAmount = (isRound) ? Math.Round(_oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID).Sum(x => x.Amount), 0) : Math.Round(_oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID).Sum(x => x.Amount), 2);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnHAmount; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                        {
                            nnHAmount = (isRound) ? Math.Round(_oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID).Sum(x => x.Amount), 0) : Math.Round(_oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID).Sum(x => x.Amount), 2);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnHAmount; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        //double nnTotalStamp = _oTempSalarySummary_F2s.Sum(x => x.Stamp);

                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalStamp; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalNetPay = (isRound) ? Math.Round(_oTempSalarySummary_F2s.Sum(x => x.NetPay), 0) : Math.Round(_oTempSalarySummary_F2s.Sum(x => x.NetPay), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalNetPay; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalBankPay = (isRound) ? Math.Round(_oTempSalarySummary_F2s.Sum(x => x.BankPay), 0) : Math.Round(_oTempSalarySummary_F2s.Sum(x => x.BankPay), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalBankPay; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalCashPay = (isRound) ? Math.Round(_oTempSalarySummary_F2s.Sum(x => x.CashPay), 0) : Math.Round(_oTempSalarySummary_F2s.Sum(x => x.CashPay), 2);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalCashPay; //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex = rowIndex + 1;
                    }

                    _oSalarySummary_F2s.RemoveAll(x => x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID);

                }




                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=Salary_Summery.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }

        }

        public void ExcelSalarySummery_F3(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)
        {


            oSalarySummerys = SalarySummary_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);
            oSalarySummaryDetail_F2s = SalarySummaryDetail_F2.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, sGroupIDs, sBlockIDs, nStartSalaryRange, nEndSalaryRange, ((User)(Session[SessionInfo.CurrentUser])).UserID);


            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            int _nColumns = 0;

            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Salary Summery");
                sheet.Name = "Salary Summery";

                _oSalarySummary_F2s = oSalarySummerys;
                _oSalarySummaryDetail_F2s = oSalarySummaryDetail_F2s;

                _oAdditionSalaryHeads = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Addition).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).ToList();
                _oDeductionSalaryHeads = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadIDType == EnumSalaryHeadType.Deduction).GroupBy(x => x.SalaryHeadID).Select(x => x.First()).ToList();
                _oSalarySummary_F2s_Location = oSalarySummerys.GroupBy(x => x.LocationID).Select(x => x.First()).ToList();

                _nColumns = 7 + _oAdditionSalaryHeads.Count + _oDeductionSalaryHeads.Count + 4;


                sheet.Column(1).Width = 15;
                sheet.Column(2).Width = 20;
                sheet.Column(3).Width = 15;
                sheet.Column(4).Width = 15;
                sheet.Column(5).Width = 15;
                sheet.Column(6).Width = 15;
                sheet.Column(7).Width = 15;
                int i = 0;
                for (i = 8; i < _nColumns - 4; i++)
                {
                    sheet.Column(i).Width = 20;
                }
                sheet.Column(i++).Width = 15;
                sheet.Column(i++).Width = 15;
                sheet.Column(i++).Width = 20;
                sheet.Column(i++).Width = 20;
                sheet.Column(i++).Width = 20;

                nMaxColumn = i;
                int midIndex = i / 2;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                cell = sheet.Cells[rowIndex, midIndex]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, midIndex]; cell.Value = "Salary Summery"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                rowIndex = rowIndex + 1;
                cell = sheet.Cells[rowIndex, midIndex]; cell.Value = "From " + _oSalarySummary_F2s[0].StartDateInString + " To " + _oSalarySummary_F2s[0].EndDateInString; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex = rowIndex + 2;

                #endregion

                _oSalarySummary_F2s = _oSalarySummary_F2s.OrderBy(x => x.DepartmentName).ToList();
                _oSalarySummary_F2s.ForEach(x => _oTempSalarySummary_F2s.Add(x));

                colIndex = 1;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Unit-" + _oSalarySummary_F2s[0].LocationName; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex = rowIndex + 1;
                colIndex = 1;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Department"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "ManPower"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OTHr"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Salary/Wages"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Payable"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total Payable"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                foreach (SalarySummaryDetail_F2 oItem in _oAdditionSalaryHeads)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.SalaryHeadName; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }
                foreach (SalarySummaryDetail_F2 oItem in _oDeductionSalaryHeads)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.SalaryHeadName; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Stamp"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Net Payable"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Bank"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Cash"; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex = rowIndex + 1;
                colIndex = 1;
                int nCount = 0;
                int _nRowCount = 0;
                while (_oSalarySummary_F2s.Count > 0)
                {
                    List<SalarySummary_F2> oTempSS = new List<SalarySummary_F2>();
                    oTempSS = _oSalarySummary_F2s.Where(x => x.BusinessUnitID == _oSalarySummary_F2s[0].BusinessUnitID && x.LocationID == _oSalarySummary_F2s[0].LocationID).ToList();
                    //PrintSalarySummary_F2_Ex(oTempSS, rowIndex);

                    foreach (SalarySummary_F2 oItem in oTempSS)
                    {
                        colIndex = 1;
                        _nRowCount++;
                        nCount++;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nCount;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DepartmentName; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NoOfEmp;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompOTHr;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompGrossSalary; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompOTAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CompTotalPayable; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        List<SalarySummaryDetail_F2> oTempDetails = new List<SalarySummaryDetail_F2>();

                        foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                        {
                            oTempDetails = new List<SalarySummaryDetail_F2>();
                            oTempDetails = _oSalarySummaryDetail_F2s.Where(x => x.BusinessUnitID == oItem.BusinessUnitID && x.LocationID == oItem.LocationID && x.DepartmentID == oItem.DepartmentID && x.SalaryHeadID == oDetailAddItem.SalaryHeadID).ToList();

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oTempDetails.Count > 0 ? oTempDetails[0].CompAmount : 0; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                        {
                            oTempDetails = new List<SalarySummaryDetail_F2>();
                            oTempDetails = _oSalarySummaryDetail_F2s.Where(x => x.BusinessUnitID == oItem.BusinessUnitID && x.LocationID == oItem.LocationID && x.DepartmentID == oItem.DepartmentID && x.SalaryHeadID == oDeductionAddItem.SalaryHeadID).ToList();

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oTempDetails.Count > 0 ? oTempDetails[0].CompAmount : 0; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Stamp > 0 ? oItem.Stamp : 0; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NetPay > 0 ? oItem.CompNetPay : 0; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.BankPay > 0 ? oItem.BankPay : 0; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.CashPay > 0 ? oItem.CashPay : 0; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex = rowIndex + 1;

                    }
                    if (_oTempSalarySummary_F2s.Count != _nRowCount)
                    {
                        //this.PrintGT(oTempSS, "TOTAL", ref sheet, rowIndex);
                        cell = sheet.Cells[rowIndex, 1, rowIndex, 2]; cell.Style.Font.Bold = true; cell.Value = "TOTAL"; cell.Merge = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex = 3;

                        double TotalNoOfEmp = oTempSS.Sum(x => x.NoOfEmp);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = TotalNoOfEmp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double TotalOTHour = oTempSS.Sum(x => x.CompOTHr);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = TotalOTHour; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalGrossSalary = oTempSS.Sum(x => x.CompGrossSalary);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalGrossSalary; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalOTAmount = oTempSS.Sum(x => x.CompOTAmount);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalOTAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalPayable = oTempSS.Sum(x => x.CompTotalPayable);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalPayable; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nHAmount = 0;
                        foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                        {
                            nHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.CompAmount);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nHAmount; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                        {
                            nHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.CompAmount);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nHAmount; cell.Style.Font.Bold = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        double nTotalStamp = oTempSS.Sum(x => x.Stamp);

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalStamp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalNetPay = oTempSS.Sum(x => x.CompNetPay);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalNetPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalBankPay = oTempSS.Sum(x => x.BankPay);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalBankPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalCashPay = oTempSS.Sum(x => x.CashPay);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalCashPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex = rowIndex + 1;
                    }
                    else
                    {
                        if (_oSalarySummary_F2s_Location.Count > 1)
                        {
                            //this.PrintGT(oTempSS, "TOTAL", ref sheet, rowIndex); 
                            cell = sheet.Cells[rowIndex, 1, rowIndex, 2]; cell.Value = "TOTAL"; cell.Style.Font.Bold = true; cell.Merge = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            colIndex = 3;

                            double TotalNoOfEmp = oTempSS.Sum(x => x.NoOfEmp);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = TotalNoOfEmp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double TotalOTHour = oTempSS.Sum(x => x.CompOTHr);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = TotalOTHour; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalGrossSalary = oTempSS.Sum(x => x.CompGrossSalary);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalGrossSalary; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalOTAmount = oTempSS.Sum(x => x.CompOTAmount);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalOTAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalPayable = oTempSS.Sum(x => x.CompTotalPayable);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalPayable; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nHAmount = 0;
                            foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                            {
                                nHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.CompAmount);

                                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nHAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            }
                            foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                            {
                                nHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID && x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID).Sum(x => x.CompAmount);

                                cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nHAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            }

                            double nTotalStamp = oTempSS.Sum(x => x.Stamp);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalStamp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalNetPay = oTempSS.Sum(x => x.CompNetPay);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalNetPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalBankPay = oTempSS.Sum(x => x.BankPay);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalBankPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            double nTotalCashPay = oTempSS.Sum(x => x.CashPay);
                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalCashPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                            rowIndex = rowIndex + 1;
                        }
                        //this.PrintGT(_oTempSalarySummary_F2s, "GRAND TOTAL", ref sheet, rowIndex);

                        cell = sheet.Cells[rowIndex, 1, rowIndex, 2]; cell.Style.Font.Bold = true; cell.Value = "GRAND TOTAL"; cell.Merge = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        colIndex = 3;
                        double nTotalNoOfEmp = _oTempSalarySummary_F2s.Sum(x => x.NoOfEmp);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalNoOfEmp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nTotalOTHour = _oTempSalarySummary_F2s.Sum(x => x.CompOTHr);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nTotalOTHour; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalGrossSalary = _oTempSalarySummary_F2s.Sum(x => x.CompGrossSalary);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalGrossSalary; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalOTAmount = _oTempSalarySummary_F2s.Sum(x => x.CompOTAmount);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalOTAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalPayable = _oTempSalarySummary_F2s.Sum(x => x.CompTotalPayable);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalPayable; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnHAmount = 0;
                        foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
                        {
                            nnHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID && x.BusinessUnitID == _oTempSalarySummary_F2s[0].BusinessUnitID && x.LocationID == _oTempSalarySummary_F2s[0].LocationID).Sum(x => x.CompAmount);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnHAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
                        {
                            nnHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID && x.BusinessUnitID == _oTempSalarySummary_F2s[0].BusinessUnitID && x.LocationID == _oTempSalarySummary_F2s[0].LocationID).Sum(x => x.CompAmount);

                            cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnHAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        double nnTotalStamp = _oTempSalarySummary_F2s.Sum(x => x.Stamp);

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalStamp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalNetPay = _oTempSalarySummary_F2s.Sum(x => x.CompNetPay);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalNetPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalBankPay = _oTempSalarySummary_F2s.Sum(x => x.BankPay);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalBankPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nnTotalCashPay = _oTempSalarySummary_F2s.Sum(x => x.CashPay);
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = true; cell.Value = nnTotalCashPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex = rowIndex + 1;
                    }

                    _oSalarySummary_F2s.RemoveAll(x => x.BusinessUnitID == oTempSS[0].BusinessUnitID && x.LocationID == oTempSS[0].LocationID);

                }




                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=Salary_Summery.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }

        }


        //private void PrintGT(List<SalarySummary_F2> oSalarySummary_F2s, string sTHead, ref ExcelWorksheet sheet, int rowIn)
        //{
        //    int rowIndex = rowIn;
        //    ExcelRange cell;
        //    ExcelFill fill;
        //    OfficeOpenXml.Style.Border border;
        //    int colIndex = 1;

        //    cell = sheet.Cells[rowIndex, 1, rowIndex, 3]; cell.Value = sTHead; cell.Merge = true; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
        //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

        //    double TotalNoOfEmp = oSalarySummary_F2s.Sum(x => x.NoOfEmp);
        //    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalNoOfEmp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
        //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

        //    double TotalOTHour = oSalarySummary_F2s.Sum(x => x.OTHr);
        //    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalOTHour; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
        //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

        //    double nTotalGrossSalary = oSalarySummary_F2s.Sum(x => x.GrossSalary);
        //    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalGrossSalary; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
        //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

        //    double nTotalOTAmount = oSalarySummary_F2s.Sum(x => x.OTAmount);
        //    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalOTAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
        //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

        //    double nTotalPayable = oSalarySummary_F2s.Sum(x => x.TotalPayable);
        //    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalPayable; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
        //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

        //    double nHAmount = 0;
        //    foreach (SalarySummaryDetail_F2 oDetailAddItem in _oAdditionSalaryHeads)
        //    {
        //        nHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDetailAddItem.SalaryHeadID && x.BusinessUnitID == oSalarySummary_F2s[0].BusinessUnitID && x.LocationID == oSalarySummary_F2s[0].LocationID).Sum(x => x.Amount);

        //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nHAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
        //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

        //    }
        //    foreach (SalarySummaryDetail_F2 oDeductionAddItem in _oDeductionSalaryHeads)
        //    {
        //        nHAmount = _oSalarySummaryDetail_F2s.Where(x => x.SalaryHeadID == oDeductionAddItem.SalaryHeadID && x.BusinessUnitID == oSalarySummary_F2s[0].BusinessUnitID && x.LocationID == oSalarySummary_F2s[0].LocationID).Sum(x => x.Amount);

        //        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nHAmount; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
        //        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

        //    }

        //    double nTotalStamp = oSalarySummary_F2s.Sum(x => x.Stamp);

        //    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalStamp; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
        //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

        //    double nTotalNetPay = oSalarySummary_F2s.Sum(x => x.NetPay);
        //    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalNetPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
        //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

        //    double nTotalBankPay = oSalarySummary_F2s.Sum(x => x.BankPay);
        //    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalBankPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
        //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

        //    double nTotalCashPay = oSalarySummary_F2s.Sum(x => x.CashPay);
        //    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalCashPay; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
        //    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
        //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

        //    rowIndex = rowIndex + 1;

        //}
        #endregion Salary Summery

        #endregion Report

        #region Excel Salary Sheet

        private void ExcelSalarySheet(List<SalarySheetProperty> oSalarySheetPropertys, List<string> ColumnHeader, List<string> ColEmpInfo, List<string> ColAttDetail, List<string> ColIncrementDetail, List<string> ColEarnings, List<string> ColDeductions, List<string> ColBankDetail, ref int nRowIndex, ref ExcelWorksheet sheet, ref ExcelRange cell, ref OfficeOpenXml.Style.Border border, List<SalaryHead> oSalaryHeads, List<RPTSalarySheet> oResults, List<RPTSalarySheetDetail> oEmployeeSalaryDetails, List<LeaveHead> oLeaveHeads, List<EmployeeLeaveOnAttendance> oELOnAttendances, bool bWithPrecision, bool bHasOTAllowance, bool bHasParentDept, bool isRound)
        {


            int nStartCol = 2, nEndCol = 2;
            int nColumn = 2;
            sheet.Column(nColumn).Width = 5;

            foreach (string sColumn in ColEmpInfo)
            {
                sheet.Column(++nColumn).Width = 15;
            }

            if (oLeaveHeads.Count() > 0)
            {
                foreach (string sColumn in ColAttDetail)
                {
                    if (sColumn == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                    {
                        foreach (LeaveHead oItem in oLeaveHeads)
                        {
                            sheet.Column(++nColumn).Width = 7;
                        }
                    }
                    else
                    {
                        sheet.Column(++nColumn).Width = 12;
                    }
                }
            }
            else
            {
                foreach (string sColumn in ColAttDetail)
                {
                    sheet.Column(++nColumn).Width = 12;
                }
            }
            foreach (string sColumn in ColIncrementDetail)
            {
                sheet.Column(++nColumn).Width = 15;
            }

            sheet.Column(++nColumn).Width = 15; // Gross Amount

            foreach (string sColumn in ColEarnings)
            {
                sheet.Column(++nColumn).Width = 12;
            }
            if (ColEarnings.Count() > 0)
            {
                sheet.Column(++nColumn).Width = 15;
            }

            foreach (string sColumn in ColDeductions)
            {
                sheet.Column(++nColumn).Width = 12;
            }
            if (ColDeductions.Count() > 0)
            {
                sheet.Column(++nColumn).Width = 16;
            }
            sheet.Column(++nColumn).Width = 15;
            foreach (string sColumn in ColBankDetail)
            {
                sheet.Column(++nColumn).Width = 16;
            }
            sheet.Column(++nColumn).Width = 15;
            nEndCol = nColumn;

            ColGross = new string[] { "Gross Salary", ((ColEarnings.Count() > 0) ? "Gross Earnings" : ""), ((ColDeductions.Count() > 0) ? "Gross Deductions" : ""), "Net Amount" };
            ColGross = ColGross.Where(x => x != "").ToArray();

            if (bFlag)
            {
                foreach (string property in ColGross)
                {
                    _gross.Add(property, 0);
                }
                foreach (string property in ColIncrementDetail)
                {
                    if (property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LastGross.ToString()) || property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LastIncrement.ToString())) { _increment.Add(property, 0); }
                }
                foreach (string property in ColEarnings)
                {
                    _earnings.Add(property, 0);
                }
                foreach (string property in ColDeductions)
                {
                    _deductions.Add(property, 0);
                }
                foreach (string property in ColBankDetail)
                {
                    if (property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.BankAmount.ToString()) || property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.CashAmount.ToString())) { _banks.Add(property, 0); }
                }
                bFlag = false;
            }

            #region Column Header

            int nSpan = 0;
            int nAddSpan = (oLeaveHeads.Count() > 0) ? 1 : 0;
            foreach (string sColumn in ColumnHeader)
            {

                if (sColumn == "SL#")
                {
                    nStartCol = 2;
                    nEndCol = 2;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Employee Information")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += ColEmpInfo.Count();
                    nSpan = 0;
                }
                else if (sColumn == "Att. Detail")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += ColAttDetail.Count() + ((nAddSpan > 0) ? oLeaveHeads.Count() - 1 : 0);
                    nSpan = 0;
                }
                else if (sColumn == "Increment Detail")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += ColIncrementDetail.Count();
                    nSpan = 0;
                }
                else if (sColumn == "Gross Salary")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Earnings" && ColEarnings.Count() > 0)
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += ColEarnings.Count();
                    nSpan = 0;
                }
                else if (sColumn == "Gross Earnings")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Deduction" && ColDeductions.Count() > 0)
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += ColDeductions.Count();
                    nSpan = 0;
                }
                else if (sColumn == "Gross Deductions")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Net Amount")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Bank")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Cash")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Account No")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Bank Name")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                else if (sColumn == "Signature")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += 1;
                    nSpan = 1 + nAddSpan;
                }
                string sColumnvalue = "";
                sColumnvalue = sColumn;
                if (sColumnvalue == "Deduction" && ColDeductions.Count() <= 0)
                {
                    continue;
                }
                if (ColIncrementDetail.Count > 0 && sColumn == "Gross Salary") { sColumnvalue = "Present Salary"; }
                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex + nSpan, nEndCol]; cell.Value = sColumnvalue; cell.Merge = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            }
            nRowIndex++;

            nStartCol = 3; nEndCol = 3;
            foreach (string sColumn in ColumnHeader)
            {
                if (sColumn == "Employee Information")
                {
                    foreach (string sItem in ColEmpInfo)
                    {
                        string sColName = "";
                        sColName = sItem;
                        if (bHasParentDept && sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.Department.ToString())) { sColName = "Sub Department"; }
                        if (bHasParentDept && sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.ParentDepartment.ToString())) { sColName = "Department"; }
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex + nAddSpan, nEndCol++]; cell.Value = sColName; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }
                else if (sColumn == "Att. Detail")
                {
                    foreach (string sItem in ColAttDetail)
                    {
                        if (sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()) && oLeaveHeads.Count() > 0)
                        {
                            nEndCol += oLeaveHeads.Count() - 1;
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sItem; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            nStartCol += oLeaveHeads.Count() - 1;
                        }
                        else
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex + nAddSpan, nEndCol++]; cell.Value = sItem; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                    }
                }
                else if (sColumn == "Increment Detail")
                {
                    foreach (string sItem in ColIncrementDetail)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex + nAddSpan, nEndCol++]; cell.Value = sItem; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }
                else if (sColumn == "Earnings" && ColEarnings.Count > 0)
                {
                    nStartCol++; nEndCol++;
                    foreach (string sItem in ColEarnings)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex + nAddSpan, nEndCol++]; cell.Value = sItem; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }
                else if (sColumn == "Deduction" && ColDeductions.Count > 0)
                {
                    nStartCol++; nEndCol++;
                    foreach (string sItem in ColDeductions)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex + nAddSpan, nEndCol++]; cell.Value = sItem; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }
            }
            nRowIndex += nAddSpan;
            if (nAddSpan > 0) // With leave Heads
            {
                nStartCol = 3 + ColEmpInfo.Count();
                foreach (string sItem in ColAttDetail)
                {
                    if (sItem != Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                    {
                        nStartCol++;
                    }
                    else
                    {
                        break;
                    }
                }
                nEndCol = nStartCol;

                foreach (LeaveHead oItem in oLeaveHeads)
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.ShortName; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                nRowIndex++;
            }
            else
            {
                nRowIndex++;
            }

            #endregion

            #region Date Manipulation

            var EmpInfoPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 1).ToList();
            var AttDetailPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty != EnumSalarySheetFormatProperty.OTAllowance).ToList();
            var oEarnings = oSalaryHeads.Where(x => (x.SalaryHeadType == EnumSalaryHeadType.Basic) || (x.SalaryHeadType == EnumSalaryHeadType.Addition) || (x.SalaryHeadType == EnumSalaryHeadType.Reimbursement)).ToList();

            //oEarnings = oEarnings.Where(p => oEmployeeSalaryDetails.Any(p2 => p2.SalaryHeadID == p.SalaryHeadID)).ToList();

            var oDeductions = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Deduction).ToList();

            //oDeductions = oDeductions.Where(p => oEmployeeSalaryDetails.Any(p2 => p2.SalaryHeadID == p.SalaryHeadID)).ToList();

            var IncrementPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 3).ToList();
            var BankPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 4).ToList();

            #region Data
            int nGrandTotalStartRowIndex = nRowIndex;
            //string sFormator = "_-* #,##0.00_-;-* #,##0.00_-;_-* \"-\"??_-;_-@_-";
            string sFormator = "_-* #,###_-;-* #,###_-;_-* \"-\"??_-;_-@_-";
            if (oResults.Count() > 0)
            {
                int nCount = 0;
                string Code = "";
                var oELOnAtts = new List<EmployeeLeaveOnAttendance>();
                Dictionary<string, object> gross = new Dictionary<string, object>();
                Dictionary<string, object> increment = new Dictionary<string, object>();
                Dictionary<string, object> earnings = new Dictionary<string, object>();
                Dictionary<string, object> deductions = new Dictionary<string, object>();
                Dictionary<string, object> banks = new Dictionary<string, object>();

                foreach (string property in _gross.Select(x => x.Key).ToArray())
                {
                    gross.Add(property, 0);
                }
                foreach (string property in _increment.Select(x => x.Key).ToArray())
                {
                    increment.Add(property, 0);
                }
                foreach (string property in _earnings.Select(x => x.Key).ToArray())
                {
                    earnings.Add(property, 0);
                }
                foreach (string property in _deductions.Select(x => x.Key).ToArray())
                {
                    deductions.Add(property, 0);
                }
                foreach (string property in _banks.Select(x => x.Key).ToArray())
                {
                    banks.Add(property, 0);
                }


                foreach (RPTSalarySheet oItem in oResults)
                {

                    oELOnAtts = oELOnAttendances.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();

                    Code = "";
                    nStartCol = 2; nEndCol = 2;
                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (++nCount); cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = "0";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    /*---- Employee Info -----*/
                    if (ColEmpInfo.Count() > 0)
                    {
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeCode).Any())
                        {
                            int nEmployeeCode = 0;
                            try
                            {
                                nEmployeeCode = Convert.ToInt32(oItem.EmployeeCode);
                                cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = nEmployeeCode; cell.Merge = true; cell.Style.Font.Bold = false;
                                cell.Style.Numberformat.Format = "#######"; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                            catch
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.EmployeeCode; cell.Merge = true; cell.Style.Font.Bold = false;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                        }

                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeName).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.EmployeeName; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ParentDepartment).Any())
                        {

                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.ParentDepartmentName; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Department).Any())
                        {

                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.DepartmentName; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Designation).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.DesignationName; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.JoiningDate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.JoiningDateInString; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ConfirmationDate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.DateOfConfirmationInString; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeType).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.EmployeeTypeName; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Gender).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.Gender; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmpGroup).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.EmpGroup; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.PaymentType).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.PaymentType; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeContactNo).Any())
                        {
                            cell.Style.Numberformat.Format = "";
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.ContactNo.ToString(); cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    if (ColAttDetail.Count() > 0)
                    {         /*---- Att. Detail -----*/
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.TotalDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.TotalDays > 0) ? (oItem.TotalDays) : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.PresentDay).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.Present > 0) ? oItem.Present : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.DayOffHolidays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = ((oItem.TotalDayOff) > 0) ? (oItem.TotalDayOff) : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.AbsentDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.TotalAbsent > 0) ? oItem.TotalAbsent : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveHead).Any())
                        {
                            foreach (LeaveHead oLeaveHead in oLeaveHeads)
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).Any()) ? oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).FirstOrDefault().LeaveDays : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                                cell.Style.Numberformat.Format = sFormator;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.TotalPLeave + oItem.TotalUpLeave > 0) ? (oItem.TotalPLeave + oItem.TotalUpLeave) : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeWorkingDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.EWD > 0) ? oItem.EWD : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EarlyOutDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.TotalEarlyLeaving > 0) ? oItem.TotalEarlyLeaving : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EarlyOutMins).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.EarlyInMin > 0) ? oItem.EarlyInMin : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LateDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.TotalLate > 0) ? oItem.TotalLate : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LateHrs).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.LateInMin > 0) ? Global.MinInHourMin(oItem.LateInMin) : ""; cell.Merge = true; cell.Style.Font.Bold = false;

                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTHours).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.OTHour > 0) ? oItem.OTHour : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTRate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.OTRatePerHour > 0) ? oItem.OTRatePerHour : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    /*Increment Detail */
                    if (ColIncrementDetail.Count() > 0)
                    {
                        double sValue = 0;
                        sValue = oItem.LastGross > 0 ? oItem.LastGross : 0;
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sValue; cell.Style.Font.Bold = false; cell.Merge = true;
                        cell.Style.Numberformat.Format = sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        increment["Last Gross"] = Convert.ToDouble(increment["Last Gross"]) + Math.Round(oItem.LastGross > 0 ? oItem.LastGross : 0);

                        sValue = oItem.IncrementAmount > 0 ? oItem.IncrementAmount : 0;
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sValue; cell.Style.Font.Bold = false; cell.Merge = true;
                        cell.Style.Numberformat.Format = sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        increment["Last Increment"] = Convert.ToDouble(increment["Last Increment"]) + Math.Round(oItem.IncrementAmount > 0 ? oItem.IncrementAmount : 0);

                        string sDate = "";
                        sDate = oItem.EffectedDateInStr;
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sDate; cell.Style.Font.Bold = false; cell.Merge = true;
                        //cell.Style.Numberformat.Format = sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }

                    /*--- Gross Salary ---- */
                    //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";

                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (oItem.GrossAmount > 0) ? Math.Round(oItem.GrossAmount) : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    gross["Gross Salary"] = Convert.ToDouble(gross["Gross Salary"]) + Math.Round(oItem.GrossAmount);
                    /*--- Earnings ---- */

                    double nAmount = 0, nAddAmount = 0, dAllSalaryTotal = 0;

                    foreach (SalaryHead oSalaryHead in oEarnings.OrderBy(x => x.SalaryHeadType))
                    {
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;

                        //nAmount = (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Basic) ? nAmount : Math.Round(nAmount);
                        nAmount = Math.Round(nAmount);
                        //dAllSalaryTotal += nAmount;
                        nAddAmount += (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Addition || oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Reimbursement) ? nAmount : 0;

                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (nAmount > 0) ? nAmount : 0; cell.Merge = true; cell.Style.Font.Bold = false;
                        //cell.Style.Numberformat.Format = (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Basic) ? "#,##0.00;(#,##0.00)" : (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    double nOTAllowance = Math.Round(oItem.OTAmount);
                    if (bHasOTAllowance)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = nOTAllowance; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    if (oEarnings.Any())
                    {
                        double nEarnings = oItem.GrossAmount + ((bHasOTAllowance) ? nOTAllowance : 0) + nAddAmount;      //old code
                        //double nEarnings = dAllSalaryTotal + nOTAllowance + nAddAmount;// + nAddAmount;
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = nEarnings; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        gross["Gross Earnings"] = Convert.ToDouble(gross["Gross Earnings"]) + nEarnings;
                    }

                    /*---deduction--*/
                    double nDeductionAmount = 0;

                    foreach (SalaryHead oSalaryHead in oDeductions)
                    {
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;
                        nDeductionAmount += nAmount;
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = nAmount; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    if (oDeductions.Count() > 0)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = nDeductionAmount; cell.Merge = true; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        gross["Gross Deductions"] = Convert.ToDouble(gross["Gross Deductions"]) + nDeductionAmount;
                    }
                    /*---Net Amount--*/
                    double nNetAmount = 0;
                    if (_oCompany.BaseAddress.ToUpper() == "AMG")
                    {
                        nNetAmount = oItem.NetAmount + ((bHasOTAllowance) ? nOTAllowance : 0);
                    }
                    else
                    {
                        nNetAmount = oItem.NetAmount + ((bHasOTAllowance) ? 0 : -nOTAllowance);
                    }

                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = nNetAmount; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? sFormator : sFormator;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    gross["Net Amount"] = Convert.ToDouble(gross["Net Amount"]) + nNetAmount;

                    if (ColBankDetail.Count() > 0)
                    {
                        double nCashAmount = 0, nBankAmount = 0; 
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.BankAmount).Any())
                        {
                            nBankAmount = (oItem.BankAmount > 0 ? oItem.BankAmount : 0);
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = nBankAmount; cell.Style.Font.Bold = false; cell.Merge = true;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            banks["Bank Amount"] = Convert.ToDouble(banks["Bank Amount"]) + nBankAmount;
                        }

                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.CashAmount).Any())
                        {
                            nCashAmount = (nNetAmount - nBankAmount);
                            nCashAmount = (nCashAmount > 0 ? nCashAmount : 0);
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = nCashAmount; cell.Style.Font.Bold = false; cell.Merge = true;
                            cell.Style.Numberformat.Format = sFormator;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            banks["Cash Amount"] = Convert.ToDouble(banks["Cash Amount"]) + nCashAmount;
                        }

                        string sValue = "";
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.AccountNo).Any())
                        {
                            sValue = (oItem.AccountNo != "" ? oItem.AccountNo : "-");
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sValue; cell.Style.Font.Bold = false; cell.Merge = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.BankName).Any())
                        {
                            sValue = (oItem.BankName != "" ? oItem.BankName : "-");
                            cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = sValue; cell.Style.Font.Bold = false; cell.Merge = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    /*---Signature--*/
                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = "--"; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    ++_nEmpCount;
                    ++nRowIndex;
                }
            }
            #endregion

            #region Grand Total
            nStartCol = 3; nEndCol = 3;
            string sStartCell = "";
            string sEndCell = "";
            foreach (string sColumn in ColumnHeader)
            {
                if (sColumn == "SL#")
                {
                    nStartCol = 2;
                    nEndCol = 2;
                    cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                }
                else if (sColumn == "Employee Information")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol += ColEmpInfo.Count();
                    cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = "Grand Total:"; cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                }
                else if (sColumn == "Att. Detail")
                {
                    foreach (string sItem in ColAttDetail)
                    {
                        if (sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()) && oLeaveHeads.Count() > 0)
                        {
                            foreach (LeaveHead oItem in oLeaveHeads)
                            {
                                nStartCol = nEndCol + 1;
                                nEndCol = nStartCol;

                                //sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                                //sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                                //cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                                //cell.Style.Font.UnderLine = true;
                                //cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                                //cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                //cell.Style.Numberformat.Format = sFormator;
                                //border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;

                                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = false;
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                            }
                        }
                        else
                        {
                            nStartCol = nEndCol + 1;
                            nEndCol = nStartCol;

                            //sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                            //sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                            //cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                            //cell.Style.Font.UnderLine = true;
                            //cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                            //cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                            //cell.Style.Numberformat.Format = sFormator;
                            //border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;

                            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                        }


                    }
                }
                else if (sColumn == "Increment Detail")
                {
                    foreach (string sItem in ColIncrementDetail)
                    {
                        nStartCol = nEndCol + 1;
                        nEndCol = nStartCol;

                        sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                        sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                        cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                        cell.Style.Font.UnderLine = true;
                        cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        cell.Style.Numberformat.Format = sFormator;
                        border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                    }

                }
                else if (sColumn == "Gross Salary")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol = nStartCol;

                    sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                    sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                    cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.Font.UnderLine = true;
                    cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = sFormator;
                    border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                }
                else if (sColumn == "Earnings" && ColEarnings.Count() > 0)
                {
                    foreach (string sItem in ColEarnings)
                    {
                        nStartCol = nEndCol + 1;
                        nEndCol = nStartCol;

                        sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                        sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                        cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                        cell.Style.Font.UnderLine = true;
                        cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        cell.Style.Numberformat.Format = sFormator;
                        border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                    }
                }
                else if (sColumn == "Gross Earnings")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol = nStartCol;

                    sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                    sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                    cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.Font.UnderLine = true;
                    cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = sFormator;
                    border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                }
                else if (sColumn == "Deduction" && ColDeductions.Count() > 0)
                {
                    foreach (string sItem in ColDeductions)
                    {
                        nStartCol = nEndCol + 1;
                        nEndCol = nStartCol;

                        sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                        sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                        cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                        cell.Style.Font.UnderLine = true;
                        cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        cell.Style.Numberformat.Format = sFormator;
                        border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                    }
                }
                else if (sColumn == "Gross Deductions")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol = nStartCol;

                    sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                    sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                    cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.Font.UnderLine = true;
                    cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = sFormator;
                    border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                }
                else if (sColumn == "Net Amount")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol = nStartCol;

                    sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                    sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                    cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.Font.UnderLine = true;
                    cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = sFormator;
                    border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                }
                else if (sColumn == "Bank")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol = nStartCol;

                    sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                    sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                    cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.Font.UnderLine = true;
                    cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = sFormator;
                    border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                }
                else if (sColumn == "Cash")
                {
                    nStartCol = nEndCol + 1;
                    nEndCol = nStartCol;

                    sStartCell = Global.GetExcelCellName(nGrandTotalStartRowIndex, nStartCol);
                    sEndCell = Global.GetExcelCellName((nRowIndex - 1), nStartCol);
                    cell = sheet.Cells[nRowIndex, nEndCol]; cell.Formula = "SUM(" + sStartCell + ":" + sEndCell + ")"; cell.Style.Font.Bold = true;
                    cell.Style.Font.UnderLine = true;
                    cell.Style.Font.UnderLineType = ExcelUnderLineType.DoubleAccounting;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    cell.Style.Numberformat.Format = sFormator;
                    border = cell.Style.Border; border.Top.Style = ExcelBorderStyle.Thick;
                }
            }
            #endregion
            #endregion
        }

        public void ExportIntoExcelSalarySheet(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroupByDept, string sGroupIDs, string sBlockIDs, bool bRound, bool IsMatchExact, double ts)//F3 XL
        {
            List<RPTSalarySheetDetail> _oEmployeeSalaryDetails = new List<RPTSalarySheetDetail>();
            bool isRound = bRound;
            bWithPrecision = true;
            var oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, IsCompliance, sGroupIDs, sBlockIDs, IsMatchExact);
            var oSalaryHeads = oEmployeeSalary.SalaryHeads.OrderBy(x => x.Name).ToList();
            var bHasOTAllowance = false;
            bool bHasParentDept = false;
            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty ";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
            bool bWithLeaveHeads = oSalarySheetPropertys.Exists(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveHead);

            _oCompany = _oCompany.Get(1, (int)Session[SessionInfo.currentUserID]);
            _oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalarySheetDetails;

            _oEmployeeBankAccounts = new List<EmployeeBankAccount>();
            _oEmployeeBankAccounts = oEmployeeSalary.EmployeeBankAccounts;

            _oTransferPromotionIncrements = new List<TransferPromotionIncrement>();

            List<EmployeeLeaveOnAttendance> oELOnAttendances = new List<EmployeeLeaveOnAttendance>();
            List<EmployeeOTonAttendance> oEOTonAttendances = new List<EmployeeOTonAttendance>();
            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();

            string EmpIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Where(x => x.EmployeeSalaryID > 0).Select(p => p.EmployeeID).Distinct().ToList());

            DateTime dtFrom = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[0]);
            DateTime dtTo = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[1]);

            if (EmpIDs != "")
            {
                if (bWithLeaveHeads)
                {
                    sSQL = "Select * from LeaveHead Order By LeaveHeadID";
                    oLeaveHeads = LeaveHead.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
                    oELOnAttendances = EmployeeLeaveOnAttendance.Gets(EmpIDs, dtFrom, dtTo, ((User)Session[SessionInfo.CurrentUser]).UserID);
                }
            }

            oLeaveHeads = oLeaveHeads.Where(p => oELOnAttendances.Any(p2 => p2.LeaveHeadID == p.LeaveHeadID)).ToList();
            if (oLeaveHeads.Count <= 0)
            {
                oSalarySheetPropertys.RemoveAll(x => x.SalarySheetFormatPropertyInt == 340);
            }

            var oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            var oCompany = (oCompanys != null && oCompanys.Count() > 0) ? oCompanys.FirstOrDefault() : new Company();

            List<string> ColEmpInfo = new List<string>() { };
            ColEmpInfo = oSalarySheetPropertys.Where(x => x.PropertyFor == 1).Select(p => p.SalarySheetFormatPropertyStr).ToList();

            if (oSalarySheetPropertys.Any(x => x.PropertyFor == 1 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ParentDepartment))
            {
                bHasParentDept = true;
            }

            List<string> ColAttDetail = new List<string>() { };
            ColAttDetail = oSalarySheetPropertys.Where(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty != EnumSalarySheetFormatProperty.OTAllowance).Select(p => p.SalarySheetFormatPropertyStr).ToList();

            List<string> ColIncrementDetail = new List<string>();
            ColIncrementDetail = oSalarySheetPropertys.Where(x => x.PropertyFor == 3).Select(p => p.SalarySheetFormatPropertyStr).ToList();

            List<string> ColBankDetail = new List<string>();
            ColBankDetail = oSalarySheetPropertys.Where(x => x.PropertyFor == 4).Select(p => p.SalarySheetFormatPropertyStr).ToList();

            List<string> ColEarnings = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Basic).Select(x => x.Name).ToList();
            ColEarnings.AddRange(oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Addition).Select(x => x.Name).ToList());
            ColEarnings.AddRange(oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Reimbursement).Select(x => x.Name).ToList());
            if (oSalarySheetPropertys.Any(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTAllowance))
            {
                ColEarnings.AddRange(oSalarySheetPropertys.Where(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTAllowance).Select(x => x.SalarySheetFormatPropertyStr));
                bHasOTAllowance = true;
            }

            //ColEarnings = oSalaryHeads.Where(p => _oEmployeeSalaryDetails.Any(p2 => p2.SalaryHeadID == p.SalaryHeadID && p2.Amount > 0 && (p.SalaryHeadType == EnumSalaryHeadType.Basic || p.SalaryHeadType == EnumSalaryHeadType.Addition || p.SalaryHeadType == EnumSalaryHeadType.Reimbursement))).Select(x => x.Name).ToList();
            //if (oSalarySheetPropertys.Any(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTAllowance))
            //{
            //    ColEarnings.AddRange(oSalarySheetPropertys.Where(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTAllowance).Select(x => x.SalarySheetFormatPropertyStr));
            //}
            var BankPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 4).ToList();

            List<string> ColDeductions = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Deduction).Select(x => x.Name).ToList();
            //List<string> ColDeductions = oSalaryHeads.Where(p => _oEmployeeSalaryDetails.Any(p2 => p2.SalaryHeadID == p.SalaryHeadID && p2.Amount > 0 && p.SalaryHeadType == EnumSalaryHeadType.Deduction)).Select(x => x.Name).ToList();


            List<string> ColumnHeader = new List<string>() { "SL#",
                (ColEmpInfo.Count() > 0 ? "Employee Information" : ""), 
                (ColAttDetail.Count() > 0 ? "Att. Detail" : ""),
                (ColIncrementDetail.Count>0 ? "Increment Detail" : ""),
                "Gross Salary", 
                ((ColEarnings.Count() > 0) ? "Earnings" : ""),
                ((ColEarnings.Count() > 0) ? "Gross Earnings" : ""),
                "Deduction", ((ColDeductions.Count() > 0) ? "Gross Deductions" : ""),
                "Net Amount",
                //(ColBankDetail.Count>0?"Bank Information":""),

                (ColBankDetail.Count>0 && BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.BankAmount).Any()?"Bank":""),
                (ColBankDetail.Count>0 && BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.CashAmount).Any()?"Cash":""),
                (ColBankDetail.Count>0 && BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.AccountNo).Any()?"Account No":""),
                (ColBankDetail.Count>0 && BankPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.BankName).Any()?"Bank Name":""), 

                "Signature" };
            ColumnHeader.RemoveAll(x => x == "");

            #region Export Excel
            int nRowIndex = 2, nStartCol = 2, nEndCol = 2;
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;
            ExcelFill fill;

            List<RPTSalarySheet> oEmployeeSs = new List<RPTSalarySheet>();
            List<RPTSalarySheet> _oEmployeeSalarys = new List<RPTSalarySheet>();
            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Salary Sheet");
                sheet.Name = "Salary Sheet";

                nEndCol += ColEmpInfo.Count() + ColAttDetail.Count() + ((bWithLeaveHeads) ? oLeaveHeads.Count() - 1 : 0) + 1 + ColEarnings.Count() + ((ColEarnings.Count() > 0) ? 1 : 0) + ColDeductions.Count() + ((ColDeductions.Count() > 0) ? 1 : 0) + ColIncrementDetail.Count() + ColBankDetail.Count() + 2;

                #region Report Header
                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Merge = true;
                cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;

                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Merge = true;
                cell.Value = "Salary Sheet"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;

                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Merge = true;
                cell.Value = "From " + dtFrom.ToString("dd MMM yyyy") + " To " + dtTo.ToString("dd MMM yyyy"); cell.Style.Font.Bold = true;
                cell.Value = "For The Month Of " + dtTo.ToString("MMM") + ", " + dtTo.ToString("yyyy"); cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;

                cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = " "; cell.Merge = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;
                #endregion
                _oEmployeeSalarys = oEmployeeSalary.EmployeeSalarySheets.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeSalaryID).ToList();

                _oEmployeeSalarys.ForEach(x => oEmployeeSs.Add(x));

                while (oEmployeeSs.Count > 0)
                {
                    var oResults = new List<RPTSalarySheet>();
                    if (bGroupByDept)
                    {
                        oResults = oEmployeeSs.Where(x => x.LocationID == oEmployeeSs[0].LocationID && x.DepartmentID == oEmployeeSs[0].DepartmentID).OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeCode).ToList();
                    }
                    else
                    {
                        oResults = oEmployeeSs.Where(x => x.LocationID == oEmployeeSs[0].LocationID).OrderBy(x => x.LocationName).ThenBy(x => x.EmployeeCode).ToList();
                    }


                    var oEmpSalaryDetails = oEmployeeSalary.EmployeeSalarySheetDetails.Where(x => oResults.Select(p => p.EmployeeSalaryID).Contains(x.EmployeeSalaryID)).ToList();
                    if (bGroupByDept)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol]; cell.Value = "Unit Name: " + oResults.FirstOrDefault().LocationName + ", Department: " + oResults.FirstOrDefault().DepartmentName;
                        cell.Style.Font.Bold = true; cell.Style.Font.Size = 15;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    else
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol]; cell.Value = "Unit Name: " + oResults.FirstOrDefault().LocationName;
                        cell.Style.Font.Bold = true; cell.Style.Font.Size = 15;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    nRowIndex++;

                    this.ExcelSalarySheet(oSalarySheetPropertys, ColumnHeader, ColEmpInfo, ColAttDetail, ColIncrementDetail, ColEarnings, ColDeductions, ColBankDetail, ref nRowIndex, ref sheet, ref cell, ref border, oSalaryHeads, oResults, oEmpSalaryDetails, oLeaveHeads, oELOnAttendances, bWithPrecision, bHasOTAllowance, bHasParentDept, isRound);
                    if (bGroupByDept)
                    {
                        oEmployeeSs.RemoveAll(x => x.LocationID == oResults[0].LocationID && x.DepartmentID == oResults[0].DepartmentID);
                    }
                    else
                    {
                        oEmployeeSs.RemoveAll(x => x.LocationID == oResults[0].LocationID);
                    }
                }

                //foreach (RPTSalarySheet oItem in oEmployeeSs)
                //{

                //    var oResults = oEmployeeSs.Where(x => x.LocationID == oEmployeeSs[0].LocationID && x.DepartmentID == oEmployeeSs[0].DepartmentID).OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeCode).ToList();

                //    var oEmpSalaryDetails = oEmployeeSalary.EmployeeSalarySheetDetails.Where(x => oResults.Select(p => p.EmployeeSalaryID).Contains(x.EmployeeSalaryID)).ToList();

                //    cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = "Unit Name: " + oResults.FirstOrDefault().LocationName + "Department Name: " + oResults.FirstOrDefault().DepartmentName; cell.Merge = true;
                //    cell.Style.Font.Bold = true; cell.Style.Font.Size = 15;
                //    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                //    nRowIndex++;

                //    this.ExcelSalarySheet(oSalarySheetPropertys, ColumnHeader, ColEmpInfo, ColAttDetail,ColIncrementDetail, ColEarnings, ColDeductions,ColBankDetail, ref nRowIndex, ref sheet, ref cell, ref border, oSalaryHeads, oResults, oEmpSalaryDetails, oLeaveHeads, oELOnAttendances, bWithPrecision, bHasOTAllowance, bHasParentDept);

                //    cell = sheet.Cells[nRowIndex++, nStartCol, nRowIndex++, nEndCol]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = false;
                //    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                //    nRowIndex++;
                //}

                cell = sheet.Cells[1, 1, nRowIndex + 1, nEndCol];
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SalarySheet.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion

        }

        #region F5 XL
        public void ExportIntoExcelSalarySheet_F5(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, bool IsMatchExact, double ts)//F5 XL
        {
            var oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, IsCompliance, sGroupIDs, sBlockIDs, IsMatchExact);
            var oSalaryHeads = oEmployeeSalary.SalaryHeads.OrderBy(x => x.Name).ToList();
            var bHasOTAllowance = false;
            bool bHasParentDept = false;
            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
            bool bWithLeaveHeads = oSalarySheetPropertys.Exists(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveHead);

            _oEmployeeBankAccounts = new List<EmployeeBankAccount>();
            _oEmployeeBankAccounts = oEmployeeSalary.EmployeeBankAccounts;
            _oTransferPromotionIncrements = new List<TransferPromotionIncrement>();

            List<EmployeeLeaveOnAttendance> oELOnAttendances = new List<EmployeeLeaveOnAttendance>();
            List<EmployeeOTonAttendance> oEOTonAttendances = new List<EmployeeOTonAttendance>();
            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();

            string EmpIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Where(x => x.EmployeeSalaryID > 0).Select(p => p.EmployeeID).Distinct().ToList());

            DateTime dtFrom = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[0]);
            DateTime dtTo = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[1]);

            if (EmpIDs != "")
            {

                if (bWithLeaveHeads)
                {
                    sSQL = "Select * from LeaveHead Order By LeaveHeadID";
                    oLeaveHeads = LeaveHead.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
                    oELOnAttendances = EmployeeLeaveOnAttendance.Gets(EmpIDs, dtFrom, dtTo, ((User)Session[SessionInfo.CurrentUser]).UserID);
                } TransferPromotionIncrement.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
            }

            var oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            var oCompany = (oCompanys != null && oCompanys.Count() > 0) ? oCompanys.FirstOrDefault() : new Company();

            List<string> ColEmpInfo = new List<string>() { };
            ColEmpInfo = oSalarySheetPropertys.Where(x => x.PropertyFor == 1).Select(p => p.SalarySheetFormatPropertyStr).ToList();

            if (oSalarySheetPropertys.Any(x => x.PropertyFor == 1 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ParentDepartment))
            {
                bHasParentDept = true;
            }

            List<string> ColAttDetail = new List<string>() { };
            ColAttDetail = oSalarySheetPropertys.Where(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty != EnumSalarySheetFormatProperty.OTAllowance).Select(p => p.SalarySheetFormatPropertyStr).ToList();

            List<string> ColIncrementDetail = new List<string>();
            ColIncrementDetail = oSalarySheetPropertys.Where(x => x.PropertyFor == 3).Select(p => p.SalarySheetFormatPropertyStr).ToList();

            List<string> ColBankDetail = new List<string>();
            ColBankDetail = oSalarySheetPropertys.Where(x => x.PropertyFor == 4).Select(p => p.SalarySheetFormatPropertyStr).ToList();

            //List<string> ColEarnings = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Basic).Select(x => x.Name).ToList();
            List<string> ColEarnings = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Addition).Select(x => x.Name).ToList();
            ColEarnings.AddRange(oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Reimbursement).Select(x => x.Name).ToList());
            if (oSalarySheetPropertys.Any(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTAllowance))
            {
                ColEarnings.AddRange(oSalarySheetPropertys.Where(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTAllowance).Select(x => x.SalarySheetFormatPropertyStr));
                bHasOTAllowance = true;
            }

            List<string> ColDeductions = oSalaryHeads.Where(x => (x.SalaryHeadType == EnumSalaryHeadType.Deduction && (x.SalaryHeadID == 8 || x.SalaryHeadID == 20 || x.SalaryHeadID == 25 || x.SalaryHeadID == 26))).Select(x => x.Name).ToList();
            List<string> allCols = oSalaryHeads.Where(x => (x.SalaryHeadType == EnumSalaryHeadType.Deduction)).Select(x => x.Name).ToList();

            ColDeductions = allCols.Except(oSalaryHeads.Where(x => (x.SalaryHeadType == EnumSalaryHeadType.Deduction && (x.SalaryHeadID == 8 || x.SalaryHeadID == 20 || x.SalaryHeadID == 25 || x.SalaryHeadID == 26))).Select(x => x.Name).ToList()).ToList();
            List<string> ColumnHeader = new List<string>() { "SL#",
                (ColEmpInfo.Count() > 0 ? "Employee Information" : ""), 
                (ColAttDetail.Count() > 0 ? "Att. Detail" : ""),
                (ColIncrementDetail.Count>0 ? "Increment Detail" : ""),
                "Gross Salary", 
                ((ColEarnings.Count() > 0) ? "Earnings" : ""),
                //((ColEarnings.Count() > 0) ? "Gross Earnings" : ""),
                ((ColEarnings.Count() > 0) ? "Gross Earnings On Att." : ""),
                "Deduction", ((ColDeductions.Count() > 0) ? "Gross Deductions" : ""),
                "Net Amount",
                (ColBankDetail.Count>0?"Bank":""),
                (ColBankDetail.Count>0?"Cash":""),
                (ColBankDetail.Count>0?"Account No":""),
                (ColBankDetail.Count>0?"Bank Name":""), 
                "Signature" };
            ColumnHeader.RemoveAll(x => x == "");

            #region Export Excel
            int nRowIndex = 2, nStartCol = 2, nEndCol = 2;
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;
            ExcelFill fill;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Salary Sheet");
                sheet.Name = "Salary Sheet";

                nEndCol += ColEmpInfo.Count() + ColAttDetail.Count() + ((bWithLeaveHeads) ? oLeaveHeads.Count() - 1 : 0) + 1 + ColEarnings.Count() + ((ColEarnings.Count() > 0) ? 1 : 0) + ColDeductions.Count() + ((ColDeductions.Count() > 0) ? 1 : 0) + ColIncrementDetail.Count() + ColBankDetail.Count() + 2;

                #region Report Header
                //int nmiddlecol = Convert.ToInt32(nEndCol / 2);
                cell = sheet.Cells[nRowIndex, 4];
                cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;

                cell = sheet.Cells[nRowIndex, 4];
                cell.Value = "Salary Sheet"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;

                cell = sheet.Cells[nRowIndex, 4];
                cell.Value = "From " + dtFrom.ToString("dd MMM yyyy") + " To " + dtTo.ToString("dd MMM yyyy"); cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;

                //cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = " "; cell.Merge = true; cell.Style.Font.Bold = false;
                //cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;
                #endregion


                //Int32[] locations = oEmployeeSalary.EmployeeSalarys.Select(x => x.LocationID).OrderBy(x => x).Distinct().ToArray();

                List<RPTSalarySheet> oEmployeeSalarys = new List<RPTSalarySheet>();
                oEmployeeSalary.EmployeeSalarySheets.ForEach(x => oEmployeeSalarys.Add(x));

                List<RPTSalarySheet> oEmpSs = new List<RPTSalarySheet>();
                oEmpSs = oEmployeeSalary.EmployeeSalarySheets.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeCode).ToList();
                //foreach (Int32 locationId in locations)
                //{
                this.ExcelSalarySheet_F5_Header(ColumnHeader, ColEmpInfo, ColAttDetail, ColIncrementDetail, ColEarnings, ColDeductions, ColBankDetail, ref nRowIndex, ref sheet, ref cell, ref border, oSalaryHeads, oLeaveHeads, oELOnAttendances, bWithPrecision, bHasOTAllowance, bHasParentDept);
                while (oEmpSs.Count > 0)
                {
                    var oResults = oEmpSs.Where(x => x.BusinessUnitID == oEmpSs[0].BusinessUnitID && x.LocationID == oEmpSs[0].LocationID && x.DepartmentID == oEmpSs[0].DepartmentID).OrderBy(x => x.EmployeeCode).ToList();
                    var oEmpSalaryDetails = oEmployeeSalary.EmployeeSalarySheetDetails.Where(x => oResults.Select(p => p.EmployeeSalaryID).Contains(x.EmployeeSalaryID)).ToList();

                    oEmpSalaryDetails.RemoveAll(x => x.SalaryHeadID == 8);
                    oEmpSalaryDetails.RemoveAll(x => x.SalaryHeadID == 20);
                    oEmpSalaryDetails.RemoveAll(x => x.SalaryHeadID == 25);
                    oEmpSalaryDetails.RemoveAll(x => x.SalaryHeadID == 26);

                    cell = sheet.Cells[nRowIndex, 3];
                    cell.Value = "Unit Name: " + oResults.FirstOrDefault().LocationName + " , Department Name: " + oResults.FirstOrDefault().DepartmentName;
                    cell.Style.Font.Bold = true; cell.Style.Font.Size = 15;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    nRowIndex++;

                    this.ExcelSalarySheet_F5_DataManipulation(oSalarySheetPropertys, ColumnHeader, ColEmpInfo, ColAttDetail, ColIncrementDetail, ColEarnings, ColDeductions, ColBankDetail, ref nRowIndex, ref sheet, ref cell, ref border, oSalaryHeads, oResults, oEmpSalaryDetails, oLeaveHeads, oELOnAttendances, bWithPrecision, bHasOTAllowance, bHasParentDept);

                    //cell = sheet.Cells[nRowIndex++, nStartCol, nRowIndex++, nEndCol]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = false;
                    //cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; 
                    //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                    nRowIndex++;
                    oEmpSs.RemoveAll(x => x.BusinessUnitID == oResults[0].BusinessUnitID && x.LocationID == oResults[0].LocationID && x.DepartmentID == oResults[0].DepartmentID);
                }
                int eColG = 2;
                int nColG = 2;
                var valueG = "";
                int nEmpCountSpanG = 2 + ColEmpInfo.Count();
                cell = sheet.Cells[nRowIndex, nColG++]; cell.Value = ""; cell.Style.Font.Bold = true;
                cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, nColG++]; cell.Value = "Grand Total"; cell.Style.Font.Bold = true;
                cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                for (int i = 3; i <= nEmpCountSpanG; i++)
                {
                    cell = sheet.Cells[nRowIndex, nColG++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                nEmpCountSpanG = nEmpCountSpanG + 1;
                //this.SetCellValue((bIsGtotal) ? "Total Employee : " + _nGrandEmpCount : "Total Employee : " + _nEmpCount, 0, nEmpCountSpan, Element.ALIGN_LEFT, 1, nHeight);
                _nEmpCount = 0;
                int initialSpanG = 2 + ColEmpInfo.Count() + ((ColAttDetail.Where(x => x == (Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))).Any()) ? ColAttDetail.Count() + oLeaveHeads.Count() - 1 : ColAttDetail.Count());
                //int initialSpan = ((ColAttDetail.Where(x => x == (Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))).Any()) ? ColAttDetail.Count() + oLeaveHeads.Count() - 1 : ColAttDetail.Count());
                cell = sheet.Cells[nRowIndex, nEmpCountSpanG]; cell.Value = ""; cell.Style.Font.Bold = true;
                cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                for (int i = 1; i <= initialSpanG; i++)
                {
                    cell = sheet.Cells[nRowIndex, nColG++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                nColG = initialSpanG + 1;
                eColG = initialSpanG + 1;
                //this.SetCellValue((bIsGtotal) ? "Grand Total" : "Total", 0, initialSpan, Element.ALIGN_RIGHT, 1, nHeight);

                foreach (KeyValuePair<string, object> kvp in _increment)
                {
                    double nAmount = Convert.ToDouble(kvp.Value);
                    string sAmt = (nAmount > 0) ? this.GetAmountInStr(nAmount, true, true) : "-";
                    cell = sheet.Cells[nRowIndex, nColG++, nRowIndex, eColG++]; cell.Value = sAmt; cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    //this.SetCellValue(((nAmount > 0) ? this.GetAmountInStr(nAmount, true, bWithPrecision) : "-"), 0, 0, Element.ALIGN_CENTER, 1, nHeight);
                }
                foreach (string property in ColIncrementDetail)
                {
                    if (property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.IncrementEffectDate.ToString()))
                    {
                        valueG = "";
                        cell = sheet.Cells[nRowIndex, nColG++, nRowIndex, eColG++]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = true;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);
                    }
                }

                valueG = (Convert.ToDouble(_gross["Gross Salary"]) > 0) ? this.GetAmountInStr(Convert.ToDouble(_gross["Gross Salary"]), true, bWithPrecision) : "-";
                cell = sheet.Cells[nRowIndex, nColG++, nRowIndex, eColG++]; cell.Value = valueG; cell.Merge = true; cell.Style.Font.Bold = true;
                cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);

                foreach (KeyValuePair<string, object> kvp in _earnings)
                {
                    double nAmount = Convert.ToDouble(kvp.Value);
                    valueG = (Convert.ToDouble(_gross["Gross Earnings On Att."]) > 0) ? this.GetAmountInStr(Convert.ToDouble(_gross["Gross Earnings On Att."]), true, bWithPrecision) : "-";
                    cell = sheet.Cells[nRowIndex, nColG++, nRowIndex, eColG++]; cell.Value = ((nAmount > 0) ? this.GetAmountInStr(nAmount, true, bWithPrecision) : "-"); cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    //this.SetCellValue(((nAmount > 0) ? this.GetAmountInStr(nAmount, true, _bWithPrecision) : "-"), 0, 0, Element.ALIGN_CENTER, 1, nHeight);
                }
                if (_earnings.Any())
                {
                    valueG = (Convert.ToDouble(_gross["Gross Earnings On Att."]) > 0) ? this.GetAmountInStr(Convert.ToDouble(_gross["Gross Earnings On Att."]), true, bWithPrecision) : "-";
                    cell = sheet.Cells[nRowIndex, nColG++, nRowIndex, eColG++]; cell.Value = valueG; cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);
                }

                foreach (KeyValuePair<string, object> kvp in _deductions)
                {
                    double nAmount = Convert.ToDouble(kvp.Value);
                    cell = sheet.Cells[nRowIndex, nColG++, nRowIndex, eColG++]; cell.Value = ((nAmount > 0) ? this.GetAmountInStr(nAmount, true, bWithPrecision) : "-"); cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    //this.SetCellValue(((nAmount > 0) ? this.GetAmountInStr(nAmount, true, _bWithPrecision) : "-"), 0, 0, Element.ALIGN_CENTER, 1, nHeight);
                }
                if (_deductions.Any())
                {
                    valueG = (Convert.ToDouble(_gross["Gross Deductions"]) > 0) ? this.GetAmountInStr(Convert.ToDouble(_gross["Gross Deductions"]), true, bWithPrecision) : "-";

                    cell = sheet.Cells[nRowIndex, nColG++, nRowIndex, eColG++]; cell.Value = valueG; cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);
                }
                valueG = (Convert.ToDouble(_gross["Net Amount"]) > 0) ? this.GetAmountInStr(Convert.ToDouble(_gross["Net Amount"]), true, bWithPrecision) : "-";

                cell = sheet.Cells[nRowIndex, nColG++, nRowIndex, eColG++]; cell.Value = valueG; cell.Merge = true; cell.Style.Font.Bold = true;
                cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);

                foreach (KeyValuePair<string, object> kvp in _banks)
                {
                    double nAmount = Convert.ToDouble(kvp.Value);

                    cell = sheet.Cells[nRowIndex, nColG++, nRowIndex, eColG++]; cell.Value = ((nAmount > 0) ? this.GetAmountInStr(nAmount, true, bWithPrecision) : "-"); cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //this.SetCellValue(((nAmount > 0) ? this.GetAmountInStr(nAmount, true, _bWithPrecision) : "-"), 0, 0, Element.ALIGN_CENTER, 1, nHeight);
                }

                foreach (string property in ColBankDetail)
                {
                    if (property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.AccountNo.ToString()))
                    {
                        valueG = "";

                        cell = sheet.Cells[nRowIndex, nColG++, nRowIndex, eColG++]; cell.Value = valueG; cell.Merge = true; cell.Style.Font.Bold = true;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);
                    }
                    if (property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.BankName.ToString()))
                    {
                        valueG = "";
                        cell = sheet.Cells[nRowIndex, nColG++, nRowIndex, eColG++]; cell.Value = valueG; cell.Merge = true; cell.Style.Font.Bold = true;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);
                    }
                }

                valueG = "";
                cell = sheet.Cells[nRowIndex, nColG++, nRowIndex, eColG++]; cell.Value = valueG; cell.Merge = true; cell.Style.Font.Bold = true;
                cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);

                //_oPdfPTable.CompleteRow();


                foreach (string key in ColGross)
                {
                    _gross[key] = Convert.ToDouble(_gross[key]) + Convert.ToDouble(_gross[key]);
                    _gross[key] = 0;
                }
                foreach (string key in _earnings.Select(x => x.Key).ToList())
                {
                    _earnings[key] = Convert.ToDouble(_earnings[key]) + Convert.ToDouble(_earnings[key]);
                    _earnings[key] = 0;
                }
                foreach (string key in _deductions.Select(x => x.Key).ToList())
                {
                    _deductions[key] = Convert.ToDouble(_deductions[key]) + Convert.ToDouble(_deductions[key]);
                    _deductions[key] = 0;
                }
                foreach (string key in _increment.Select(x => x.Key).ToList())
                {
                    _increment[key] = Convert.ToDouble(_increment[key]) + Convert.ToDouble(_increment[key]);
                    _increment[key] = 0;
                }
                foreach (string key in _banks.Select(x => x.Key).ToList())
                {
                    _banks[key] = Convert.ToDouble(_banks[key]) + Convert.ToDouble(_banks[key]);
                    _banks[key] = 0;
                }

                ++nRowIndex;
                //++nRowIndex;
                nRowIndex += 1;

                //cell = sheet.Cells[1, 1, nRowIndex + 1, nEndCol];
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                //fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SalarySheet-F5.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }

        private void ExcelSalarySheet_F5_Header(List<string> ColumnHeader, List<string> ColEmpInfo, List<string> ColAttDetail, List<string> ColIncrementDetail, List<string> ColEarnings, List<string> ColDeductions, List<string> ColBankDetail, ref int nRowIndex, ref ExcelWorksheet sheet, ref ExcelRange cell, ref OfficeOpenXml.Style.Border border, List<SalaryHead> oSalaryHeads, List<LeaveHead> oLeaveHeads, List<EmployeeLeaveOnAttendance> oELOnAttendances, bool bWithPrecision, bool bHasOTAllowance, bool bHasParentDept)
        {
            int nStartCol = 2, nEndCol = 2;
            int nColumn = 2;
            sheet.Column(nColumn).Width = 5;

            foreach (string sColumn in ColEmpInfo)
            {
                sheet.Column(++nColumn).Width = 15;
            }

            if (oLeaveHeads.Count() > 0)
            {
                foreach (string sColumn in ColAttDetail)
                {
                    if (sColumn == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                    {
                        foreach (LeaveHead oItem in oLeaveHeads)
                        {
                            sheet.Column(++nColumn).Width = 7;
                        }
                    }
                    else
                    {
                        sheet.Column(++nColumn).Width = 12;
                    }
                }
            }
            else
            {
                foreach (string sColumn in ColAttDetail)
                {
                    sheet.Column(++nColumn).Width = 12;
                }
            }
            foreach (string sColumn in ColIncrementDetail)
            {
                sheet.Column(++nColumn).Width = 15;
            }

            sheet.Column(++nColumn).Width = 15; // Gross Amount

            foreach (string sColumn in ColEarnings)
            {
                sheet.Column(++nColumn).Width = 12;
            }
            if (ColEarnings.Count() > 0)
            {
                sheet.Column(++nColumn).Width = 15;
                //sheet.Column(++nColumn).Width = 15;
            }

            foreach (string sColumn in ColDeductions)
            {
                sheet.Column(++nColumn).Width = 12;
            }
            if (ColDeductions.Count() > 0)
            {
                sheet.Column(++nColumn).Width = 16;
            }
            sheet.Column(++nColumn).Width = 15;
            foreach (string sColumn in ColBankDetail)
            {
                sheet.Column(++nColumn).Width = 16;
            }
            sheet.Column(++nColumn).Width = 15;
            nEndCol = nColumn;

            ColGross = new string[] { "Gross Salary", ((ColEarnings.Count() > 0) ? "Gross Earnings On Att." : ""), ((ColDeductions.Count() > 0) ? "Gross Deductions" : ""), "Net Amount" };
            ColGross = ColGross.Where(x => x != "").ToArray();

            foreach (string property in ColGross)
            {
                _gross.Add(property, 0);
            }
            foreach (string property in ColIncrementDetail)
            {
                if (property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LastGross.ToString()) || property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LastIncrement.ToString())) { _increment.Add(property, 0); }
            }
            foreach (string property in ColEarnings)
            {
                _earnings.Add(property, 0);
            }
            foreach (string property in ColDeductions)
            {
                _deductions.Add(property, 0);
            }
            foreach (string property in ColBankDetail)
            {
                if (property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.BankAmount.ToString()) || property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.CashAmount.ToString())) { _banks.Add(property, 0); }
            }

            #region Column Header

            //int nSpan = 0;
            //int nAddSpan = (oLeaveHeads.Count() > 0) ? 1 : 0;
            //foreach (string sColumn in ColumnHeader)
            //{

            //    if (sColumn == "SL#")
            //    {
            //        nStartCol = 2;
            //        nEndCol = 2;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Employee Information")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += ColEmpInfo.Count();
            //        nSpan = 0;
            //    }
            //    else if (sColumn == "Att. Detail")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += ColAttDetail.Count() + ((nAddSpan > 0) ? oLeaveHeads.Count() - 1 : 0);
            //        nSpan = 0;
            //    }
            //    else if (sColumn == "Increment Detail")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += ColIncrementDetail.Count();
            //        nSpan = 0;
            //    }
            //    else if (sColumn == "Gross Salary")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Earnings")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += ColEarnings.Count();
            //        nSpan = 0;
            //    }
            //    else if (sColumn == "Gross Earnings")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Gross Earnings On Att.")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Deduction")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += ColDeductions.Count();
            //        nSpan = 0;
            //    }
            //    else if (sColumn == "Gross Deductions")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Net Amount")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Bank")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Cash")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Account No")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Bank Name")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Signature")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    string sColumnvalue = "";
            //    sColumnvalue = sColumn;
            //    if (ColIncrementDetail.Count > 0 && sColumn == "Gross Salary") { sColumnvalue = "Present Salary"; }
            //    cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex + nSpan, nEndCol]; cell.Value = sColumnvalue; cell.Merge = true; cell.Style.Font.Bold = false;
            //    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            //}
            //nRowIndex++;

            nStartCol = 2; nEndCol = 2;
            foreach (string sColumn in ColumnHeader)
            {
                if (sColumn == "SL#")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "SL"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                if (sColumn == "Employee Information")
                {
                    foreach (string sItem in ColEmpInfo)
                    {
                        string sColName = "";
                        sColName = sItem;
                        if (bHasParentDept && sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.Department.ToString())) { sColName = "Sub Department"; }
                        if (bHasParentDept && sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.ParentDepartment.ToString())) { sColName = "Department"; }
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColName; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }
                else if (sColumn == "Att. Detail")
                {
                    foreach (string sItem in ColAttDetail)
                    {
                        if (sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                        {
                            //nEndCol += oLeaveHeads.Count() - 1;
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            nStartCol += oLeaveHeads.Count() - 1;
                        }
                        else
                        {
                            string sColumnvalue = "";
                            sColumnvalue = sItem;
                            if (sColumnvalue == "Employee Working Days") { sColumnvalue = "EWD"; }

                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumnvalue; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                    }
                }
                else if (sColumn == "Increment Detail")
                {
                    foreach (string sItem in ColIncrementDetail)
                    {
                        string sColumnvalue = "";
                        sColumnvalue = sItem;
                        if (sColumnvalue == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LastGross.ToString())) { sColumnvalue = "Before Increment"; }
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumnvalue; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }

                else if (sColumn == "Gross Salary")
                {
                    string sColumnvalue = "";
                    sColumnvalue = sColumn;
                    if (ColIncrementDetail.Count > 0)
                    {
                        sColumnvalue = "Present Salary";
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumnvalue; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }

                else if (sColumn == "Earnings")
                {
                    //nStartCol++; nEndCol++;
                    foreach (string sItem in ColEarnings)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    //nStartCol++; nEndCol++;
                }

                else if (sColumn == "Gross Earnings")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "Gross Earnings"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Gross Earnings On Att.")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "Gross Earnings On Att."; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                else if (sColumn == "Deduction")
                {
                    //nStartCol++; nEndCol++;
                    foreach (string sItem in ColDeductions)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }

                else if (sColumn == "Gross Deductions")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Net Amount")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Bank")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Cash")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Account No")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Bank Name")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Signature")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

            }
            //nRowIndex += nAddSpan;
            //if (nAddSpan > 0) // With leave Heads
            //{
            nStartCol = 3 + ColEmpInfo.Count();
            foreach (string sItem in ColAttDetail)
            {
                if (sItem != Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                {
                    nStartCol++;
                }
                else
                {
                    break;
                }
            }
            nEndCol = nStartCol;

            foreach (LeaveHead oItem in oLeaveHeads)
            {
                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.ShortName; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            }
            nRowIndex++;
            //}
            //else
            //{
            //    nRowIndex++;
            //}

            #endregion
        }

        private void ExcelSalarySheet_F5_DataManipulation(List<SalarySheetProperty> oSalarySheetPropertys, List<string> ColumnHeader, List<string> ColEmpInfo, List<string> ColAttDetail, List<string> ColIncrementDetail, List<string> ColEarnings, List<string> ColDeductions, List<string> ColBankDetail, ref int nRowIndex, ref ExcelWorksheet sheet, ref ExcelRange cell, ref OfficeOpenXml.Style.Border border, List<SalaryHead> oSalaryHeads, List<RPTSalarySheet> oResults, List<RPTSalarySheetDetail> oEmployeeSalaryDetails, List<LeaveHead> oLeaveHeads, List<EmployeeLeaveOnAttendance> oELOnAttendances, bool bWithPrecision, bool bHasOTAllowance, bool bHasParentDept)
        {
            #region Date Manipulation

            var EmpInfoPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 1).ToList();
            var AttDetailPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty != EnumSalarySheetFormatProperty.OTAllowance).ToList();
            var oEarnings = oSalaryHeads.Where(x => (x.SalaryHeadType == EnumSalaryHeadType.Addition) || (x.SalaryHeadType == EnumSalaryHeadType.Reimbursement)).ToList();
            //var oDeductions = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Deduction).ToList();

            var oDeductions = oSalaryHeads.Where(x => (x.SalaryHeadType == EnumSalaryHeadType.Deduction && (x.SalaryHeadID != 8 && x.SalaryHeadID != 20 && x.SalaryHeadID != 25 && x.SalaryHeadID != 26))).ToList();

            //(x.SalaryHeadID == 8 || x.SalaryHeadID == 20 || x.SalaryHeadID == 25 || x.SalaryHeadID == 26))

            var IncrementPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 3).ToList();
            var BankPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 4).ToList();

            if (oResults.Count() > 0)
            {
                int nCount = 0;
                int Code = 0;
                var oELOnAtts = new List<EmployeeLeaveOnAttendance>();
                Dictionary<string, object> gross = new Dictionary<string, object>();
                Dictionary<string, object> increment = new Dictionary<string, object>();
                Dictionary<string, object> earnings = new Dictionary<string, object>();
                Dictionary<string, object> deductions = new Dictionary<string, object>();
                Dictionary<string, object> banks = new Dictionary<string, object>();

                foreach (string property in _gross.Select(x => x.Key).ToArray())
                {
                    gross.Add(property, 0);
                }
                foreach (string property in _increment.Select(x => x.Key).ToArray())
                {
                    increment.Add(property, 0);
                }
                foreach (string property in _earnings.Select(x => x.Key).ToArray())
                {
                    earnings.Add(property, 0);
                }
                foreach (string property in _deductions.Select(x => x.Key).ToArray())
                {
                    deductions.Add(property, 0);
                }
                foreach (string property in _banks.Select(x => x.Key).ToArray())
                {
                    banks.Add(property, 0);
                }

                foreach (RPTSalarySheet oItem in oResults)
                {

                    oELOnAtts = oELOnAttendances.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();

                    Code = 0;
                    int nStartCol = 2; int nEndCol = 2;
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (++nCount); cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = "0";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    /*---- Employee Info -----*/
                    if (ColEmpInfo.Count() > 0)
                    {
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeCode).Any())
                        {
                            if (int.TryParse(oItem.EmployeeCode, out Code))
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = Code; cell.Style.Font.Bold = false;
                                cell.Style.Numberformat.Format = "0";
                            }
                            else
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;

                            }
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeName).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ParentDepartment).Any())
                        {

                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.ParentDepartmentName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Department).Any())
                        {

                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Designation).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.JoiningDate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ConfirmationDate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.DateOfConfirmationInString; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeType).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmployeeTypeName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Gender).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.Gender; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmpGroup).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmpGroup; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.PaymentType).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.PaymentType; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeContactNo).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.ContactNo; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    if (ColAttDetail.Count() > 0)
                    {         /*---- Att. Detail -----*/
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.TotalDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalDays > 0) ? (oItem.TotalDays) : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.PresentDay).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.Present > 0) ? oItem.Present : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.DayOffHolidays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = ((oItem.TotalDayOff) > 0) ? (oItem.TotalDayOff) : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.AbsentDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalAbsent > 0) ? oItem.TotalAbsent : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveHead).Any())
                        {
                            foreach (LeaveHead oLeaveHead in oLeaveHeads)
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).Any()) ? oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).FirstOrDefault().LeaveDays : 0; cell.Style.Font.Bold = false;
                                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalLeave > 0) ? (oItem.TotalLeave) : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeWorkingDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.EWD > 0) ? oItem.EWD : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EarlyOutDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalEarlyLeaving > 0) ? oItem.TotalEarlyLeaving : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EarlyOutMins).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.EarlyInMin > 0) ? oItem.EarlyInMin : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LateDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalLate > 0) ? oItem.TotalLate : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LateHrs).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.LateInMin > 0) ? Global.MinInHourMin(oItem.LateInMin) : ""; cell.Style.Font.Bold = false;

                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTHours).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.OTHour > 0) ? oItem.OTHour : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTRate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.OTRatePerHour > 0) ? oItem.OTRatePerHour : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    /*Increment Detail */
                    if (ColIncrementDetail.Count() > 0)
                    {
                        var sValue = "";
                        sValue = (oItem.LastGross > 0 ? oItem.LastGross : 0).ToString();
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        increment["Last Gross"] = Convert.ToDouble(increment["Last Gross"]) + Math.Round(oItem.LastGross > 0 ? oItem.LastGross : 0);


                        sValue = (oItem.IncrementAmount > 0 ? oItem.IncrementAmount : 0).ToString();
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        increment["Last Increment"] = Convert.ToDouble(increment["Last Increment"]) + Math.Round(oItem.IncrementAmount > 0 ? oItem.IncrementAmount : 0);


                        sValue = oItem.EffectedDateInStr;
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }

                    /*--- Gross Salary ---- */
                    //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";

                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.GrossAmount > 0) ? Math.Round(oItem.GrossAmount) : 0; ; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    gross["Gross Salary"] = Convert.ToDouble(gross["Gross Salary"]) + Math.Round(oItem.GrossAmount);

                    /*--- Earnings ---- */

                    double nAmount = 0, nAddAmount = 0;

                    foreach (SalaryHead oSalaryHead in oEarnings.OrderBy(x => x.SalaryHeadType))
                    {
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;

                        //nAmount = (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Basic) ? nAmount : Math.Round(nAmount);
                        nAmount = Math.Round(nAmount);

                        nAddAmount += (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Addition || oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Reimbursement) ? nAmount : 0;

                        earnings[oSalaryHead.Name] = Convert.ToDouble(earnings[oSalaryHead.Name]) + nAmount;
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nAmount > 0) ? nAmount : 0; cell.Style.Font.Bold = false;
                        //cell.Style.Numberformat.Format = (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Basic) ? "#,##0.00;(#,##0.00)" : (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    double nOTAllowance = Math.Round(oItem.OTHour * oItem.OTRatePerHour);
                    if (bHasOTAllowance)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nOTAllowance > 0) ? Math.Round(nOTAllowance) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    if (oEarnings.Any())
                    {
                        //double nEarnings = oItem.GrossAmount + ((bHasOTAllowance) ? nOTAllowance : 0) + nAddAmount;
                        //cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nEarnings > 0) ? Math.Round(nEarnings) : 0; cell.Style.Font.Bold = false;
                        //cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        //cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nOnedayGross = 0;
                        if ((oItem.TotalDays + oItem.TotalDayOff + oItem.TotalHoliday) > 0)
                        {
                            double dMonthDays = (oItem.EndDate - oItem.StartDate).TotalDays + 1;
                            //nOnedayGross = oItem.GrossAmount / (oItem.TotalWorkingDay + oItem.TotalDayOff + oItem.TotalHoliday);
                            nOnedayGross = oItem.GrossAmount / dMonthDays;

                        }
                        double nEarningsOnAtt = Math.Round(oItem.PD * nOnedayGross + ((bHasOTAllowance) ? nOTAllowance : 0) + nAddAmount);

                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nEarningsOnAtt > 0) ? Math.Round(nEarningsOnAtt) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        gross["Gross Earnings On Att."] = Convert.ToDouble(gross["Gross Earnings On Att."]) + nEarningsOnAtt;
                    }

                    /*---deduction--*/
                    double nDeductionAmount = 0;

                    foreach (SalaryHead oSalaryHead in oDeductions)
                    {
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;
                        nDeductionAmount += nAmount;
                        deductions[oSalaryHead.Name] = Convert.ToDouble(deductions[oSalaryHead.Name]) + nAmount;
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nAmount > 0) ? Math.Round(nAmount) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    if (oDeductions.Count() > 0)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nDeductionAmount > 0) ? Math.Round(nDeductionAmount) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        gross["Gross Deductions"] = Convert.ToDouble(gross["Gross Deductions"]) + nDeductionAmount;
                    }
                    /*---Net Amount--*/

                    double nNetAmount = oItem.NetAmount + ((bHasOTAllowance) ? 0 : -nOTAllowance);
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nNetAmount > 0) ? Math.Round(nNetAmount) : 0; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    gross["Net Amount"] = Convert.ToDouble(gross["Net Amount"]) + nNetAmount;

                    if (ColBankDetail.Count() > 0)
                    {
                        string sValue = "";
                        sValue = (oItem.BankAmount > 0 ? oItem.BankAmount : 0).ToString();
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = Math.Round(Convert.ToDouble(sValue)); cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        banks["Bank Amount"] = Convert.ToDouble(banks["Bank Amount"]) + (oItem.BankAmount > 0 ? oItem.BankAmount : 0);


                        sValue = (oItem.CashAmount > 0 ? oItem.CashAmount : 0).ToString();
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = Math.Round(Convert.ToDouble(sValue)); cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        banks["Cash Amount"] = Convert.ToDouble(banks["Cash Amount"]) + (oItem.CashAmount > 0 ? oItem.CashAmount : 0);

                        sValue = (oItem.AccountNo != "" ? oItem.AccountNo : "-");
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        sValue = (oItem.BankName != "" ? oItem.BankName : "-");
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }

                    /*---Signature--*/
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "--"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    ++nRowIndex;
                }
                int eCol = 2;
                int nCol = 2;
                var value = "";
                int nEmpCountSpan = 2 + ColEmpInfo.Count();
                cell = sheet.Cells[nRowIndex, nCol++]; cell.Value = ""; cell.Style.Font.Bold = true;
                cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, nCol++]; cell.Value = "Section Total"; cell.Style.Font.Bold = true;
                cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                for (int i = 3; i <= nEmpCountSpan; i++)
                {
                    cell = sheet.Cells[nRowIndex, nCol++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                nEmpCountSpan = nEmpCountSpan + 1;
                //this.SetCellValue((bIsGtotal) ? "Total Employee : " + _nGrandEmpCount : "Total Employee : " + _nEmpCount, 0, nEmpCountSpan, Element.ALIGN_LEFT, 1, nHeight);
                _nEmpCount = 0;
                int initialSpan = 2 + ColEmpInfo.Count() + ((ColAttDetail.Where(x => x == (Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))).Any()) ? ColAttDetail.Count() + oLeaveHeads.Count() - 1 : ColAttDetail.Count());
                //int initialSpan = ((ColAttDetail.Where(x => x == (Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))).Any()) ? ColAttDetail.Count() + oLeaveHeads.Count() - 1 : ColAttDetail.Count());
                cell = sheet.Cells[nRowIndex, nEmpCountSpan]; cell.Value = ""; cell.Style.Font.Bold = true;
                cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                for (int i = 1; i <= initialSpan; i++)
                {
                    cell = sheet.Cells[nRowIndex, nCol++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                nCol = initialSpan + 1;
                eCol = initialSpan + 1;
                //this.SetCellValue((bIsGtotal) ? "Grand Total" : "Total", 0, initialSpan, Element.ALIGN_RIGHT, 1, nHeight);

                foreach (KeyValuePair<string, object> kvp in increment)
                {
                    double nAmount = Convert.ToDouble(kvp.Value);
                    string sAmt = (nAmount > 0) ? this.GetAmountInStr(nAmount, true, true) : "-";
                    cell = sheet.Cells[nRowIndex, nCol++, nRowIndex, eCol++]; cell.Value = sAmt; cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    //this.SetCellValue(((nAmount > 0) ? this.GetAmountInStr(nAmount, true, bWithPrecision) : "-"), 0, 0, Element.ALIGN_CENTER, 1, nHeight);
                }
                foreach (string property in ColIncrementDetail)
                {
                    if (property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.IncrementEffectDate.ToString()))
                    {
                        value = "";
                        cell = sheet.Cells[nRowIndex, nCol++, nRowIndex, eCol++]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = true;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);
                    }
                }

                value = (Convert.ToDouble(gross["Gross Salary"]) > 0) ? this.GetAmountInStr(Convert.ToDouble(gross["Gross Salary"]), true, bWithPrecision) : "-";
                cell = sheet.Cells[nRowIndex, nCol++, nRowIndex, eCol++]; cell.Value = value; cell.Merge = true; cell.Style.Font.Bold = true;
                cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);

                foreach (KeyValuePair<string, object> kvp in earnings)
                {
                    double nAmount = Convert.ToDouble(kvp.Value);
                    value = (Convert.ToDouble(gross["Gross Earnings On Att."]) > 0) ? this.GetAmountInStr(Convert.ToDouble(gross["Gross Earnings On Att."]), true, bWithPrecision) : "-";
                    cell = sheet.Cells[nRowIndex, nCol++, nRowIndex, eCol++]; cell.Value = ((nAmount > 0) ? this.GetAmountInStr(nAmount, true, bWithPrecision) : "-"); cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    //this.SetCellValue(((nAmount > 0) ? this.GetAmountInStr(nAmount, true, _bWithPrecision) : "-"), 0, 0, Element.ALIGN_CENTER, 1, nHeight);
                }
                if (earnings.Any())
                {
                    value = (Convert.ToDouble(gross["Gross Earnings On Att."]) > 0) ? this.GetAmountInStr(Convert.ToDouble(gross["Gross Earnings On Att."]), true, bWithPrecision) : "-";
                    cell = sheet.Cells[nRowIndex, nCol++, nRowIndex, eCol++]; cell.Value = value; cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);
                }

                foreach (KeyValuePair<string, object> kvp in deductions)
                {
                    double nAmount = Convert.ToDouble(kvp.Value);
                    cell = sheet.Cells[nRowIndex, nCol++, nRowIndex, eCol++]; cell.Value = ((nAmount > 0) ? this.GetAmountInStr(nAmount, true, bWithPrecision) : "-"); cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    //this.SetCellValue(((nAmount > 0) ? this.GetAmountInStr(nAmount, true, _bWithPrecision) : "-"), 0, 0, Element.ALIGN_CENTER, 1, nHeight);
                }
                if (deductions.Any())
                {
                    value = (Convert.ToDouble(gross["Gross Deductions"]) > 0) ? this.GetAmountInStr(Convert.ToDouble(gross["Gross Deductions"]), true, bWithPrecision) : "-";

                    cell = sheet.Cells[nRowIndex, nCol++, nRowIndex, eCol++]; cell.Value = value; cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);
                }
                value = (Convert.ToDouble(gross["Net Amount"]) > 0) ? this.GetAmountInStr(Convert.ToDouble(gross["Net Amount"]), true, bWithPrecision) : "-";

                cell = sheet.Cells[nRowIndex, nCol++, nRowIndex, eCol++]; cell.Value = value; cell.Merge = true; cell.Style.Font.Bold = true;
                cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);

                foreach (KeyValuePair<string, object> kvp in banks)
                {
                    double nAmount = Convert.ToDouble(kvp.Value);

                    cell = sheet.Cells[nRowIndex, nCol++, nRowIndex, eCol++]; cell.Value = ((nAmount > 0) ? this.GetAmountInStr(nAmount, true, bWithPrecision) : "-"); cell.Merge = true; cell.Style.Font.Bold = true;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    //this.SetCellValue(((nAmount > 0) ? this.GetAmountInStr(nAmount, true, _bWithPrecision) : "-"), 0, 0, Element.ALIGN_CENTER, 1, nHeight);
                }

                foreach (string property in ColBankDetail)
                {
                    if (property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.AccountNo.ToString()))
                    {
                        value = "";

                        cell = sheet.Cells[nRowIndex, nCol++, nRowIndex, eCol++]; cell.Value = value; cell.Merge = true; cell.Style.Font.Bold = true;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);
                    }
                    if (property == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.BankName.ToString()))
                    {
                        value = "";
                        cell = sheet.Cells[nRowIndex, nCol++, nRowIndex, eCol++]; cell.Value = value; cell.Merge = true; cell.Style.Font.Bold = true;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);
                    }
                }

                value = "";
                cell = sheet.Cells[nRowIndex, nCol++, nRowIndex, eCol++]; cell.Value = value; cell.Merge = true; cell.Style.Font.Bold = true;
                cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                //this.SetCellValue(value, 0, 0, Element.ALIGN_RIGHT, 1, nHeight);

                //_oPdfPTable.CompleteRow();


                foreach (string key in ColGross)
                {
                    _gross[key] = Convert.ToDouble(_gross[key]) + Convert.ToDouble(gross[key]);
                    gross[key] = 0;
                }
                foreach (string key in earnings.Select(x => x.Key).ToList())
                {
                    _earnings[key] = Convert.ToDouble(_earnings[key]) + Convert.ToDouble(earnings[key]);
                    earnings[key] = 0;
                }
                foreach (string key in deductions.Select(x => x.Key).ToList())
                {
                    _deductions[key] = Convert.ToDouble(_deductions[key]) + Convert.ToDouble(deductions[key]);
                    deductions[key] = 0;
                }
                foreach (string key in increment.Select(x => x.Key).ToList())
                {
                    _increment[key] = Convert.ToDouble(_increment[key]) + Convert.ToDouble(increment[key]);
                    increment[key] = 0;
                }
                foreach (string key in banks.Select(x => x.Key).ToList())
                {
                    _banks[key] = Convert.ToDouble(_banks[key]) + Convert.ToDouble(banks[key]);
                    banks[key] = 0;
                }

                ++nRowIndex;
                //++nRowIndex;
                nRowIndex += 1;
            }

            //ColEmpInfo.Count() + ColAttDetail.Count() + ((bWithLeaveHeads) ? oLeaveHeads.Count() - 1 : 0) + 1 + ColEarnings.Count() + ((ColEarnings.Count() > 0) ? 1 : 0) + ColDeductions.Count() + ((ColDeductions.Count() > 0) ? 1 : 0) + ColIncrementDetail.Count() + ColBankDetail.Count() + 2;
            //int nCol = 2;
            //int nSpan = 2 + ColEmpInfo.Count() + ((ColAttDetail.Where(x => x == (Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))).Any()) ? ColAttDetail.Count() + oLeaveHeads.Count() - 1 : ColAttDetail.Count());
            //cell = sheet.Cells[nRowIndex, nCol++, nRowIndex, nSpan]; cell.Value = "Total"; cell.Style.Font.Bold = false; cell.Merge = true;
            //cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            //nCol = nSpan;
            //cell = sheet.Cells[nRowIndex, nCol++]; cell.Value = "Total"; cell.Style.Font.Bold = false;
            //cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


            //int nEndCol = 2;


            #endregion
        }
        #endregion F5 XL

        #endregion

        #region F6 XL
        public void ExportIntoExcelSalarySheet_F6(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, bool IsMatchExact, double ts)//F6 XL
        {
            IsComp = IsCompliance;
            var oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, IsCompliance, sGroupIDs, sBlockIDs, IsMatchExact);
            var oSalaryHeads = oEmployeeSalary.SalaryHeads;
            var bHasOTAllowance = false;
            bool bHasParentDept = false;
            string sSQL = "Select * from SalarySheetProperty Where IsActive=1 ORDER BY SalarySheetFormatProperty";
            var oSalarySheetPropertys = SalarySheetProperty.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
            bool bWithLeaveHeads = oSalarySheetPropertys.Exists(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveHead);

            _oEmployeeBankAccounts = new List<EmployeeBankAccount>();
            _oEmployeeBankAccounts = oEmployeeSalary.EmployeeBankAccounts;
            _oTransferPromotionIncrements = new List<TransferPromotionIncrement>();

            List<EmployeeLeaveOnAttendance> oELOnAttendances = new List<EmployeeLeaveOnAttendance>();
            List<EmployeeOTonAttendance> oEOTonAttendances = new List<EmployeeOTonAttendance>();
            List<LeaveHead> oLeaveHeads = new List<LeaveHead>();

            string EmpIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Where(x => x.EmployeeSalaryID > 0).Select(p => p.EmployeeID).Distinct().ToList());

            DateTime dtFrom = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[0]);
            DateTime dtTo = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[1]);

            if (EmpIDs != "")
            {
                //if (IsCompliance)// if this report is for compliance, then map comp OT with the actual OT . there is no condition for comp in report .
                //{
                //    oEmployeeSalary.EmployeeSalarys.ForEach(x =>
                //    {
                //        x.OTHour = x.CompOTHour;
                //        x.OTRatePerHour = Math.Round(x.CompOTRatePerHour, 2);
                //        x.NetAmount = Math.Round(x.CompNetAmount, 2);
                //        x.GrossAmount = Math.Round(x.CompGrossAmount, 2);
                //    });
                //    oEmployeeSalary.EmployeeSalaryDetails.ForEach(x =>
                //    {
                //        x.Amount = x.CompAmount;
                //    });
                //}

                if (bWithLeaveHeads)
                {
                    sSQL = "Select * from LeaveHead Order By LeaveHeadID";
                    oLeaveHeads = LeaveHead.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
                    oELOnAttendances = EmployeeLeaveOnAttendance.Gets(EmpIDs, dtFrom, dtTo, ((User)Session[SessionInfo.CurrentUser]).UserID);
                }
                sSQL = "";
                sSQL = "SELECT * FROM View_TransferPromotionIncrement WHERE IsIncrement=1 AND ActualEffectedDate IN(SELECT MAX(ActualEffectedDate) FROM TransferPromotionIncrement WHERE EmployeeID IN(" + EmpIDs + ") Group By EmployeeID)";
                _oTransferPromotionIncrements = TransferPromotionIncrement.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);
            }
            _oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalaryDetails;
            var oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
            var oCompany = (oCompanys != null && oCompanys.Count() > 0) ? oCompanys.FirstOrDefault() : new Company();

            List<string> ColEmpInfo = new List<string>() { };
            ColEmpInfo = oSalarySheetPropertys.Where(x => x.PropertyFor == 1).Select(p => p.SalarySheetFormatPropertyStr).ToList();

            if (oSalarySheetPropertys.Any(x => x.PropertyFor == 1 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ParentDepartment))
            {
                bHasParentDept = true;
            }

            List<string> ColAttDetail = new List<string>() { };
            ColAttDetail = oSalarySheetPropertys.Where(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty != EnumSalarySheetFormatProperty.OTAllowance).Select(p => p.SalarySheetFormatPropertyStr).ToList();

            List<string> ColBankDetail = new List<string>();
            ColBankDetail = oSalarySheetPropertys.Where(x => x.PropertyFor == 4).Select(p => p.SalarySheetFormatPropertyStr).ToList();

            //List<string> ColEarnings = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Basic).Select(x => x.Name).ToList();
            List<string> ColEarnings = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Addition).Select(x => x.Name).ToList();
            ColEarnings.AddRange(oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Reimbursement).Select(x => x.Name).ToList());
            if (oSalarySheetPropertys.Any(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTAllowance))
            {
                ColEarnings.AddRange(oSalarySheetPropertys.Where(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTAllowance).Select(x => x.SalarySheetFormatPropertyStr));
                bHasOTAllowance = true;
            }

            List<string> ColBasics = new List<string>();
            if (IsComp)
            {
                ColBasics.AddRange(oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Basic).Select(x => x.Name).ToList());

            }

            List<string> ColDeductions = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Deduction).Select(x => x.Name).ToList();

            List<string> ColumnHeader = new List<string>() { "SL#",
                (ColEmpInfo.Count() > 0 ? "Employee Information" : ""), 
                (ColAttDetail.Count() > 0 ? "Att. Detail" : ""),
                "Gross Salary", 
                ((ColEarnings.Count() > 0) ? "Earnings" : ""),
                ((ColEarnings.Count() > 0) ? "Gross Earnings" : ""),
                ((ColEarnings.Count() > 0) ? "Gross Earnings On Att." : ""),
                (( IsComp == true && ColBasics.Count() > 0) ? "Basic Breakdown" : ""), 
                "Deduction", ((ColDeductions.Count() > 0) ? "Gross Deductions" : ""),
                "Net Amount",
                (ColBankDetail.Count>0?"Bank":""),
                (ColBankDetail.Count>0?"Cash":""),
                (ColBankDetail.Count>0?"Account No":""),
                (ColBankDetail.Count>0?"Bank Name":""), 
                "Signature" };
            ColumnHeader.RemoveAll(x => x == "");

            #region Export Excel
            int nRowIndex = 2, nStartCol = 2, nEndCol = 2;
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;
            ExcelFill fill;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Salary Sheet");
                sheet.Name = "Salary Sheet";

                nEndCol += ColEmpInfo.Count() + ColAttDetail.Count() + ((bWithLeaveHeads) ? oLeaveHeads.Count() - 1 : 0) + 1 + ColEarnings.Count() + ((ColEarnings.Count() > 0) ? 2 : 0) + ColBasics.Count() + ColDeductions.Count() + ((ColDeductions.Count() > 0) ? 1 : 0) + ColBankDetail.Count() + 2;

                #region Report Header
                //int nmiddlecol = Convert.ToInt32(nEndCol / 2);
                cell = sheet.Cells[nRowIndex, 4];
                cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;

                cell = sheet.Cells[nRowIndex, 4];
                cell.Value = "Salary Sheet"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;

                cell = sheet.Cells[nRowIndex, 4];
                cell.Value = "From " + dtFrom.ToString("dd MMM yyyy") + " To " + dtTo.ToString("dd MMM yyyy"); cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;

                //cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = " "; cell.Merge = true; cell.Style.Font.Bold = false;
                //cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nRowIndex++;
                #endregion


                //Int32[] locations = oEmployeeSalary.EmployeeSalarys.Select(x => x.LocationID).OrderBy(x => x).Distinct().ToArray();

                List<RPTSalarySheet> oEmployeeSalarys = new List<RPTSalarySheet>();
                oEmployeeSalary.EmployeeSalarySheets.ForEach(x => oEmployeeSalarys.Add(x));

                List<RPTSalarySheet> oEmpSs = new List<RPTSalarySheet>();
                oEmpSs = oEmployeeSalary.EmployeeSalarySheets.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeCode).ToList();
                //foreach (Int32 locationId in locations)
                //{
                this.ExcelSalarySheet_F6_Header(ColumnHeader, ColEmpInfo, ColAttDetail, ColEarnings, ColBasics, ColDeductions, ColBankDetail, ref nRowIndex, ref sheet, ref cell, ref border, oSalaryHeads, oLeaveHeads, oELOnAttendances, bWithPrecision, bHasOTAllowance, bHasParentDept);
                while (oEmpSs.Count > 0)
                {
                    var oResults = oEmpSs.Where(x => x.BusinessUnitID == oEmpSs[0].BusinessUnitID && x.LocationID == oEmpSs[0].LocationID && x.DepartmentID == oEmpSs[0].DepartmentID).OrderBy(x => x.EmployeeCode).ToList();
                    var oEmpSalaryDetails = oEmployeeSalary.EmployeeSalarySheetDetails.Where(x => oResults.Select(p => p.EmployeeSalaryID).Contains(x.EmployeeSalaryID)).ToList();

                    cell = sheet.Cells[nRowIndex, 3];
                    cell.Value = "Unit Name: " + oResults.FirstOrDefault().LocationName + " , Department Name: " + oResults.FirstOrDefault().DepartmentName;
                    cell.Style.Font.Bold = true; cell.Style.Font.Size = 15;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    nRowIndex++;

                    this.ExcelSalarySheet_F6_DataManipulation(oSalarySheetPropertys, ColumnHeader, ColEmpInfo, ColAttDetail, ColEarnings, ColBasics, ColDeductions, ColBankDetail, ref nRowIndex, ref sheet, ref cell, ref border, oSalaryHeads, oResults, oEmpSalaryDetails, oLeaveHeads, oELOnAttendances, bWithPrecision, bHasOTAllowance, bHasParentDept);

                    //cell = sheet.Cells[nRowIndex++, nStartCol, nRowIndex++, nEndCol]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = false;
                    //cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center; 
                    //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
                    nRowIndex++;
                    oEmpSs.RemoveAll(x => x.BusinessUnitID == oResults[0].BusinessUnitID && x.LocationID == oResults[0].LocationID && x.DepartmentID == oResults[0].DepartmentID);
                }


                //cell = sheet.Cells[1, 1, nRowIndex + 1, nEndCol];
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                //fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SalarySheet-F6.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }

        private void ExcelSalarySheet_F6_Header(List<string> ColumnHeader, List<string> ColEmpInfo, List<string> ColAttDetail, List<string> ColEarnings, List<string> ColBasics, List<string> ColDeductions, List<string> ColBankDetail, ref int nRowIndex, ref ExcelWorksheet sheet, ref ExcelRange cell, ref OfficeOpenXml.Style.Border border, List<SalaryHead> oSalaryHeads, List<LeaveHead> oLeaveHeads, List<EmployeeLeaveOnAttendance> oELOnAttendances, bool bWithPrecision, bool bHasOTAllowance, bool bHasParentDept)
        {
            int nStartCol = 2, nEndCol = 2;
            int nColumn = 2;
            sheet.Column(nColumn).Width = 5;

            foreach (string sColumn in ColEmpInfo)
            {
                sheet.Column(++nColumn).Width = 15;
            }

            if (oLeaveHeads.Count() > 0)
            {
                foreach (string sColumn in ColAttDetail)
                {
                    if (sColumn == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                    {
                        foreach (LeaveHead oItem in oLeaveHeads)
                        {
                            sheet.Column(++nColumn).Width = 7;
                        }
                    }
                    else
                    {
                        sheet.Column(++nColumn).Width = 12;
                    }
                }
            }
            else
            {
                foreach (string sColumn in ColAttDetail)
                {
                    sheet.Column(++nColumn).Width = 12;
                }
            }

            sheet.Column(++nColumn).Width = 15; // Gross Amount

            foreach (string sColumn in ColEarnings)
            {
                sheet.Column(++nColumn).Width = 12;
            }
            if (ColEarnings.Count() > 0)
            {
                sheet.Column(++nColumn).Width = 15;
                sheet.Column(++nColumn).Width = 15;
            }
            if (IsComp)
            {
                foreach (string sColumn in ColBasics)
                {
                    sheet.Column(++nColumn).Width = 12;
                }
            }
            foreach (string sColumn in ColDeductions)
            {
                sheet.Column(++nColumn).Width = 12;
            }
            if (ColDeductions.Count() > 0)
            {
                sheet.Column(++nColumn).Width = 16;
            }
            sheet.Column(++nColumn).Width = 15;
            foreach (string sColumn in ColBankDetail)
            {
                sheet.Column(++nColumn).Width = 16;
            }
            sheet.Column(++nColumn).Width = 15;
            nEndCol = nColumn;


            #region Column Header

            //int nSpan = 0;
            //int nAddSpan = (oLeaveHeads.Count() > 0) ? 1 : 0;
            //foreach (string sColumn in ColumnHeader)
            //{

            //    if (sColumn == "SL#")
            //    {
            //        nStartCol = 2;
            //        nEndCol = 2;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Employee Information")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += ColEmpInfo.Count();
            //        nSpan = 0;
            //    }
            //    else if (sColumn == "Att. Detail")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += ColAttDetail.Count() + ((nAddSpan > 0) ? oLeaveHeads.Count() - 1 : 0);
            //        nSpan = 0;
            //    }
            //    else if (sColumn == "Increment Detail")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += ColIncrementDetail.Count();
            //        nSpan = 0;
            //    }
            //    else if (sColumn == "Gross Salary")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Earnings")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += ColEarnings.Count();
            //        nSpan = 0;
            //    }
            //    else if (sColumn == "Gross Earnings")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Gross Earnings On Att.")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Deduction")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += ColDeductions.Count();
            //        nSpan = 0;
            //    }
            //    else if (sColumn == "Gross Deductions")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Net Amount")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Bank")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Cash")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Account No")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Bank Name")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    else if (sColumn == "Signature")
            //    {
            //        nStartCol = nEndCol + 1;
            //        nEndCol += 1;
            //        nSpan = 1 + nAddSpan;
            //    }
            //    string sColumnvalue = "";
            //    sColumnvalue = sColumn;
            //    if (ColIncrementDetail.Count > 0 && sColumn == "Gross Salary") { sColumnvalue = "Present Salary"; }
            //    cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex + nSpan, nEndCol]; cell.Value = sColumnvalue; cell.Merge = true; cell.Style.Font.Bold = false;
            //    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            //}
            //nRowIndex++;

            nStartCol = 2; nEndCol = 2;
            foreach (string sColumn in ColumnHeader)
            {
                if (sColumn == "SL#")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "SL"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                if (sColumn == "Employee Information")
                {
                    foreach (string sItem in ColEmpInfo)
                    {
                        string sColName = "";
                        sColName = sItem;
                        if (bHasParentDept && sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.Department.ToString())) { sColName = "Sub Department"; }
                        if (bHasParentDept && sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.ParentDepartment.ToString())) { sColName = "Department"; }
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColName; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }
                else if (sColumn == "Att. Detail")
                {
                    foreach (string sItem in ColAttDetail)
                    {
                        if (sItem == Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                        {
                            //nEndCol += oLeaveHeads.Count() - 1;
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            nStartCol += oLeaveHeads.Count() - 1;
                        }
                        else
                        {
                            string sColumnvalue = "";
                            sColumnvalue = sItem;
                            if (sColumnvalue == "Employee Working Days") { sColumnvalue = "EWD"; }

                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumnvalue; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                    }
                }
                else if (sColumn == "Gross Salary")
                {
                    string sColumnvalue = "";
                    sColumnvalue = sColumn;
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumnvalue; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                }

                else if (sColumn == "Earnings")
                {
                    //nStartCol++; nEndCol++;
                    foreach (string sItem in ColEarnings)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    //nStartCol++; nEndCol++;
                }

                else if (sColumn == "Gross Earnings")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "Gross Earnings"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Gross Earnings On Att.")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "Gross Earnings On Att."; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                else if (sColumn == "Basic Breakdown")
                {
                    //nStartCol++; nEndCol++;
                    if (IsComp)
                    {
                        foreach (string sItem in ColBasics)
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }
                }
                else if (sColumn == "Deduction")
                {
                    //nStartCol++; nEndCol++;
                    foreach (string sItem in ColDeductions)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sItem; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                }

                else if (sColumn == "Gross Deductions")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Net Amount")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Bank")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Cash")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Account No")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Bank Name")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }
                else if (sColumn == "Signature")
                {
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sColumn; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

            }
            //nRowIndex += nAddSpan;
            //if (nAddSpan > 0) // With leave Heads
            //{
            nStartCol = 3 + ColEmpInfo.Count();
            foreach (string sItem in ColAttDetail)
            {
                if (sItem != Global.CapitalSpilitor(EnumSalarySheetFormatProperty.LeaveHead.ToString()))
                {
                    nStartCol++;
                }
                else
                {
                    break;
                }
            }
            nEndCol = nStartCol;

            foreach (LeaveHead oItem in oLeaveHeads)
            {
                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.ShortName; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            }
            nRowIndex++;
            //}
            //else
            //{
            //    nRowIndex++;
            //}

            #endregion
        }

        private void ExcelSalarySheet_F6_DataManipulation(List<SalarySheetProperty> oSalarySheetPropertys, List<string> ColumnHeader, List<string> ColEmpInfo, List<string> ColAttDetail, List<string> ColEarnings, List<string> ColBasics, List<string> ColDeductions, List<string> ColBankDetail, ref int nRowIndex, ref ExcelWorksheet sheet, ref ExcelRange cell, ref OfficeOpenXml.Style.Border border, List<SalaryHead> oSalaryHeads, List<RPTSalarySheet> oResults, List<RPTSalarySheetDetail> oEmployeeSalaryDetails, List<LeaveHead> oLeaveHeads, List<EmployeeLeaveOnAttendance> oELOnAttendances, bool bWithPrecision, bool bHasOTAllowance, bool bHasParentDept)
        {
            #region Date Manipulation

            var EmpInfoPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 1).ToList();
            var AttDetailPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty != EnumSalarySheetFormatProperty.OTAllowance).ToList();
            var oEarnings = oSalaryHeads.Where(x => (x.SalaryHeadType == EnumSalaryHeadType.Addition) || (x.SalaryHeadType == EnumSalaryHeadType.Reimbursement)).ToList();
            var oDeductions = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Deduction).ToList();
            var oBasics = oSalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Basic).ToList();
            var IncrementPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 3).ToList();
            var BankPropertys = oSalarySheetPropertys.Where(x => x.PropertyFor == 4).ToList();

            if (oResults.Count() > 0)
            {
                int nCount = 0;
                int Code = 0;
                var oELOnAtts = new List<EmployeeLeaveOnAttendance>();
                foreach (RPTSalarySheet oItem in oResults)
                {

                    oELOnAtts = oELOnAttendances.Where(x => x.EmployeeID == oItem.EmployeeID).ToList();

                    Code = 0;
                    int nStartCol = 2; int nEndCol = 2;
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (++nCount); cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = "0";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    /*---- Employee Info -----*/
                    if (ColEmpInfo.Count() > 0)
                    {
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeCode).Any())
                        {
                            if (int.TryParse(oItem.EmployeeCode, out Code))
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = Code; cell.Style.Font.Bold = false;
                                cell.Style.Numberformat.Format = "0";
                            }
                            else
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmployeeCode; cell.Style.Font.Bold = false;

                            }
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }

                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeName).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmployeeName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ParentDepartment).Any())
                        {

                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.ParentDepartmentName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Department).Any())
                        {

                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.DepartmentName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Designation).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.JoiningDate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.JoiningDateInString; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.ConfirmationDate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.DateOfConfirmationInString; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeType).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmployeeTypeName; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.Gender).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.Gender; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmpGroup).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.EmpGroup; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.PaymentType).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.PaymentType; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (EmpInfoPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeContactNo).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = oItem.ContactNo; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }

                    if (ColAttDetail.Count() > 0)
                    {         /*---- Att. Detail -----*/
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.TotalDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalDays > 0) ? (oItem.TotalDays) : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.PresentDay).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.Present > 0) ? oItem.Present : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }

                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.DayOffHolidays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = ((oItem.TotalDayOff) > 0) ? (oItem.TotalDayOff) : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.AbsentDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalAbsent > 0) ? oItem.TotalAbsent : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveHead).Any())
                        {
                            foreach (LeaveHead oLeaveHead in oLeaveHeads)
                            {
                                cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).Any()) ? oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).FirstOrDefault().LeaveDays : 0; cell.Style.Font.Bold = false;
                                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            }
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LeaveDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalLeave > 0) ? (oItem.TotalLeave) : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EmployeeWorkingDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.EWD > 0) ? oItem.EWD : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EarlyOutDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalEarlyLeaving > 0) ? oItem.TotalEarlyLeaving : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.EarlyOutMins).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.EarlyInMin > 0) ? oItem.EarlyInMin : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LateDays).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.TotalLate > 0) ? oItem.TotalLate : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.LateHrs).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.LateInMin > 0) ? Global.MinInHourMin(oItem.LateInMin) : ""; cell.Style.Font.Bold = false;

                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTHours).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.OTHour > 0) ? oItem.OTHour : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0;(#,##0)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                        if (AttDetailPropertys.Where(x => x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTRate).Any())
                        {
                            cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.OTRatePerHour > 0) ? oItem.OTRatePerHour : 0; cell.Style.Font.Bold = false;
                            cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        }
                    }
                    /*--- Gross Salary ---- */
                    //cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";

                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (oItem.GrossAmount > 0) ? Math.Round(oItem.GrossAmount) : 0; ; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    /*--- Earnings ---- */

                    double nAmount = 0, nAddAmount = 0;

                    foreach (SalaryHead oSalaryHead in oEarnings.OrderBy(x => x.SalaryHeadType))
                    {
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;

                        //nAmount = (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Basic) ? nAmount : Math.Round(nAmount);
                        nAmount = Math.Round(nAmount);

                        nAddAmount += (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Addition || oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Reimbursement) ? nAmount : 0;

                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nAmount > 0) ? nAmount : 0; cell.Style.Font.Bold = false;
                        //cell.Style.Numberformat.Format = (oSalaryHead.SalaryHeadType == EnumSalaryHeadType.Basic) ? "#,##0.00;(#,##0.00)" : (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    double nOTAllowance = Math.Round(oItem.OTHour * oItem.OTRatePerHour);
                    if (bHasOTAllowance)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nOTAllowance > 0) ? Math.Round(nOTAllowance) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    if (oEarnings.Any())
                    {
                        double nEarnings = oItem.GrossAmount + ((bHasOTAllowance) ? nOTAllowance : 0) + nAddAmount;
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nEarnings > 0) ? Math.Round(nEarnings) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        double nOnedayGross = 0;
                        if ((oItem.TotalDays + oItem.TotalDayOff + oItem.TotalHoliday) > 0)
                        {
                            double dMonthDays = (oItem.EndDate - oItem.StartDate).TotalDays + 1;
                            //nOnedayGross = oItem.GrossAmount / (oItem.TotalWorkingDay + oItem.TotalDayOff + oItem.TotalHoliday);
                            nOnedayGross = oItem.GrossAmount / dMonthDays;

                        }
                        double nEarningsOnAtt = Math.Round(oItem.PDComp * nOnedayGross + ((bHasOTAllowance) ? nOTAllowance : 0) + nAddAmount);

                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nEarningsOnAtt > 0) ? Math.Round(nEarningsOnAtt) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    //Basics
                    foreach (SalaryHead oSalaryHead in oBasics)
                    {
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nAmount > 0) ? Math.Round(nAmount) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    /*---deduction--*/
                    double nDeductionAmount = 0;

                    foreach (SalaryHead oSalaryHead in oDeductions)
                    {
                        //double nDedAmount = Math.Round(GetAmount(oSalaryHead.SalaryHeadID, oItem.EmployeeSalaryID));
                        var oESDs = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID && x.EmployeeSalaryID == oItem.EmployeeSalaryID).ToList();
                        nAmount = (oESDs.Count() > 0) ? oESDs.Sum(x => x.Amount) : 0;
                        nDeductionAmount += nAmount;
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nAmount > 0) ? Math.Round(nAmount) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    if (oDeductions.Count() > 0)
                    {
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nDeductionAmount > 0) ? Math.Round(nDeductionAmount) : 0; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }
                    /*---Net Amount--*/

                    double nNetAmount = oItem.NetAmount + ((bHasOTAllowance) ? 0 : -nOTAllowance);
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = (nNetAmount > 0) ? Math.Round(nNetAmount) : 0; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = (bWithPrecision) ? "#,##0.00;(#,##0.00)" : "#,##0;(#,##0)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    if (ColBankDetail.Count() > 0)
                    {
                        string sValue = "";
                        sValue = (oItem.BankAmount > 0 ? oItem.BankAmount : 0).ToString();
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        sValue = (oItem.CashAmount > 0 ? oItem.CashAmount : 0).ToString();
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                        cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        sValue = (oItem.AccountNo != "" ? oItem.AccountNo : "-");
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        sValue = (oItem.BankName != "" ? oItem.BankName : "-");
                        cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                        cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }

                    /*---Signature--*/
                    cell = sheet.Cells[nRowIndex, nStartCol++]; cell.Value = "--"; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    ++nRowIndex;
                }
            }
            #endregion
        }

        public double GetAmount(int nSHID, int nESID)
        {
            double nAmount = 0;
            foreach (EmployeeSalaryDetail oESDItem in _oEmployeeSalaryDetails)
            {
                if (oESDItem.SalaryHeadID == nSHID && oESDItem.EmployeeSalaryID == nESID)
                {
                    nAmount += oESDItem.Amount;
                }
            }
            return nAmount;
        }

        #endregion F6 XL

        #region Excel OT Statement

        private void ExcelOTStatementHeader(List<int> HeaderWitdhs, List<string> ColumnHeaders, ref int nRowIndex, ref ExcelWorksheet sheet, ref ExcelRange cell, ref OfficeOpenXml.Style.Border border)
        {
            int nStartCol = 2;
            ExcelFill fill;
            foreach (int width in HeaderWitdhs)
            {
                sheet.Column(nStartCol++).Width = width;
            }

            nStartCol = 2;
            foreach (string HeaderName in ColumnHeaders)
            {
                cell = sheet.Cells[nRowIndex, nStartCol]; cell.Value = HeaderName; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                nStartCol++;
            }
            nRowIndex++;

        }

        private void ExcelOTStatement(List<OTExceptCompliance> oResults, ref int nRowIndex, ref ExcelWorksheet sheet, ref ExcelRange cell, ref OfficeOpenXml.Style.Border border)
        {
            int nStartCol = 2, nEndCol = 2;

            #region Date Manipulation

            if (oResults.Count() > 0)
            {
                int nCount = 0;
                foreach (OTExceptCompliance oItem in oResults)
                {
                    nStartCol = 2; nEndCol = 2;
                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = (++nCount); cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = "0";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.Code; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.Name; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.DateOfJoinInStr; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.DesignationName; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = GetAmountInStr(oItem.GrossAmount, true, false); cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = GetAmountInStr(oItem.BasicAmount, true, false); cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.OTRatePerHour; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = oItem.AdditionalOTHour; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = GetAmountInStr(oItem.OTAmount, true, false); cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    /*---Signature--*/
                    cell = sheet.Cells[nRowIndex, nStartCol++, nRowIndex, nEndCol++]; cell.Value = "--"; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    ++nRowIndex;
                }

                #region Total

                cell = sheet.Cells[nRowIndex, 2, nRowIndex, 6]; cell.Value = "Total"; cell.Merge = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[nRowIndex, 7, nRowIndex, 7]; cell.Value = GetAmountInStr(oResults.Sum(x => x.GrossAmount), true, false); cell.Merge = true; cell.Style.Font.Bold = false;
                cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, 8, nRowIndex, 8]; cell.Value = GetAmountInStr(oResults.Sum(x => x.BasicAmount), true, false); cell.Merge = true; cell.Style.Font.Bold = false;
                cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, 9, nRowIndex, 9]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, 10, nRowIndex, 10]; cell.Value = oResults.Sum(x => x.AdditionalOTHour); cell.Merge = true; cell.Style.Font.Bold = false;
                cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, 11, nRowIndex, 11]; cell.Value = GetAmountInStr(oResults.Sum(x => x.OTAmount), true, false); cell.Merge = true; cell.Style.Font.Bold = false;
                cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[nRowIndex, 12, nRowIndex, 12]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = false;
                cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                ++nRowIndex;
                #endregion
            }
            #endregion
        }

        public void ExportIntoExcelOTExceptCompliance(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, string sBlockIDs, double ts)
        {
            try
            {
                DateTime dtFrom = DateTime.MinValue;
                DateTime dtTo = DateTime.MinValue;

                //DateTime.TryParse(sDate.Split(',')[0], out dtFrom);
                //DateTime.TryParse(sDate.Split(',')[1], out dtTo);
                //string sLocationIDs = (nLocationID > 0) ? nLocationID.ToString() : "";

                var oOTExceptCompliances = OTExceptCompliance.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, sBlockIDs, nPayType, nMonthID, nYear, bNewJoin, true, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                var oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
                var oCompany = (oCompanys != null && oCompanys.Count() > 0) ? oCompanys.FirstOrDefault() : new Company();

                List<int> HeaderWitdhs = new List<int>() { 8, 12, 20, 20, 16, 16, 16, 12, 12, 12, 20 };
                List<string> ColumnHeaders = new List<string>() { "SL No", "Code", "Employee Name", "Designation", "Joining Date", "Gross Salary", "Basic Salary", "OT Rate", "OT Hour", "OT Amount", "Employee Signature" };

                List<PayrollProcessManagement> oPayrollProcessManagements = new List<PayrollProcessManagement>();
                string sSql = "SELECT * FROM View_PayrollProcessManagement WHERE  MonthID=" + nMonthID + " AND DATEPART(YYYY,SalaryTo)= Convert(varchar," + nYear + ")";
                oPayrollProcessManagements = PayrollProcessManagement.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

                if (oPayrollProcessManagements.Count > 0)
                {
                    dtFrom = oPayrollProcessManagements[0].SalaryFrom;
                    dtTo = oPayrollProcessManagements[0].SalaryTo;
                }

                #region Export Excel
                int nRowIndex = 2, nStartCol = 2, nEndCol = 2;
                ExcelRange cell;
                OfficeOpenXml.Style.Border border;
                ExcelFill fill;

                using (var excelPackage = new ExcelPackage())
                {
                    excelPackage.Workbook.Properties.Author = "ESimSol";
                    excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                    var sheet = excelPackage.Workbook.Worksheets.Add("Over Time Statement");
                    sheet.Name = "Over Time Statement";

                    nEndCol += ColumnHeaders.Count() - 1;

                    #region Report Header
                    cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Merge = true;
                    cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                    cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    nRowIndex++;

                    cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Merge = true;
                    cell.Value = "Over Time Statement"; cell.Style.Font.Bold = true;
                    cell.Style.Font.Size = 15; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    nRowIndex++;

                    cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Merge = true;
                    cell.Value = "From " + dtFrom.ToString("dd MMM yyyy") + " To " + dtTo.ToString("dd MMM yyyy"); cell.Style.Font.Bold = true;
                    cell.Style.Font.Size = 15; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    nRowIndex++;

                    cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Merge = true;
                    cell.Value = "Salary Month-" + (oPayrollProcessManagements.Count > 0 ? oPayrollProcessManagements[0].MonthIDInString : ""); cell.Style.Font.Bold = true;
                    cell.Style.Font.Size = 15; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    nRowIndex++;

                    cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = " "; cell.Merge = true; cell.Style.Font.Bold = false;
                    cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    nRowIndex++;
                    #endregion


                    Int32[] locations = oOTExceptCompliances.Where(x => x.LocationID > 0).Select(x => x.LocationID).Distinct().ToArray();


                    if (locations.Count() > 0)
                    {
                        foreach (Int32 locationId in locations)
                        {
                            var oResults = oOTExceptCompliances.Where(x => x.LocationID == locationId).OrderBy(o => o.Code).ToList().ToList();

                            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol]; cell.Value = "Unit: " + oResults.FirstOrDefault().LocationName; cell.Merge = true; cell.Style.Font.Bold = true;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            nRowIndex++;

                            this.ExcelOTStatementHeader(HeaderWitdhs, ColumnHeaders, ref nRowIndex, ref sheet, ref cell, ref border);
                            this.ExcelOTStatement(oResults, ref nRowIndex, ref sheet, ref cell, ref border);

                            cell = sheet.Cells[nRowIndex++, nStartCol, nRowIndex++, nEndCol]; cell.Value = ""; cell.Merge = true; cell.Style.Font.Bold = false;
                            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                            nRowIndex++;
                        }
                    }
                    else
                    {
                        this.ExcelOTStatementHeader(HeaderWitdhs, ColumnHeaders, ref nRowIndex, ref sheet, ref cell, ref border);
                        nRowIndex++;
                    }


                    cell = sheet.Cells[1, 1, nRowIndex + 1, nEndCol];
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                    fill.BackgroundColor.SetColor(Color.White);

                    Response.ClearContent();
                    Response.BinaryWrite(excelPackage.GetAsByteArray());
                    Response.AddHeader("content-disposition", "attachment; filename=OvertimeStatement.xlsx");
                    Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    Response.Flush();
                    Response.End();
                }
                #endregion
            }
            catch
            {

            }
        }

        public ActionResult PrintOTExceptCompliance(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, bool bGroupByDept, string sBlockIDs, double ts)
        {
            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            var oOTExceptCompliances = new List<OTExceptCompliance>();
            var oCompany = new Company();
            List<PayrollProcessManagement> oPayrollProcessManagements = new List<PayrollProcessManagement>();
            try
            {
                //DateTime dtFrom = DateTime.MinValue;
                //DateTime dtTo = DateTime.MinValue;

                //DateTime.TryParse(sDate.Split(',')[0], out dtFrom);
                //DateTime.TryParse(sDate.Split(',')[1], out dtTo);
                //string sLocationIDs = (nLocationID > 0) ? nLocationID.ToString() : "";

                oOTExceptCompliances = OTExceptCompliance.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, sBlockIDs, nPayType, nMonthID, nYear, bNewJoin, true, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                string BUIDs = string.Join(",", oOTExceptCompliances.Select(p => p.BusinessUnitID).Distinct().ToList());
                if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


                var oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
                oCompany = (oCompanys != null && oCompanys.Count() > 0) ? oCompanys.FirstOrDefault() : new Company();

                string sSql = "SELECT * FROM View_PayrollProcessManagement WHERE  MonthID=" + nMonthID + " AND DATEPART(YYYY,SalaryTo)= Convert(varchar," + nYear + ")";
                oPayrollProcessManagements = PayrollProcessManagement.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            }
            catch (Exception e)
            {
                var oOTExceptCompliance = new OTExceptCompliance();
                oOTExceptCompliance.ErrorMessage = e.Message;
            }

            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            string sDate = "";
            if (oPayrollProcessManagements.Count > 0)
            {
                sDate = oPayrollProcessManagements[0].SalaryFromInString + "," + oPayrollProcessManagements[0].SalaryToInString;
            }
            bool bExceptComp = true;
            rptOTExceptCompliance oReport = new rptOTExceptCompliance();
            byte[] abytes = oReport.PrepareReport(oOTExceptCompliances, oCompany, oPayrollProcessManagements, sDate, oSalarySheetSignature, bExceptComp, oBusinessUnits, false, bGroupByDept);
            return File(abytes, "application/pdf");
        }
        public ActionResult PrintOTCompliance(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, bool bGroupByDept, string sBlockIDs, double ts)
        {
            //Actual OT. But Action name is wrong. It will changed.
            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            var oOTExceptCompliances = new List<OTExceptCompliance>();
            var oCompany = new Company();
            List<PayrollProcessManagement> oPayrollProcessManagements = new List<PayrollProcessManagement>();
            try
            {
                //DateTime dtFrom = DateTime.MinValue;
                //DateTime dtTo = DateTime.MinValue;

                //DateTime.TryParse(sDate.Split(',')[0], out dtFrom);
                //DateTime.TryParse(sDate.Split(',')[1], out dtTo);
                //string sLocationIDs = (nLocationID > 0) ? nLocationID.ToString() : "";

                oOTExceptCompliances = OTExceptCompliance.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, sBlockIDs, nPayType, nMonthID, nYear, bNewJoin, true, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                string BUIDs = string.Join(",", oOTExceptCompliances.Select(p => p.BusinessUnitID).Distinct().ToList());
                if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


                var oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
                oCompany = (oCompanys != null && oCompanys.Count() > 0) ? oCompanys.FirstOrDefault() : new Company();

                string sSql = "SELECT * FROM View_PayrollProcessManagement WHERE  MonthID=" + nMonthID + " AND DATEPART(YYYY,SalaryTo)= Convert(varchar," + nYear + ")";
                oPayrollProcessManagements = PayrollProcessManagement.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            }
            catch (Exception e)
            {
                var oOTExceptCompliance = new OTExceptCompliance();
                oOTExceptCompliance.ErrorMessage = e.Message;
            }

            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            string sDate = "";
            if (oPayrollProcessManagements.Count > 0)
            {
                sDate = oPayrollProcessManagements[0].SalaryFromInString + "," + oPayrollProcessManagements[0].SalaryToInString;
            }
            bool bExceptComp = false;
            rptOTExceptCompliance oReport = new rptOTExceptCompliance();
            byte[] abytes = oReport.PrepareReport(oOTExceptCompliances, oCompany, oPayrollProcessManagements, sDate, oSalarySheetSignature, bExceptComp, oBusinessUnits, false, bGroupByDept);
            return File(abytes, "application/pdf");
        }

        public void ExcelOTSheetF2(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, bool bGroupByDept, string sBlockIDs, double ts)
        {
            bool _isComp = false;
            List<OTExceptCompliance> _oOTExceptCompliances = new List<OTExceptCompliance>();
            List<OTExceptCompliance> _oOTExceptCompliancesT = new List<OTExceptCompliance>();
            //Actual OT. But Action name is wrong. It will changed.
            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            var oOTExceptCompliances = new List<OTExceptCompliance>();
            var oCompany = new Company();
            List<PayrollProcessManagement> oPayrollProcessManagements = new List<PayrollProcessManagement>();
            try
            {
                //DateTime dtFrom = DateTime.MinValue;
                //DateTime dtTo = DateTime.MinValue;

                //DateTime.TryParse(sDate.Split(',')[0], out dtFrom);
                //DateTime.TryParse(sDate.Split(',')[1], out dtTo);
                //string sLocationIDs = (nLocationID > 0) ? nLocationID.ToString() : "";

                oOTExceptCompliances = OTExceptCompliance.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, sBlockIDs, nPayType, nMonthID, nYear, bNewJoin, true, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                string BUIDs = string.Join(",", oOTExceptCompliances.Select(p => p.BusinessUnitID).Distinct().ToList());
                if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


                var oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
                oCompany = (oCompanys != null && oCompanys.Count() > 0) ? oCompanys.FirstOrDefault() : new Company();

                string sSql = "SELECT * FROM View_PayrollProcessManagement WHERE  MonthID=" + nMonthID + " AND DATEPART(YYYY,SalaryTo)= Convert(varchar," + nYear + ")";
                oPayrollProcessManagements = PayrollProcessManagement.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            }
            catch (Exception e)
            {
                var oOTExceptCompliance = new OTExceptCompliance();
                oOTExceptCompliance.ErrorMessage = e.Message;
            }

            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            string sDate = "";
            if (oPayrollProcessManagements.Count > 0)
            {
                sDate = oPayrollProcessManagements[0].SalaryFromInString + "," + oPayrollProcessManagements[0].SalaryToInString;
            }
            bool bExceptComp = false;
            if (bExceptComp)
            {
                _oOTExceptCompliances = oOTExceptCompliances.Where(x => x.CompOTInMinute > 0).OrderBy(x => x.DepartmentName).ToList();
            }
            else
            {
                _oOTExceptCompliances = oOTExceptCompliances.OrderBy(x => x.DepartmentName).ToList();
            }

            int nColumns = 0;
            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("OT Sheet");
                sheet.Name = "OT Sheet";


                sheet.Column(2).Width = 8;
                sheet.Column(3).Width = 15;
                sheet.Column(4).Width = 25;
                sheet.Column(5).Width = 20;
                sheet.Column(6).Width = 15;
                sheet.Column(7).Width = 15;
                sheet.Column(8).Width = 15;
                sheet.Column(9).Width = 15;
                sheet.Column(10).Width = 15;
                sheet.Column(11).Width = 15;
                sheet.Column(12).Width = 15;
                nMaxColumn = 12;

                List<OTExceptCompliance> oOTExceptCompliancesTemp = new List<OTExceptCompliance>();
                _oOTExceptCompliances.ForEach(x => oOTExceptCompliancesTemp.Add(x));

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn]; cell.Merge = true; cell.Value = (oBusinessUnits.Count > 1 || oBusinessUnits.Count <= 0) ? oCompany.Name : oBusinessUnits[0].Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn]; cell.Merge = true; cell.Value = "OT Sheet"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn]; cell.Merge = true; cell.Value = "Salary Month-" + (oPayrollProcessManagements.Count > 0 ? oPayrollProcessManagements[0].MonthIDInString : ""); cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                rowIndex = rowIndex + 2;
                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex++];
                cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Code"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Name"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Designation"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Joining Date"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Gross"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Basic"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Rate"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Hour"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Signature"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex += 1;
                colIndex = 2;


                while (oOTExceptCompliancesTemp.Count > 0)
                {
                    var oResults = new List<OTExceptCompliance>();
                    if (bGroupByDept)
                    {
                        oResults = oOTExceptCompliancesTemp.Where(x => x.LocationID == oOTExceptCompliancesTemp[0].LocationID && x.DepartmentName == oOTExceptCompliancesTemp[0].DepartmentName).OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.Code).ToList();
                    }
                    else
                    {
                        oResults = oOTExceptCompliancesTemp.Where(x => x.LocationID == oOTExceptCompliancesTemp[0].LocationID).OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.Code).ToList();
                    }

                    //this.Header(oResults[0].BusinessUnitName, oResults[0].DepartmentName);
                    //this.PrintHeader();
                    //_oFontStyle = FontFactory.GetFont("Tahoma", 8f, iTextSharp.text.Font.BOLD);
                    if (bGroupByDept)
                    {
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = "Location Name: " + oResults.FirstOrDefault().LocationName + ", Department Name : " + oResults.FirstOrDefault().DepartmentName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    }
                    else
                    {
                        cell = sheet.Cells[rowIndex, colIndex++];
                        cell.Value = "Location Name: " + oResults.FirstOrDefault().LocationName; cell.Style.Font.Bold = true;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    }
                    rowIndex += 1;
                    colIndex = 2;

                    //this.TableHead();

                    int nCount = 0;
                    int nCountForEnd = 0;
                    int nRowCount = 0;
                    int nTotalCount = 0;


                    int nTotalRowCount = 0;
                    int UnitWiseRowCount = 0;

                    foreach (OTExceptCompliance oItem in oResults)
                    {
                        nCount++;
                        nRowCount++;
                        nTotalCount++;
                        nTotalRowCount++;
                        UnitWiseRowCount++;
                        nCountForEnd++;
                        colIndex = 2;


                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nCount.ToString(); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Code; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.Name; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DesignationName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.DateOfJoinInStr; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (_isComp) ? Math.Round(oItem.CompGrossAmount, 0) : Math.Round(oItem.GrossAmount, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.BasicAmount); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (_isComp) ? Math.Round(oItem.CompOTRatePerHour, 2) : Math.Round(oItem.OTRatePerHour, 2); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round((_isComp ? oItem.CompOTHour : bExceptComp ? oItem.AdditionalOTHour : oItem.OTHour), 2); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round((_isComp ? oItem.CompOTAmount : (bExceptComp) ? oItem.OTAmountExceptComp : oItem.OTAmount), 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex += 1;
                    }
                    colIndex = 2;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (_isComp ? Math.Round(oResults.Sum(x => x.CompGrossAmount)) : Math.Round(oResults.Sum(x => x.GrossAmount))); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oResults.Sum(x => x.BasicAmount)); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    double nTotalOTHour = 0.0;
                    if (_isComp)
                    {
                        nTotalOTHour = Math.Round(oResults.Sum(x => x.CompOTHour));
                    }
                    else
                    {
                        if (bExceptComp)
                        {
                            nTotalOTHour = Math.Round(oResults.Sum(x => x.AdditionalOTHour));
                        }
                        else
                        { nTotalOTHour = Math.Round(oResults.Sum(x => x.OTHour)); }
                    }

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalOTHour; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round((_isComp ? oResults.Sum(x => x.CompOTAmount) : (bExceptComp) ? oResults.Sum(x => x.OTAmountExceptComp) : oOTExceptCompliances.Sum(x => x.OTAmount)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex += 1;
                    //this.Summary(oOTExceptCompliance);
                    //if (_oOTExceptCompliances.Count == nCount)
                    //{
                    //    this.GrandSummary();
                    //}

                    //this.Summary(oResults);

                    if (bGroupByDept)
                        oOTExceptCompliancesTemp.RemoveAll(x => x.LocationID == oResults[0].LocationID && x.DepartmentName == oResults[0].DepartmentName);
                    else
                        oOTExceptCompliancesTemp.RemoveAll(x => x.LocationID == oResults[0].LocationID);
                }

                rowIndex += 1;
                colIndex = 2;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Grand Total"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (_isComp ? Math.Round(_oOTExceptCompliances.Sum(x => x.CompGrossAmount)) : Math.Round(_oOTExceptCompliances.Sum(x => x.GrossAmount))); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(_oOTExceptCompliances.Sum(x => x.BasicAmount)); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                double nTotalOTHourG = 0.0;
                if (_isComp)
                {
                    nTotalOTHourG = Math.Round(_oOTExceptCompliances.Sum(x => x.CompOTHour));
                }
                else
                {
                    if (bExceptComp)
                    {
                        nTotalOTHourG = Math.Round(_oOTExceptCompliances.Sum(x => x.AdditionalOTHour));
                    }
                    else
                    { nTotalOTHourG = Math.Round(_oOTExceptCompliances.Sum(x => x.OTHour)); }
                }

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalOTHourG; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round((_isComp ? _oOTExceptCompliances.Sum(x => x.CompOTAmount) : (bExceptComp) ? _oOTExceptCompliances.Sum(x => x.OTAmountExceptComp) : oOTExceptCompliances.Sum(x => x.OTAmount)), 0); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                rowIndex += 1;
                colIndex = 2;

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=OTSheet.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }

        }

        public ActionResult PrintOTSheetCompliance(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, bool bGroupByDept, string sBlockIDs, double ts)
        {
            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            var oOTExceptCompliances = new List<OTExceptCompliance>();
            var oCompany = new Company();
            List<PayrollProcessManagement> oPayrollProcessManagements = new List<PayrollProcessManagement>();
            try
            {
                //DateTime dtFrom = DateTime.MinValue;
                //DateTime dtTo = DateTime.MinValue;

                //DateTime.TryParse(sDate.Split(',')[0], out dtFrom);
                //DateTime.TryParse(sDate.Split(',')[1], out dtTo);
                //string sLocationIDs = (nLocationID > 0) ? nLocationID.ToString() : "";

                oOTExceptCompliances = OTExceptCompliance.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, sBlockIDs, nPayType, nMonthID, nYear, bNewJoin, false, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                string BUIDs = string.Join(",", oOTExceptCompliances.Select(p => p.BusinessUnitID).Distinct().ToList());
                if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }

                var oCompanys = Company.Gets(((User)(Session[SessionInfo.CurrentUser])).UserID);
                oCompany = (oCompanys != null && oCompanys.Count() > 0) ? oCompanys.FirstOrDefault() : new Company();

                string sSql = "SELECT * FROM View_PayrollProcessManagement WHERE  MonthID=" + nMonthID + " AND DATEPART(YYYY,SalaryTo)= Convert(varchar," + nYear + ")";
                oPayrollProcessManagements = PayrollProcessManagement.Gets(sSql, ((User)Session[SessionInfo.CurrentUser]).UserID);

            }
            catch (Exception e)
            {
                var oOTExceptCompliance = new OTExceptCompliance();
                oOTExceptCompliance.ErrorMessage = e.Message;
            }

            string sSQL = "Select * from SalarySheetSignature";
            var oSalarySheetSignature = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            string sDate = "";
            if (oPayrollProcessManagements.Count > 0)
            {
                sDate = oPayrollProcessManagements[0].SalaryFromInString + "," + oPayrollProcessManagements[0].SalaryToInString;
            }
            bool bExceptComp = false;
            rptOTExceptCompliance oReport = new rptOTExceptCompliance();
            byte[] abytes = oReport.PrepareReport(oOTExceptCompliances, oCompany, oPayrollProcessManagements, sDate, oSalarySheetSignature, bExceptComp, oBusinessUnits, true, bGroupByDept);
            return File(abytes, "application/pdf");
        }
        #endregion

        #region Salary Summery XL
        public void SalarySummeryXL(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)
        {
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            List<SalaryHead> SalaryHeads_Add = new List<SalaryHead>();
            List<EmployeeBankAccount> oEmployeeBankAccounts = new List<EmployeeBankAccount>();
            List<EmployeeBankAccount> oDistinctEmployeeBankAccounts = new List<EmployeeBankAccount>();

            double nTotalGross = 0;
            double nTotalEmp = 0;
            double nTotalDeduction = 0;
            double nTotalNetAmount = 0;

            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false, sGroupIDs, sBlockIDs, "");
            SalaryHeads_Add = oEmployeeSalary.SalaryHeads.Where(x => x.SalaryHeadType == EnumSalaryHeadType.Addition).OrderBy(x => x.SalaryHeadID).ToList();
            oDistinctEmployeeBankAccounts = oEmployeeSalary.EmployeeBankAccounts.GroupBy(x => x.BankBranchName).Select(grp => grp.First()).ToList();

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("SALARY SUMMARY");
                sheet.Name = "SALARY SUMMARY";

                sheet.Column(2).Width = 8; //SL
                sheet.Column(3).Width = 40; //DEPARTMENT
                sheet.Column(4).Width = 18; //NUMBER OF EMPLOYEE
                sheet.Column(5).Width = 18; //GROSS
                int i = 0;
                for (i = 6; i <= SalaryHeads_Add.Count + 5; i++)
                {
                    sheet.Column(i).Width = 18; //Addition Salary Heads
                }
                sheet.Column(i).Width = 18; //Total Payable
                sheet.Column(++i).Width = 18; //Total Deduction
                sheet.Column(++i).Width = 18; //Net Payable

                int j = 0;
                for (j = i; j <= oDistinctEmployeeBankAccounts.Count + i; j++)
                {
                    sheet.Column(j).Width = 18; //Banks
                }
                sheet.Column(j).Width = 18; //Cash
                sheet.Column(++j).Width = 18; //Varience
                nMaxColumn = j;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = "SALARY SUMMARY"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;
                #endregion

                #region Table Header 02
                colIndex = 2;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Department"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "No of Emp"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Gross"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (SalaryHead oSalaryHead in SalaryHeads_Add)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oSalaryHead.Name; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Payable"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Deduction"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Net Payable"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (EmployeeBankAccount oEmployeeBankAccount in oDistinctEmployeeBankAccounts)
                {
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oEmployeeBankAccount.BankBranchName; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Cash"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Varience"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                rowIndex++;
                #endregion

                #region Table Body
                List<EmployeeSalary> oEmployeeSalarys = new List<EmployeeSalary>();
                oEmployeeSalarys.AddRange(oEmployeeSalary.EmployeeSalarys.OrderBy(x => x.DepartmentName).ToList());
                int nSL = 0;
                while (oEmployeeSalarys.Count > 0)
                {
                    List<EmployeeSalary> oTempEmployeeSalarys = new List<EmployeeSalary>();
                    oTempEmployeeSalarys = oEmployeeSalarys.Where(x => x.DepartmentName == oEmployeeSalarys[0].DepartmentName).ToList();

                    nSL++;
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oEmployeeSalarys[0].DepartmentName; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    nTotalEmp += oTempEmployeeSalarys.Count;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oTempEmployeeSalarys.Count; cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    double nGross = oTempEmployeeSalarys.Sum(x => x.GrossAmount);
                    nTotalGross += nGross;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nGross.ToString("###,##0"); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    double nAddition = 0;
                    List<EmployeeSalaryDetail> oEmployeeSalaryDetails = new List<EmployeeSalaryDetail>();
                    oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalaryDetails.Where(x => oTempEmployeeSalarys.Select(p => p.EmployeeSalaryID).Contains(x.EmployeeSalaryID)).ToList();
                    foreach (SalaryHead oSalaryHead in SalaryHeads_Add)
                    {
                        double nSHAmount = oEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID).Sum(x => x.Amount);
                        nAddition += nSHAmount;
                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSHAmount.ToString("###,##0"); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    double nTotalPayable = 0;
                    nTotalPayable = nGross + nAddition;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalPayable.ToString("###,##0"); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    double nDeduction = 0;
                    nDeduction = oEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)EnumSalaryHeadType.Deduction).Sum(x => x.Amount);
                    nTotalDeduction += nDeduction;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nDeduction.ToString("###,##0"); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    double nNetPayable = 0;
                    nNetPayable = nTotalPayable - nDeduction;
                    nTotalNetAmount += nNetPayable;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nNetPayable.ToString("###,##0"); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    foreach (EmployeeBankAccount oEmployeeBankAccount in oDistinctEmployeeBankAccounts)
                    {
                        List<EmployeeBankAccount> oTempBanks = new List<EmployeeBankAccount>();
                        oTempBanks = oEmployeeBankAccounts.Where(x => x.BankBranchID == oEmployeeBankAccount.BankBranchID).ToList();
                        List<EmployeeSalary> oTempEmpSs = new List<EmployeeSalary>();
                        oTempEmpSs = oTempEmployeeSalarys.Where(x => oTempBanks.Select(p => p.EmployeeID).Contains(x.EmployeeID)).ToList();

                        double nBankhPay = 0;
                        nBankhPay = oTempEmpSs.Sum(x => (x.NetAmount - x.CashAmount));

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nBankhPay.ToString("###,##0"); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    }

                    double nCashPay = 0;
                    nCashPay = oTempEmployeeSalarys.Sum(x => x.CashAmount);
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nCashPay.ToString("###,##0"); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    double nVariance = 0;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nVariance.ToString("###,##0"); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;

                    oEmployeeSalarys.RemoveAll(x => x.DepartmentName == oTempEmployeeSalarys[0].DepartmentName);
                }
                #endregion

                #region Total

                sheet.Cells[rowIndex, 2, rowIndex, 3].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = "Total:"; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                colIndex = 4;
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalEmp; cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalGross.ToString("###,##0"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                double nGTotalAddition = 0;
                foreach (SalaryHead oSalaryHead in SalaryHeads_Add)
                {
                    double nTotalSHAmount = oEmployeeSalary.EmployeeSalaryDetails.Where(x => x.SalaryHeadID == oSalaryHead.SalaryHeadID).Sum(x => x.Amount);
                    nGTotalAddition += nTotalSHAmount;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalSHAmount.ToString("###,##0"); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                double nGTotalPayable = 0;
                nGTotalPayable = nTotalGross + nGTotalAddition;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nGTotalPayable.ToString("###,##0"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalDeduction.ToString("###,##0"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalNetAmount.ToString("###,##0"); cell.Style.Font.Bold = true;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                foreach (EmployeeBankAccount oEmployeeBankAccount in oDistinctEmployeeBankAccounts)
                {
                    List<EmployeeBankAccount> oTempBanks = new List<EmployeeBankAccount>();
                    oTempBanks = oEmployeeBankAccounts.Where(x => x.BankBranchID == oEmployeeBankAccount.BankBranchID).ToList();
                    List<EmployeeSalary> oTempEmpSs = new List<EmployeeSalary>();
                    oTempEmpSs = oEmployeeSalary.EmployeeSalarys.Where(x => oTempBanks.Select(p => p.EmployeeID).Contains(x.EmployeeID)).ToList();

                    double nBankPay = 0;
                    nBankPay = oTempEmpSs.Sum(x => (x.NetAmount - x.CashAmount));

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nBankPay.ToString("###,##0"); cell.Style.Font.Bold = false;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                }

                double nTotalCashPay = 0;
                nTotalCashPay = oEmployeeSalary.EmployeeSalarys.Sum(x => x.CashAmount);
                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalCashPay.ToString("###,##0"); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = 0.ToString("###,##0"); cell.Style.Font.Bold = false;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Green); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //signature
                rowIndex = rowIndex + 4;
                colIndex = 0;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 1, rowIndex + 1, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "Prepared By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 2, rowIndex + 1, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "Reviewed By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 2, rowIndex + 1, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "Reviewed By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 2, rowIndex + 1, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "Approved By"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                rowIndex = rowIndex + 2;
                colIndex = 0;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 1, rowIndex + 3, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = ""; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 2, rowIndex + 3, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = ""; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 2, rowIndex + 3, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = ""; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 2, rowIndex + 3, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = ""; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;


                rowIndex = rowIndex + 4;
                colIndex = 0;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 1, rowIndex, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "_________________"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 2, rowIndex, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "_______________"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 2, rowIndex, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "__________"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 2, rowIndex, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "_____________"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;


                rowIndex = rowIndex + 1;
                colIndex = 0;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 1, rowIndex, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "Payroll Specialist"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 2, rowIndex, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "HR Manager"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 2, rowIndex, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "HOHR"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[rowIndex, colIndex = colIndex + 2, rowIndex, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "MD/ Director"; cell.Style.Font.Bold = true; cell.Style.VerticalAlignment = ExcelVerticalAlignment.Top; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SUMMARY.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        #endregion Salary Summery XL

        #region Employee Pay Slip
        private EmployeeSalary GetEmployeePaySlip(string sEmpIDs, string sDate, int nLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, int nMonthID, bool bNewJoin, int nBlock)
        {
            DateTime dtFrom = DateTime.MinValue;
            DateTime dtTo = DateTime.MinValue;

            var oEmployeeSalary = new EmployeeSalary();
            try
            {
                DateTime.TryParse(sDate.Split(',')[0], out dtFrom);
                DateTime.TryParse(sDate.Split(',')[1], out dtTo);

                string sSQL = "Select * from View_EmployeeSalary Where EmployeeSalaryID>0 And StartDate = '" + dtFrom.ToString("dd MMM yyyy") + "' AND EndDate = '" + dtTo.ToString("dd MMM yyyy") + "' ";

                if (sEmpIDs.Trim() != "")
                    sSQL += " And EmployeeID In (" + sEmpIDs + ")";
                if (nLocationID > 0)
                    sSQL += " And LocationID = " + nLocationID;
                if (sDepartmentIDs != "")
                    sSQL += " And DepartmentID In (" + sDepartmentIDs + ")";
                if (sDesignationIDs != "")
                    sSQL += " And DesignationID In (" + sDesignationIDs + ")";
                if (sSalarySchemeIDs != "")
                    sSQL += " And EmployeeID In ( Select EmployeeID from EmployeeSalaryStructure Where SalarySchemeID In (" + sSalarySchemeIDs + "))";
                if (nMonthID > 0)
                    sSQL += " And MonthID=" + nMonthID;
                if (bNewJoin)
                {
                    sSQL = sSQL + " AND JoiningDate BETWEEN '" + dtFrom.ToString("dd MMM yyyy") + "' AND '" + dtTo.ToString("dd MMM yyyy") + "'";
                }
                if (nBlock > 0)
                {
                    sSQL = sSQL + "  AND EmployeeID IN(SELECT EmployeeID FROM View_BlockMachineMappingSupervisor WHERE BMMID =" + nBlock + " AND IsActive=1)";
                }
                sSQL += " ORDER BY LocationID, EmployeeCode";

                var oResults = EmployeeSalary.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                if (oResults.Count() > 0 && oResults.FirstOrDefault().EmployeeSalaryID > 0)
                {
                    oEmployeeSalary.EmployeeSalarys = oResults;

                    string sEmployeeSalaryIDs = string.Join(",", oResults.Select(x => x.EmployeeSalaryID).ToArray());
                    sSQL = "Select * from View_EmployeeSalaryDetail Where EmployeeSalaryID In (" + sEmployeeSalaryIDs + ")";
                    var oEmpSalaryDetails = EmployeeSalaryDetail.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                    oEmployeeSalary.EmployeeSalaryDetails = oEmpSalaryDetails;

                    sSQL = "Select * from SalaryHead Order By SalaryHeadType";
                    var oSalaryHeads = SalaryHead.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                    oEmployeeSalary.SalaryHeads = oSalaryHeads;
                }

            }
            catch (Exception e)
            {
                oEmployeeSalary = new EmployeeSalary();
                oEmployeeSalary.ErrorMessage = e.Message;
            }

            var oCompany = new Company();
            oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            oEmployeeSalary.Company = oCompany;

            return oEmployeeSalary;
        }
        public void ViewEmployeePaySlip(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts, int PC)
        {
            //var oEmployeeSalary = this.GetEmployeePaySlip(sEmpIDs, sDate, nLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, nMonthID);
            //return PartialView(oEmployeeSalary);

            //EmployeeSalary oEmployeeSalary = this.GetEmployeePaySlip(sEmpIDs, sDate, nLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, nMonthID, bNewJoin, nBlock);
            EmployeeSalary oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false, sGroupIDs, sBlockIDs, "");

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oEmployeeSalary.BusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            var oCompany = new Company();
            oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            oEmployeeSalary.Company = oCompany;

            this.PrintPaySlipXL(oEmployeeSalary, PC, false);

        }

        public void ViewEmployeePaySlip_Self(string sEmpIDs, string sDate, int nLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, int nMonthID, bool bNewJoin, int nYear, bool IsDate, double ts)
        {
            EmployeeSalary oEmployeeSalary = this.GetEmployeePaySlip_Self(sEmpIDs, sDate, nLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, nMonthID, bNewJoin, nYear, IsDate);
            this.PrintPaySlipXL(oEmployeeSalary, 1, false);
        }
        private EmployeeSalary GetEmployeePaySlip_Self(string sEmpIDs, string sDate, int nLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, int nMonthID, bool bNewJoin, int nYear, bool IsDate)
        {
            DateTime dtFrom = DateTime.MinValue;
            DateTime dtTo = DateTime.MinValue;

            var oEmployeeSalary = new EmployeeSalary();
            try
            {
                DateTime.TryParse(sDate.Split(',')[0], out dtFrom);
                DateTime.TryParse(sDate.Split(',')[1], out dtTo);

                string sSQL = "SELECT * FROM View_EmployeeSalary WHERE   EmployeeSalaryID>0  ";
                if (IsDate) { sSQL += "AND StartDate='" + dtFrom.ToString("dd MMM yyyy") + "' AND EndDate='" + dtTo.ToString("dd MMM yyyy") + "'"; }

                if (sEmpIDs.Trim() != "")
                    sSQL += " And EmployeeID In (" + sEmpIDs + ")";
                if (nLocationID > 0)
                    sSQL += " And LocationID = " + nLocationID;
                if (sDepartmentIDs != "")
                    sSQL += " And DepartmentID In (" + sDepartmentIDs + ")";
                if (sDesignationIDs != "")
                    sSQL += " And DesignationID In (" + sDesignationIDs + ")";
                if (sSalarySchemeIDs != "")
                    sSQL += " And EmployeeID In ( Select EmployeeID from EmployeeSalaryStructure Where SalarySchemeID In (" + sSalarySchemeIDs + "))";
                if (nMonthID > 0)
                    sSQL += " And MonthID=" + nMonthID;
                if (bNewJoin)
                {
                    sSQL = sSQL + " AND JoiningDate BETWEEN '" + dtFrom.ToString("dd MMM yyyy") + "' AND '" + dtTo.ToString("dd MMM yyyy") + "'";
                }

                if (nMonthID > 0 && nYear > 0)
                {
                    sSQL = sSQL + " AND PayrollProcessID IN (SELECT PPMID FROM PayrollProcessManagement WHERE MonthID=" + nMonthID + " AND DATEPART(YEAR,EndDate)=" + nYear + ")";
                }

                sSQL += " ORDER BY LocationID, EmployeeCode";

                var oResults = EmployeeSalary.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);

                if (oResults.Count() > 0 && oResults.FirstOrDefault().EmployeeSalaryID > 0)
                {
                    oEmployeeSalary.EmployeeSalarys = oResults;

                    string sEmployeeSalaryIDs = string.Join(",", oResults.Select(x => x.EmployeeSalaryID).ToArray());
                    sSQL = "Select * from View_EmployeeSalaryDetail Where EmployeeSalaryID In (" + sEmployeeSalaryIDs + ")";
                    var oEmpSalaryDetails = EmployeeSalaryDetail.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                    oEmployeeSalary.EmployeeSalaryDetails = oEmpSalaryDetails;

                    sSQL = "Select * from SalaryHead Order By SalaryHeadType";
                    var oSalaryHeads = SalaryHead.Gets(sSQL, ((User)(Session[SessionInfo.CurrentUser])).UserID);
                    oEmployeeSalary.SalaryHeads = oSalaryHeads;
                }

            }
            catch (Exception e)
            {
                oEmployeeSalary = new EmployeeSalary();
                oEmployeeSalary.ErrorMessage = e.Message;
            }

            var oCompany = new Company();
            oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            oEmployeeSalary.Company = oCompany;

            return oEmployeeSalary;
        }

        private void PrintPaySlipXL(EmployeeSalary oEmployeeSalary, int nPrintCount, bool isComp)
        {
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;
            int nRowIndex = 2, nEndCol = 17;
            double nRowHeight = 12;

            Company oCompany = new Company();
            List<SalaryHead> oSalaryHeads = new List<SalaryHead>();
            List<EmployeeSalary> oEmployeeSalarys = new List<EmployeeSalary>();
            List<EmployeeSalaryDetail> oEmployeeSalaryDetails = new List<EmployeeSalaryDetail>();


            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarys.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            oCompany = oEmployeeSalary.Company;
            oSalaryHeads = oEmployeeSalary.SalaryHeads;
            oEmployeeSalarys = oEmployeeSalary.EmployeeSalarys.OrderBy(x => x.BusinessUnitID).ThenBy(x => x.LocationID).ThenBy(x => x.DepartmentID).ThenBy(x => x.EmployeeCode).ToList();
            oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalaryDetails;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Pay Slip");
                sheet.PrinterSettings.TopMargin = 0.2M;
                sheet.PrinterSettings.LeftMargin = 0.2M;
                sheet.PrinterSettings.BottomMargin = 0.2M;
                sheet.PrinterSettings.RightMargin = 0.2M;
                sheet.PrinterSettings.Orientation = eOrientation.Portrait;
                sheet.PrinterSettings.PaperSize = ePaperSize.A4;
                sheet.Name = "Pay Slip";

                #region Column Declare
                sheet.Column(1).Width = 3;//Extra
                sheet.Column(2).Width = 2; //Blank
                sheet.Column(3).Width = 10;//Caption
                sheet.Column(4).Width = 2; //:
                sheet.Column(5).Width = 10;//Basic Salary
                sheet.Column(6).Width = 10;//Other Salary
                sheet.Column(7).Width = 10;//Net Salary
                sheet.Column(8).Width = 2;//Blank

                sheet.Column(9).Width = 4; //Middle Blank

                sheet.Column(10).Width = 2; //Blank
                sheet.Column(11).Width = 10;//Caption
                sheet.Column(12).Width = 2; //:
                sheet.Column(13).Width = 10;//Basic Salary
                sheet.Column(14).Width = 10;//Other Salary
                sheet.Column(15).Width = 10;//Net Salary
                sheet.Column(16).Width = 2;//Blank
                sheet.Column(17).Width = 3;//Extra
                #endregion

                if (oEmployeeSalarys != null)
                {
                    int nLeftSideRowIndex = 0, nRightSideRowIndex = 0, nTempPrintCount = 0;
                    for (int i = 0; i < oEmployeeSalarys.Count; i = i + 2)
                    {
                        nTempPrintCount = nTempPrintCount + 2;
                        if (i <= (oEmployeeSalarys.Count - 1))
                        {
                            nLeftSideRowIndex = this.FillSalaraySlip(sheet, nRowIndex, oEmployeeSalarys[i], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 2, nRowHeight, "", oBusinessUnits, isComp);
                        }

                        if ((i + 1) <= (oEmployeeSalarys.Count - 1))
                        {
                            nRightSideRowIndex = this.FillSalaraySlip(sheet, nRowIndex, oEmployeeSalarys[i + 1], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 10, nRowHeight, "", oBusinessUnits, isComp);
                        }

                        nRowIndex = nLeftSideRowIndex;
                        if (nRightSideRowIndex > nLeftSideRowIndex)
                        {
                            nRowIndex = nRightSideRowIndex;
                        }

                        #region Blank
                        sheet.Row(nRowIndex).Height = 20;
                        sheet.Cells[nRowIndex, 2, nRowIndex, 16].Merge = true;
                        cell = sheet.Cells[nRowIndex, 2]; cell.Value = "";
                        cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.None;
                        if (nTempPrintCount >= nPrintCount)
                        {
                            sheet.Row(nRowIndex).PageBreak = true;
                            nTempPrintCount = 0;
                        }
                        nRowIndex = nRowIndex + 1;
                        #endregion
                    }
                }
                cell = sheet.Cells[1, 1, nRowIndex, nEndCol];
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=PaySlip.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        private int FillSalaraySlip(OfficeOpenXml.ExcelWorksheet sheet, int nRowIndex, EmployeeSalary oEmployeeSalary, List<EmployeeSalaryDetail> oEmployeeSalaryDetails, List<SalaryHead> oSalaryHeads, Company oCompany, int nColumnIndex, double nRowHeight, string OCEC, List<BusinessUnit> oBusinessUnits, bool isComp)
        {


            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            #region Blank with Top/Left/Right Border
            sheet.Row(nRowIndex).Height = 5;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Company Name
            sheet.Row(nRowIndex).Height = nRowHeight+5;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = oBusinessUnits.Count == 1 ? ((oBusinessUnits[0].NameInBangla != "") ? oBusinessUnits[0].NameInBangla : oBusinessUnits[0].Name) : ((oCompany.NameInBangla != "") ? oCompany.NameInBangla : oCompany.Name); //(oCompany.NameInBangla != "") ? oCompany.NameInBangla : oCompany.Name;
            cell.Style.Font.SetFromFont(new Font("SutonnyMJ", 12)); cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region বেতন প্রদান রশিদ
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "বেতন প্রদান রশিদ";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Salary Date
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = oEmployeeSalary.StartDateInString + "-" + oEmployeeSalary.EndDateInString;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region OfficeCopyEmployeeCopy
            if (!string.IsNullOrEmpty(OCEC))
            {
                sheet.Row(nRowIndex).Height = nRowHeight;
                sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
                cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = (OCEC == "OC" ? "Office Copy" : "Employee Copy");
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ইউনিট
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ইউনিট";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.LocationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কার্ড নং
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কার্ড নং";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeCode;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region নাম
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "নাম";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region পদবী
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "পদবী";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DesignationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region সেকশন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সেকশন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DepartmentName + "      গ্রেড:" + oEmployeeSalary.EmployeeTypeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কর্মদিবস
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কর্মদিবস";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = this.NumberFormat(oEmployeeSalary.TotalWorkingDay.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            TimeSpan diff = oEmployeeSalary.EndDate - oEmployeeSalary.StartDate;
            int nDays = diff.Days + 1;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট দিন : " + this.NumberFormat(nDays.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region উপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "উপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = (isComp) ? this.NumberFormat(oEmployeeSalary.CompTotalPresent.ToString()) : this.NumberFormat(oEmployeeSalary.TotalPresent.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট বন্ধের দিন : " + this.NumberFormat(oEmployeeSalary.TotalDayOff.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ছুটি
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ছুটি";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = this.NumberFormat((oEmployeeSalary.TotalUpLeave + oEmployeeSalary.TotalPLeave).ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট ছুটির দিন : " + this.NumberFormat(oEmployeeSalary.TotalHoliday.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region অনুপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "অনুপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.TotalAbsent.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region মোট বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "মোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.GrossAmount > 0 ? this.GetAmountInStr(oEmployeeSalary.GrossAmount, true, false) : "-");
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            double nAmount = 0; string sHeadName = "";
            List<EmployeeSalaryDetail> oTempEmployeeSalaryDetails = oEmployeeSalaryDetails.Where(x => x.EmployeeSalaryID == oEmployeeSalary.EmployeeSalaryID).ToList();

            #region Salary Head
            foreach (SalaryHead oItem in oSalaryHeads)
            {
                nAmount = (oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).Count() > 0) ? oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).FirstOrDefault().Amount : 0;
                if (!string.Equals(@oItem.Name.ToLower(), "n/a") && !string.Equals(@oItem.Name.Trim(), ""))
                {
                    sHeadName = ((!string.Equals(@oItem.NameInBangla.ToLower(), "n/a") && !string.Equals(@oItem.NameInBangla.Trim(), "")) ? @oItem.NameInBangla : @oItem.Name);
                }

                sheet.Row(nRowIndex).Height = nRowHeight;
                cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = sHeadName; cell.Style.Font.SetFromFont(new Font("SutonnyMJ", 12));
                cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                if (oItem.SalaryHeadType == EnumSalaryHeadType.Basic || oItem.SalaryHeadType == EnumSalaryHeadType.Basic)
                {
                    sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }
                else
                {
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = "";
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                    sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region সর্বমোট বেতন
            nAmount = oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Basic).Sum(x => x.Amount) +
                           oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Addition).Sum(x => x.Amount) -
                           oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Deduction).Sum(x => x.Amount);

            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সর্বমোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম হার
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম হার";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.OTRatePerHour.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম ঘন্টা
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম ঘন্টা";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            Double OTmin = oEmployeeSalary.OTHour * 60;
            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = Global.MinInHourMin(Convert.ToInt32(OTmin));
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম চার্জ
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম চার্জ";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(oEmployeeSalary.OverTimeAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region প্রদেয় বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "প্রদেয় বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat((isComp) ? oEmployeeSalary.CompOverTimeAmount : oEmployeeSalary.OverTimeAmount + nAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            if (oEmployeeSalary.IsBank)
            {
                sheet.Row(nRowIndex).Height = nRowHeight;
                cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ব্যাংক";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
                cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(oEmployeeSalary.BankAmount).Split('.')[0]);
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            if (oEmployeeSalary.IsCash)
            {
                sheet.Row(nRowIndex).Height = nRowHeight;
                cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ক্যাশ";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
                cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(oEmployeeSalary.CashAmount).Split('.')[0]);
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 20;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Under Line
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region স্বাক্ষর
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "শ্রমিকের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "কর্তৃপক্ষের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 5;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            return nRowIndex;
        }

        private int FillSalaraySlip_1(OfficeOpenXml.ExcelWorksheet sheet, int nRowIndex, EmployeeSalary oEmployeeSalary, List<EmployeeSalaryDetail> oEmployeeSalaryDetails, List<SalaryHead> oSalaryHeads, Company oCompany, int nColumnIndex, double nRowHeight, string OCEC, List<BusinessUnit> oBusinessUnits, bool isComp, bool bGroupBySerial, int nSerial)
        {


            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            #region Blank with Top/Left/Right Border
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = nSerial.ToString();
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Company Name
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = oBusinessUnits.Count == 1 ? ((oBusinessUnits[0].NameInBangla != "") ? oBusinessUnits[0].NameInBangla : oBusinessUnits[0].Name) : ((oCompany.NameInBangla != "") ? oCompany.NameInBangla : oCompany.Name); //(oCompany.NameInBangla != "") ? oCompany.NameInBangla : oCompany.Name;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region বেতন প্রদান রশিদ
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "বেতন প্রদান রশিদ";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Salary Date
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = oEmployeeSalary.StartDateInString + "-" + oEmployeeSalary.EndDateInString;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region OfficeCopyEmployeeCopy
            if (!string.IsNullOrEmpty(OCEC))
            {
                sheet.Row(nRowIndex).Height = nRowHeight;
                sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
                cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = (OCEC == "OC" ? "Office Copy" : "Employee Copy");
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ইউনিট
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ইউনিট";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.LocationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কার্ড নং
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কার্ড নং";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeCode;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region নাম
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "নাম";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region পদবী
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "পদবী";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DesignationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region সেকশন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সেকশন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DepartmentName + "      গ্রেড:" + oEmployeeSalary.EmployeeTypeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কর্মদিবস
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কর্মদিবস";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = this.NumberFormat(oEmployeeSalary.TotalWorkingDay.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            TimeSpan diff = oEmployeeSalary.EndDate - oEmployeeSalary.StartDate;
            int nDays = diff.Days + 1;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট দিন : " + this.NumberFormat(nDays.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region উপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "উপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = (isComp) ? this.NumberFormat(oEmployeeSalary.CompTotalPresent.ToString()) : this.NumberFormat(oEmployeeSalary.TotalPresent.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট বন্ধের দিন : " + this.NumberFormat(oEmployeeSalary.TotalDayOff.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ছুটি
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ছুটি";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = this.NumberFormat((oEmployeeSalary.TotalUpLeave + oEmployeeSalary.TotalPLeave).ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট ছুটির দিন : " + this.NumberFormat(oEmployeeSalary.TotalHoliday.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region অনুপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "অনুপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.TotalAbsent.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region মোট বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "মোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.GrossAmount > 0 ? this.GetAmountInStr(oEmployeeSalary.GrossAmount, true, false) : "-");
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            double nAmount = 0; string sHeadName = "";
            List<EmployeeSalaryDetail> oTempEmployeeSalaryDetails = oEmployeeSalaryDetails.Where(x => x.EmployeeSalaryID == oEmployeeSalary.EmployeeSalaryID).ToList();

            #region Salary Head
            foreach (SalaryHead oItem in oSalaryHeads)
            {
                nAmount = (oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).Count() > 0) ? oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).FirstOrDefault().Amount : 0;
                if (!string.Equals(@oItem.Name.ToLower(), "n/a") && !string.Equals(@oItem.Name.Trim(), ""))
                {
                    sHeadName = ((!string.Equals(@oItem.NameInBangla.ToLower(), "n/a") && !string.Equals(@oItem.NameInBangla.Trim(), "")) ? @oItem.NameInBangla : @oItem.Name);
                }

                sheet.Row(nRowIndex).Height = nRowHeight;
                cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = sHeadName;
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                if (oItem.SalaryHeadType == EnumSalaryHeadType.Basic || oItem.SalaryHeadType == EnumSalaryHeadType.Basic)
                {
                    sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }
                else
                {
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                    sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)]; cell.Value = "";
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region সর্বমোট বেতন
            nAmount = oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Basic).Sum(x => x.Amount) +
                           oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Addition).Sum(x => x.Amount) -
                           oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Deduction).Sum(x => x.Amount);

            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সর্বমোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম হার
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম হার";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.OTRatePerHour.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম ঘন্টা
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম ঘন্টা";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            Double OTmin = oEmployeeSalary.OTHour * 60;
            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = Global.MinInHourMin(Convert.ToInt32(OTmin));
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম চার্জ
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম চার্জ";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(oEmployeeSalary.OverTimeAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region প্রদেয় বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "প্রদেয় বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat((isComp) ? oEmployeeSalary.CompOverTimeAmount : oEmployeeSalary.OverTimeAmount + nAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 20;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Under Line
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region স্বাক্ষর
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "শ্রমিকের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "কর্তৃপক্ষের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 5;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            return nRowIndex;
        }

        public string NumberFormat(string sNum)
        {
            char[] NumbersInBangla = { '০', '১', '২', '৩', '৪', '৫', '৬', '৭', '৮', '৯' };
            char[] NumbersInEnglish = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };

            char[] arr = sNum.ToCharArray();

            foreach (char ch in arr)
            {
                int i = 0;
                while (i != 10)
                {
                    if (ch == NumbersInEnglish[i])
                    {
                        sNum = sNum.Replace(ch, NumbersInBangla[i]);
                        break;
                    }
                    i++;
                }
            }
            return sNum;
        }

        /*ps*/
        public void ExportIntoPaySlip_Comp(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroupByDept, string sGroupIDs, string sBlockIDs, bool IsMatchExact, double ts, int PC)
        {
            //EmployeeSalary oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, IsCompliance,sGroupIDs,sBlockIDs);
            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, IsCompliance, sGroupIDs, sBlockIDs, IsMatchExact);


            //if (IsCompliance)// if this report is for compliance, then map comp OT with the actual OT . there is no condition for comp in report .
            //{
            //    oEmployeeSalary.EmployeeSalarys.ForEach(x =>
            //    {
            //        x.OTHour = x.CompOTHour;
            //        x.OTRatePerHour = Math.Round(x.CompOTRatePerHour, 2);
            //        x.NetAmount = Math.Round(x.CompNetAmount, 2);
            //        x.GrossAmount = Math.Round(x.CompGrossAmount, 2);
            //        x.TotalHoliday = x.CompTotalHoliday;
            //        x.TotalAbsent = x.CompTotalAbsent;
            //        x.TotalDayOff = x.CompTotalDayOff;
            //        x.TotalLate = x.CompTotalLate;
            //        x.TotalEarlyLeaving = x.CompTotalEarlyLeave;
            //        x.TotalPLeave = x.CompTotalLeave;
            //        x.TotalUpLeave = 0;
            //    });
            //    oEmployeeSalary.EmployeeSalaryDetails.ForEach(x =>
            //    {
            //        x.Amount = x.CompAmount;
            //    });
            //}

            var oCompany = new Company();
            oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            oEmployeeSalary.Company = oCompany;

            this.PrintPaySlipXLF3(oEmployeeSalary, PC, IsCompliance);
        }
        private void PrintPaySlipXLF3(EmployeeSalary oEmployeeSalary, int nPrintCount, bool isComp)
        {
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;
            int nRowIndex = 2, nEndCol = 17;
            double nRowHeight = 12;

            Company oCompany = new Company();
            List<SalaryHead> oSalaryHeads = new List<SalaryHead>();
            List<RPTSalarySheet> oEmployeeSalarys = new List<RPTSalarySheet>();
            List<RPTSalarySheetDetail> oEmployeeSalaryDetails = new List<RPTSalarySheetDetail>();


            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            oCompany = oEmployeeSalary.Company;
            oSalaryHeads = oEmployeeSalary.SalaryHeads;
            oEmployeeSalarys = oEmployeeSalary.EmployeeSalarySheets.OrderBy(x => x.BusinessUnitID).ThenBy(x => x.LocationID).ThenBy(x => x.DepartmentID).ThenBy(x => x.EmployeeCode).ToList();
            oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalarySheetDetails;

            oEmployeeSalarys = oEmployeeSalarys.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeCode).ToList();

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Pay Slip");
                sheet.PrinterSettings.TopMargin = 0.2M;
                sheet.PrinterSettings.LeftMargin = 0.2M;
                sheet.PrinterSettings.BottomMargin = 0.2M;
                sheet.PrinterSettings.RightMargin = 0.2M;
                sheet.PrinterSettings.Orientation = eOrientation.Portrait;
                sheet.PrinterSettings.PaperSize = ePaperSize.A4;
                sheet.Name = "Pay Slip";

                #region Column Declare
                sheet.Column(1).Width = 3;//Extra
                sheet.Column(2).Width = 2; //Blank
                sheet.Column(3).Width = 10;//Caption
                sheet.Column(4).Width = 2; //:
                sheet.Column(5).Width = 10;//Basic Salary
                sheet.Column(6).Width = 10;//Other Salary
                sheet.Column(7).Width = 10;//Net Salary
                sheet.Column(8).Width = 2;//Blank

                sheet.Column(9).Width = 4; //Middle Blank

                sheet.Column(10).Width = 2; //Blank
                sheet.Column(11).Width = 10;//Caption
                sheet.Column(12).Width = 2; //:
                sheet.Column(13).Width = 10;//Basic Salary
                sheet.Column(14).Width = 10;//Other Salary
                sheet.Column(15).Width = 10;//Net Salary
                sheet.Column(16).Width = 2;//Blank
                sheet.Column(17).Width = 3;//Extra
                #endregion

                if (oEmployeeSalarys != null)
                {
                    int nLeftSideRowIndex = 0, nRightSideRowIndex = 0, nTempPrintCount = 0;
                    for (int i = 0; i < oEmployeeSalarys.Count; i = i + 2)
                    {
                        nTempPrintCount = nTempPrintCount + 2;
                        if (i <= (oEmployeeSalarys.Count - 1))
                        {
                            nLeftSideRowIndex = this.FillSalaraySlipF3(sheet, nRowIndex, oEmployeeSalarys[i], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 2, nRowHeight, "", oBusinessUnits, isComp);
                        }

                        if ((i + 1) <= (oEmployeeSalarys.Count - 1))
                        {
                            nRightSideRowIndex = this.FillSalaraySlipF3(sheet, nRowIndex, oEmployeeSalarys[i + 1], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 10, nRowHeight, "", oBusinessUnits, isComp);
                        }

                        nRowIndex = nLeftSideRowIndex;
                        if (nRightSideRowIndex > nLeftSideRowIndex)
                        {
                            nRowIndex = nRightSideRowIndex;
                        }

                        #region Blank
                        sheet.Row(nRowIndex).Height = 20;
                        sheet.Cells[nRowIndex, 2, nRowIndex, 16].Merge = true;
                        cell = sheet.Cells[nRowIndex, 2]; cell.Value = "";
                        cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.None;
                        if (nTempPrintCount >= nPrintCount)
                        {
                            sheet.Row(nRowIndex).PageBreak = true;
                            nTempPrintCount = 0;
                        }
                        nRowIndex = nRowIndex + 1;
                        #endregion
                    }
                }
                cell = sheet.Cells[1, 1, nRowIndex, nEndCol];
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=PaySlip.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }
        private int FillSalaraySlipF3(OfficeOpenXml.ExcelWorksheet sheet, int nRowIndex, RPTSalarySheet oEmployeeSalary, List<RPTSalarySheetDetail> oEmployeeSalaryDetails, List<SalaryHead> oSalaryHeads, Company oCompany, int nColumnIndex, double nRowHeight, string OCEC, List<BusinessUnit> oBusinessUnits, bool isComp)
        {


            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            #region Blank with Top/Left/Right Border
            sheet.Row(nRowIndex).Height = 5;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Company Name
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = oBusinessUnits.Count == 1 ? ((oBusinessUnits[0].NameInBangla != "") ? oBusinessUnits[0].NameInBangla : oBusinessUnits[0].Name) : ((oCompany.NameInBangla != "") ? oCompany.NameInBangla : oCompany.Name); //(oCompany.NameInBangla != "") ? oCompany.NameInBangla : oCompany.Name;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region বেতন প্রদান রশিদ
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "বেতন প্রদান রশিদ";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Salary Date
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = oEmployeeSalary.StartDateInString + "-" + oEmployeeSalary.EndDateInString;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region OfficeCopyEmployeeCopy
            if (!string.IsNullOrEmpty(OCEC))
            {
                sheet.Row(nRowIndex).Height = nRowHeight;
                sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
                cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = (OCEC == "OC" ? "Office Copy" : "Employee Copy");
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ইউনিট
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ইউনিট";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.LocationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কার্ড নং
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কার্ড নং";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeCode;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region নাম
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "নাম";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region পদবী
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "পদবী";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DesignationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region সেকশন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সেকশন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DepartmentName + "      গ্রেড:" + oEmployeeSalary.EmployeeTypeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কর্মদিবস
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কর্মদিবস";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            double nAttTotal = 0;
            nAttTotal = oEmployeeSalary.Present + oEmployeeSalary.TotalAbsent + oEmployeeSalary.TotalDOff + oEmployeeSalary.TotalHoliday + ((isComp == false) ? (oEmployeeSalary.TotalPLeave + oEmployeeSalary.TotalUpLeave) : oEmployeeSalary.TotalLeave);

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = this.NumberFormat(nAttTotal.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            TimeSpan diff = oEmployeeSalary.EndDate - oEmployeeSalary.StartDate;
            int nDays = diff.Days + 1;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট দিন : " + this.NumberFormat(nDays.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region উপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "উপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = this.NumberFormat(oEmployeeSalary.Present.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট বন্ধের দিন : " + this.NumberFormat(oEmployeeSalary.TotalDOff.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ছুটি
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ছুটি";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = this.NumberFormat((oEmployeeSalary.TotalLeave).ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট ছুটির দিন : " + this.NumberFormat(oEmployeeSalary.TotalHoliday.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region অনুপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "অনুপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.TotalAbsent.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region মোট বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "মোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.GrossAmount > 0 ? this.GetAmountInStr(oEmployeeSalary.GrossAmount, true, false) : "-");
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            double nAmount = 0; string sHeadName = "";
            List<RPTSalarySheetDetail> oTempEmployeeSalaryDetails = oEmployeeSalaryDetails.Where(x => x.EmployeeSalaryID == oEmployeeSalary.EmployeeSalaryID).ToList();

            #region Salary Head
            foreach (SalaryHead oItem in oSalaryHeads)
            {
                nAmount = (oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).Count() > 0) ? oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).FirstOrDefault().Amount : 0;
                if (!string.Equals(@oItem.Name.ToLower(), "n/a") && !string.Equals(@oItem.Name.Trim(), ""))
                {
                    sHeadName = ((!string.Equals(@oItem.NameInBangla.ToLower(), "n/a") && !string.Equals(@oItem.NameInBangla.Trim(), "")) ? @oItem.NameInBangla : @oItem.Name);
                }

                sheet.Row(nRowIndex).Height = nRowHeight;
                cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = sHeadName;
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                if (oItem.SalaryHeadType == EnumSalaryHeadType.Basic || oItem.SalaryHeadType == EnumSalaryHeadType.Basic)
                {
                    sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }
                else
                {
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = "";
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                    sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region সর্বমোট বেতন
            //nAmount = oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Basic).Sum(x => x.Amount) +
            //               oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Addition).Sum(x => x.Amount) -
            //               oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Deduction).Sum(x => x.Amount);
            nAmount = oEmployeeSalary.NetAmount;
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সর্বমোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount - oEmployeeSalary.OTAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম হার
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম হার";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.OTRatePerHour.ToString("0.00"));
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম ঘন্টা
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম ঘন্টা";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            Double OTmin = oEmployeeSalary.OTHour * 60;
            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(Global.MinInHourMin(Convert.ToInt32(OTmin)));
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম চার্জ
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম চার্জ";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(oEmployeeSalary.OTAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region প্রদেয় বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "প্রদেয় বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(Math.Round(nAmount).ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 20;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Under Line
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region স্বাক্ষর
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "শ্রমিকের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "কর্তৃপক্ষের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 5;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            return nRowIndex;
        }

        #endregion

        public void ExportIntoPaySlip_CompF6(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroupByDept, string sGroupIDs, string sBlockIDs, double ts, int PC)
        {
            EmployeeSalary oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, IsCompliance, sGroupIDs, sBlockIDs, "");
            if (IsCompliance)// if this report is for compliance, then map comp OT with the actual OT . there is no condition for comp in report .
            {
                oEmployeeSalary.EmployeeSalarys.ForEach(x =>
                {
                    x.OTHour = x.CompOTHour;
                    x.OTRatePerHour = Math.Round(x.CompOTRatePerHour, 2);
                    x.NetAmount = Math.Round(x.CompNetAmount, 2);
                    x.GrossAmount = Math.Round(x.CompGrossAmount, 2);
                });
                oEmployeeSalary.EmployeeSalaryDetails.ForEach(x =>
                {
                    x.Amount = x.CompAmount;
                });
            }

            var oCompany = new Company();
            oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            oEmployeeSalary.Company = oCompany;

            this.PrintPaySlipXLComp(oEmployeeSalary, PC, true);
        }

        private void PrintPaySlipXLComp(EmployeeSalary oEmployeeSalary, int nPrintCount, bool isComp)
        {
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;
            int nRowIndex = 2, nEndCol = 17;
            double nRowHeight = 12;

            Company oCompany = new Company();
            List<SalaryHead> oSalaryHeads = new List<SalaryHead>();
            List<EmployeeSalary> oEmployeeSalarys = new List<EmployeeSalary>();
            List<EmployeeSalaryDetail> oEmployeeSalaryDetails = new List<EmployeeSalaryDetail>();

            oCompany = oEmployeeSalary.Company;
            oSalaryHeads = oEmployeeSalary.SalaryHeads;
            oEmployeeSalarys = oEmployeeSalary.EmployeeSalarys.OrderBy(x => x.BusinessUnitID).ThenBy(x => x.LocationID).ThenBy(x => x.DepartmentID).ThenBy(x => x.EmployeeCode).ToList();
            oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalaryDetails;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Pay Slip");
                sheet.PrinterSettings.TopMargin = 0.2M;
                sheet.PrinterSettings.LeftMargin = 0.2M;
                sheet.PrinterSettings.BottomMargin = 0.2M;
                sheet.PrinterSettings.RightMargin = 0.2M;
                sheet.PrinterSettings.Orientation = eOrientation.Portrait;
                sheet.PrinterSettings.PaperSize = ePaperSize.A4;
                sheet.Name = "Pay Slip";

                #region Column Declare
                sheet.Column(1).Width = 3;//Extra
                sheet.Column(2).Width = 2; //Blank
                sheet.Column(3).Width = 10;//Caption
                sheet.Column(4).Width = 2; //:
                sheet.Column(5).Width = 10;//Basic Salary
                sheet.Column(6).Width = 10;//Other Salary
                sheet.Column(7).Width = 10;//Net Salary
                sheet.Column(8).Width = 2;//Blank

                sheet.Column(9).Width = 4; //Middle Blank

                sheet.Column(10).Width = 2; //Blank
                sheet.Column(11).Width = 10;//Caption
                sheet.Column(12).Width = 2; //:
                sheet.Column(13).Width = 10;//Basic Salary
                sheet.Column(14).Width = 10;//Other Salary
                sheet.Column(15).Width = 10;//Net Salary
                sheet.Column(16).Width = 2;//Blank
                sheet.Column(17).Width = 3;//Extra
                #endregion

                if (oEmployeeSalarys != null)
                {
                    int nLeftSideRowIndex = 0, nRightSideRowIndex = 0, nTempPrintCount = 0;
                    for (int i = 0; i < oEmployeeSalarys.Count; i = i + 2)
                    {
                        nTempPrintCount = nTempPrintCount + 2;
                        if (i <= (oEmployeeSalarys.Count - 1))
                        {
                            nLeftSideRowIndex = this.FillSalaraySlipComp(sheet, nRowIndex, oEmployeeSalarys[i], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 2, nRowHeight, "CompF6", isComp);
                        }

                        if ((i + 1) <= (oEmployeeSalarys.Count - 1))
                        {
                            nRightSideRowIndex = this.FillSalaraySlipComp(sheet, nRowIndex, oEmployeeSalarys[i + 1], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 10, nRowHeight, "CompF6", isComp);
                        }

                        nRowIndex = nLeftSideRowIndex;
                        if (nRightSideRowIndex > nLeftSideRowIndex)
                        {
                            nRowIndex = nRightSideRowIndex;
                        }

                        #region Blank
                        sheet.Row(nRowIndex).Height = 20;
                        sheet.Cells[nRowIndex, 2, nRowIndex, 16].Merge = true;
                        cell = sheet.Cells[nRowIndex, 2]; cell.Value = "";
                        cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.None;
                        if (nTempPrintCount >= nPrintCount)
                        {
                            sheet.Row(nRowIndex).PageBreak = true;
                            nTempPrintCount = 0;
                        }
                        nRowIndex = nRowIndex + 1;
                        #endregion
                    }
                }
                cell = sheet.Cells[1, 1, nRowIndex, nEndCol];
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=PaySlip.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }
        private int FillSalaraySlipComp(OfficeOpenXml.ExcelWorksheet sheet, int nRowIndex, EmployeeSalary oEmployeeSalary, List<EmployeeSalaryDetail> oEmployeeSalaryDetails, List<SalaryHead> oSalaryHeads, Company oCompany, int nColumnIndex, double nRowHeight, string Comp, bool isComp)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            #region Blank with Top/Left/Right Border
            sheet.Row(nRowIndex).Height = 5;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Company Name
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = (oCompany.NameInBangla != "") ? oCompany.NameInBangla : oCompany.Name;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region বেতন প্রদান রশিদ
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "বেতন প্রদান রশিদ";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Salary Date
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = oEmployeeSalary.StartDateInString + "-" + oEmployeeSalary.EndDateInString;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ইউনিট
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ইউনিট";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.LocationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কার্ড নং
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কার্ড নং";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeCode;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region নাম
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "নাম";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region পদবী
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "পদবী";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DesignationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region সেকশন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সেকশন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DepartmentName + "      গ্রেড:" + oEmployeeSalary.EmployeeTypeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কর্মদিবস
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কর্মদিবস";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = this.NumberFormat(oEmployeeSalary.TotalWorkingDay.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            TimeSpan diff = oEmployeeSalary.EndDate - oEmployeeSalary.StartDate;
            int nDays = diff.Days + 1;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট দিন : " + this.NumberFormat(nDays.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region উপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "উপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = (isComp) ? this.NumberFormat(oEmployeeSalary.CompTotalPresent.ToString()) : this.NumberFormat(oEmployeeSalary.TotalPresent.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট বন্ধের দিন : " + this.NumberFormat(oEmployeeSalary.TotalDayOff.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ছুটি
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ছুটি";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = this.NumberFormat((oEmployeeSalary.TotalUpLeave + oEmployeeSalary.TotalPLeave).ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট ছুটির দিন : " + this.NumberFormat(oEmployeeSalary.TotalHoliday.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region অনুপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "অনুপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.TotalAbsent.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region মোট বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "মোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.GrossAmount > 0 ? this.GetAmountInStr(oEmployeeSalary.GrossAmount, true, false) : "-");
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            double nAmount = 0; string sHeadName = "";
            List<EmployeeSalaryDetail> oTempEmployeeSalaryDetails = oEmployeeSalaryDetails.Where(x => x.EmployeeSalaryID == oEmployeeSalary.EmployeeSalaryID).ToList();

            #region Salary Head
            foreach (SalaryHead oItem in oSalaryHeads)
            {
                nAmount = (oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).Count() > 0) ? oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).FirstOrDefault().Amount : 0;
                if (!string.Equals(@oItem.Name.ToLower(), "n/a") && !string.Equals(@oItem.Name.Trim(), ""))
                {
                    sHeadName = ((!string.Equals(@oItem.NameInBangla.ToLower(), "n/a") && !string.Equals(@oItem.NameInBangla.Trim(), "")) ? @oItem.NameInBangla : @oItem.Name);
                }

                sheet.Row(nRowIndex).Height = nRowHeight;
                cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = sHeadName;
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                if (oItem.SalaryHeadType == EnumSalaryHeadType.Basic || oItem.SalaryHeadType == EnumSalaryHeadType.Basic)
                {
                    sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }
                else
                {
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = "";
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                    sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region সর্বমোট বেতন
            nAmount = oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Basic).Sum(x => x.Amount) +
                           oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Addition).Sum(x => x.Amount) -
                           oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Deduction).Sum(x => x.Amount);

            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সর্বমোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            //sheet.Row(nRowIndex).Height = 2;
            //sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            //cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            //cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            //nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            //sheet.Row(nRowIndex).Height = 2;
            //sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            //cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            //cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            //nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম হার
            if (Comp == "CompF6" && (oEmployeeSalary.OTRatePerHour > 0))
            {
                sheet.Row(nRowIndex).Height = nRowHeight;
                cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম হার";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
                cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.OTRatePerHour.ToString());
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region ওভারটাইম ঘন্টা
            if (Comp == "CompF6" && (oEmployeeSalary.OTHour > 0))
            {
                sheet.Row(nRowIndex).Height = nRowHeight;
                cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম ঘন্টা";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


                Double OTmin = oEmployeeSalary.OTHour * 60;
                sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
                cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = Global.MinInHourMin(Convert.ToInt32(OTmin));
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region ওভারটাইম চার্জ
            if (Comp == "CompF6" && (oEmployeeSalary.OverTimeAmount > 0))
            {
                sheet.Row(nRowIndex).Height = nRowHeight;
                cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম চার্জ";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
                cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(oEmployeeSalary.OverTimeAmount).Split('.')[0]);
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region প্রদেয় বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "প্রদেয় বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat((isComp) ? oEmployeeSalary.CompOverTimeAmount : oEmployeeSalary.OverTimeAmount + nAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 20;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Under Line
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region স্বাক্ষর
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "শ্রমিকের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "কর্তৃপক্ষের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 5;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            return nRowIndex;
        }


        #region EmployeePaySlip With Double Table


        public void ViewEmployeePaySlipDoubleTable(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroupByDept, string sGroupIDs, string sBlockIDs, double ts, int PC, bool IsBank, bool IsCash)
        {
            //var oEmployeeSalary = this.GetEmployeePaySlip(sEmpIDs, sDate, nLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, nMonthID);
            //return PartialView(oEmployeeSalary);

            //EmployeeSalary oEmployeeSalary = this.GetEmployeePaySlip(sEmpIDs, sDate, nLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, nMonthID, bNewJoin, nBlock);
            EmployeeSalary oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false, sGroupIDs, sBlockIDs, "");

            var oCompany = new Company();
            oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            oEmployeeSalary.Company = oCompany;
            oEmployeeSalary.IsBank = IsBank;
            oEmployeeSalary.IsCash = IsCash;
            this.PrintPaySlipDoubleTableXL(oEmployeeSalary, PC, false);

        }


        public void ViewEmployeePaySlipDoubleTable_1(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroupByDept, bool bGroupBySerial, string sGroupIDs, string sBlockIDs, double ts, int PC)
        {
            //var oEmployeeSalary = this.GetEmployeePaySlip(sEmpIDs, sDate, nLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, nMonthID);
            //return PartialView(oEmployeeSalary);

            //EmployeeSalary oEmployeeSalary = this.GetEmployeePaySlip(sEmpIDs, sDate, nLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, nMonthID, bNewJoin, nBlock);
            EmployeeSalary oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false, sGroupIDs, sBlockIDs, "");

            var oCompany = new Company();
            oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            oEmployeeSalary.Company = oCompany;

            this.PrintPaySlipDoubleTableXL_1(oEmployeeSalary, PC, false, bGroupByDept, bGroupBySerial);

        }


        private void PrintPaySlipDoubleTableXL(EmployeeSalary oEmployeeSalary, int nPrintCount, bool isComp)
        {
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;
            int nRowIndex = 2, nEndCol = 17;
            double nRowHeight = 12;

            Company oCompany = new Company();
            List<SalaryHead> oSalaryHeads = new List<SalaryHead>();
            List<EmployeeSalary> oEmployeeSalarys = new List<EmployeeSalary>();
            List<EmployeeSalaryDetail> oEmployeeSalaryDetails = new List<EmployeeSalaryDetail>();

            oCompany = oEmployeeSalary.Company;
            oSalaryHeads = oEmployeeSalary.SalaryHeads;
            oEmployeeSalarys = oEmployeeSalary.EmployeeSalarys;
            oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalaryDetails;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Pay Slip");
                sheet.PrinterSettings.TopMargin = 0.2M;
                sheet.PrinterSettings.LeftMargin = 0.2M;
                sheet.PrinterSettings.BottomMargin = 0.2M;
                sheet.PrinterSettings.RightMargin = 0.2M;
                sheet.PrinterSettings.Orientation = eOrientation.Portrait;
                sheet.PrinterSettings.PaperSize = ePaperSize.A4;
                sheet.Name = "Pay Slip";

                #region Column Declare
                sheet.Column(1).Width = 3;//Extra
                sheet.Column(2).Width = 2; //Blank
                sheet.Column(3).Width = 10;//Caption
                sheet.Column(4).Width = 2; //:
                sheet.Column(5).Width = 10;//Basic Salary
                sheet.Column(6).Width = 10;//Other Salary
                sheet.Column(7).Width = 10;//Net Salary
                sheet.Column(8).Width = 2;//Blank

                sheet.Column(9).Width = 4; //Middle Blank

                sheet.Column(10).Width = 2; //Blank
                sheet.Column(11).Width = 10;//Caption
                sheet.Column(12).Width = 2; //:
                sheet.Column(13).Width = 10;//Basic Salary
                sheet.Column(14).Width = 10;//Other Salary
                sheet.Column(15).Width = 10;//Net Salary
                sheet.Column(16).Width = 2;//Blank
                sheet.Column(17).Width = 3;//Extra
                #endregion

                if (oEmployeeSalarys != null)
                {
                    int nLeftSideRowIndex = 0, nRightSideRowIndex = 0, nTempPrintCount = 0;
                    for (int i = 0; i < oEmployeeSalarys.Count; i = i + 1)
                    {
                        nTempPrintCount = nTempPrintCount + 2;
                        //if (i <= (oEmployeeSalarys.Count - 1))
                        //{
                        oEmployeeSalarys[i].IsBank = oEmployeeSalary.IsBank;
                        oEmployeeSalarys[i].IsCash = oEmployeeSalary.IsCash;
                        nLeftSideRowIndex = this.FillSalaraySlip(sheet, nRowIndex, oEmployeeSalarys[i], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 2, nRowHeight, "OC", new List<BusinessUnit>(), isComp);
                        //}

                        //if ((i + 1) <= (oEmployeeSalarys.Count - 1))
                        //{
                        nRightSideRowIndex = this.FillSalaraySlip(sheet, nRowIndex, oEmployeeSalarys[i], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 10, nRowHeight, "EC", new List<BusinessUnit>(), isComp);
                        //}

                        nRowIndex = nLeftSideRowIndex;
                        if (nRightSideRowIndex > nLeftSideRowIndex)
                        {
                            nRowIndex = nRightSideRowIndex;
                        }

                        #region Blank
                        sheet.Row(nRowIndex).Height = 20;
                        sheet.Cells[nRowIndex, 2, nRowIndex, 16].Merge = true;
                        cell = sheet.Cells[nRowIndex, 2]; cell.Value = "";
                        cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.None;
                        if (nTempPrintCount >= nPrintCount)
                        {
                            sheet.Row(nRowIndex).PageBreak = true;
                            nTempPrintCount = 0;
                        }
                        nRowIndex = nRowIndex + 1;
                        #endregion
                    }
                }
                cell = sheet.Cells[1, 1, nRowIndex, nEndCol];
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=PaySlip.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        private void PrintPaySlipDoubleTableXL_1(EmployeeSalary oEmployeeSalary, int nPrintCount, bool isComp, bool _bGroupByDept, bool _bGroupBySerial)
        {
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;
            int nRowIndex = 2, nEndCol = 17;
            double nRowHeight = 12;

            Company oCompany = new Company();
            List<SalaryHead> oSalaryHeads = new List<SalaryHead>();
            List<EmployeeSalary> oEmployeeSalarys = new List<EmployeeSalary>();
            List<EmployeeSalaryDetail> oEmployeeSalaryDetails = new List<EmployeeSalaryDetail>();

            oCompany = oEmployeeSalary.Company;
            oSalaryHeads = oEmployeeSalary.SalaryHeads;
            oEmployeeSalarys = oEmployeeSalary.EmployeeSalarys.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeSalaryID).ToList();
            oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalaryDetails;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Pay Slip");
                sheet.PrinterSettings.TopMargin = 0.2M;
                sheet.PrinterSettings.LeftMargin = 0.2M;
                sheet.PrinterSettings.BottomMargin = 0.2M;
                sheet.PrinterSettings.RightMargin = 0.2M;
                sheet.PrinterSettings.Orientation = eOrientation.Portrait;
                sheet.PrinterSettings.PaperSize = ePaperSize.A4;
                sheet.Name = "Pay Slip";

                #region Column Declare
                sheet.Column(1).Width = 3;//Extra
                sheet.Column(2).Width = 2; //Blank
                sheet.Column(3).Width = 10;//Caption
                sheet.Column(4).Width = 2; //:
                sheet.Column(5).Width = 10;//Basic Salary
                sheet.Column(6).Width = 10;//Other Salary
                sheet.Column(7).Width = 10;//Net Salary
                sheet.Column(8).Width = 2;//Blank

                sheet.Column(9).Width = 4; //Middle Blank

                sheet.Column(10).Width = 2; //Blank
                sheet.Column(11).Width = 10;//Caption
                sheet.Column(12).Width = 2; //:
                sheet.Column(13).Width = 10;//Basic Salary
                sheet.Column(14).Width = 10;//Other Salary
                sheet.Column(15).Width = 10;//Net Salary
                sheet.Column(16).Width = 2;//Blank
                sheet.Column(17).Width = 3;//Extra
                #endregion

                if (oEmployeeSalarys != null)
                {
                    int nSerial = 0;
                    while (oEmployeeSalarys.Count > 0)
                    {
                        var oResults = new List<EmployeeSalary>();
                        if (_bGroupByDept && _bGroupBySerial)
                        {
                            oResults = oEmployeeSalarys.Where(x => x.LocationID == oEmployeeSalarys[0].LocationID && x.DepartmentID == oEmployeeSalarys[0].DepartmentID).OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeCode).ToList();
                        }
                        else if (_bGroupByDept && (_bGroupBySerial == false))
                        {
                            oResults = oEmployeeSalarys.Where(x => x.LocationID == oEmployeeSalarys[0].LocationID && x.DepartmentID == oEmployeeSalarys[0].DepartmentID).OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeCode).ToList();
                        }
                        else
                        {
                            oResults = oEmployeeSalarys.Where(x => x.LocationID == oEmployeeSalarys[0].LocationID).OrderBy(x => x.LocationName).ThenBy(x => x.EmployeeCode).ToList();
                        }

                        if (_bGroupBySerial)
                        {
                            nSerial = 0;
                        }
                        int nLeftSideRowIndex = 0, nRightSideRowIndex = 0, nTempPrintCount = 0;
                        for (int i = 0; i < oResults.Count; i = i + 1)
                        {
                            nSerial += 1;
                            nTempPrintCount = nTempPrintCount + 2;
                            //if (i <= (oEmployeeSalarys.Count - 1))
                            //{
                            nLeftSideRowIndex = this.FillSalaraySlip_1(sheet, nRowIndex, oResults[i], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 2, nRowHeight, "OC", new List<BusinessUnit>(), isComp, _bGroupBySerial, nSerial);
                            //}

                            //if ((i + 1) <= (oEmployeeSalarys.Count - 1))
                            //{
                            nRightSideRowIndex = this.FillSalaraySlip_1(sheet, nRowIndex, oResults[i], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 10, nRowHeight, "EC", new List<BusinessUnit>(), isComp, _bGroupBySerial, nSerial);
                            //}

                            nRowIndex = nLeftSideRowIndex;
                            if (nRightSideRowIndex > nLeftSideRowIndex)
                            {
                                nRowIndex = nRightSideRowIndex;
                            }

                            #region Blank
                            sheet.Row(nRowIndex).Height = 20;
                            sheet.Cells[nRowIndex, 2, nRowIndex, 16].Merge = true;
                            cell = sheet.Cells[nRowIndex, 2]; cell.Value = "";
                            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.None;
                            if (nTempPrintCount >= nPrintCount)
                            {
                                sheet.Row(nRowIndex).PageBreak = true;
                                nTempPrintCount = 0;
                            }
                            nRowIndex = nRowIndex + 1;
                            #endregion
                        }

                        if (_bGroupByDept)
                            oEmployeeSalarys.RemoveAll(x => x.LocationID == oResults[0].LocationID && x.DepartmentID == oResults[0].DepartmentID);
                        else
                            oEmployeeSalarys.RemoveAll(x => x.LocationID == oResults[0].LocationID);

                    }

                }
                cell = sheet.Cells[1, 1, nRowIndex, nEndCol];
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=PaySlip.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        public void ViewEmployeePaySlipDoubleTable_Comp(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroupByDept, string sGroupIDs, string sBlockIDs, bool IsMatchExact, double ts, int PC)
        {
            //EmployeeSalary oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false,sGroupIDs, sBlockIDs);

            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, true, sGroupIDs, sBlockIDs, IsMatchExact);


            //oEmployeeSalary.EmployeeSalarys.ForEach(x =>// for comp.
            //{
            //    x.OTHour = x.CompOTHour;
            //    x.OTRatePerHour = Math.Round(x.CompOTRatePerHour, 2);
            //    x.NetAmount = Math.Round(x.CompNetAmount, 2);
            //    x.GrossAmount = Math.Round(x.CompGrossAmount, 2);
            //    x.TotalHoliday = x.CompTotalHoliday;
            //    x.TotalAbsent = x.CompTotalAbsent;
            //    x.TotalDayOff = x.CompTotalDayOff;
            //    x.TotalLate = x.CompTotalLate;
            //    x.TotalEarlyLeaving = x.CompTotalEarlyLeave;
            //    x.TotalPLeave = x.CompTotalLeave;
            //    x.TotalUpLeave = 0;

            //});
            //oEmployeeSalary.EmployeeSalaryDetails.ForEach(x =>
            //{
            //    x.Amount = x.CompAmount;
            //});


            var oCompany = new Company();
            oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            oEmployeeSalary.Company = oCompany;

            this.PrintPaySlipDoubleTableXL_Comp(oEmployeeSalary, PC, true);

        }


        public void ViewEmployeePaySlipDoubleTable_Comp_1(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroupByDept, bool bGroupBySerial, string sGroupIDs, string sBlockIDs, bool IsMatchExact, double ts, int PC)
        {
            //EmployeeSalary oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false,sGroupIDs, sBlockIDs);

            EmployeeSalary oEmployeeSalary = new EmployeeSalary();
            oEmployeeSalary = GetEmployeesSalaryFromSalarySheet(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, true, sGroupIDs, sBlockIDs, IsMatchExact);


            //oEmployeeSalary.EmployeeSalarys.ForEach(x =>// for comp.
            //{
            //    x.OTHour = x.CompOTHour;
            //    x.OTRatePerHour = Math.Round(x.CompOTRatePerHour, 2);
            //    x.NetAmount = Math.Round(x.CompNetAmount, 2);
            //    x.GrossAmount = Math.Round(x.CompGrossAmount, 2);
            //    x.TotalHoliday = x.CompTotalHoliday;
            //    x.TotalAbsent = x.CompTotalAbsent;
            //    x.TotalDayOff = x.CompTotalDayOff;
            //    x.TotalLate = x.CompTotalLate;
            //    x.TotalEarlyLeaving = x.CompTotalEarlyLeave;
            //    x.TotalPLeave = x.CompTotalLeave;
            //    x.TotalUpLeave = 0;

            //});
            //oEmployeeSalary.EmployeeSalaryDetails.ForEach(x =>
            //{
            //    x.Amount = x.CompAmount;
            //});


            var oCompany = new Company();
            oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            oEmployeeSalary.Company = oCompany;

            this.PrintPaySlipDoubleTableXL_Comp_1(oEmployeeSalary, PC, true, bGroupByDept, bGroupBySerial);

        }

        private void PrintPaySlipDoubleTableXL_Comp(EmployeeSalary oEmployeeSalary, int nPrintCount, bool isComp)
        {

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;
            int nRowIndex = 2, nEndCol = 17;
            double nRowHeight = 12;

            Company oCompany = new Company();
            List<SalaryHead> oSalaryHeads = new List<SalaryHead>();
            List<RPTSalarySheet> oEmployeeSalarys = new List<RPTSalarySheet>();
            List<RPTSalarySheetDetail> oEmployeeSalaryDetails = new List<RPTSalarySheetDetail>();

            oCompany = oEmployeeSalary.Company;
            oSalaryHeads = oEmployeeSalary.SalaryHeads;
            oEmployeeSalarys = oEmployeeSalary.EmployeeSalarySheets;
            oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalarySheetDetails;

            oEmployeeSalarys = oEmployeeSalarys.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeCode).ToList();

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Pay Slip");
                sheet.PrinterSettings.TopMargin = 0.2M;
                sheet.PrinterSettings.LeftMargin = 0.2M;
                sheet.PrinterSettings.BottomMargin = 0.2M;
                sheet.PrinterSettings.RightMargin = 0.2M;
                sheet.PrinterSettings.Orientation = eOrientation.Portrait;
                sheet.PrinterSettings.PaperSize = ePaperSize.A4;
                sheet.Name = "Pay Slip";

                #region Column Declare
                sheet.Column(1).Width = 3;//Extra
                sheet.Column(2).Width = 2; //Blank
                sheet.Column(3).Width = 10;//Caption
                sheet.Column(4).Width = 2; //:
                sheet.Column(5).Width = 10;//Basic Salary
                sheet.Column(6).Width = 10;//Other Salary
                sheet.Column(7).Width = 10;//Net Salary
                sheet.Column(8).Width = 2;//Blank

                sheet.Column(9).Width = 4; //Middle Blank

                sheet.Column(10).Width = 2; //Blank
                sheet.Column(11).Width = 10;//Caption
                sheet.Column(12).Width = 2; //:
                sheet.Column(13).Width = 10;//Basic Salary
                sheet.Column(14).Width = 10;//Other Salary
                sheet.Column(15).Width = 10;//Net Salary
                sheet.Column(16).Width = 2;//Blank
                sheet.Column(17).Width = 3;//Extra
                #endregion

                if (oEmployeeSalarys != null)
                {
                    int nLeftSideRowIndex = 0, nRightSideRowIndex = 0, nTempPrintCount = 0;
                    for (int i = 0; i < oEmployeeSalarys.Count; i = i + 1)
                    {
                        nTempPrintCount = nTempPrintCount + 2;
                        //if (i <= (oEmployeeSalarys.Count - 1))
                        //{
                        nLeftSideRowIndex = this.FillSalaraySlipF5(sheet, nRowIndex, oEmployeeSalarys[i], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 2, nRowHeight, "OC", oBusinessUnits, isComp);
                        //}

                        //if ((i + 1) <= (oEmployeeSalarys.Count - 1))
                        //{
                        nRightSideRowIndex = this.FillSalaraySlipF5(sheet, nRowIndex, oEmployeeSalarys[i], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 10, nRowHeight, "EC", oBusinessUnits, isComp);
                        //}

                        nRowIndex = nLeftSideRowIndex;
                        if (nRightSideRowIndex > nLeftSideRowIndex)
                        {
                            nRowIndex = nRightSideRowIndex;
                        }

                        #region Blank
                        sheet.Row(nRowIndex).Height = 20;
                        sheet.Cells[nRowIndex, 2, nRowIndex, 16].Merge = true;
                        cell = sheet.Cells[nRowIndex, 2]; cell.Value = "";
                        cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.None;
                        if (nTempPrintCount >= nPrintCount)
                        {
                            sheet.Row(nRowIndex).PageBreak = true;
                            nTempPrintCount = 0;
                        }
                        nRowIndex = nRowIndex + 1;
                        #endregion
                    }
                }
                cell = sheet.Cells[1, 1, nRowIndex, nEndCol];
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=PaySlip.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        private void PrintPaySlipDoubleTableXL_Comp_1(EmployeeSalary oEmployeeSalary, int nPrintCount, bool isComp, bool _bGroupByDept, bool _bGroupBySerial)
        {

            List<BusinessUnit> oBusinessUnits = new List<BusinessUnit>();
            string BUIDs = string.Join(",", oEmployeeSalary.EmployeeSalarySheets.Select(p => p.BusinessUnitID).Distinct().ToList());
            if (BUIDs != "") { oBusinessUnits = BusinessUnit.Gets("SELECT * FROM View_BusinessUnit WHERE BusinessUnitID IN(" + BUIDs + ")", ((User)(Session[SessionInfo.CurrentUser])).UserID); }


            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;
            int nRowIndex = 2, nEndCol = 17;
            double nRowHeight = 12;

            Company oCompany = new Company();
            List<SalaryHead> oSalaryHeads = new List<SalaryHead>();
            List<RPTSalarySheet> oEmployeeSalarys = new List<RPTSalarySheet>();
            List<RPTSalarySheetDetail> oEmployeeSalaryDetails = new List<RPTSalarySheetDetail>();

            oCompany = oEmployeeSalary.Company;
            oSalaryHeads = oEmployeeSalary.SalaryHeads;
            oEmployeeSalarys = oEmployeeSalary.EmployeeSalarySheets.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeSalaryID).ToList();
            oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalarySheetDetails;

            oEmployeeSalarys = oEmployeeSalarys.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeCode).ToList();

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Pay Slip");
                sheet.PrinterSettings.TopMargin = 0.2M;
                sheet.PrinterSettings.LeftMargin = 0.2M;
                sheet.PrinterSettings.BottomMargin = 0.2M;
                sheet.PrinterSettings.RightMargin = 0.2M;
                sheet.PrinterSettings.Orientation = eOrientation.Portrait;
                sheet.PrinterSettings.PaperSize = ePaperSize.A4;
                sheet.Name = "Pay Slip";

                #region Column Declare
                sheet.Column(1).Width = 3;//Extra
                sheet.Column(2).Width = 2; //Blank
                sheet.Column(3).Width = 10;//Caption
                sheet.Column(4).Width = 2; //:
                sheet.Column(5).Width = 10;//Basic Salary
                sheet.Column(6).Width = 10;//Other Salary
                sheet.Column(7).Width = 10;//Net Salary
                sheet.Column(8).Width = 2;//Blank

                sheet.Column(9).Width = 4; //Middle Blank

                sheet.Column(10).Width = 2; //Blank
                sheet.Column(11).Width = 10;//Caption
                sheet.Column(12).Width = 2; //:
                sheet.Column(13).Width = 10;//Basic Salary
                sheet.Column(14).Width = 10;//Other Salary
                sheet.Column(15).Width = 10;//Net Salary
                sheet.Column(16).Width = 2;//Blank
                sheet.Column(17).Width = 3;//Extra
                #endregion

                if (oEmployeeSalarys != null)
                {
                    int nSerial = 0;
                    while (oEmployeeSalarys.Count > 0)
                    {
                        var oResults = new List<RPTSalarySheet>();
                        if (_bGroupByDept && _bGroupBySerial)
                        {
                            oResults = oEmployeeSalarys.Where(x => x.LocationID == oEmployeeSalarys[0].LocationID && x.DepartmentID == oEmployeeSalarys[0].DepartmentID).OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeCode).ToList();
                        }
                        else if (_bGroupByDept && (_bGroupBySerial == false))
                        {
                            oResults = oEmployeeSalarys.Where(x => x.LocationID == oEmployeeSalarys[0].LocationID && x.DepartmentID == oEmployeeSalarys[0].DepartmentID).OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeCode).ToList();
                        }
                        else
                        {
                            oResults = oEmployeeSalarys.Where(x => x.LocationID == oEmployeeSalarys[0].LocationID).OrderBy(x => x.LocationName).ThenBy(x => x.EmployeeCode).ToList();
                        }

                        if (_bGroupBySerial)
                        {
                            nSerial = 0;
                        }
                        int nLeftSideRowIndex = 0, nRightSideRowIndex = 0, nTempPrintCount = 0;
                        for (int i = 0; i < oResults.Count; i = i + 1)
                        {
                            nSerial += 1;
                            nTempPrintCount = nTempPrintCount + 2;
                            //if (i <= (oEmployeeSalarys.Count - 1))
                            //{
                            nLeftSideRowIndex = this.FillSalaraySlipF5_1(sheet, nRowIndex, oResults[i], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 2, nRowHeight, "OC", new List<BusinessUnit>(), isComp, _bGroupBySerial, nSerial);
                            //}

                            //if ((i + 1) <= (oEmployeeSalarys.Count - 1))
                            //{
                            nRightSideRowIndex = this.FillSalaraySlipF5_1(sheet, nRowIndex, oResults[i], oEmployeeSalaryDetails, oSalaryHeads, oCompany, 10, nRowHeight, "EC", new List<BusinessUnit>(), isComp, _bGroupBySerial, nSerial);
                            //}

                            nRowIndex = nLeftSideRowIndex;
                            if (nRightSideRowIndex > nLeftSideRowIndex)
                            {
                                nRowIndex = nRightSideRowIndex;
                            }

                            #region Blank
                            sheet.Row(nRowIndex).Height = 20;
                            sheet.Cells[nRowIndex, 2, nRowIndex, 16].Merge = true;
                            cell = sheet.Cells[nRowIndex, 2]; cell.Value = "";
                            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.None;
                            if (nTempPrintCount >= nPrintCount)
                            {
                                sheet.Row(nRowIndex).PageBreak = true;
                                nTempPrintCount = 0;
                            }
                            nRowIndex = nRowIndex + 1;
                            #endregion
                        }

                        if (_bGroupByDept)
                            oEmployeeSalarys.RemoveAll(x => x.LocationID == oResults[0].LocationID && x.DepartmentID == oResults[0].DepartmentID);
                        else
                            oEmployeeSalarys.RemoveAll(x => x.LocationID == oResults[0].LocationID);

                    }
                }

                cell = sheet.Cells[1, 1, nRowIndex, nEndCol];
                fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid;
                fill.BackgroundColor.SetColor(Color.White);

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=PaySlip.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        private int FillSalaraySlipF5(OfficeOpenXml.ExcelWorksheet sheet, int nRowIndex, RPTSalarySheet oEmployeeSalary, List<RPTSalarySheetDetail> oEmployeeSalaryDetails, List<SalaryHead> oSalaryHeads, Company oCompany, int nColumnIndex, double nRowHeight, string OCEC, List<BusinessUnit> oBusinessUnits, bool isComp)
        {


            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            #region Blank with Top/Left/Right Border
            sheet.Row(nRowIndex).Height = 5;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Company Name
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = oBusinessUnits.Count == 1 ? ((oBusinessUnits[0].NameInBangla != "") ? oBusinessUnits[0].NameInBangla : oBusinessUnits[0].Name) : ((oCompany.NameInBangla != "") ? oCompany.NameInBangla : oCompany.Name); //(oCompany.NameInBangla != "") ? oCompany.NameInBangla : oCompany.Name;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region বেতন প্রদান রশিদ
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "বেতন প্রদান রশিদ";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Salary Date
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = oEmployeeSalary.StartDateInString + "-" + oEmployeeSalary.EndDateInString;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region OfficeCopyEmployeeCopy
            if (!string.IsNullOrEmpty(OCEC))
            {
                sheet.Row(nRowIndex).Height = nRowHeight;
                sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
                cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = (OCEC == "OC" ? "Office Copy" : "Employee Copy");
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ইউনিট
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ইউনিট";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.LocationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কার্ড নং
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কার্ড নং";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeCode;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region নাম
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "নাম";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region পদবী
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "পদবী";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DesignationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region সেকশন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সেকশন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DepartmentName + "      গ্রেড:" + oEmployeeSalary.EmployeeTypeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কর্মদিবস
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কর্মদিবস";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            double nAttTotal = 0;
            nAttTotal = oEmployeeSalary.Present + oEmployeeSalary.TotalAbsent + oEmployeeSalary.TotalDOff + oEmployeeSalary.TotalHoliday + ((isComp == false) ? (oEmployeeSalary.TotalPLeave + oEmployeeSalary.TotalUpLeave) : oEmployeeSalary.TotalLeave);
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = this.NumberFormat(nAttTotal.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            TimeSpan diff = oEmployeeSalary.EndDate - oEmployeeSalary.StartDate;
            int nDays = diff.Days + 1;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট দিন : " + this.NumberFormat(nDays.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region উপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "উপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = this.NumberFormat(oEmployeeSalary.Present.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট বন্ধের দিন : " + this.NumberFormat(oEmployeeSalary.TotalDOff.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ছুটি
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ছুটি";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = this.NumberFormat((oEmployeeSalary.TotalLeave).ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট ছুটির দিন : " + this.NumberFormat(oEmployeeSalary.TotalHoliday.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region অনুপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "অনুপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.TotalAbsent.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region মোট বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "মোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.GrossAmount > 0 ? this.GetAmountInStr(oEmployeeSalary.GrossAmount, true, false) : "-");
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            double nAmount = 0; string sHeadName = "";
            List<RPTSalarySheetDetail> oTempEmployeeSalaryDetails = oEmployeeSalaryDetails.Where(x => x.EmployeeSalaryID == oEmployeeSalary.EmployeeSalaryID).ToList();

            #region Salary Head
            foreach (SalaryHead oItem in oSalaryHeads)
            {
                nAmount = (oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).Count() > 0) ? oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).FirstOrDefault().Amount : 0;
                if (!string.Equals(@oItem.Name.ToLower(), "n/a") && !string.Equals(@oItem.Name.Trim(), ""))
                {
                    sHeadName = ((!string.Equals(@oItem.NameInBangla.ToLower(), "n/a") && !string.Equals(@oItem.NameInBangla.Trim(), "")) ? @oItem.NameInBangla : @oItem.Name);
                }

                sheet.Row(nRowIndex).Height = nRowHeight;
                cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = sHeadName; cell.Style.Font.SetFromFont(new Font("SutonnyMJ", 15));
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                if (oItem.SalaryHeadType == EnumSalaryHeadType.Basic || oItem.SalaryHeadType == EnumSalaryHeadType.Basic)
                {
                    sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }
                else
                {
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = "";
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                    sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region সর্বমোট বেতন
            //nAmount = oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Basic).Sum(x => x.Amount) +
            //               oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Addition).Sum(x => x.Amount) -
            //               oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Deduction).Sum(x => x.Amount);
            nAmount = oEmployeeSalary.NetAmount;
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সর্বমোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount - oEmployeeSalary.OTAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম হার
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম হার";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.OTRatePerHour.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম ঘন্টা
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম ঘন্টা";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            Double OTmin = oEmployeeSalary.OTHour * 60;
            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(Global.MinInHourMin(Convert.ToInt32(OTmin)));
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম চার্জ
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম চার্জ";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(oEmployeeSalary.OTAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region প্রদেয় বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "প্রদেয় বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(Math.Round(nAmount).ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 20;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Under Line
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region স্বাক্ষর
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "শ্রমিকের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "কর্তৃপক্ষের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 5;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            return nRowIndex;
        }


        private int FillSalaraySlipF5_1(OfficeOpenXml.ExcelWorksheet sheet, int nRowIndex, RPTSalarySheet oEmployeeSalary, List<RPTSalarySheetDetail> oEmployeeSalaryDetails, List<SalaryHead> oSalaryHeads, Company oCompany, int nColumnIndex, double nRowHeight, string OCEC, List<BusinessUnit> oBusinessUnits, bool isComp, bool bGroupBySerial, int nSerial)
        {


            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            #region Blank with Top/Left/Right Border
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = nSerial.ToString();
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Company Name
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = oBusinessUnits.Count == 1 ? ((oBusinessUnits[0].NameInBangla != "") ? oBusinessUnits[0].NameInBangla : oBusinessUnits[0].Name) : ((oCompany.NameInBangla != "") ? oCompany.NameInBangla : oCompany.Name); //(oCompany.NameInBangla != "") ? oCompany.NameInBangla : oCompany.Name;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region বেতন প্রদান রশিদ
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "বেতন প্রদান রশিদ";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Salary Date
            sheet.Row(nRowIndex).Height = nRowHeight;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = oEmployeeSalary.StartDateInString + "-" + oEmployeeSalary.EndDateInString;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region OfficeCopyEmployeeCopy
            if (!string.IsNullOrEmpty(OCEC))
            {
                sheet.Row(nRowIndex).Height = nRowHeight;
                sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
                cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = (OCEC == "OC" ? "Office Copy" : "Employee Copy");
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ইউনিট
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ইউনিট";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.LocationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কার্ড নং
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কার্ড নং";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeCode;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region নাম
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "নাম";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.EmployeeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region পদবী
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "পদবী";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DesignationName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region সেকশন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সেকশন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = oEmployeeSalary.DepartmentName + "      গ্রেড:" + oEmployeeSalary.EmployeeTypeName;
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region কর্মদিবস
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "কর্মদিবস";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            double nAttTotal = 0;
            nAttTotal = oEmployeeSalary.Present + oEmployeeSalary.TotalAbsent + oEmployeeSalary.TotalDOff + oEmployeeSalary.TotalHoliday + ((isComp == false) ? (oEmployeeSalary.TotalPLeave + oEmployeeSalary.TotalUpLeave) : oEmployeeSalary.TotalLeave);
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = this.NumberFormat(nAttTotal.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            TimeSpan diff = oEmployeeSalary.EndDate - oEmployeeSalary.StartDate;
            int nDays = diff.Days + 1;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট দিন : " + this.NumberFormat(nDays.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region উপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "উপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = this.NumberFormat(oEmployeeSalary.Present.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট বন্ধের দিন : " + this.NumberFormat(oEmployeeSalary.TotalDOff.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ছুটি
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ছুটি";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)];
            cell.Value = this.NumberFormat((oEmployeeSalary.TotalLeave).ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 6)]; cell.Merge = true;
            cell.Value = "মোট ছুটির দিন : " + this.NumberFormat(oEmployeeSalary.TotalHoliday.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region অনুপস্থিত দিন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "অনুপস্থিত দিন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.TotalAbsent.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region মোট বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "মোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.GrossAmount > 0 ? this.GetAmountInStr(oEmployeeSalary.GrossAmount, true, false) : "-");
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            double nAmount = 0; string sHeadName = "";
            List<RPTSalarySheetDetail> oTempEmployeeSalaryDetails = oEmployeeSalaryDetails.Where(x => x.EmployeeSalaryID == oEmployeeSalary.EmployeeSalaryID).ToList();

            #region Salary Head
            foreach (SalaryHead oItem in oSalaryHeads)
            {
                nAmount = (oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).Count() > 0) ? oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadID == oItem.SalaryHeadID).FirstOrDefault().Amount : 0;
                if (!string.Equals(@oItem.Name.ToLower(), "n/a") && !string.Equals(@oItem.Name.Trim(), ""))
                {
                    sHeadName = ((!string.Equals(@oItem.NameInBangla.ToLower(), "n/a") && !string.Equals(@oItem.NameInBangla.Trim(), "")) ? @oItem.NameInBangla : @oItem.Name);
                }

                sheet.Row(nRowIndex).Height = nRowHeight;
                cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = sHeadName;
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                if (oItem.SalaryHeadType == EnumSalaryHeadType.Basic || oItem.SalaryHeadType == EnumSalaryHeadType.Basic)
                {
                    sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }
                else
                {
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 3)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount).Split('.')[0]);
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

                    sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
                    cell = sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)]; cell.Value = "";
                    cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
                    border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                }

                cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
                cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
                nRowIndex = nRowIndex + 1;
            }
            #endregion

            #region সর্বমোট বেতন
            //nAmount = oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Basic).Sum(x => x.Amount) +
            //               oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Addition).Sum(x => x.Amount) -
            //               oTempEmployeeSalaryDetails.Where(x => x.SalaryHeadType == (int)ESimSol.BusinessObjects.EnumSalaryHeadType.Deduction).Sum(x => x.Amount);
            nAmount = oEmployeeSalary.NetAmount;
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "সর্বমোট বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(nAmount - oEmployeeSalary.OTAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম হার
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম হার";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(oEmployeeSalary.OTRatePerHour.ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম ঘন্টা
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম ঘন্টা";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            Double OTmin = oEmployeeSalary.OTHour * 60;
            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(Global.MinInHourMin(Convert.ToInt32(OTmin)));
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region ওভারটাইম চার্জ
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "ওভারটাইম চার্জ";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(ICS.Core.Utility.Global.MillionFormat(oEmployeeSalary.OTAmount).Split('.')[0]);
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region প্রদেয় বেতন
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "প্রদেয় বেতন";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 2)]; cell.Value = ":";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 3), nRowIndex, (nColumnIndex + 5)]; cell.Value = this.NumberFormat(Math.Round(nAmount).ToString());
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; cell.Style.Numberformat.Format = "#,##0.00;(#,##0.00)";
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 20;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Under Line
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "_________________";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region স্বাক্ষর
            sheet.Row(nRowIndex).Height = nRowHeight;
            cell = sheet.Cells[nRowIndex, nColumnIndex]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = ExcelBorderStyle.Thin; border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            sheet.Cells[nRowIndex, (nColumnIndex + 1), nRowIndex, (nColumnIndex + 3)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 1)]; cell.Value = "শ্রমিকের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;


            sheet.Cells[nRowIndex, (nColumnIndex + 4), nRowIndex, (nColumnIndex + 5)].Merge = true;
            cell = sheet.Cells[nRowIndex, (nColumnIndex + 4)]; cell.Value = "কর্তৃপক্ষের স্বাক্ষর";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = false; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Right.Style = ExcelBorderStyle.Thin; border.Left.Style = border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Left Right Border
            sheet.Row(nRowIndex).Height = 5;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin; border.Top.Style = border.Bottom.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            #region Blank with Bottom/Left/Right Border
            sheet.Row(nRowIndex).Height = 2;
            sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)].Merge = true;
            cell = sheet.Cells[nRowIndex, nColumnIndex, nRowIndex, (nColumnIndex + 6)]; cell.Value = "";
            cell.Style.Font.Size = 8; cell.Style.Font.Bold = true; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Left.Style = border.Right.Style = border.Bottom.Style = ExcelBorderStyle.Thin; border.Top.Style = ExcelBorderStyle.None;
            nRowIndex = nRowIndex + 1;
            #endregion

            return nRowIndex;
        }

        #endregion

        #region SalarySheet_Corporate_XL
        public void SalarySheet_Corporate_XL(EmployeeSalary oEmployeeSalary, List<LeaveHead> oLeaveHeads, List<EmployeeLeaveOnAttendance> oELOnAttendances, List<PayrollProcessManagement> oPayrollProcessManagements, List<SalarySheetProperty> oSalarySheetPropertys, bool isCompliance)
        {

            bool bHasOTAllowance = oSalarySheetPropertys.Any(x => x.PropertyFor == 2 && x.SalarySheetFormatProperty == EnumSalarySheetFormatProperty.OTAllowance);

            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            double nTotalGrossPerDept = 0;
            double nTotalGross = 0;

            double nTotalAllowancePerDept = 0;
            double nTotalAllowance = 0;

            double nTotalDeductionPerDept = 0;
            double nTotalDeduction = 0;

            double nTotalNetSalaryPerDept = 0;
            double nTotalNetSalary = 0;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("SALARY SHEET");
                sheet.Name = "SALARY SHEET";

                sheet.Column(2).Width = 8; //SL
                sheet.Column(3).Width = 40; //EMPLOYEE
                sheet.Column(4).Width = 18; //SALARY POSITION
                sheet.Column(5).Width = 18; //ATTENDANCE STATUS
                sheet.Column(6).Width = 8; //LEAVE STATUS
                sheet.Column(7).Width = 40; //ALLOWANCE
                sheet.Column(8).Width = 18; //DEDUCTION
                sheet.Column(9).Width = 18; //NET SALARY
                sheet.Column(10).Width = 18; //SIGNATURE

                nMaxColumn = 11;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                #region Report Header
                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = "SALARY SHEET"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                string sStartDate = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[0]).ToString("dd MMM yyyy");
                string sEndDate = Convert.ToDateTime(oEmployeeSalary.ErrorMessage.Split(',')[1]).ToString("dd MMM yyyy");

                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = "From " + sStartDate + " To " + sEndDate; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = "Salary Month-" + (oPayrollProcessManagements.Count > 0 ? oPayrollProcessManagements[0].MonthIDInString : ""); cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 2;

                #endregion

                #region Table Body
                List<RPTSalarySheet> oEmployeeSalarys = new List<RPTSalarySheet>();
                List<Employee> oEmployees = new List<Employee>();
                List<RPTSalarySheetDetail> oEmployeeSalaryDetails = new List<RPTSalarySheetDetail>();

                oEmployeeSalarys = oEmployeeSalary.EmployeeSalarySheets;
                oEmployees = oEmployeeSalary.Employees;
                oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalarySheetDetails;

                int nSL = 0;
                oEmployeeSalarys = oEmployeeSalarys.OrderBy(x => x.LocationName).ThenBy(x => x.DepartmentName).ThenBy(x => x.EmployeeCode).ToList();
                while (oEmployeeSalarys.Count > 0)
                {
                    List<RPTSalarySheet> oTempEmployeeSalarys = new List<RPTSalarySheet>();
                    oTempEmployeeSalarys = oEmployeeSalarys.Where(x => x.LocationName == oEmployeeSalarys[0].LocationName).ToList();
                    string sLocationName = oTempEmployeeSalarys.Count > 0 ? oTempEmployeeSalarys[0].LocationName : "";
                    while (oTempEmployeeSalarys.Count > 0)
                    {

                        sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                        cell = sheet.Cells[rowIndex, 2]; cell.Value = "Unit:" + sLocationName + "   ||   " + "Department:" + oTempEmployeeSalarys[0].DepartmentName; cell.Style.Font.Bold = true;
                        cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                        rowIndex = rowIndex + 1;


                        SalarySheet_Corporate_XL_Header(ref sheet, ref cell, ref rowIndex, ref colIndex);

                        List<RPTSalarySheet> oTempEmpSs = new List<RPTSalarySheet>();
                        oTempEmpSs = oTempEmployeeSalarys.Where(x => x.DepartmentName == oTempEmployeeSalarys[0].DepartmentName).ToList();

                        foreach (RPTSalarySheet oEmpSalaryItem in oTempEmpSs)
                        {
                            foreach (Employee OEmpItem in oEmployees)
                            {
                                if (OEmpItem.EmployeeID == oEmpSalaryItem.EmployeeID)
                                {
                                    nSL++;
                                    colIndex = 2;
                                    //SL
                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nSL; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //EMPLOYEE
                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Style.Font.Bold = false;
                                    cell.Value = "Card No : " + OEmpItem.Code + "\r\n"
                                                + "Name : " + OEmpItem.Name + "\r\n"
                                                + "Designation : " + OEmpItem.DesignationName + "\r\n"
                                                + "Date Of Join : " + OEmpItem.DateOfJoinInString + "\r\n"
                                                + "Employee Type : " + OEmpItem.EmployeeTypeName + "\r\n"
                                                + "Gender : " + OEmpItem.Gender + "\r\n"
                                                ;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //SALARY POSITION
                                    string sValue = "";
                                    foreach (RPTSalarySheetDetail oESDItem in oEmployeeSalaryDetails)
                                    {
                                        if (oESDItem.SalaryHeadType == 1 && oESDItem.EmployeeSalaryID == oEmpSalaryItem.EmployeeSalaryID)
                                        {
                                            sValue = sValue + oESDItem.SalaryHeadName + " : " + (oESDItem.Amount > 0 ? this.GetAmountInStr(oESDItem.Amount, true, false) : "-") + "\r\n";
                                        }
                                    }

                                    sValue = sValue + "Gross Salary : " + (oEmpSalaryItem.GrossAmount > 0 ? this.GetAmountInStr(oEmpSalaryItem.GrossAmount, true, false) : "-");
                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //ATTENDANCE STATUS
                                    double nAttTotal = 0;
                                    nAttTotal = oEmpSalaryItem.Present + oEmpSalaryItem.TotalAbsent + oEmpSalaryItem.TotalDayOff + ((isCompliance == false) ? (oEmpSalaryItem.TotalPLeave + oEmpSalaryItem.TotalUpLeave) : oEmpSalaryItem.TotalLeave);
                                    sValue = "";
                                    sValue = "Present : " + oEmpSalaryItem.Present + "\r\nAbsent : " + oEmpSalaryItem.TotalAbsent + "\r\nOff day : " + oEmpSalaryItem.TotalDOff + "\r\nLeave : "
                                        + ((isCompliance == false) ? (oEmpSalaryItem.TotalPLeave + oEmpSalaryItem.TotalUpLeave) : oEmpSalaryItem.TotalLeave) + "\r\nHoliday: " + oEmpSalaryItem.TotalHoliday + "\r\nTotal=" + nAttTotal;

                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //LEAVE STATUS
                                    string Status = "";
                                    List<EmployeeLeaveOnAttendance> oELOnAtts = new List<EmployeeLeaveOnAttendance>();
                                    oELOnAtts = oELOnAttendances.Where(x => x.EmployeeID == OEmpItem.EmployeeID).ToList();
                                    foreach (LeaveHead oLeaveHead in oLeaveHeads)
                                    {
                                        sValue = "";
                                        if ((oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).Any())) { sValue = oELOnAtts.Where(x => x.LeaveHeadID == oLeaveHead.LeaveHeadID).FirstOrDefault().LeaveDays.ToString(); }
                                        Status += oLeaveHead.ShortName + "-" + sValue + ", ";
                                    }
                                    if (!string.IsNullOrEmpty(Status)) { Status = Status.Remove(Status.Length - 2); };
                                    sValue = "";
                                    sValue = Status;

                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    //ALLOWANCE
                                    sValue = "";
                                    foreach (RPTSalarySheetDetail oESDItem in oEmployeeSalaryDetails)
                                    {
                                        if (oESDItem.SalaryHeadType == 2 && oESDItem.EmployeeSalaryID == oEmpSalaryItem.EmployeeSalaryID)
                                        {
                                            sValue = sValue + oESDItem.SalaryHeadName + " : " + (oESDItem.Amount > 0 ? this.GetAmountInStr(oESDItem.Amount, true, false) : "-") + "\r\n";
                                            nTotalAllowancePerDept += oESDItem.Amount;
                                            nTotalAllowance += oESDItem.Amount;
                                        }
                                    }
                                    if (bHasOTAllowance)
                                    {
                                        sValue = sValue + "OT Rate : " + (oEmpSalaryItem.OTRatePerHour > 0 ? this.GetAmountInStr(oEmpSalaryItem.OTRatePerHour, true, false) : "-") + "\r\n";
                                        sValue = sValue + "OT Hr. : " + (oEmpSalaryItem.OTHour > 0 ? this.GetAmountInStr(oEmpSalaryItem.OTHour, true, false) : "-") + "\r\n";
                                        sValue = sValue + "OT All. : " + (oEmpSalaryItem.OTHour * oEmpSalaryItem.OTRatePerHour > 0 ? this.GetAmountInStr(oEmpSalaryItem.OTHour * oEmpSalaryItem.OTRatePerHour, true, false) : "-");

                                        nTotalAllowancePerDept += oEmpSalaryItem.OTHour * oEmpSalaryItem.OTRatePerHour;
                                        nTotalAllowance += oEmpSalaryItem.OTHour * oEmpSalaryItem.OTRatePerHour;

                                    }
                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                                    //DEDUCTION
                                    sValue = "";
                                    foreach (RPTSalarySheetDetail oESDItem in oEmployeeSalaryDetails)
                                    {
                                        if (oESDItem.SalaryHeadType == 3 && oESDItem.EmployeeSalaryID == oEmpSalaryItem.EmployeeSalaryID)
                                        {
                                            sValue = sValue + oESDItem.SalaryHeadName + " : " + (oESDItem.Amount > 0 ? this.GetAmountInStr(oESDItem.Amount, true, false) : "-") + "\r\n";
                                            nTotalDeductionPerDept += oESDItem.Amount;
                                            nTotalDeduction += oESDItem.Amount;
                                        }
                                    }

                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sValue; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    oEmpSalaryItem.NetAmount += (bHasOTAllowance) ? 0 : -(oEmpSalaryItem.OTHour * oEmpSalaryItem.OTRatePerHour);
                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oEmpSalaryItem.NetAmount > 0 ? this.GetAmountInStr(oEmpSalaryItem.NetAmount, true, false) : "-"; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                                    rowIndex++;

                                    nTotalGrossPerDept = nTotalGrossPerDept + oEmpSalaryItem.GrossAmount;
                                    nTotalGross = nTotalGross + oEmpSalaryItem.GrossAmount;
                                    nTotalNetSalaryPerDept = nTotalNetSalaryPerDept + oEmpSalaryItem.NetAmount;
                                    nTotalNetSalary = nTotalNetSalary + oEmpSalaryItem.NetAmount;

                                }
                            }
                        }

                        //#region Total
                        ////SL//EMPLOYEE
                        //cell = sheet.Cells[rowIndex, colIndex,rowIndex, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "TOTAL"; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        ////SALARY POSITION
                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalAllowancePerDept > 0 ? this.GetAmountInStr(nTotalAllowancePerDept, true, false) : "-"; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        ////ATTENDANCE STATUS

                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        ////LEAVE STATUS

                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        ////ALLOWANCE
                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalAllowancePerDept > 0 ? this.GetAmountInStr(nTotalAllowancePerDept, true, false) : "-"; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        ////DEDUCTION
                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalDeductionPerDept > 0 ? this.GetAmountInStr(nTotalDeductionPerDept, true, false) : "-"; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalNetSalaryPerDept > 0 ? this.GetAmountInStr(nTotalNetSalaryPerDept, true, false) : "-"; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                        //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        //rowIndex++;

                        //#endregion Total

                        oTempEmployeeSalarys.RemoveAll(x => x.DepartmentName == oTempEmpSs[0].DepartmentName);
                        nTotalGrossPerDept = 0;
                        nTotalAllowancePerDept = 0;
                        nTotalDeductionPerDept = 0;
                        nTotalNetSalaryPerDept = 0;
                    }
                    oEmployeeSalarys.RemoveAll(x => x.LocationName == sLocationName);
                }
                //#region Grand Total
                ////SL//EMPLOYEE
                //cell = sheet.Cells[rowIndex, colIndex, rowIndex, colIndex = colIndex + 2]; cell.Merge = true; cell.Value = "GRAND TOTAL"; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                ////SALARY POSITION
                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalAllowance > 0 ? this.GetAmountInStr(nTotalAllowance, true, false) : "-"; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                ////ATTENDANCE STATUS

                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                ////LEAVE STATUS

                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                ////ALLOWANCE
                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalAllowance > 0 ? this.GetAmountInStr(nTotalAllowance, true, false) : "-"; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                ////DEDUCTION
                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalDeduction > 0 ? this.GetAmountInStr(nTotalDeduction, true, false) : "-"; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = nTotalNetSalary > 0 ? this.GetAmountInStr(nTotalNetSalary, true, false) : "-"; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                //fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                //rowIndex++;

                //#endregion Grand Total
                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SALARY SHEET.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        public void SalarySheet_Corporate_XL_Header(ref ExcelWorksheet sheet, ref ExcelRange cell, ref int rowIndex, ref int colIndex)
        {
            ExcelFill fill; OfficeOpenXml.Style.Border border;
            #region Table Header 02
            colIndex = 2;
            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "SL"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Employee"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Salary Position"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Attendance Status"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Leave Status"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Allowance"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Deduction"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan);
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Net Salary"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Signature"; cell.Style.Font.Bold = true;
            fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Cyan); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

            rowIndex++;
            #endregion

        }

        #endregion SalarySheet_Corporate_XL

        #region Salary Process
        [HttpPost]
        public JsonResult ProcessSalary(EmployeeSalary oEmployeeSalary)
        {

            oEmployeeSalary = oEmployeeSalary.ProcessSalary(((User)(Session[SessionInfo.CurrentUser])).UserID);

            JavaScriptSerializer serializer = new JavaScriptSerializer();
            string sjson = serializer.Serialize(oEmployeeSalary);
            return Json(sjson, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Comparison Report
        public void ExcelComparisonReport(FormCollection data)
        {
            if (string.IsNullOrEmpty(data["Params"]) || data["Params"].Split('~').Length < 7)
                throw new Exception("Search parameter required.");
            string searchStr = data["Params"];

            string BUIDs = searchStr.Split('~')[0];
            string LocIDs = searchStr.Split('~')[1];
            string DeptIDs = searchStr.Split('~')[2];
            string DesignationIDs = searchStr.Split('~')[3];
            string SchemeIDs = searchStr.Split('~')[4];
            string EmpIDs = searchStr.Split('~')[5];
            bool isMonthWise = Convert.ToBoolean(searchStr.Split('~')[6]);
            int MonthFrom = Convert.ToInt32(searchStr.Split('~')[7]);
            int YearFrom = Convert.ToInt32(searchStr.Split('~')[8]);
            int MonthTo = Convert.ToInt32(searchStr.Split('~')[9]);
            int YearTo = Convert.ToInt32(searchStr.Split('~')[10]);
            int ComparisonYearFrom = Convert.ToInt32(searchStr.Split('~')[11]);
            int ComparisonYearTo = Convert.ToInt32(searchStr.Split('~')[12]);
            double MinSalary = Convert.ToDouble(searchStr.Split('~')[13]);
            double MaxSalary = Convert.ToDouble(searchStr.Split('~')[14]);
            string GroupIDs = searchStr.Split('~')[15];
            string BlockIDs = searchStr.Split('~')[16];
            int GroupBy = Convert.ToInt32(searchStr.Split('~')[17]);

            List<EmployeeSalary> oEmployeeSalarys = new List<EmployeeSalary>();
            List<EmployeeSalary> oEmployeeSalarysList1 = new List<EmployeeSalary>();
            List<EmployeeSalary> oEmployeeSalarysList2 = new List<EmployeeSalary>();
            List<EmployeeSalary> oEmployeeSalarysListDiff = new List<EmployeeSalary>();
            oEmployeeSalarys = EmployeeSalary.GetsComparisonReport(BUIDs, LocIDs, DeptIDs, DesignationIDs, SchemeIDs, EmpIDs, isMonthWise, MonthFrom, YearFrom, MonthTo, YearTo, ComparisonYearFrom, ComparisonYearTo, MinSalary, MaxSalary, GroupIDs, BlockIDs, GroupBy, (int)(Session[SessionInfo.currentUserID]));

            if (isMonthWise)
            {
                if (GroupBy == 0)
                {
                    oEmployeeSalarysList1 = oEmployeeSalarys.Where(x => x.MonthID == MonthFrom).OrderBy(x => x.BUName).ToList();
                    oEmployeeSalarysList2 = oEmployeeSalarys.Where(x => x.MonthID == MonthTo).OrderBy(x => x.BUName).ToList();
                    oEmployeeSalarysListDiff = oEmployeeSalarys.Where(x => x.MonthID == MonthFrom).OrderBy(x => x.BUName).ToList();
                }
                if (GroupBy == 1)
                {
                    oEmployeeSalarysList1 = oEmployeeSalarys.Where(x => x.MonthID == MonthFrom).OrderBy(x => x.LocationName).ToList();
                    oEmployeeSalarysList2 = oEmployeeSalarys.Where(x => x.MonthID == MonthTo).OrderBy(x => x.LocationName).ToList();
                    oEmployeeSalarysListDiff = oEmployeeSalarys.Where(x => x.MonthID == MonthFrom).OrderBy(x => x.LocationName).ToList();
                }
                if (GroupBy == 2)
                {
                    oEmployeeSalarysList1 = oEmployeeSalarys.Where(x => x.MonthID == MonthFrom).OrderBy(x => x.DepartmentName).ToList();
                    oEmployeeSalarysList2 = oEmployeeSalarys.Where(x => x.MonthID == MonthTo).OrderBy(x => x.DepartmentName).ToList();
                    oEmployeeSalarysListDiff = oEmployeeSalarys.Where(x => x.MonthID == MonthFrom).OrderBy(x => x.DepartmentName).ToList();
                }
            }
            else
            {
                oEmployeeSalarysList1 = oEmployeeSalarys.Where(x => x.Year == ComparisonYearFrom).OrderBy(x => x.MonthID).ToList();
                oEmployeeSalarysList2 = oEmployeeSalarys.Where(x => x.Year == ComparisonYearTo).OrderBy(x => x.MonthID).ToList();
                oEmployeeSalarysListDiff = oEmployeeSalarys.Where(x => x.Year == ComparisonYearFrom).OrderBy(x => x.MonthID).ToList();
            }

            int nMaxColumn = 0;
            int colIndex = 2;
            int rowIndex = 2;
            ExcelRange cell;
            ExcelFill fill;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Comparison Report");
                sheet.Name = "Comparison Report";

                sheet.Column(2).Width = 25; //section
                sheet.Column(3).Width = 25; //Manpower
                sheet.Column(4).Width = 25; //Wages
                sheet.Column(5).Width = 25; //Wages Payable
                sheet.Column(6).Width = 25; //OT Hour
                sheet.Column(7).Width = 25; //OT Payable
                sheet.Column(8).Width = 25; //TotalPayable
                sheet.Column(9).Width = 25; //Avg
                nMaxColumn = 9;

                Company oCompany = new Company();
                oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
                oCompany.CompanyLogo = GetCompanyLogo(oCompany);

                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = oCompany.Name; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 20; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;

                sheet.Cells[rowIndex, 2, rowIndex, nMaxColumn].Merge = true;
                cell = sheet.Cells[rowIndex, 2]; cell.Value = "SALARY & OT Summary"; cell.Style.Font.Bold = true;
                cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                rowIndex = rowIndex + 1;




                #region Monthly/Yearly
                if (isMonthWise)
                {
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Section"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Manpower"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Gross"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Gross Payable"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Hour"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Payable"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total Payable"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Avg. Gross"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;

                    #region Monthly
                    #region First Month

                    DateTimeFormatInfo mfi = new DateTimeFormatInfo();
                    string strMonthName = mfi.GetMonthName(MonthFrom).ToString();

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn]; cell.Value = strMonthName + "-" + YearFrom; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.LimeGreen); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;
                    foreach (EmployeeSalary oItem in oEmployeeSalarysList1)
                    {
                        string sectionName = "";
                        if (GroupBy == 0)
                        {
                            sectionName = oItem.BUName;
                        }
                        if (GroupBy == 1)
                        {
                            sectionName = oItem.LocationName;
                        }
                        if (GroupBy == 2)
                        {
                            sectionName = oItem.DepartmentName;
                        }

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sectionName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NoOfEmployee; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.GrossAmount, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.GrossOnEWD, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTHour; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.OTAmount, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.TotalPayable, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round((oItem.TotalPayable / oItem.NoOfEmployee), 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        rowIndex++;
                        colIndex = 2;


                    }
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList1.Sum(x => x.NoOfEmployee)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList1.Sum(x => x.GrossAmount)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList1.Sum(x => x.GrossOnEWD)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList1.Sum(x => x.OTHour)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList1.Sum(x => x.OTAmount)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList1.Sum(x => x.TotalPayable)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;
                    #endregion

                    rowIndex++;
                    colIndex = 2;

                    #region Second Month
                    DateTimeFormatInfo mfi2 = new DateTimeFormatInfo();
                    string strMonthName2 = mfi2.GetMonthName(MonthTo).ToString();

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn]; cell.Value = strMonthName2 + "-" + YearTo; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.LimeGreen); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;
                    foreach (EmployeeSalary oItem in oEmployeeSalarysList2)
                    {
                        string sectionName = "";
                        if (GroupBy == 0)
                        {
                            sectionName = oItem.BUName;
                        }
                        if (GroupBy == 1)
                        {
                            sectionName = oItem.LocationName;
                        }
                        if (GroupBy == 2)
                        {
                            sectionName = oItem.DepartmentName;
                        }

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sectionName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NoOfEmployee; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.GrossAmount, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.GrossOnEWD, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTHour; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.OTAmount, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.TotalPayable, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round((oItem.TotalPayable / oItem.NoOfEmployee), 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        rowIndex++;
                        colIndex = 2;


                    }
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList2.Sum(x => x.NoOfEmployee)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList2.Sum(x => x.GrossAmount)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList2.Sum(x => x.GrossOnEWD)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList2.Sum(x => x.OTHour)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList2.Sum(x => x.OTAmount)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList2.Sum(x => x.TotalPayable)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;
                    #endregion

                    rowIndex++;

                    #region Difference
                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, nMaxColumn]; cell.Value = "Difference"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.BurlyWood); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;

                    List<EmployeeSalary> oEmployeeSalaryDiffs = new List<EmployeeSalary>();
                    List<EmployeeSalary> oEmployeeSalaryDiffCalculates = new List<EmployeeSalary>();
                    List<string> oHeads = new List<string>();

                    //oEmployeeSalaryDiffCalculates = 


                    bool flag = false;
                    foreach (EmployeeSalary oitem in oEmployeeSalarysList1)
                    {
                        foreach (EmployeeSalary oitem2 in oEmployeeSalarysList2)
                        {
                            string sectionName = "";
                            if (GroupBy == 0)
                            {
                                sectionName = oitem2.BUName;
                            }
                            if (GroupBy == 1)
                            {
                                sectionName = oitem2.LocationName;
                            }
                            if (GroupBy == 2)
                            {
                                sectionName = oitem2.DepartmentName;
                            }

                            if (GroupBy == 0 && oitem.BUName != sectionName)
                            {
                                foreach (EmployeeSalary oitemChk in oEmployeeSalarysListDiff)
                                {
                                    if (GroupBy == 0 && oitemChk.BUName == sectionName)
                                    {
                                        flag = true;
                                        break;
                                    }
                                    if (GroupBy == 1 && oitemChk.LocationName == sectionName)
                                    {
                                        flag = true;
                                        break;
                                    }
                                    if (GroupBy == 2 && oitemChk.DepartmentName == sectionName)
                                    {
                                        flag = true;
                                        break;
                                    }
                                }
                                if (flag == false)
                                    oEmployeeSalarysListDiff.Add(oitem2);
                            }
                            if (GroupBy == 1 && oitem.LocationName != sectionName)
                            {
                                foreach (EmployeeSalary oitemChk in oEmployeeSalarysListDiff)
                                {
                                    if (GroupBy == 0 && oitemChk.BUName == sectionName)
                                    {
                                        flag = true;
                                        break;
                                    }
                                    if (GroupBy == 1 && oitemChk.LocationName == sectionName)
                                    {
                                        flag = true;
                                        break;
                                    }
                                    if (GroupBy == 2 && oitemChk.DepartmentName == sectionName)
                                    {
                                        flag = true;
                                        break;
                                    }
                                }
                                if (flag == false)
                                    oEmployeeSalarysListDiff.Add(oitem2);
                            }
                            if (GroupBy == 2 && oitem.DepartmentName != sectionName)
                            {
                                foreach (EmployeeSalary oitemChk in oEmployeeSalarysListDiff)
                                {
                                    if (GroupBy == 0 && oitemChk.BUName == sectionName)
                                    {
                                        flag = true;
                                        break;
                                    }
                                    if (GroupBy == 1 && oitemChk.LocationName == sectionName)
                                    {
                                        flag = true;
                                        break;
                                    }
                                    if (GroupBy == 2 && oitemChk.DepartmentName == sectionName)
                                    {
                                        flag = true;
                                        break;
                                    }
                                }
                                if (flag == false)
                                    oEmployeeSalarysListDiff.Add(oitem2);
                            }
                        }
                    }
                    oEmployeeSalarysListDiff = oEmployeeSalarysListDiff.OrderBy(x => x.MonthID).ToList();

                    int DiffNoOfEmployee = 0, totalNoOfEmp = 0;
                    double DiffGross = 0.0, TotalDiffGross = 0.0;
                    double DiffGrossEWD = 0.0, TotalDiffGrossEWD = 0.0;
                    double DiffOTHr = 0.0, TotalDiffOTHr = 0.0;
                    double DiffOTAmount = 0.0, TotalDiffOTAmount = 0.0;
                    double DiffTotalPayable = 0.0, TotalDiffTotalPayable = 0.0;

                    double FirstTotalNoOfEmp = 0.0, FirstTotalGross = 0.0, FirstTotalGrossEWD = 0.0, FirstTotalOTHr = 0.0, FirstTotalOTAmount = 0.0, FirstTotalTotalPayable = 0.0;

                    string perNoOfEmp = "", perGross = "", perGrossEWD = "", perOTHr = "", perOTAmount = "", perTotalPayable = "";

                    foreach (EmployeeSalary oItem in oEmployeeSalarysListDiff)
                    {
                        string sectionName = "";

                        if (GroupBy == 0)
                        {
                            sectionName = oItem.BUName;
                            var oResult1 = oEmployeeSalarysList1.Where(x => x.BUName == sectionName).ToList();
                            var oResult2 = oEmployeeSalarysList2.Where(x => x.BUName == sectionName).ToList();

                            DiffNoOfEmployee = (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0) - (oResult2.Count > 0 ? oResult2.FirstOrDefault().NoOfEmployee : 0);

                            DiffGross = (oResult1.Any() ? oResult1.First().GrossAmount : 0) - (oResult2.Any() ? oResult2.First().GrossAmount : 0);
                            DiffGrossEWD = (oResult1.Any() ? oResult1.First().GrossOnEWD : 0) - (oResult2.Any() ? oResult2.First().GrossOnEWD : 0);
                            DiffOTHr = (oResult1.Any() ? oResult1.First().OTHour : 0) - (oResult2.Any() ? oResult2.First().OTHour : 0);
                            DiffOTAmount = (oResult1.Any() ? oResult1.First().OTAmount : 0) - (oResult2.Any() ? oResult2.First().OTAmount : 0);
                            DiffTotalPayable = (oResult1.Any() ? oResult1.First().TotalPayable : 0) - (oResult2.Any() ? oResult2.First().TotalPayable : 0);

                            totalNoOfEmp += DiffNoOfEmployee;
                            TotalDiffGross += DiffGross;
                            TotalDiffGrossEWD += DiffGrossEWD;
                            TotalDiffOTHr += DiffOTHr;
                            TotalDiffOTAmount += DiffOTAmount;
                            TotalDiffTotalPayable += DiffTotalPayable;

                            FirstTotalNoOfEmp += (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0);
                            FirstTotalGross += (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossAmount : 0);
                            FirstTotalGrossEWD += (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossOnEWD : 0);
                            FirstTotalOTHr += (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTHour : 0);
                            FirstTotalOTAmount += (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTAmount : 0);
                            FirstTotalTotalPayable += (oResult1.Count > 0 ? oResult1.FirstOrDefault().TotalPayable : 0);

                        }
                        if (GroupBy == 1)
                        {
                            sectionName = oItem.LocationName;
                            var oResult1 = oEmployeeSalarysList1.Where(x => x.LocationName == sectionName).ToList();
                            var oResult2 = oEmployeeSalarysList2.Where(x => x.LocationName == sectionName).ToList();

                            DiffNoOfEmployee = (oResult1.Any() ? oResult1.FirstOrDefault().NoOfEmployee : 0) - (oResult2.Any() ? oResult2.FirstOrDefault().NoOfEmployee : 0);
                            DiffGross = (oResult1.Any() ? oResult1.First().GrossAmount : 0) - (oResult2.Any() ? oResult2.First().GrossAmount : 0);
                            DiffGrossEWD = (oResult1.Any() ? oResult1.First().GrossOnEWD : 0) - (oResult2.Any() ? oResult2.First().GrossOnEWD : 0);
                            DiffOTHr = (oResult1.Any() ? oResult1.First().OTHour : 0) - (oResult2.Any() ? oResult2.First().OTHour : 0);
                            DiffOTAmount = (oResult1.Any() ? oResult1.First().OTAmount : 0) - (oResult2.Any() ? oResult2.First().OTAmount : 0);
                            DiffTotalPayable = (oResult1.Any() ? oResult1.First().TotalPayable : 0) - (oResult2.Any() ? oResult2.First().TotalPayable : 0);

                            totalNoOfEmp += DiffNoOfEmployee;
                            TotalDiffGross += DiffGross;
                            TotalDiffGrossEWD += DiffGrossEWD;
                            TotalDiffOTHr += DiffOTHr;
                            TotalDiffOTAmount += DiffOTAmount;
                            TotalDiffTotalPayable += DiffTotalPayable;

                            FirstTotalNoOfEmp += (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0);
                            FirstTotalGross += (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossAmount : 0);
                            FirstTotalGrossEWD += (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossOnEWD : 0);
                            FirstTotalOTHr += (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTHour : 0);
                            FirstTotalOTAmount += (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTAmount : 0);
                            FirstTotalTotalPayable += (oResult1.Count > 0 ? oResult1.FirstOrDefault().TotalPayable : 0);
                        }
                        if (GroupBy == 2)
                        {
                            sectionName = oItem.DepartmentName;
                            var oResult1 = oEmployeeSalarysList1.Where(x => x.DepartmentName == sectionName).ToList();
                            var oResult2 = oEmployeeSalarysList2.Where(x => x.DepartmentName == sectionName).ToList();

                            DiffNoOfEmployee = (oResult1.Any() ? oResult1.First().NoOfEmployee : 0) - (oResult2.Any() ? oResult2.First().NoOfEmployee : 0);
                            DiffGross = (oResult1.Any() ? oResult1.First().GrossAmount : 0) - (oResult2.Any() ? oResult2.First().GrossAmount : 0);
                            DiffGrossEWD = (oResult1.Any() ? oResult1.First().GrossOnEWD : 0) - (oResult2.Any() ? oResult2.First().GrossOnEWD : 0);
                            DiffOTHr = (oResult1.Any() ? oResult1.First().OTHour : 0) - (oResult2.Any() ? oResult2.First().OTHour : 0);
                            DiffOTAmount = (oResult1.Any() ? oResult1.First().OTAmount : 0) - (oResult2.Any() ? oResult2.First().OTAmount : 0);
                            DiffTotalPayable = (oResult1.Any() ? oResult1.First().TotalPayable : 0) - (oResult2.Any() ? oResult2.First().TotalPayable : 0);

                            totalNoOfEmp += DiffNoOfEmployee;
                            TotalDiffGross += DiffGross;
                            TotalDiffGrossEWD += DiffGrossEWD;
                            TotalDiffOTHr += DiffOTHr;
                            TotalDiffOTAmount += DiffOTAmount;
                            TotalDiffTotalPayable += DiffTotalPayable;

                            FirstTotalNoOfEmp += (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0);
                            FirstTotalGross += (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossAmount : 0);
                            FirstTotalGrossEWD += (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossOnEWD : 0);
                            FirstTotalOTHr += (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTHour : 0);
                            FirstTotalOTAmount += (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTAmount : 0);
                            FirstTotalTotalPayable += (oResult1.Count > 0 ? oResult1.FirstOrDefault().TotalPayable : 0);
                        }

                        perNoOfEmp = (FirstTotalNoOfEmp > 0) ? Math.Round(((totalNoOfEmp * 100) / FirstTotalNoOfEmp), 2).ToString() + "%" : "#DIV/0!";
                        perGross = (FirstTotalGross > 0) ? Math.Round(((TotalDiffGross * 100) / FirstTotalGross), 2).ToString() + "%" : "#DIV/0!";
                        perGrossEWD = (FirstTotalGrossEWD > 0) ? Math.Round(((TotalDiffGrossEWD * 100) / FirstTotalGrossEWD), 2).ToString() + "%" : "#DIV/0!";
                        perOTHr = (FirstTotalOTHr > 0) ? Math.Round(((TotalDiffOTHr * 100) / FirstTotalOTHr), 2).ToString() + "%" : "#DIV/0!";
                        perOTAmount = (FirstTotalOTAmount > 0) ? Math.Round(((TotalDiffOTAmount * 100) / FirstTotalOTAmount), 2).ToString() + "%" : "#DIV/0!";
                        perTotalPayable = (FirstTotalTotalPayable > 0) ? Math.Round(((TotalDiffTotalPayable * 100) / FirstTotalTotalPayable), 2).ToString() + "%" : "#DIV/0!";

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sectionName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (DiffNoOfEmployee < 0) ? "(" + -DiffNoOfEmployee + ")" : DiffNoOfEmployee + ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (DiffGross < 0) ? "(" + -Math.Round(DiffGross, 0) + ")" : Math.Round(DiffGross, 0) + ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (DiffGrossEWD < 0) ? "(" + -Math.Round(DiffGrossEWD, 0) + ")" : Math.Round(DiffGrossEWD, 0) + ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (DiffOTHr < 0) ? "(" + -Math.Round(DiffOTHr, 0) + ")" : Math.Round(DiffOTHr, 0) + ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (DiffOTAmount < 0) ? "(" + -Math.Round(DiffOTAmount, 0) + ")" : Math.Round(DiffOTAmount, 0) + ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (DiffTotalPayable < 0) ? "(" + -Math.Round(DiffTotalPayable, 0) + ")" : Math.Round(DiffTotalPayable, 0) + ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = " "; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex++;
                        colIndex = 2;
                    }

                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = totalNoOfEmp; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalDiffGross; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalDiffGrossEWD; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalDiffOTHr; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalDiffOTAmount; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalDiffTotalPayable; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = " "; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    rowIndex++;
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "%"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perNoOfEmp; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perGross; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perGrossEWD; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perOTHr; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perOTAmount; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perTotalPayable; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = " "; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;
                    colIndex = 2;

                    #endregion

                    rowIndex++;

                    #region %
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, 5]; cell.Value = "%"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.BurlyWood); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Section"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Manpower"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Gross"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Hour"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;



                    int DiffNoOfEmployeeP = 0;
                    double DiffGrossP = 0.0;
                    double DiffGrossEWDP = 0.0;
                    double DiffOTHrP = 0.0;
                    double DiffOTAmountP = 0.0;
                    double DiffTotalPayableP = 0.0;

                    double FirstTotalNoOfEmpP = 0.0, FirstTotalGrossP = 0.0, FirstTotalGrossEWDP = 0.0, FirstTotalOTHrP = 0.0, FirstTotalOTAmountP = 0.0, FirstTotalTotalPayableP = 0.0;

                    string perNoOfEmpP = "", perGrossP = "", perGrossEWDP = "", perOTHrP = "", perOTAmountP = "", perTotalPayableP = "";

                    foreach (EmployeeSalary oItem in oEmployeeSalarysListDiff)
                    {
                        string sectionName = "";

                        if (GroupBy == 0)
                        {
                            sectionName = oItem.BUName;
                            var oResult1 = oEmployeeSalarysList1.Where(x => x.BUName == sectionName).ToList();
                            var oResult2 = oEmployeeSalarysList2.Where(x => x.BUName == sectionName).ToList();

                            DiffNoOfEmployeeP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0) - (oResult2.Count > 0 ? oResult2.FirstOrDefault().NoOfEmployee : 0);
                            DiffGrossP = (oResult1.Any() ? oResult1.First().GrossAmount : 0) - (oResult2.Any() ? oResult2.First().GrossAmount : 0);
                            DiffGrossEWDP = (oResult1.Any() ? oResult1.First().GrossOnEWD : 0) - (oResult2.Any() ? oResult2.First().GrossOnEWD : 0);
                            DiffOTHrP = (oResult1.Any() ? oResult1.First().OTHour : 0) - (oResult2.Any() ? oResult2.First().OTHour : 0);
                            DiffOTAmountP = (oResult1.Any() ? oResult1.First().OTAmount : 0) - (oResult2.Any() ? oResult2.First().OTAmount : 0);
                            DiffTotalPayableP = (oResult1.Any() ? oResult1.First().TotalPayable : 0) - (oResult2.Any() ? oResult2.First().TotalPayable : 0);

                            FirstTotalNoOfEmpP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0);
                            FirstTotalGrossP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossAmount : 0);
                            FirstTotalGrossEWDP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossOnEWD : 0);
                            FirstTotalOTHrP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTHour : 0);
                            FirstTotalOTAmountP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTAmount : 0);
                            FirstTotalTotalPayableP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().TotalPayable : 0);

                            perNoOfEmpP = (FirstTotalNoOfEmpP > 0) ? Math.Round(((DiffNoOfEmployeeP * 100) / FirstTotalNoOfEmpP), 2).ToString() + "%" : "#DIV/0!";
                            perGrossP = (FirstTotalGrossP > 0) ? Math.Round(((DiffGrossP * 100) / FirstTotalGrossP), 2).ToString() + "%" : "#DIV/0!";
                            perGrossEWDP = (FirstTotalGrossEWDP > 0) ? Math.Round(((DiffGrossEWDP * 100) / FirstTotalGrossEWDP), 2).ToString() + "%" : "#DIV/0!";
                            perOTHrP = (FirstTotalOTHrP > 0) ? Math.Round(((DiffOTHrP * 100) / FirstTotalOTHrP), 2).ToString() + "%" : "#DIV/0!";
                            perOTAmountP = (FirstTotalOTAmountP > 0) ? Math.Round(((DiffOTAmountP * 100) / FirstTotalOTAmountP), 2).ToString() + "%" : "#DIV/0!";
                            perTotalPayableP = (FirstTotalTotalPayableP > 0) ? Math.Round(((DiffTotalPayableP * 100) / FirstTotalTotalPayableP), 2).ToString() + "%" : "#DIV/0!";

                        }
                        if (GroupBy == 1)
                        {
                            sectionName = oItem.LocationName;
                            var oResult1 = oEmployeeSalarysList1.Where(x => x.LocationName == sectionName).ToList();
                            var oResult2 = oEmployeeSalarysList2.Where(x => x.LocationName == sectionName).ToList();

                            DiffNoOfEmployeeP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0) - (oResult2.Count > 0 ? oResult2.FirstOrDefault().NoOfEmployee : 0);
                            DiffGrossP = (oResult1.Any() ? oResult1.First().GrossAmount : 0) - (oResult2.Any() ? oResult2.First().GrossAmount : 0);
                            DiffGrossEWDP = (oResult1.Any() ? oResult1.First().GrossOnEWD : 0) - (oResult2.Any() ? oResult2.First().GrossOnEWD : 0);
                            DiffOTHrP = (oResult1.Any() ? oResult1.First().OTHour : 0) - (oResult2.Any() ? oResult2.First().OTHour : 0);
                            DiffOTAmountP = (oResult1.Any() ? oResult1.First().OTAmount : 0) - (oResult2.Any() ? oResult2.First().OTAmount : 0);
                            DiffTotalPayableP = (oResult1.Any() ? oResult1.First().TotalPayable : 0) - (oResult2.Any() ? oResult2.First().TotalPayable : 0);

                            FirstTotalNoOfEmpP += (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0);
                            FirstTotalGrossP += (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossAmount : 0);
                            FirstTotalGrossEWDP += (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossOnEWD : 0);
                            FirstTotalOTHrP += (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTHour : 0);
                            FirstTotalOTAmountP += (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTAmount : 0);
                            FirstTotalTotalPayableP += (oResult1.Count > 0 ? oResult1.FirstOrDefault().TotalPayable : 0);

                            perNoOfEmpP = (FirstTotalNoOfEmpP > 0) ? Math.Round(((DiffNoOfEmployeeP * 100) / FirstTotalNoOfEmpP), 2).ToString() + "%" : "#DIV/0!";
                            perGrossP = (FirstTotalGrossP > 0) ? Math.Round(((DiffGrossP * 100) / FirstTotalGrossP), 2).ToString() + "%" : "#DIV/0!";
                            perGrossEWDP = (FirstTotalGrossEWDP > 0) ? Math.Round(((DiffGrossEWDP * 100) / FirstTotalGrossEWDP), 2).ToString() + "%" : "#DIV/0!";
                            perOTHrP = (FirstTotalOTHr > 0) ? Math.Round(((DiffOTHrP * 100) / FirstTotalOTHrP), 2).ToString() + "%" : "#DIV/0!";
                            perOTAmountP = (FirstTotalOTAmountP > 0) ? Math.Round(((DiffOTAmountP * 100) / FirstTotalOTAmountP), 2).ToString() + "%" : "#DIV/0!";
                            perTotalPayableP = (FirstTotalTotalPayableP > 0) ? Math.Round(((DiffTotalPayableP * 100) / FirstTotalTotalPayableP), 2).ToString() + "%" : "#DIV/0!";

                        }
                        if (GroupBy == 2)
                        {
                            sectionName = oItem.DepartmentName;
                            var oResult1 = oEmployeeSalarysList1.Where(x => x.DepartmentName == sectionName).ToList();
                            var oResult2 = oEmployeeSalarysList2.Where(x => x.DepartmentName == sectionName).ToList();

                            DiffNoOfEmployeeP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0) - (oResult2.Count > 0 ? oResult2.FirstOrDefault().NoOfEmployee : 0);
                            DiffGrossP = (oResult1.Any() ? oResult1.First().GrossAmount : 0) - (oResult2.Any() ? oResult2.First().GrossAmount : 0);
                            DiffGrossEWDP = (oResult1.Any() ? oResult1.First().GrossOnEWD : 0) - (oResult2.Any() ? oResult2.First().GrossOnEWD : 0);
                            DiffOTHrP = (oResult1.Any() ? oResult1.First().OTHour : 0) - (oResult2.Any() ? oResult2.First().OTHour : 0);
                            DiffOTAmountP = (oResult1.Any() ? oResult1.First().OTAmount : 0) - (oResult2.Any() ? oResult2.First().OTAmount : 0);
                            DiffTotalPayableP = (oResult1.Any() ? oResult1.First().TotalPayable : 0) - (oResult2.Any() ? oResult2.First().TotalPayable : 0);

                            FirstTotalNoOfEmpP += (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0);
                            FirstTotalGrossP += (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossAmount : 0);
                            FirstTotalGrossEWDP += (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossOnEWD : 0);
                            FirstTotalOTHrP += (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTHour : 0);
                            FirstTotalOTAmountP += (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTAmount : 0);
                            FirstTotalTotalPayableP += (oResult1.Count > 0 ? oResult1.FirstOrDefault().TotalPayable : 0);

                            perNoOfEmpP = (FirstTotalNoOfEmpP > 0) ? Math.Round(((DiffNoOfEmployeeP * 100) / FirstTotalNoOfEmpP), 2).ToString() + "%" : "#DIV/0!";
                            perGrossP = (FirstTotalGrossP > 0) ? Math.Round(((DiffGrossP * 100) / FirstTotalGrossP), 2).ToString() + "%" : "#DIV/0!";
                            perGrossEWDP = (FirstTotalGrossEWDP > 0) ? Math.Round(((DiffGrossEWDP * 100) / FirstTotalGrossEWDP), 2).ToString() + "%" : "#DIV/0!";
                            perOTHrP = (FirstTotalOTHrP > 0) ? Math.Round(((DiffOTHrP * 100) / FirstTotalOTHrP), 2).ToString() + "%" : "#DIV/0!";
                            perOTAmountP = (FirstTotalOTAmountP > 0) ? Math.Round(((DiffOTAmountP * 100) / FirstTotalOTAmountP), 2).ToString() + "%" : "#DIV/0!";
                            perTotalPayableP = (FirstTotalTotalPayableP > 0) ? Math.Round(((DiffTotalPayableP * 100) / FirstTotalTotalPayableP), 2).ToString() + "%" : "#DIV/0!";

                        }

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = sectionName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perNoOfEmpP; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perGrossP; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perOTHrP; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex++;
                        colIndex = 2;
                    }

                    #endregion
                    #endregion
                }

                else
                {
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Month"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Manpower"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Gross Payable"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Hour"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Payable"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total Payable"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Remarks"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;

                    #region Yearly
                    #region First Year

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, 8]; cell.Value = "Salary & Wages Year" + "-" + ComparisonYearFrom; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.LimeGreen); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;
                    foreach (EmployeeSalary oItem in oEmployeeSalarysList1)
                    {
                        string MonthName = "";
                        DateTimeFormatInfo mfi1 = new DateTimeFormatInfo();
                        MonthName = mfi1.GetMonthName(oItem.MonthID).ToString();

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = MonthName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NoOfEmployee; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.GrossOnEWD, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTHour; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.OTAmount, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.TotalPayable, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        rowIndex++;
                        colIndex = 2;


                    }
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList1.Sum(x => x.NoOfEmployee)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList1.Sum(x => x.GrossOnEWD)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList1.Sum(x => x.OTHour)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList1.Sum(x => x.OTAmount)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList1.Sum(x => x.TotalPayable)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;
                    #endregion

                    rowIndex++;
                    colIndex = 2;

                    #region Second Year

                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, 8]; cell.Value = "Salary and Wages Year" + "-" + ComparisonYearTo; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.LimeGreen); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;
                    foreach (EmployeeSalary oItem in oEmployeeSalarysList2)
                    {
                        string MonthName = "";
                        DateTimeFormatInfo mfi1 = new DateTimeFormatInfo();
                        MonthName = mfi1.GetMonthName(oItem.MonthID).ToString();

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = MonthName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.NoOfEmployee; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.GrossOnEWD, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = oItem.OTHour; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.OTAmount, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(oItem.TotalPayable, 0); cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        rowIndex++;
                        colIndex = 2;


                    }
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList2.Sum(x => x.NoOfEmployee)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList2.Sum(x => x.GrossOnEWD)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList2.Sum(x => x.OTHour)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList2.Sum(x => x.OTAmount)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = Math.Round(Convert.ToDouble(oEmployeeSalarysList2.Sum(x => x.TotalPayable)), 0); cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = ""; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;
                    #endregion

                    rowIndex++;

                    #region Difference Year
                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, 8]; cell.Value = "Difference (" + ComparisonYearFrom + " - " + ComparisonYearTo + ")"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.BurlyWood); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;

                    List<EmployeeSalary> oEmployeeSalaryDiffs = new List<EmployeeSalary>();
                    List<EmployeeSalary> oEmployeeSalaryDiffCalculates = new List<EmployeeSalary>();
                    List<string> oHeads = new List<string>();

                    //oEmployeeSalaryDiffCalculates = 
                    //var oEmployeeSalaryDiffs = oEmployeeSalarysList2.Where(a => oEmployeeSalarysList1.All(b => b.MonthID != a.MonthID)); 
                    //if (oEmployeeSalarysList1.Count > oEmployeeSalarysList2.Count)
                    //{
                    //    oEmployeeSalaryDiffs = oEmployeeSalarysList1;

                    //}
                    //else
                    //{
                    //    oEmployeeSalaryDiffs = oEmployeeSalarysList2;

                    //}
                    bool flag = false;
                    foreach (EmployeeSalary oitem in oEmployeeSalarysList1)
                    {
                        foreach (EmployeeSalary oitem2 in oEmployeeSalarysList2)
                        {
                            int mnthID = oitem2.MonthID;
                            if (oitem.MonthID != mnthID)
                            {
                                foreach (EmployeeSalary oitemChk in oEmployeeSalarysListDiff)
                                {
                                    if (mnthID == oitemChk.MonthID)
                                    {
                                        flag = true;
                                        break;
                                    }
                                }
                                if (flag == false)
                                    oEmployeeSalarysListDiff.Add(oitem2);
                            }
                        }
                    }
                    oEmployeeSalarysListDiff = oEmployeeSalarysListDiff.OrderBy(x => x.MonthID).ToList();

                    int DiffNoOfEmployee = 0, totalNoOfEmp = 0;
                    double DiffGross = 0.0, TotalDiffGross = 0.0;
                    double DiffGrossEWD = 0.0, TotalDiffGrossEWD = 0.0;
                    double DiffOTHr = 0.0, TotalDiffOTHr = 0.0;
                    double DiffOTAmount = 0.0, TotalDiffOTAmount = 0.0;
                    double DiffTotalPayable = 0.0, TotalDiffTotalPayable = 0.0;

                    double FirstTotalNoOfEmp = 0.0, FirstTotalGross = 0.0, FirstTotalGrossEWD = 0.0, FirstTotalOTHr = 0.0, FirstTotalOTAmount = 0.0, FirstTotalTotalPayable = 0.0;

                    string perNoOfEmp = "", perGross = "", perGrossEWD = "", perOTHr = "", perOTAmount = "", perTotalPayable = "";

                    foreach (EmployeeSalary oItem in oEmployeeSalarysListDiff)
                    {
                        int nMonthID = 0;

                        nMonthID = oItem.MonthID;
                        var oResult1 = oEmployeeSalarysList1.Where(x => x.MonthID == nMonthID).ToList();
                        var oResult2 = oEmployeeSalarysList2.Where(x => x.MonthID == nMonthID).ToList();

                        DiffNoOfEmployee = (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0) - (oResult2.Count > 0 ? oResult2.FirstOrDefault().NoOfEmployee : 0);

                        DiffGross = (oResult1.Any() ? oResult1.First().GrossAmount : 0) - (oResult2.Any() ? oResult2.First().GrossAmount : 0);
                        DiffGrossEWD = (oResult1.Any() ? oResult1.First().GrossOnEWD : 0) - (oResult2.Any() ? oResult2.First().GrossOnEWD : 0);
                        DiffOTHr = (oResult1.Any() ? oResult1.First().OTHour : 0) - (oResult2.Any() ? oResult2.First().OTHour : 0);
                        DiffOTAmount = (oResult1.Any() ? oResult1.First().OTAmount : 0) - (oResult2.Any() ? oResult2.First().OTAmount : 0);
                        DiffTotalPayable = (oResult1.Any() ? oResult1.First().TotalPayable : 0) - (oResult2.Any() ? oResult2.First().TotalPayable : 0);

                        totalNoOfEmp += DiffNoOfEmployee;
                        TotalDiffGross += DiffGross;
                        TotalDiffGrossEWD += DiffGrossEWD;
                        TotalDiffOTHr += DiffOTHr;
                        TotalDiffOTAmount += DiffOTAmount;
                        TotalDiffTotalPayable += DiffTotalPayable;

                        FirstTotalNoOfEmp += (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0);
                        FirstTotalGross += (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossAmount : 0);
                        FirstTotalGrossEWD += (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossOnEWD : 0);
                        FirstTotalOTHr += (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTHour : 0);
                        FirstTotalOTAmount += (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTAmount : 0);
                        FirstTotalTotalPayable += (oResult1.Count > 0 ? oResult1.FirstOrDefault().TotalPayable : 0);



                        perNoOfEmp = (FirstTotalNoOfEmp > 0) ? Math.Round(((totalNoOfEmp * 100) / FirstTotalNoOfEmp), 2).ToString() + "%" : "#DIV/0!";
                        perGross = (FirstTotalGross > 0) ? Math.Round(((TotalDiffGross * 100) / FirstTotalGross), 2).ToString() + "%" : "#DIV/0!";
                        perGrossEWD = (FirstTotalGrossEWD > 0) ? Math.Round(((TotalDiffGrossEWD * 100) / FirstTotalGrossEWD), 2).ToString() + "%" : "#DIV/0!";
                        perOTHr = (FirstTotalOTHr > 0) ? Math.Round(((TotalDiffOTHr * 100) / FirstTotalOTHr), 2).ToString() + "%" : "#DIV/0!";
                        perOTAmount = (FirstTotalOTAmount > 0) ? Math.Round(((TotalDiffOTAmount * 100) / FirstTotalOTAmount), 2).ToString() + "%" : "#DIV/0!";
                        perTotalPayable = (FirstTotalTotalPayable > 0) ? Math.Round(((TotalDiffTotalPayable * 100) / FirstTotalTotalPayable), 2).ToString() + "%" : "#DIV/0!";


                        DateTimeFormatInfo mfiM = new DateTimeFormatInfo();
                        string monthName = mfiM.GetMonthName(oItem.MonthID).ToString();

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = monthName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (DiffNoOfEmployee < 0) ? "(" + -DiffNoOfEmployee + ")" : DiffNoOfEmployee + ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (DiffGrossEWD < 0) ? "(" + -Math.Round(DiffGrossEWD, 0) + ")" : Math.Round(DiffGrossEWD, 0) + ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (DiffOTHr < 0) ? "(" + -Math.Round(DiffOTHr, 0) + ")" : Math.Round(DiffOTHr, 0) + ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (DiffOTAmount < 0) ? "(" + -Math.Round(DiffOTAmount, 0) + ")" : Math.Round(DiffOTAmount, 0) + ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = (DiffTotalPayable < 0) ? "(" + -Math.Round(DiffTotalPayable, 0) + ")" : Math.Round(DiffTotalPayable, 0) + ""; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = " "; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex++;
                        colIndex = 2;
                    }

                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Total"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = totalNoOfEmp; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalDiffGrossEWD; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalDiffOTHr; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalDiffOTAmount; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = TotalDiffTotalPayable; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = " "; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    rowIndex++;
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "%"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;


                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perNoOfEmp; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perGrossEWD; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perOTHr; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perOTAmount; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perTotalPayable; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = " "; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    rowIndex++;
                    colIndex = 2;

                    #endregion

                    rowIndex++;

                    #region % Year
                    colIndex = 2;
                    cell = sheet.Cells[rowIndex, colIndex, rowIndex, 5]; cell.Value = "%"; cell.Style.Font.Bold = true; cell.Merge = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.BurlyWood); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Month"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Manpower"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "Gross"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                    cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = "OT Hour"; cell.Style.Font.Bold = true;
                    fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.Yellow);
                    border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                    rowIndex++;
                    colIndex = 2;


                    List<EmployeeSalary> oEmployeeSalarySectionPercent = new List<EmployeeSalary>();
                    List<string> oHeadsT = new List<string>();

                    //oEmployeeSalaryDiffCalculates = 

                    if (oEmployeeSalarysList1.Count > oEmployeeSalarysList2.Count)
                    {
                        oEmployeeSalarySectionPercent = oEmployeeSalarysList1;

                    }
                    else
                    {
                        oEmployeeSalarySectionPercent = oEmployeeSalarysList2;

                    }
                    int DiffNoOfEmployeeP = 0;
                    double DiffGrossP = 0.0;
                    double DiffGrossEWDP = 0.0;
                    double DiffOTHrP = 0.0;
                    double DiffOTAmountP = 0.0;
                    double DiffTotalPayableP = 0.0;

                    double FirstTotalNoOfEmpP = 0.0, FirstTotalGrossP = 0.0, FirstTotalGrossEWDP = 0.0, FirstTotalOTHrP = 0.0, FirstTotalOTAmountP = 0.0, FirstTotalTotalPayableP = 0.0;

                    string perNoOfEmpP = "", perGrossP = "", perGrossEWDP = "", perOTHrP = "", perOTAmountP = "", perTotalPayableP = "";

                    foreach (EmployeeSalary oItem in oEmployeeSalarysListDiff)
                    {

                        DateTimeFormatInfo mfiM = new DateTimeFormatInfo();
                        string monthName = mfiM.GetMonthName(oItem.MonthID).ToString();

                        var oResult1 = oEmployeeSalarysList1.Where(x => x.MonthID == oItem.MonthID).ToList();
                        var oResult2 = oEmployeeSalarysList2.Where(x => x.MonthID == oItem.MonthID).ToList();

                        DiffNoOfEmployeeP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0) - (oResult2.Count > 0 ? oResult2.FirstOrDefault().NoOfEmployee : 0);
                        DiffGrossP = (oResult1.Any() ? oResult1.First().GrossAmount : 0) - (oResult2.Any() ? oResult2.First().GrossAmount : 0);
                        DiffGrossEWDP = (oResult1.Any() ? oResult1.First().GrossOnEWD : 0) - (oResult2.Any() ? oResult2.First().GrossOnEWD : 0);
                        DiffOTHrP = (oResult1.Any() ? oResult1.First().OTHour : 0) - (oResult2.Any() ? oResult2.First().OTHour : 0);
                        DiffOTAmountP = (oResult1.Any() ? oResult1.First().OTAmount : 0) - (oResult2.Any() ? oResult2.First().OTAmount : 0);
                        DiffTotalPayableP = (oResult1.Any() ? oResult1.First().TotalPayable : 0) - (oResult2.Any() ? oResult2.First().TotalPayable : 0);

                        FirstTotalNoOfEmpP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().NoOfEmployee : 0);
                        FirstTotalGrossP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossAmount : 0);
                        FirstTotalGrossEWDP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().GrossOnEWD : 0);
                        FirstTotalOTHrP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTHour : 0);
                        FirstTotalOTAmountP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().OTAmount : 0);
                        FirstTotalTotalPayableP = (oResult1.Count > 0 ? oResult1.FirstOrDefault().TotalPayable : 0);

                        perNoOfEmpP = (FirstTotalNoOfEmpP > 0) ? Math.Round(((DiffNoOfEmployeeP * 100) / FirstTotalNoOfEmpP), 2).ToString() + "%" : "#DIV/0!";
                        perGrossP = (FirstTotalGrossP > 0) ? Math.Round(((DiffGrossP * 100) / FirstTotalGrossP), 2).ToString() + "%" : "#DIV/0!";
                        perGrossEWDP = (FirstTotalGrossEWDP > 0) ? Math.Round(((DiffGrossEWDP * 100) / FirstTotalGrossEWDP), 2).ToString() + "%" : "#DIV/0!";
                        perOTHrP = (FirstTotalOTHrP > 0) ? Math.Round(((DiffOTHrP * 100) / FirstTotalOTHrP), 2).ToString() + "%" : "#DIV/0!";
                        perOTAmountP = (FirstTotalOTAmountP > 0) ? Math.Round(((DiffOTAmountP * 100) / FirstTotalOTAmountP), 2).ToString() + "%" : "#DIV/0!";
                        perTotalPayableP = (FirstTotalTotalPayableP > 0) ? Math.Round(((DiffTotalPayableP * 100) / FirstTotalTotalPayableP), 2).ToString() + "%" : "#DIV/0!";



                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = monthName; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White);
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perNoOfEmpP; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perGrossP; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        cell = sheet.Cells[rowIndex, colIndex++]; cell.Value = perOTHrP; cell.Style.Font.Bold = false;
                        fill = cell.Style.Fill; fill.PatternType = ExcelFillStyle.Solid; fill.BackgroundColor.SetColor(Color.White); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                        border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                        rowIndex++;
                        colIndex = 2;
                    }

                    #endregion
                    #endregion
                }
                #endregion



                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=ComparisonReport.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
        }

        #endregion

        private string GetAmountInStr(double amount, bool bIsround, bool bWithPrecision)
        {
            amount = (bIsround) ? Math.Round(amount, 0) : Math.Round(amount, 2);
            return amount.ToString();
        }


        #region Crystal Report

        public ActionResult PrintSalarySheet_DetailFormat_F6_Bangla(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)
        {
            string BlockIds = string.Empty;
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, IsCompliance, ((User)Session[SessionInfo.CurrentUser]).UserID);

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "SalarySheet_DetailFormat_F6.rpt"));
            rd.SetDataSource(oAMGSalarySheets);
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();
            try
            {
                //string[] months = new string[] { "জানুয়ারী", "ফেব্রুয়ারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "অগাস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর" };
                string[] months = new string[] { "Rvbyqvix", "‡deªyqvwi", "gvP©", "GwcÖj", "‡g", "Ryb", "RyjvB", "AMvó", "‡m‡Þ¤^i", "A‡±vei", "b‡f¤^i", "wW‡m¤^i" };
                string sMonthName = "gvmt " + months[nMonthID - 1] + " " + NumberFormatWithBijoy(nYear.ToString());
                TextObject txtSalaryMonth = (TextObject)rd.ReportDefinition.Sections["Section2"].ReportObjects["txtSalaryMonth"];
                txtSalaryMonth.Text = sMonthName;

                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return File(stream, "application/pdf");
            }
            catch { throw; }
        }
        public string NumberFormatWithBijoy(string sNum)
        {
            //char[] NumbersInBangla = { '০', '১', '২', '৩', '৪', '৫', '৬', '৭', '৮', '৯' };
            char[] NumbersInBangla = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }; //Bijoy Bangla Font
            char[] NumbersInEnglish = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };

            char[] arr = sNum.ToCharArray();

            foreach (char ch in arr)
            {
                int i = 0;
                while (i != 10)
                {
                    if (ch == NumbersInEnglish[i])
                    {
                        sNum = sNum.Replace(ch, NumbersInBangla[i]);
                        break;
                    }
                    i++;
                }
            }
            return sNum;
        }

        public void ExcelSalarySheet_DetailFormat_F6_Bangla(bool IsCompliance, string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, string sBMMIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, string sGroupIDs, string sBlockIDs, double ts)
        {
            string BlockIds = string.Empty;
            List<AMGSalarySheet> oAMGSalarySheets = new List<AMGSalarySheet>();
            oAMGSalarySheets = AMGSalarySheet.Gets(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nMonthID, nYear, bNewJoin, 0, nStartSalaryRange, nEndSalaryRange, sGroupIDs, sBlockIDs, IsCompliance, ((User)Session[SessionInfo.CurrentUser]).UserID);


            //string sSQL = "Select * from SalarySheetSignature";
            //var oSalarySheetSignatures = SalarySheetSignature.Gets(sSQL, ((User)Session[SessionInfo.CurrentUser]).UserID);

            var oCompany = new Company();
            var results = Company.Gets("Select * from View_Company", ((User)(Session[SessionInfo.CurrentUser])).UserID);
            if (results.Any())
                oCompany = results.First();

            #region Header

            List<TableHeader> table_header = new List<TableHeader>();
            //table_header.Add(new TableHeader { Header = "#", Width = 8f, IsRotate = false});
            table_header.Add(new TableHeader { Header = "নাম ও পদবী", Width = 11f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "কার্ড নং ও যোগদানের তারিখ ", Width = 9f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "গ্রেড", Width = 5f, IsRotate = false });

            table_header.Add(new TableHeader { Header = "মোট কর্ম দিবস", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "মাসিক ছুটি", Width = 3f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "উপঃ দিবস", Width = 3f, IsRotate = true });


            table_header.Add(new TableHeader
            {
                Header = "ছুটি সম্মূহ",
                Width = 15f,
                IsRotate = false,
                ChildHeader = new List<TableHeader>()
                {
                    new TableHeader { Header = "ক্ষতি পূরণ", Width = 4f, IsRotate = false},
                    new TableHeader { Header = "নৈ:", Width = 3f, IsRotate = false},
                    new TableHeader { Header = "অ:", Width = 3f, IsRotate = false},
                    new TableHeader { Header = "ডা:", Width = 3f, IsRotate = false}
                }
            });


            table_header.Add(new TableHeader { Header = "অনুঃ দিবস", Width = 3f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "মোট উপঃ দিবস", Width = 4f, IsRotate = false });

            table_header.Add(new TableHeader { Header = "মোট বেতন ", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "মূল বেতন", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "বাড়ি ভাড়া", Width = 6f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "চিকি: ভাতা", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "খাদ্য ভাতা", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "যাতা: ভাতা", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "অর্জিত বেতন ", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "হাজিরা বোনাস", Width = 4f, IsRotate = false });

            table_header.Add(new TableHeader
            {
                Header = "ওভার টাইম",
                Width = 9f,
                IsRotate = false,
                ChildHeader = new List<TableHeader>()
                {
                    new TableHeader { Header = "ঘন্টা", Width = 3f, IsRotate = false},
                    new TableHeader { Header = "রেট", Width = 5f, IsRotate = false},
                    new TableHeader { Header = "টাকা", Width = 6f, IsRotate = false}
                }
            });

            table_header.Add(new TableHeader { Header = "মোট প্রাপ্য বেতন", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "অনুপঃ জন্য কর্তন", Width = 4f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "অগ্রিম/অন্যান্য কর্তন", Width = 6f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "রাজস্ব কর্তন", Width = 4f, IsRotate = true });
            table_header.Add(new TableHeader { Header = "নিট প্রাপ্য বেতন", Width = 7f, IsRotate = false });
            table_header.Add(new TableHeader { Header = "স্বাক্ষর", Width = 9f, IsRotate = false });

            #endregion


            #region Export Excel
            int nRowIndex = 1, nStartCol = 1, nEndCol = 0;
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            using (var excelPackage = new ExcelPackage())
            {
                excelPackage.Workbook.Properties.Author = "ESimSol";
                excelPackage.Workbook.Properties.Title = "Export from ESimSol";
                var sheet = excelPackage.Workbook.Worksheets.Add("Salary Sheet");
                sheet.Name = "Salary Sheet";
                sheet.PrinterSettings.TopMargin = 0;
                sheet.PrinterSettings.BottomMargin = 0;
                sheet.PrinterSettings.LeftMargin = 0;
                sheet.PrinterSettings.RightMargin = 0;

                ExcelTool.SetColumnWidth(table_header, ref sheet, ref nStartCol, ref nEndCol);


                #region Body
                int nCount = 0;
                float cellHeight = 60f;

                var data = oAMGSalarySheets.GroupBy(x => new { x.BUName, x.LocName, x.DptName }, (key, grp) => new
                {
                    BUName = key.BUName,
                    LocName = key.LocName,
                    DptName = key.DptName,
                    Results = grp.ToList()
                });

                foreach (var oItem in data)
                {
                    //FillCell(sheet, nRowIndex, nStartCol++, "Unit Name: " + oItem.BUName + ", Dept. Name: " + oItem.DptName, false);
                    foreach (var obj in oItem.Results)
                    {
                        nStartCol = 1;

                        if (nCount % 7 == 0)
                        {
                            ReportHeader(oItem.BUName, obj.BUAddress, oItem.DptName, oItem.LocName, table_header, ref sheet, ref nRowIndex, nStartCol, nEndCol, nMonthID, nYear);
                        }
                        nCount++;
                        //FillCell(sheet, nRowIndex, nStartCol++, (++nCount).ToString(), false);
                        FillCell(sheet, nRowIndex, nStartCol++, ((obj.EmpNameInBangla == "") ? obj.Name : obj.EmpNameInBangla) + '\n' + ((obj.DsgNameInBangla == "") ? obj.DsgName : obj.DsgNameInBangla), false);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.Code + '\n' + obj.DOJInStr, false);
                        FillCell(sheet, nRowIndex, nStartCol++, obj.Grade, false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.TotalDays.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.DayOffHoliday.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.Present.ToString()), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.LWP.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.CL.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.EL.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.SL.ToString()), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.Absent.ToString()), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(obj.LeaveDays.ToString()), false);

                        //FillCell(sheet, nRowIndex, nStartCol++, obj.EWD.ToString(), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Gross, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Basics, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.HR, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Med, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Food, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Conv, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.GrossEarning, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.AttBonus, 0)), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_HR, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_Rate, 2)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.OT_Amount, 0)), false);

                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Earning, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.AbsentAmount, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Advance, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.Stemp, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, NumberFormat(Global.MillionFormat(obj.NetAmount, 0)), false);
                        FillCell(sheet, nRowIndex, nStartCol++, "-", false);
                        sheet.Row(nRowIndex).Height = cellHeight;
                        sheet.Row(nRowIndex).Style.Font.Size = 8;

                        if (nCount % 7 == 0)
                        {
                            //nRowIndex++;
                            //sheet.Row(nRowIndex).Height = 15;
                            //FillCellMerge(ref sheet, nRowIndex, nRowIndex, 1, nEndCol, " ");

                            nRowIndex++;
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 1, 4, "------------- ");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 5, nEndCol - 5, "-------------");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, nEndCol - 4, nEndCol, "-------------");
                            sheet.Row(nRowIndex).Height = 40;
                            sheet.Row(nRowIndex).Style.VerticalAlignment = ExcelVerticalAlignment.Bottom;

                            nRowIndex++;
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 1, 4, "প্রস্তূতকারক ");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, 5, nEndCol - 5, "প্রধান হিসাব রক্ষক ");
                            FillCellMerge(ref sheet, nRowIndex, nRowIndex, nEndCol - 4, nEndCol, "পরিচালক / ব্যাবস্থাপনা পরিচালক ");

                            PageBreak(ref sheet, nRowIndex, nEndCol);
                        }
                        nRowIndex++;
                    }
                }
                #endregion

                Response.ClearContent();
                Response.BinaryWrite(excelPackage.GetAsByteArray());
                Response.AddHeader("content-disposition", "attachment; filename=SalarySheet-F6.xlsx");
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.Flush();
                Response.End();
            }
            #endregion
        }
        public void ReportHeader(string unitName, string address, string deptName, string locName, List<TableHeader> table_header, ref ExcelWorksheet sheet, ref int nRowIndex, int nStartCol, int nEndCol, int nMonthID, int nYear)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;
            string[] months = new string[] { "জানুয়ারী", "ফেব্রুয়ারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "অগাস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর" };

            #region Report Header
            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = unitName; cell.Style.Font.Bold = true;
            cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;


            //cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            //cell.Merge = true;
            //cell.Value = address; cell.Style.Font.Bold = true;
            //cell.Style.Font.Size = 15; cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            //nRowIndex++;

            //cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nEndCol];
            //cell.Merge = true;
            //cell.Value = "Floor: " + locName; cell.Style.Font.Bold = false;
            //cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            //border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            //nRowIndex++;


            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nStartCol + 4];
            cell.Merge = true;
            cell.Value = "Floor: " + locName; cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, nStartCol + 5, nRowIndex, nEndCol - 5];
            cell.Merge = true;
            cell.Value = address; cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            nRowIndex++;

            cell = sheet.Cells[nRowIndex, nStartCol, nRowIndex, nStartCol + 3];
            cell.Merge = true;
            cell.Value = "Section: " + deptName; cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, nStartCol + 4, nRowIndex, nEndCol - 4];
            cell.Merge = true;
            cell.Value = "বেতন ভাতা ও ওভার টাইম বিবরণী"; cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;

            cell = sheet.Cells[nRowIndex, nEndCol - 3, nRowIndex, nEndCol];
            cell.Merge = true;
            cell.Value = "মাস: " + months[nMonthID - 1] + " " + NumberFormat(nYear.ToString()); cell.Style.Font.Bold = false;
            cell.Style.Font.Size = 11; cell.Style.Font.Color.SetColor(Color.Black); cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
            nRowIndex++;


            ExcelTool.GenerateHeader(table_header, ref sheet, ref nRowIndex, nStartCol, nEndCol, 8);
            #endregion
        }
        public void PageBreak(ref ExcelWorksheet sheet, int nRowIndex, int nEndCol)
        {
            sheet.Row(nRowIndex).PageBreak = true;
            sheet.Row(nEndCol).PageBreak = true;
        }
        private void FillCellMerge(ref ExcelWorksheet sheet, int startRowIndex, int endRowIndex, int startColIndex, int endColIndex, string sVal)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            cell = sheet.Cells[startRowIndex, startColIndex, endRowIndex, endColIndex];
            cell.Merge = true;
            cell.Value = sVal;
            cell.Style.Font.Bold = false;
            cell.Style.WrapText = true;
            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.None;
        }
        private ExcelRange FillCell(ExcelWorksheet sheet, int nRowIndex, int nStartCol, string sVal, bool IsNumber)
        {
            ExcelRange cell;
            OfficeOpenXml.Style.Border border;

            cell = sheet.Cells[nRowIndex, nStartCol++];
            if (IsNumber)
                cell.Value = Convert.ToDouble(sVal);
            else
                cell.Value = sVal;
            cell.Style.Font.Bold = false;
            cell.Style.WrapText = true;
            if (IsNumber)
                cell.Style.Numberformat.Format = "#,##0;(#,##0)";
            cell.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            cell.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            border = cell.Style.Border; border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
            return cell;
        }






        #region Bangla Payslip PDF
        public ActionResult ViewEmployeePaySlipDoubleTable_1_B(string sBU, string sLocationID, string sDepartmentIDs, string sDesignationIDs, string sSalarySchemeIDs, string sEmpIDs, int nPayType, int nMonthID, int nYear, bool bNewJoin, bool bWithPrecision, double nStartSalaryRange, double nEndSalaryRange, bool bGroupByDept, bool bGroupBySerial, string sGroupIDs, string sBlockIDs, double ts, int PC)
        {
            //var oEmployeeSalary = this.GetEmployeePaySlip(sEmpIDs, sDate, nLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, nMonthID);
            //return PartialView(oEmployeeSalary);

            List<EmployeeSalary> oEmployeeSalarys = new List<EmployeeSalary>();
            List<EmployeeSalaryDetail> oEmployeeSalaryDetails = new List<EmployeeSalaryDetail>();

            //EmployeeSalary oEmployeeSalary = this.GetEmployeePaySlip(sEmpIDs, sDate, nLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, nMonthID, bNewJoin, nBlock);
            EmployeeSalary oEmployeeSalary = GetEmployeesSalary(sBU, sLocationID, sDepartmentIDs, sDesignationIDs, sSalarySchemeIDs, sEmpIDs, nPayType, nMonthID, nYear, bNewJoin, nStartSalaryRange, nEndSalaryRange, false, sGroupIDs, sBlockIDs, "");

            oEmployeeSalarys = oEmployeeSalary.EmployeeSalarys;
            oEmployeeSalaryDetails = oEmployeeSalary.EmployeeSalaryDetails;

            var oCompany = new Company();
            oCompany = oCompany.Get(1, ((User)Session[SessionInfo.CurrentUser]).UserID);
            oEmployeeSalary.Company = oCompany;



            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "PaySlipBangla.rpt"));
            rd.SetDataSource(oEmployeeSalary);
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();
            try
            {
                //string[] months = new string[] { "জানুয়ারী", "ফেব্রুয়ারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "অগাস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর" };
                //string[] months = new string[] { "Rvbyqvix", "‡deªyqvwi", "gvP©", "GwcÖj", "‡g", "Ryb", "RyjvB", "AMvó", "‡m‡Þ¤^i", "A‡±vei", "b‡f¤^i", "wW‡m¤^i" };
                //string sMonthName = "gvmt " + months[nMonthID - 1] + " " + NumberFormatWithBijoy(nYear.ToString());
                //TextObject txtSalaryMonth = (TextObject)rd.ReportDefinition.Sections["Section2"].ReportObjects["txtSalaryMonth"];
                //txtSalaryMonth.Text = sMonthName;

                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return File(stream, "application/pdf");
            }
            catch { throw; }

        }
        #endregion

        #endregion

    }
}