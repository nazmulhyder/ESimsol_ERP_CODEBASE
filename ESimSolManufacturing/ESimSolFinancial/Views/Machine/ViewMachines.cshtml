@{
    ViewBag.Title = "Machine";
}

@model IEnumerable <ESimSol.BusinessObjects.Machine>

<div ng-app="MachineModule">
    @*<script src="~/Views/Machine/AdvanceSearch.js"></script>*@
    <div ng-controller="MachineController" style="width:99.5%">
        <div class="ui-grid-top-panel">
            <div class="container">
                <div class="form-inline">
                    <input type="text" ng-model="txtSearchByLot" ng-keyup="SearchByNameCode($event)" placeholder="Search by Code/Name.." class="form-control" style="width:190px" />
                    <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="add()"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> New</button>
                    <button type="button" class="btn btn-sm btn-primary" aria-label=" left align" ng-click="edit()"> <span class="glyphicon glyphicon-edit" aria-hidden="true"></span> Edit</button>
                    <button type="button" class="btn btn-sm btn-primary" aria-label=" left align" ng-click="delete()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Delete</button>
                    <button type="button" class="btn btn-sm btn-primary" aria-label=" left align" ng-click="view()"> <span class="glyphicon glyphicon-list-alt" aria-hidden="true"></span> View</button>
                    <button type="button" class="btn btn-sm btn-primary" aria-label=" left align" ng-click="updateSQ()"> <span class="glyphicon glyphicon-edit" aria-hidden="true"></span> Sequences</button>
                    <button type="button" class="btn btn-sm btn-primary" aria-label=" left align" ng-click="Activity()"> <span class="glyphicon glyphicon-list-alt" aria-hidden="true"></span> Activity</button>
                    <button id="btnMachineLiquor" type="button" class="btn btn-sm btn-primary" aria-label=" left align"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>Machine Liquor</button>
                    
                </div>
            </div>
        </div>
        <div style="width:100%" ui-grid="gridOptions" ui-grid-selection class="grid"></div>
        @*<div class="custom-pagination">
                <ul uib-pagination boundary-links="true" total-items="totalItems" ng-model="currentPage" items-per-page="itemPerPage" max-size="maxSize" ng-change="pageChanged()" class="pagination-sm" previous-text="&lsaquo;" next-text="&rsaquo;" first-text="&laquo;" last-text="&raquo;"></ul>
            </div>*@
    </div>
</div>

 <!--NAZMUL 17/11/2019 -->
 <div id="winMachineLiquor" class="easyui-window winstyle" style="height:auto;width:60%" data-options="modal:true,closed:true,collapsible:false,minimizable:false,maximizable:false,closable:false">
    <div class="menuMainCollectionTable">
        <div style="overflow:hidden;display:block;">
            <fieldset style="height:10%">
                <legend style="font-weight: bold">Machine/Info </legend>
                <div style="overflow:hidden;display:block">
                    <div style="overflow:hidden;float:left; width:48%">
                        <div style="overflow:hidden;float:left;width:30%;text-align:right">
                            Machine Name:
                        </div>
                        <div style="overflow:hidden;float:left;width:70%">
                            <input type="text" id="txtMachineName" style="width:100%" disabled />
                        </div>
                    </div>
                    <div style="overflow:hidden;float:left; width:48%">
                        <div style="overflow:hidden;float:left;width:30%;text-align:right">
                            Machine Capacity:
                        </div>
                        <div style="overflow:hidden;float:left;width:70%">
                            <input id="txtCapacity" type="text" style=" width:100%;text-align:right" disabled />
                        </div>
                    </div>
                </div>
            </fieldset>
        </div>
        <div  style="display:block;overflow:hidden;height:200px">
            <table title="Add Machine Liquor" id="tblMachineLiquor" class="easyui-datagrid" showfooter="true" fit="true" fitcolumns="true" rownumbers="true" pagination="false" singleselect="true" autorowheight="false" toolbar="#toolbar3">
                <thead>
                    <tr>
                        <th field="LabelST" width="15%">Label</th>
                        <th field="LiquorST" align="right" width="15%">Liquor</th>
                        <th field="LastUpdateByName" width="15%">Update By</th>

                    </tr>
                </thead>
            </table>
            <div id="toolbar3">
                Label:<input id="txtMachineLabel" type="text" style="width:12%" placeholder="Label" />
                Liquor:<input id="txtLiquor" type="text" style="width:12%;text-align:right" placeholder="Liquor" />
                <a id="btnMLAdd" href="javascript:void(0)" class="easyui-linkbutton easyui-tooltip" title="Add" iconcls="icon-add" plain="true">Add</a>
                <a id="btnMLDelete" href="javascript:void(0)" class="easyui-linkbutton easyui-tooltip" title="Delete" iconcls="icon-remove" plain="true">Delete</a>
            </div>
        </div>
        <div style="display:block;overflow:hidden;">
            <fieldset style="height:10%">
                <legend style="font-weight: bold">Action : </legend>
                <table border="0" cellspacing="2" cellpadding="2" style="font-size: 11px; font-weight: bold; width:100%">
                    <tr>
                        <td style="width:60%; text-align:right"></td>
                        <td style="width:40%;text-align:right;">
                            <a id="btnMachineLiquorClose" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="true">Close</a>
                        </td>
                    </tr>
                </table>
            </fieldset>
        </div>
    </div>
    </div>

<style type="text/css">

     .form-control{
        height:26px;
        padding:0px 6px;
        font-size:12px;
    }
    .grid {
        height: 450px;
        width: 100%;
    }

    .custom-pagination {
        margin-top: -15px;
        margin-bottom: -15px;
    }

    .spacing {
        padding-bottom: 5px;
    }
</style>

<script type="text/javascript">

    var pager =[];
    var oMachines = [];
    var _nBUID=0;
    _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
     oMachines =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    _nBUID =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BUID));
   
    $('#txtMachineLabel').icsCurrencyBox();
    $('#txtAmount').icsCurrencyBox();
    debugger;
    var  MachineModule = angular.module('MachineModule', ['ngAnimate', 'ui.bootstrap', 'ui.grid','ui.grid.selection', 'ui.grid.cellNav','ms.service']);
    MachineModule.controller('MachineController', function ($scope, $http, $uibModal, $log, uiGridConstants, msModal, userSession) {
        debugger;
        oMachines= (userSession.getData('Machines').length>0)? userSession.getData('Machines'):oMachines;
      
        $scope.gridOptions ={
            enableSorting: true,
            enableFullRowSelection: true,
            //enableRowHeaderSelection: false,
            enableSelectAll: false,
            multiSelect:false,
            enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,
            //enableVerticalScrollbar : false,
            columnDefs: [
                { field: 'Code', name: 'Code', width: '12%' },
                { field: 'Name', name: 'Name', width:'10%', enableCellEdit: false },
                { field: 'MachineTypeName', name: 'Type', width:'12%', enableCellEdit: false },
                { field: 'Capacity', name: 'Capacity', width:'8%', cellFilter: 'number:2', cellClass:'text-right'},
                { field: 'Capacity2', name: 'Capacity 2', width:'12%', enableCellEdit: false },
                { field: 'LocationName', name: 'Location', width: '15%' },
                { field: 'BUnit', name: 'Unit', width: '10%' },
                { field: 'SequenceNo', name: 'Sequence', width:'8%', cellFilter: 'number:0', cellClass:'text-center'},
                { field: 'ActivitySt', name: 'Activity', width: '10%' }
            ],
            data:oMachines,
            onRegisterApi:function(gridApi) 
            {
                $scope.gridApi = gridApi;
                $scope.gridApi.selection.clearSelectedRows();
                $scope.gridApi.core.refresh();
                debugger;
                if(oMachines.length>0 && userSession.getRowIndex()>=0)
                {
                    $scope.gridApi.grid.modifyRows($scope.gridOptions.data);
                    $scope.gridApi.selection.selectRow($scope.gridOptions.data[userSession.getRowIndex()]);
                    //$scope.RowSelect(oMachines[userSession.getRowIndex()]);
                }
                userSession.clear();
            }
        };
        $scope.SearchByNameCode = function(e)
        {
            debugger;
            var txtSearchByLot = $scope.txtSearchByLot;
            var rows = $scope.gridOptions.data;
            var sTempName="";
            var oSearchedList = [];
            var oCurrentList = $scope.gridOptions.data;
            if (e.which == 8)
            {
                oCurrentList = oMachines;
            }
            for(i=0;i<oCurrentList.length;++i)
            {
                sTempName=oCurrentList[i].Code;
                n=sTempName.toUpperCase().indexOf(txtSearchByLot.toUpperCase())
                if(n!=-1)
                {
                    oSearchedList.push(oCurrentList[i]);
                }else
                {
                    sTempName=oCurrentList[i].Name;
                    n=sTempName.toUpperCase().indexOf(txtSearchByLot.toUpperCase())
                    if(n!=-1)
                    {
                        oSearchedList.push(oCurrentList[i]);
                    }
                }
            }
            $scope.gridOptions= {data: oSearchedList};
        }
        
        $scope.add = function () {
            sessionStorage.setItem("Operation", "New");
            sessionStorage.removeItem("SelectedRowIndex");
            sessionStorage.setItem("SelectedRowIndex",-1);
            sessionStorage.setItem("MachineHeader", "Add Machine");
            sessionStorage.setItem("Machines", JSON.stringify($scope.gridOptions.data));
            sessionStorage.setItem("BackLink", window.location.href);
         
            var tsv=((new Date()).getTime())/1000;
            window.location.href = _sBaseAddress+ "/Machine/ViewMachine?nId=0&buid="+_nBUID+"&ts="+tsv;
        };

        $scope.edit = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
          
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
           
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.MachineID==data[0].MachineID){
                  
                    sessionStorage.setItem("Operation", "Edit");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("MachineHeader", "Edit Machine");
                    sessionStorage.setItem("Machines", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/Machine/ViewMachine?nId="+value.MachineID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };

        $scope.delete = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'No item found to delete.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
           
            if (!confirm("Confirm to Delete?")) return ;
          
            $http.post('/Machine/Delete',JSON.stringify(data[0])).then(
                            function (response) {
                                if(jQuery.parseJSON(response.data)=='Deleted'){
                                    angular.forEach($scope.gridOptions.data,function(value,index){
                                        if(value.MachineID==data[0].MachineID){
                                            $scope.gridOptions.data.splice(index,1);
                                        }
                                    },$scope.gridOptions.data);
                                    alert("Delete Successfully.");
                                } 
                                else{
                                    alert(jQuery.parseJSON(response.data));
                                }
                            },
                            function (response) {alert(jQuery.parseJSON(response.data));}
                        );

        };

        $scope.view = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }

            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.MachineID==data[0].MachineID){
                    sessionStorage.setItem("Operation", "View");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("MachineHeader", "View Machine");
                    sessionStorage.setItem("Machines", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/Machine/ViewMachine?nId="+value.MachineID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };

        $scope.Activity =  function () {
            var oMachine=$scope.gridApi.selection.getSelectedRows()[0];
            if(oMachine==null || oMachine.MachineID<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if (!confirm("Confirm to Change Activity?")) return ;
            debugger;
            $http.post(_sBaseAddress+'/Machine/Activity',JSON.stringify(oMachine)).then(
                function (response) {
                    var result=jQuery.parseJSON(response.data);
                    if(result.MachineID>0)
                    {
                        debugger;
                        $scope.gridOptions.data[$scope.gridOptions.data.indexOf(oMachine)]=result;
                        $scope.gridApi.selection.selectRow(result);
                        // msModal.Message({headerTitle : '', bodyText:'Save Successfully.', sucessText : 'Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                    }
                    else
                    {
                        alert(result.ErrorMessage);
                    }

                },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
        );
        };
        
     
        $scope.updateSQ = function () {
            debugger;
            sessionStorage.setItem("Operation", "UpdateSQ");
            sessionStorage.setItem("MachineHeader", "Update Sequences");
            sessionStorage.setItem("Machines", JSON.stringify($scope.gridOptions.data));
            sessionStorage.setItem("BackLink", window.location.href);
            var tsv=((new Date()).getTime())/1000;
            window.location.href = _sBaseAddress+ "/Machine/ViewMachineSequences?buid="+_nBUID+"&ts="+tsv;
        };

        $scope.PrintPreview = function ()
        {
            var data = $scope.gridApi.selection.getSelectedRows();
            var oMachine = data[0];
            if(oMachine==null || oMachine.MachineID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            window.open(_sBaseAddress + '/Machine/PrintMachinePreview?id='+oMachine.MachineID);
        };

        //nazmul-17/11/2019
        $('#btnMLAdd').click(function(){
            var data=$scope.gridApi.selection.getSelectedRows();
            $('#txtMachineName').data('MachineID',data[0].MachineID);
            debugger;
            var oMachineLiquor =
                {
                    MachineLiquorID : 0,
                    MachineID: parseInt($('#txtMachineName').data('MachineID')),
                    Label : parseFloat(TempRemoveComma($("#txtMachineLabel").val())),
                    Liquor : parseFloat(TempRemoveComma($("#txtLiquor").val()))
                }
            debugger;
            if(!ValidateInput()){return;}
            $.ajax({
                type: "POST",
                dataType: "json",
                url :  _sBaseAddress+"/Machine/MachineLiquorSave",
                traditional: true,
                data:  JSON.stringify(oMachineLiquor),
                contentType: "application/json; charset=utf-8",
                success: function (data)
                {
                    debugger;
                    oMachineLiquor = jQuery.parseJSON(data);
                    if (oMachineLiquor.ErrorMessage=="" || oMachineLiquor.ErrorMessage==null)
                    {
                        alert("Data Saved sucessfully");
                        RefreshML();
                        $('#tblMachineLiquor').datagrid('appendRow',oMachineLiquor);
                        var oData = $('#tblMachineLiquor').datagrid('getRows');
                        $('#tblMachineLiquor').datagrid('selectRow',oData.length-1);
                    }
                    else
                    {
                        alert(oMachineLiquor.ErrorMessage);
                    }
                },
                error: function (xhr, status, error) {
                    alert(error);
                }

            });

        });

        function ValidateInput()
        {
            debugger;
            var nMachineID = $('#txtMachineName').data('MachineID');
            var mLabel = parseFloat(TempRemoveComma($("#txtMachineLabel").val()));
            var mLiquor = parseFloat(TempRemoveComma($("#txtLiquor").val()));
            if(nMachineID<=0 || nMachineID == null){
                alert("Machine Required!");
                return false;
            }
            if(mLabel == 0 || mLabel == null)
            {
                alert("Machine Label Required");
                $("#txtMachineLabel").focus();
                return false;
            }
            if(mLiquor == 0 || mLiquor == null)
            {
                alert("Machine Liquor Required");
                $("#txtLiquor").focus();
                return false;
            }           
            return true;
        }

        $("#btnMLDelete").click(function(){
            debugger;
            var oMachineLiquor = $('#tblMachineLiquor').datagrid('getSelected');
            if(oMachineLiquor==null || oMachineLiquor.MachineLiquorID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            var SelectedRowIndex=$('#tblMachineLiquor').datagrid('getRowIndex',oMachineLiquor);
            $.ajax({
                type: "GET",
                dataType: "json",
                url :  _sBaseAddress+ "/Machine/MachineLiquorDelete",
                data: {id: oMachineLiquor.MachineLiquorID},
                contentType: "application/json; charset=utf-8",
                success: function (data)
                {
                    debugger;
                    feedbackmessage = jQuery.parseJSON(data);
                    if (feedbackmessage == "Deleted")
                    {
                        alert("Delete sucessfully");
                        $('#tblMachineLiquor').datagrid('deleteRow',SelectedRowIndex);

                    }
                    else
                    {
                        alert(feedbackmessage);
                    }
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });

        });
        function RefreshML(){
            $('#txtMachineLabel').val(0);
            $('#txtLiquor').val(0);
        }
        $("#btnMachineLiquor").click(function(){
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            $("#txtMachineName").val(data[0].Name);
            $("#txtCapacity").val(data[0].Capacity);
            txtMachineName.style.fontWeight="bold";
            txtCapacity.style.fontWeight="bold";
            $("#winMachineLiquor").icsWindow('open',"Add Machine Liquor");
        });

        $("#btnMachineLiquor").click(function(){
            debugger;
            RefreshML();
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data[0].MachineID<=0)
            {
                alert("Please select a item from list!");
                return;
            }

            var oMachineLiquor={
                MachineID : parseInt(data[0].MachineID)
            }
            $.ajax({
                type: "POST",
                dataType: "json",
                url :  _sBaseAddress+ "/Machine/GetAllMachineLiquor",
                traditional: true,
                data:  JSON.stringify(oMachineLiquor),
                contentType: "application/json; charset=utf-8",
                success: function (data)
                {
                    debugger;
                    _oMachineLiquors = jQuery.parseJSON(data);
                    if (_oMachineLiquors.length>0)
                    {
                        RefreshML();
                        DynamicRefreshList(_oMachineLiquors,'tblMachineLiquor');
                    }
                    else
                    {
                        DynamicRefreshList([],'tblMachineLiquor');
                    }
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });

            $("#winMktSaleTarget").icsWindow('open',"Add Mkt Sales Target");
        });

        $("#btnMachineLiquorClose").click(function(){
            debugger;
            $("#winMachineLiquor").icsWindow('close');
            RefreshML();
        });

        //REMOVE COMMA
        function TempRemoveComma(userInput) {
            var amountInString = "";
            if (userInput === null || userInput === "") {
                amountInString = "0.00";
            }
            else {
                amountInString = "";
                for (var i = 0; i < userInput.length; i++) {
                    var char = userInput.charAt(i);
                    var charForCheck = char;
                    char = char.match(/\d+/g);
                    if (char != null) {
                        amountInString = amountInString + userInput.charAt(i);
                        count = 1;
                    }
                    else if (charForCheck == ",") {
                        continue;
                    }
                    else if (charForCheck == ".") {
                        amountInString = amountInString + userInput.charAt(i);
                    }
                }
            }
            //debugger;
            return (isNaN(parseFloat(amountInString)) ? parseFloat(0.00) : parseFloat(amountInString)).toFixed(3);
        }
        function TempAddComma(nStr) {
            nStr += '';
            x = nStr.split('.');
            x1 = x[0];
            x2 = x.length > 1 ? '.' + x[1] : '';
            var process = /(\d+)(\d{3})/;
            while (process.test(x1)) {
                x1 = x1.replace(process, '$1' + ',' + '$2');
            }
            return x1 + x2;
        }

       

    });
   

</script>
                       


              
