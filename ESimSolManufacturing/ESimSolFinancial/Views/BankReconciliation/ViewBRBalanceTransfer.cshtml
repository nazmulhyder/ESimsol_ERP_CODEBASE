@model ESimSol.BusinessObjects.BankReconciliation
@{
    ViewBag.Title = "Bank Reconciliation";
}

<div class="menuMainCollectionTable" style="font-family:Tahoma; margin-left: 0px; height: 100%; width:100%">
    <div id="divVoucher" class="easyui-panel" title="" fit="true" style="width:100%;padding:1px">                
        <div style="height:100%; width:100%">            
            <table id="tblBankReconciliation" title="Bank Reconciliation" class="easyui-datagrid" style="height:100%; width:100%;" fitcolumns="false" rownumbers="true" pagination="false" singleselect="true" autorowheight="false" toolbar="#toolbarBankReconcilation" >
                <thead>
                    <tr>
                        <th field="SubledgerCode" width="15%" align="left">Code</th>
                        <th field="SubledgerName" width="35%" align="left">SubLedger Name</th>
                        <th field="CurrencyName" width="13%" align="center">Currency</th>
                        <th field="AccountHeadName" width="35%" align="left">A/C Head Name</th>
                    </tr>
                </thead>
            </table>
        </div>
        <div id="toolbarBankReconcilation" style="width:100%">
            <table border="0" cellpadding="2" cellspacing="2" style="width:100%">
                <tr>                    
                    <td style="width:10%; font-size:12px; text-align:center">
                        <select style="width:98%" id="cboBusinessUnit"> </select>
                    </td>
                    <td style="width:35%; font-size:12px; text-align:center">
                        <input type="text" placeholder="Search by Account Head Name" style="width:98%" id="txtAccountHead" />
                    </td>
                    <td style="width:13%; font-size:12px; text-align:center">
                        <select style="width:95%" id="cboCurrency"> </select>
                    </td>
                    <td style="width:8%; font-size:12px; text-align:left">
                        <input type="button" value="Refresh" id="btnRefresh" style="width:100%; font-weight:bold" />
                    </td>
                    <td style="font-size:12px; font-weight:bold; width:150px; text-align:left">
                        A/C Session:<select id="cboSession" style="width:150px"> </select>
                    </td>
                    <td style="width:8%; font-size:12px; text-align:left">
                        <input type="button" value="Commit" id="btnCommit" style="width:100%; font-weight:bold" />
                    </td>            
                </tr>
            </table>
        </div> 
    </div>
</div>

<style type="text/css">
    .DateClass {
        width: 100%;
        border: none !important;
        text-align: center !important;
    }
    .RemarksClass {
        width: 100%;
        border: none !important;
        text-align: left !important;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {
        var oBankReconciliation = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
        var oCurrencys = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.Currencys));
        var oBusinessUnits = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BusinessUnits));
        var oAccountingSessions = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.AccountingSessions));
        $("#cboSession").icsLoadCombo({ List: oAccountingSessions, OptionValue: "AccountingSessionID", DisplayText: "SessionName" });

        $('#cboCurrency').data('Currencys', oCurrencys);
        $('#cboBusinessUnit').data('BusinessUnits', oBusinessUnits);
        $('#txtAccountHead').data('AccountHead', null);
     
        $('#Mainlayout').layout('collapse', 'west');
        RefreshComboBoxes(parseInt(oBankReconciliation.BUID));
        $('#txtAccountHead').focus();

    });

  

    function RefreshComboBoxes(nBUID) {
        var oCurrencys = $('#cboCurrency').data('Currencys');
        var oBusinessUnits = $('#cboBusinessUnit').data('BusinessUnits');

        $("#cboCurrency").icsLoadCombo({ List: oCurrencys, OptionValue: "CurrencyID", DisplayText: "NameSymbol", InitialValue: "--Select Currency--" });
        $("#cboBusinessUnit").icsLoadCombo({ List: oBusinessUnits, OptionValue: "BusinessUnitID", DisplayText: "ShortNameCode", InitialValue: "--Business Unit--"});
        $('#cboBusinessUnit').val(parseInt(nBUID));
    }

    $('#cboBusinessUnit').change(function(){
        var nBUID =parseInt($("#cboBusinessUnit").val());
        window.location.href =  sessionStorage.getItem('BaseAddress') +'/BankReconciliation/ViewBRBalanceTransfer?buid='+parseInt(nBUID)+'&menuid='+parseInt(sessionStorage.getItem('MenuID'));
    });

   
    $('#btnCommit').click(function(){
        var oBankReconciliationOpenning= $('#tblBankReconciliation').datagrid('getSelected');
        if(oBankReconciliationOpenning==null || parseInt(oBankReconciliationOpenning.AccountHeadID) <=0)
        {
            alert("Please select an Item from List!");
            return false;
        }
        if(parseInt($('#cboSession').val()) <= 0)
        {
            alert("Please select A/C Session.");
            $('#cboSession').focus();
            return false;
        }
        if (!confirm("Confirm to Commit?")) return ;
        var oBRO = oBankReconciliationOpenning;
        oBRO.AccountingSessionID = parseInt($('#cboSession').val());
        $.icsProgressBar(true);
            $.ajax({
                type: "POST",
                dataType: "json",
                url : sessionStorage.getItem('BaseAddress')+  "/BankReconciliation/CommitBR",
                traditional: true,
                data: JSON.stringify(oBRO),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    $.icsProgressBar(false);
                    var sFeedBack = jQuery.parseJSON(data);
                    if(sFeedBack=="Success")
                    {
                        alert("Data Save Successfully.");
                    }
                    else
                    {
                        alert(sFeedBack);
                    }
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });
 
    });

    function ValidateInput()
    {
        if($('#cboBusinessUnit').val() === null||parseInt($('#cboBusinessUnit').val()) <= 0)
        {
            alert("Please select Business Unit!");
            $('#cboBusinessUnit').focus();
            return false;
        }
        if($('#txtAccountHead').data('AccountHead')===null)
        {
            alert("Please Pick A/C Head.");
            $('#txtAccountHead').focus();
            return false;
        }
        
        if($('#cboCurrency').val()=== null || parseInt($('#cboCurrency').val()) <= 0)
        {
            alert("Please select Currency!");
            $('#cboCurrency').focus();
            return false;
        }
        return true;
    }

    $('#btnRefresh').click(function(){
        RefreshList([]);
     
        if(!ValidateInput()) return;
        var oAccountHead = $('#txtAccountHead').data('AccountHead');
        var oBankReconciliationOpenning =   {
            BusinessUnitID : parseInt($('#cboBusinessUnit').val()),
            CurrencyID : parseInt($('#cboCurrency').val()),
            AccountHeadID : parseInt(oAccountHead.AccountHeadID)
        };
        $.icsProgressBar(true);
        $.ajax({
            type: "POST",
            dataType: "json",
            url: sessionStorage.getItem("BaseAddress")+"/BankReconciliation/GetSubLedgers",
            traditional: true,
            data: JSON.stringify(oBankReconciliationOpenning),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                $.icsProgressBar(false);
                var oBankReconciliationOpennins  = data;
                if (oBankReconciliationOpennins.length>0)
                {
                    if(oBankReconciliationOpennins[0].ErrorMessage=== ""||oBankReconciliationOpennins[0].ErrorMessage===null) 
                    {
                        RefreshList(oBankReconciliationOpennins);   
                    }else
                    {
                        alert(oBankReconciliationOpennins[0].ErrorMessage);
                    }
                }
                
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });
    });

    function RefreshList(oBRObjs)
    {
        var data=oBRObjs;
        data={"total":""+data.length+"","rows":data};
        $('#tblBankReconciliation').datagrid('loadData',data);
        //MakeFooterColumn('tblBankReconciliation');
    }
    function MakeFooterColumn(sTable)
    {
        var nOpeningBalance = parseFloat($('#txtOpeningBalance').data('OpeningBalance'));
        var nTotalDrAmount = GetSum('DrAmount',sTable, true);
        var nTotalCrAmount = GetSum('CrAmount',sTable, true);
        var nClosingBalance = (parseFloat(nOpeningBalance) + parseFloat(nTotalDrAmount) - parseFloat(nTotalCrAmount));
        var sClosingBalance = "";
        if(nClosingBalance<0)
        {
            sClosingBalance = "Closing Balance = ("+ formatPrice(nClosingBalance*(-1))+")";
        }
        else
        {
            sClosingBalance = "Closing Balance = "+ formatPrice(nClosingBalance);
        }
        var nUneffectDrAmount = GetSum('DrAmount',sTable, false);
        var nUneffectCrAmount = GetSum('CrAmount',sTable, false);
        sClosingBalance = sClosingBalance+" || Unaffected (Dr: "+ formatPrice(nUneffectDrAmount)+" || Cr: "+ formatPrice(nUneffectCrAmount)+")";

        var FooterField=[];
        var obj=new Object();
        var FieldNames=$('#'+sTable).data();
        if(sTable=='tblBankReconciliation')
        {
            //'formatPriceFor3digit'
            obj['VNo'] = "Grand Total: ";
            obj['RVAH'] = sClosingBalance;
            obj['RDateSt'] = "";
            obj['DrAmountSt'] = formatPrice(nTotalDrAmount);
            obj['CrAmountSt'] = formatPrice(nTotalCrAmount);
        }
        FooterField.push(obj);
        $('#'+sTable).datagrid('reloadFooter',FooterField);
    }

    function GetSum(sFieldName,sTable,bIsReconcile)
    {
        var sum = 0;
        var data=$('#'+sTable).datagrid('getRows');
        //var data=$('#'+sTable).datagrid('getRows').select(sFieldName);
        //for (i = 0; i < data.length; i++)
        //{
        //    sum = sum + parseFloat(data[i]);
        //}
        for (i = 0; i < data.length; i++)
        {
            if(bIsReconcile===true)
            {
                if(data[i].RDateSt!="")
                {
                    if(sFieldName==="DrAmount")
                    {
                        sum = sum + parseFloat(data[i].DrAmount);
                    }
                    else if(sFieldName==="CrAmount")
                    {
                        sum = sum + parseFloat(data[i].CrAmount);
                    }
                }
            }
            else
            {
                if(data[i].RDateSt==="")
                {
                    if(sFieldName==="DrAmount")
                    {
                        sum = sum + parseFloat(data[i].DrAmount);
                    }
                    else if(sFieldName==="CrAmount")
                    {
                        sum = sum + parseFloat(data[i].CrAmount);
                    }
                }
            }
        }
        return sum;
    }

    function CapitaliseFirstLetter(string)
    {
        var result = string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
        return result;
    }



    $('#btnClose').click(function (e){
        window.location.href = window.location.href;
    });


   
    $("#txtAccountHead").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) // Enter Press
        {
            var sAccountHeadName = $.trim($('#txtAccountHead').val())
            if(sAccountHeadName === null || sAccountHeadName === "")
            {
                alert("Please enter payable account Name!");
                $('#txtAccountHead').focus();
                return;
            }

            var oChatOfAccount = {
                AccountHeadCodeName : sAccountHeadName
            }
            PickAccountHeads(oChatOfAccount);
        }
    });

    $('#txtAccountHead').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 8) //backspace=8
        {
            $("#txtAccountHead").removeClass("fontColorOfPickItem");
            $('#txtAccountHead').data('AccountHead', null);
        }
    });

    function PickAccountHeads(oChatOfAccount)
    {
        var obj = {
            BaseAddress: sessionStorage.getItem("BaseAddress"),
            Object: oChatOfAccount,
            ControllerName: "BankReconciliation",
            ActionName: "GetsCOAByCodeOrName",
            IsWinClose: false
        };
        $.icsProgressBar(true);
        $.icsDataGets(obj, function (response) {
            $.icsProgressBar(false);
            if (response.status && response.objs.length > 0) {
                if (response.objs[0].AccountHeadID > 0) {
                    var tblColums = [];
                    var oColumn = { field: "AccountCode", title: "Account Code", width: 120, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "AccountHeadName", title: "Account Name", width: 220, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "ParentHeadName", title: "Category Name", width: 200, align: "left" }; tblColums.push(oColumn);
                    var oPickerParam = {
                        winid: 'winAccountHead',
                        winclass: 'clsAccountHead',
                        winwidth: 600,
                        winheight: 460,
                        tableid: 'tblAccountHeads',
                        tablecolumns: tblColums,
                        datalist: response.objs,
                        multiplereturn: false,
                        searchingbyfieldName: 'AccountHeadName',
                        windowTittle: 'Account Head List'
                    };
                    $.icsPicker(oPickerParam);
                    IntializePickerbutton(oPickerParam);
                }
                else { alert(response.objs[0].ErrorMessage); }
            }else{
                alert("Data Not Found.");
                return;
            }
        });
    }
    //End AccountHead Picker

    //End Subledger Picker

    function IntializePickerbutton(oPickerobj) {
        $("#" + oPickerobj.winid).find("#btnOk").click(function () {
            //for Single Select
            SetPickerValueAssign(oPickerobj);
        });
        $(document).find('.' + oPickerobj.winclass).keydown(function (e) {
            if (e.which == 13)//enter=13
            {
                SetPickerValueAssign(oPickerobj);
            }
        });
    }

    function SetPickerValueAssign(oPickerobj) {
        var oreturnObj = null, oreturnobjs = [];
        if (oPickerobj.multiplereturn) {
            oreturnobjs = $('#' + oPickerobj.tableid).datagrid('getChecked');
        } else {
            oreturnObj = $('#' + oPickerobj.tableid).datagrid('getSelected');
        }
        $("#" + oPickerobj.winid).icsWindow("close");
        $("#" + oPickerobj.winid).remove();

        if (oPickerobj.winid === 'winAccountHead')
        {
            if (oreturnObj != null && parseInt(oreturnObj.AccountHeadID) > 0) {
                $('#txtAccountHead').val(oreturnObj.AccountHeadName);
                $('#txtAccountHead').addClass('fontColorOfPickItem');
                $('#txtAccountHead').data('AccountHead', oreturnObj);
                $("#cboComponentType").val(parseInt(oreturnObj.ComponentID));
                $('#txtSubledger').focus();
            }
        }
      
    }

   
  
</script>