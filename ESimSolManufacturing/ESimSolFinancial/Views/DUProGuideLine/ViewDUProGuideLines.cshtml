@{
    ViewBag.Title = "DU Production List";
}

@model IEnumerable <ESimSol.BusinessObjects.DUProGuideLine>

<div ng-app="DUProGuideLineModule" >
    <div ng-controller="DUProGuideLineController">
        <div class="ui-grid-top-panel form-inline" style="width: 100%;">
     
                <div class="form-inline">
                    <input type="text" style="width:15%" class="form-control" ng-model="OrderNo" aria-label="Left Align" ng-keydown="SearchByOrderNo($event)" ng-hide="btnAdvSearch" placeholder="Type Order No And Press Enter..">
                    <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="AdvanceSearch()" ng-hide="btnAdvSearch"> <span class="glyphicon glyphicon-search" aria-hidden="true"> Adv.Search</span></button>

                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="add()" ng-hide="btnAdd"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> New</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="edit()" ng-hide="btnEdit"> <span class="glyphicon glyphicon-edit" aria-hidden="true"></span> Edit</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="delete()" ng-hide="btnDelete"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Delete</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="view()" ng-hide="btnView"> <span class="glyphicon glyphicon-list-alt" aria-hidden="true"></span> View {{lblView}}</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Update()" ng-hide="btnUpdate"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Update OrderNo</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Approve()" ng-hide="btnApprove"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Approve</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="UndoApprove()" ng-hide="btnUndoApprove"> <span class="glyphicon glyphicon-circle-arrow-down" aria-hidden="true"></span> Undo Approve</button>
                    @*<button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Issue()" ng-hide="btnIssue"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Issue</button>*@
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Receive()" ng-hide="btnReceive"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Receive</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="ReturnToParty()" ng-hide="btnReturnToParty"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Return To Party</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Return()" ng-hide="btnReturn"> <span class="glyphicon glyphicon-edit" aria-hidden="true"></span> Return</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PrintPreview()"> <span class="glyphicon glyphicon-print" aria-hidden="true"></span> Preview</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PrintStatement()"> <span class="glyphicon glyphicon-print" aria-hidden="true"></span> Statement</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PrintReport()"> <span class="glyphicon glyphicon-print" aria-hidden="true"></span> Report</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PrintReportV2()"> <span class="glyphicon glyphicon-print" aria-hidden="true"></span> Report V2</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PrintXL()"> <span class="glyphicon glyphicon-print" aria-hidden="true"></span> Export XL</button>
                </div>
        </div>
        <div class="row" style="margin:0px; padding:0; width:99%">
            <div style="height:500px" ui-grid="gridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav class="grid ui-grid-selectable"></div>
        </div>
    </div>
</div>

<style type="text/css">

     .form-control{
        height:26px;
        padding:0px 6px;
        font-size:12px;
    }
    .grid {
        height: 450px;
        width: 100%;
    }

    .custom-pagination {
        margin-top: -15px;
        margin-bottom: -15px;
    }

    .spacing {
        padding-bottom: 5px;
    }
</style>
<script src="~/Views/DUProGuideLine/AdvSearchDUProGuideLine.js"></script>

<script type="text/javascript">

    var pager =[];
    var _nBUID=0;
    var oAuthorizationRolesMapping =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.AuthorizationRolesMapping]));
    _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    var oDUProGuideLines =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    _nBUID =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BUID));

    var oReceiveStores =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.ReceivedStores));
    var oProductNatures =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.ProductNatures));
    var oOrderTypes = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.DUOrderSetups));
    var oCompareOperators = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.CompareOperators));

    debugger;
    var  DUProGuideLineModule = angular.module('DUProGuideLineModule', ['ngAnimate', 'ui.bootstrap', 'ui.grid','ui.grid.selection', 'ui.grid.cellNav','ui.grid.resizeColumns','ms.service','DUProGuideLine.service']);
    DUProGuideLineModule.controller('DUProGuideLineController', function ($scope, $http, $uibModal,$interval,$timeout,  $log, uiGridConstants, msModal, userSession,DUProGuideLineservice) {
        debugger;
        oDUProGuideLines= (userSession.getData('DUProGuideLines').length>0)? userSession.getData('DUProGuideLines'):oDUProGuideLines;
        $scope.CompareOperators= oCompareOperators;
        $scope.ReceiveStores=oReceiveStores;
        $scope.ProductTypes=oProductNatures;
        $scope.OrderTypes=oOrderTypes;
        $scope.BUID=_nBUID;
        $scope.lblView="";
        //$scope.btnAdd = $scope.btnEdit = $scope.btnDelete = $scope.btnApprove= $scope.btnIssue =$scope.btnReceive = $scope.btnUndoApprove =false;
        $scope.btnAdd = $scope.btnEdit = $scope.btnDelete = $scope.btnReceive =$scope.btnReturnToParty= $scope.btnReturn =$scope.btnApprove=$scope.btnUpdate= $scope.btnUndoApprove=false;

        $scope.gridOptions ={
            enableSorting: true,
            enableFullRowSelection: true,
            //enableRowHeaderSelection: false,
            enableSelectAll: false,
            multiSelect:false,
            enableHorizontalScrollbar: uiGridConstants.scrollbars.ALWAYS,
            columnDefs: [
                {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'SLNo', name: 'SL No', width: '10%' },
                { field: 'DyeingOrderNo', name: 'Order No', width: '10%' },
                { field: 'RefNo', name: 'Buyer Ref', width: '10%' },
                { field: 'InOutTypeST', name: 'Type', width: '6%' },
                { field: 'ContractorName', name: 'Buyer', width:'17%', enableCellEdit: false },
                { field: 'Qty', name: 'Receive Qty', width: '10%', cellClass:'text-right', cellFilter:'number:2' },
                { field: 'IssueDateST', name: 'Receive Date', width:'10%', enableCellEdit: false },
                { field: 'DUProGuideLineStatus', name: 'Status', width:'10%', enableCellEdit: false },
                { field: 'ReceiveStore', name: 'Recevie Store', width: '10%' },
                { field: 'ApprovedByName', name: 'Approve By', width: '10%' },
                { field: 'ReceivedByName', name: 'Revceive By', width: '10%' },
                { field: 'OrderTypeST', name: 'Order Type', width: '12%' },
            ],
            data:oDUProGuideLines,
            onRegisterApi:function(gridApi)
            {
                $scope.gridApi = gridApi;
                $scope.gridApi.selection.clearSelectedRows();
                $scope.gridApi.core.refresh();
                debugger;
                if(oDUProGuideLines.length>0 && userSession.getRowIndex()>=0)
                {
                    $scope.gridApi.grid.modifyRows(oDUProGuideLines);
                    $scope.gridApi.selection.selectRow(oDUProGuideLines[userSession.getRowIndex()]);
                    $scope.RowSelect(oDUProGuideLines[userSession.getRowIndex()]);
                }
                $scope.gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                    $scope.RowSelect(row.entity ); });
                userSession.clear();
            }

        };
        $scope.RowSelect =  function (entity){
            debugger;
            $scope.lblView="";
            if(entity.ApproveByID!=0 && entity.ReceiveByID==0){ //ApproveOnly
                $scope.btnApprove=true;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                $scope.btnReturn=true;
                $scope.btnUpdate=true;
                if(entity.InOutType==102)
                {
                   $scope.btnReturnToParty=false;
                }

                CheckControll();
            }
            else if(entity.ReceiveByID!=0 && entity.ApproveByID!=0)//Receive&Approve
            {
                $scope.lblView="& Transfer";
                $scope.btnApprove=true;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                $scope.btnReceive=$scope.btnReturnToParty=true;
                $scope.btnUpdate=true;
                $scope.btnReturn =false;
                CheckControll();
            }
            else if(entity.ReceiveByID!=0 && entity.ApproveByID!=0&& entity.ReturnByID!=0)//Receive&Approve&Return
            {
                $scope.lblView="& Transfer";
                $scope.btnApprove=true;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                $scope.btnReceive=$scope.btnReturnToParty=true;
                $scope.btnUpdate=true;
                $scope.btnReturn =true;
                CheckControll();
            }
            else if(entity.ReceiveByID!=0 && entity.ApproveByID==0)//ReceiveOnly
            {
                $scope.lblView="& Transfer";
                $scope.btnApprove=false;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                $scope.btnReceive=$scope.btnReturnToParty=true;
                $scope.btnReturn =false;
                $scope.btnUpdate=false;
                CheckControll();
            }
            else
            {
                $scope.btnReturn =false;
                $scope.btnApprove=false;
                $scope.btnEdit=false;
                $scope.btnDelete=false;
                $scope.btnUpdate=false;
                $scope.btnReceive=$scope.btnReturnToParty=false;
                CheckControll();
            }

            if(entity.InOutType==102)
            {
                $scope.btnReceive=true;
                $scope.btnReturn =true;
            }
        }

        $scope.SearchByOrderNo= function(event)
        {
            if(event.which==13)
            {
                if ($scope.OrderNo == "" || $scope.OrderNo ==undefined) 
                {
                    msModal.Message({ headerTitle: '', bodyText: 'Please Type Order No !!', sucessText: ' Yes', cancelText: ' Close', feedbackType: false, autoClose: false });
                    //alert("Please Type Order No!!");
                    $scope.lblLoadingMessage = false;
                    return false;
                }

                //var sTempString = $scope.cboProductionDate + '~' + $scope.ProductionDateStart + '~' + $scope.ProductionDateEnd + '~' + ($scope.cboReceiveStore == undefined ? 0 : $scope.cboReceiveStore) + '~' + ($scope.YetToApprove == undefined ? false : $scope.YetToApprove) + '~' + ($scope.YetToReceive == undefined ? false : $scope.YetToReceive) + '~' + sessionStorage.getItem('BUID') + '~' + ($scope.cboOrderType == undefined ? 0 : $scope.cboOrderType) + '~' + ($scope.OrderNo == undefined ? "" : $scope.OrderNo) + '~' + ($scope.cboProductType == undefined ? 0 : $scope.cboProductType) + '~' + ($scope.SLNo == undefined ? "" : $scope.SLNo);
                var sTempString = 0 + '~' + '2 JAN 2016' + '~' + '2 JAN 2016'+ '~' +  0 + '~' + false + '~' + false + '~' + $scope.BUID + '~' +  0  + '~' + ($scope.OrderNo == undefined ? "" : $scope.OrderNo) + '~' + 0 + '~' + ($scope.SLNo == undefined ? "" : $scope.SLNo) + '~';
                
                sessionStorage.setItem("sTempString", sTempString);
                var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
                $http.get(_sBaseAddress + '/DUProGuideLine/AdvSearch', { params: { sTemp: sTempString } }, config).then(
                            function (response) {
                                debugger;
                                $scope.lblLoadingMessage = true;
                                var results = jQuery.parseJSON(response.data);
                                if (results.length > 0) {
                                    $scope.gridOptions.data = results;
                                } else
                                {
                                    msModal.Message({ headerTitle: '', bodyText: 'No Data Found !!', sucessText: 'Yes', cancelText: 'Close', feedbackType: false, autoClose: false });
                                    return;
                                }
                            },
                                function (response) { alert(jQuery.parseJSON(response.data).Message); }
                        );
            }
        };

        $scope.singleFilter=function(renderableRows){
            var matcherName = new RegExp(angular.uppercase($scope.Name));
            var matcherOperationTypeST = new RegExp(angular.uppercase($scope.OperationTypeST));
            renderableRows.forEach( function( row ) {
                debugger;
                var match = false;
                if (angular.uppercase(row.entity['Name']).match(matcherName) && angular.uppercase(row.entity['OperationTypeST']).match(matcherOperationTypeST)){
                    match = true;
                }
                if ( !match ){
                    row.visible = false;
                }
            });
            return renderableRows;
        };

        $scope.AdvanceSearch = function ()
        {
            debugger;
            $scope.MRNo ="";

            var modalObj={
                modalcontroller:'ModalDUProGuideLineAdvanceSearchCtrl',
                appcontroller:'DUProGuideLineController',
                CompareOperators:$scope.CompareOperators,
                ProductTypes:$scope.ProductTypes,
                OrderTypes:$scope.OrderTypes,
                ReceiveStores: $scope.ReceiveStores
            }
            var modalInstance=DUProGuideLineservice.Instance(modalObj);
            modalInstance.result.then(function (result)
            {
                debugger;
                $scope.gridOptions.data = result;
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };

        $scope.add = function () {
            sessionStorage.setItem("Operation", "New");
            sessionStorage.removeItem("SelectedRowIndex");
            sessionStorage.setItem("SelectedRowIndex",-1);
            sessionStorage.setItem("DUProGuideLineHeader", "Add DUProGuideLine");
            sessionStorage.setItem("DUProGuideLines", JSON.stringify($scope.gridOptions.data));
            sessionStorage.setItem("DUProGuideLine", JSON.stringify([]));
            sessionStorage.setItem("BackLink", window.location.href);

            var tsv=((new Date()).getTime())/1000;
            window.location.href = _sBaseAddress+ "/DUProGuideLine/ViewDUProGuideLine?nId=0&buid="+_nBUID+"&ts="+tsv;
        };
        $scope.edit = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0)
            {
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ReceiveByID!=0)
            {
                alert("Please Select 'Initiaziled' Production");  return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.DUProGuideLineID==data[0].DUProGuideLineID){

                    sessionStorage.setItem("Operation", "Edit");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("DUProGuideLineHeader", "Edit DUProGuideLine");
                    sessionStorage.setItem("DUProGuideLines", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("DUProGuideLine", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/DUProGuideLine/ViewDUProGuideLine?nId="+value.DUProGuideLineID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.view = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.DUProGuideLineID==data[0].DUProGuideLineID){
                    sessionStorage.setItem("Operation", "View");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("DUProGuideLineHeader", "View DUProGuideLine");
                    sessionStorage.setItem("DUProGuideLines", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("DUProGuideLine", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/DUProGuideLine/ViewDUProGuideLine?nId="+value.DUProGuideLineID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.delete = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'No item found to delete.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }

            if(data[0].ApproveByID!=0)
            {
                alert("Please Select 'Initiaziled' Production");  return;
            }

            if (!confirm("Confirm to Delete?")) return ;

            $http.post(_sBaseAddress+ '/DUProGuideLine/Delete',JSON.stringify(data[0])).then(
                            function (response) {
                                if(jQuery.parseJSON(response.data)=='Deleted'){
                                    angular.forEach($scope.gridOptions.data,function(value,index){
                                        if(value.DUProGuideLineID==data[0].DUProGuideLineID){
                                            $scope.gridOptions.data.splice(index,1);
                                        }
                                    },$scope.gridOptions.data);
                                    alert("Delete Successfully.");
                                }
                                else{
                                    alert(jQuery.parseJSON(response.data));
                                }
                            },
                            function (response) {alert(jQuery.parseJSON(response.data));}
                        );

        };

        $scope.Update = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApproveByID!=0)
            {
                alert("Please Select 'Initiaziled' Production"); return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.DUProGuideLineID==data[0].DUProGuideLineID){
                    sessionStorage.setItem("Operation", "Update");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("DUProGuideLineHeader", "Update DUProGuideLine");
                    sessionStorage.setItem("DUProGuideLines", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("DUProGuideLine", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/DUProGuideLine/ViewDUProGuideLine?nId="+value.DUProGuideLineID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.Approve = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApproveByID!=0)
            {
                alert("Please Select 'Initiaziled' Production"); return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.DUProGuideLineID==data[0].DUProGuideLineID){
                    sessionStorage.setItem("Operation", "Approve");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("DUProGuideLineHeader", "Approve DUProGuideLine");
                    sessionStorage.setItem("DUProGuideLines", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("DUProGuideLine", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/DUProGuideLine/ViewDUProGuideLine?nId="+value.DUProGuideLineID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.UndoApprove = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ApproveByID==0 || data[0].ReceiveByID!=0)
            {
                alert("Yet Not Approved"); return;
            }
            if( data[0].ReceiveByID!=0)
            {
                alert("Already Received"); return;
            }

            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.DUProGuideLineID==data[0].DUProGuideLineID){
                    sessionStorage.setItem("Operation", "UndoApprove");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("DUProGuideLineHeader", "UndoApprove DUProGuideLine");
                    sessionStorage.setItem("DUProGuideLines", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("DUProGuideLine", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/DUProGuideLine/ViewDUProGuideLine?nId="+value.DUProGuideLineID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
       
        $scope.Receive = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            //if(data[0].ApproveByID==0)
            //{
            //    alert("Production Yet Not Approved!!");  return;
            //}else  
                
            if(data[0].ReceiveByID!=0)
            {
                alert("Production Already Received!!");  return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.DUProGuideLineID==data[0].DUProGuideLineID){
                    sessionStorage.setItem("Operation", "Receive");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("DUProGuideLineHeader", "Request DUProGuideLine");
                    sessionStorage.setItem("DUProGuideLines", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("DUProGuideLine", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/DUProGuideLine/ViewDUProGuideLine?nId="+value.DUProGuideLineID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };

        $scope.Return = function () 
        {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ReceiveByID==0)
            {
                alert("Production Yet Not Receive!!");  return;
            }
            if(data[0].ReturnByID!=0)
            {
                alert("Production Already Returned!!");  return;
            }

            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.DUProGuideLineID==data[0].DUProGuideLineID){
                    sessionStorage.setItem("Operation", "Return");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("DUProGuideLineHeader", "Return DU ProGuideLine");
                    sessionStorage.setItem("DUProGuideLines", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("DUProGuideLine", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/DUProGuideLine/ViewDUProGuideLineReturn?nId="+value.DUProGuideLineID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };

        $scope.PrintXL = function(){
            debugger;
            var sParams=sessionStorage.getItem("sTempString");
            if(sParams == null || sParams == "")
            {
                alert("Please search first!!");
                return;
            }
            window.open(_sBaseAddress + '/DUProGuideLine/Print_ReportXL_Details?sTempString=' + sParams+'&BUID='+_nBUID, "_blank");
        }
        
        /*============== RETURN OPERATION ==============*/
        $scope.ReturnToParty = function ()
        {
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            //if(data[0].ApproveByID==0)
            //{
            //    alert("Production Yet Not Approved!!");  return;
            //}else  
                
            if(data[0].ReceiveByID!=0)
            {
                alert("Production Already Received!!");  return;
            }
            var oDUProGuideLine= data[0];
            debugger;
            $http.post(_sBaseAddress+'/DUProGuideLine/ReturnDUProGuideLine',JSON.stringify(oDUProGuideLine)).then(
                function (response) {
                    var result=jQuery.parseJSON(response.data);
                    if(result.DUProGuideLineID>0)
                    {
                        debugger;
                        var nIndex = $scope.gridOptions.data.indexOf(oDUProGuideLine);
                        $scope.gridOptions.data[nIndex]=result;
                       
                        msModal.Message({headerTitle : '', bodyText:'Returned To Party Successfully.', sucessText : 'Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                    }
                    else
                    {
                        alert(result.ErrorMessage);
                    }
                },
                function (response) { alert(jQuery.parseJSON(response.data).Message);}
        );
        };

        $scope.PrintPreview = function ()
        {
            var data = $scope.gridApi.selection.getSelectedRows();
            var oDUProGuideLine = data[0];
            if(oDUProGuideLine==null || oDUProGuideLine.DUProGuideLineID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            window.open(_sBaseAddress + '/DUProGuideLine/DUProGuideLinePreview?nDUProGuideLineID='+oDUProGuideLine.DUProGuideLineID+"&nBUID="+$scope.BUID);
        };

        $scope.PrintStatement = function(){

            var data = $scope.gridApi.selection.getSelectedRows();
            var oDUProGuideLine = data[0];
            if(oDUProGuideLine==null || oDUProGuideLine.DyeingOrderID<=0)
            {
                alert("Please select a item from list!");
                return;
            }

            var  sTempString ="nBUID="+$scope.BUID
                    +"&nExportLCID=0"
                    +"&nVersionNo=-1"
                    +"&nExportPIID=0"
                    +"&nDyeingOrderID="+oDUProGuideLine.DyeingOrderID
                    +"&nDOID=0"
                    +"&nSampleInvoiceID=0";

            window.open(_sBaseAddress + '/DUStatement/PrintStatement_All?'+sTempString, "_blank");
        };

        $scope.PrintReport = function ()
        {
            var data = $scope.gridApi.selection.getSelectedRows();
            var oDUProGuideLine = data[0];
            if(oDUProGuideLine==null || oDUProGuideLine.DyeingOrderID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            window.open(_sBaseAddress + '/DUProGuideLine/DUPGL_Report?nDOID='+oDUProGuideLine.DyeingOrderID+"&nBUID="+$scope.BUID);
        };
        $scope.PrintReportV2 = function ()
        {
            var data = $scope.gridApi.selection.getSelectedRows();
            var oDUProGuideLine = data[0];
            if(oDUProGuideLine==null || oDUProGuideLine.DyeingOrderID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            window.open(_sBaseAddress + '/DUProGuideLine/DUPGL_ReportV2?nDOID='+oDUProGuideLine.DyeingOrderID+"&nBUID="+$scope.BUID+"&nDUProGuideLineID="+oDUProGuideLine.DUProGuideLineID);
        };
        //button hide
        $scope.btnAdd = $scope.btnEdit = $scope.btnView = $scope.btnDelete = $scope.btnApprove= $scope.btnUpdate =$scope.btnReceive =$scope.btnReturnToParty=$scope.btnReturn = $scope.btnAdvSearch = true ;
        //button show
        if(PermissionChecker('Add','DUProGuideLine',oAuthorizationRolesMapping)){$scope.btnAdd = false; }
        if(PermissionChecker('Edit','DUProGuideLine',oAuthorizationRolesMapping)){$scope.btnEdit = false;}
        if(PermissionChecker('Edit','DUProGuideLine',oAuthorizationRolesMapping)){$scope.btnUpdate = false;}
        if(PermissionChecker('View','DUProGuideLine',oAuthorizationRolesMapping)){$scope.btnView = false;}
        if(PermissionChecker('Delete','DUProGuideLine',oAuthorizationRolesMapping)){$scope.btnDelete = false;}
        if(PermissionChecker('Approved','DUProGuideLine',oAuthorizationRolesMapping)){$scope.btnApprove = false;}
        //if(PermissionChecker('Issued','DUProGuideLine',oAuthorizationRolesMapping)){$scope.btnIssue = false;}
        if(PermissionChecker('Received','DUProGuideLine',oAuthorizationRolesMapping)){$scope.btnReceive = $scope.btnReturnToParty=false;$scope.btnReturn =false;}
        if(PermissionChecker('UnApproved','DUProGuideLine',oAuthorizationRolesMapping)){$scope.btnUndoApprove = false;}
        if(PermissionChecker('AdvSearch','DUProGuideLine',oAuthorizationRolesMapping)){$scope.btnAdvSearch = false;}

        function CheckControll()
        {
            debugger;
            if($scope.btnAdd == false  && !PermissionChecker('Add','DUProGuideLine',oAuthorizationRolesMapping))
                {$scope.btnAdd = true; } 
            if($scope.btnEdit == false && !PermissionChecker('Edit','DUProGuideLine',oAuthorizationRolesMapping))
                {$scope.btnEdit = true;$scope.btnUpdate = true;}  
            if($scope.btnView == false && !PermissionChecker('View','DUProGuideLine',oAuthorizationRolesMapping))
                {$scope.btnView = true;}  
            if($scope.btnApprove == false && !PermissionChecker('Approved','DUProGuideLine',oAuthorizationRolesMapping))
                {$scope.btnApprove = true;}  
            if($scope.btnDelete == false && !PermissionChecker('Delete','DUProGuideLine',oAuthorizationRolesMapping))
                {$scope.btnDelete = true;}  
            if($scope.btnIssue == false && !PermissionChecker('Issued','DUProGuideLine',oAuthorizationRolesMapping))
                {$scope.btnIssue = true;} 
            if($scope.btnReceive == false && !PermissionChecker('Received','DUProGuideLine',oAuthorizationRolesMapping))
            {$scope.btnReceive = $scope.btnReturnToParty=true;}  
            if($scope.btnUndoApprove == false && !PermissionChecker('UnApproved','DUProGuideLine',oAuthorizationRolesMapping))
                {$scope.btnUndoApprove = true;}  
            if($scope.btnAdvSearch == false && !PermissionChecker('AdvSearch','DUProGuideLine',oAuthorizationRolesMapping))
                {$scope.btnAdvSearch = true;} 
        }
        
    });
</script>
                       


              
