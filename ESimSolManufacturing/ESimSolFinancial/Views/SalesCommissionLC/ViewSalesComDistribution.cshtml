@{
    ViewBag.Title = " Sales Commission Contract ";
}
@model ESimSol.BusinessObjects.ExportPI

<div style="padding-top:5px" ng-app="SalesComDistApp" ng-controller="SalesComDistCntrlr" class="form-horizontal regionSC">
<fieldset>
<legend>Sales Contract Information</legend>
<div class="col-md-12">
    <div class="col-md-2 text-right"><label class="control-label">PI No:</label></div>
    <div class="col-md-3 text-left">
        <input ng-model="ExportPI.PINo" class="form-control" required disabled />
    </div>
    <div class="col-md-2 text-right"><label class="control-label">PI Date:</label></div>
    <div class="col-md-3 text-left">
        <div class="input-group date date-container">
            <input type="text" class="form-control" ng-model="ExportPI.IssueDateInString" ng-init="initializeDatepicker()" disabled><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
        </div>
    </div>
    <div class="col-md-2 text-right"><label class="control-label">Concern Person:</label></div>
    <div class="col-md-3 text-left">
        <input ng-model="ExportPI.MKTPName" class="form-control" required disabled />
    </div>
</div>

<div class="col-md-12">
    <div class="col-md-2 text-right"><label class="control-label">Account Of:</label></div>
    <div class="col-sm-6 text-left">
        <input ng-model="ExportPI.ContractorName" class="form-control" required disabled />
    </div>

<div class="col-md-2 text-right"><label class="control-label">Buying House:</label></div>
    <div class="col-md-3 text-left">
        <input ng-model="ExportPI.BuyerName" class="form-control" required disabled />
    </div>
</div>
</fieldset>
<div class="col-md-12">
 <div ui-grid="SalesContractDetailsgridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav ui-grid-edit class="grid ui-grid-selectable"></div>
</div>
<div class="col-md-12">
<fieldset>
    <legend>Commission Assign</legend>
    <div class="regionGrid">
        <div class="ui-grid-top-panel">
            <div class="row col-md-12">
                <div class="col-md-4 text-left">
                    <div >
                        <select  class="form-textField" ng-model="ContractorID" ng-options="item.ContractorID as item.Name for item in Contractors">
                            @*<option value="">--Slecet One</option>*@
                        </select>
                    </div>
                </div>
             
                <div class="col-md-2 text-right"> <label class="control-label">Com'ion Person:</label> </div>
                <div class="col-md-3 text-left">
                    <div class="input-group">
                        <input ng-model="CPName" ng-keydown="SearchCPNameByKeyUp($event)" class="form-control" placeholder="Type Person Name & Enter" required />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="SearchCPName()"> <span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
                        </span>
                    </div>
                </div>
                <div class="col-sm-1 text-left">
                    <button type="button" class="btn btn-sm btn-danger" aria-label="Left Align" ng-click="RemoveCommission()" ng-disabled="disabledremovecommission"> <span class="glyphicon glyphicon-remove" aria-hidden="true">Remove</span> </button>
                </div>
            </div>
        </div>
        <div class="row col-md-12">
            <div ui-grid="SalesComDistributiongridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav ui-grid-edit class="gridComDist ui-grid-selectable"></div>
        </div>
    </div>

    <div class="regionEntry">
        <fieldset>

            <div class="col-sm-12">
                <div class="col-sm-7 text-right"><label class="control-label">Commission On</label></div>
                <div class="col-md-4 text-left">
                    <select style=" " class="form-textField" ng-model="CommissionOn" ng-change="Refresh_CommissionOn()" ng-options="item.id as item.Value for item in CommissionOns">
                        @*<option value="">--Slecet One</option>*@
                    </select>
                   
                </div>
            </div>
            <div class="col-sm-12" style="padding:5px"> </div>
            <div class="col-sm-12">
               
                <div class="col-sm-7 text-right"><label class="control-label">PI Value($)</label></div>
                <div class="col-sm-4 text-left">
                    <input ng-model="PIValue" class="form-textField" required disabled />
                </div>

            </div>
            <div class="col-sm-12" style="padding:5px"> </div>



            <div class="col-sm-12">
                <div class="col-sm-7 text-right"><label class="control-label">Total Com. Amount($)</label></div>
                <div class="col-sm-4 text-left">
                    <input ng-model="TotalComAmount" class="form-textField" ng-change="setComPercentageByComAmount()" ng-disabled="textdisabledCAmount" />
                </div>

            </div>
            <div class="col-sm-12" style="padding:5px"> </div>

            <div class="col-sm-12">
                <div class="col-sm-7 text-right"><label class="control-label">Com. Percentage(%)</label></div>
                <div class="col-sm-4 text-left">
                    <input ng-model="ComPercentage" class="form-textField" ng-change="setComAmountByComPercentage()" ng-disabled="textdisabled" />
                </div>

            </div>
            <div class="col-sm-12" style="padding:5px"> </div>

            <div class="col-sm-12">
                <div class="col-sm-7 text-right"><label>Payable Percentage(%) On Maturity</label></div>
                <div class="col-sm-4 text-left">
                    <input ng-model="maturityPercentage" class="form-textField" ng-change="getMaturityPercentage()" ng-disabled="disabledPayablePercentage" />
                </div>

            </div>

        </fieldset>
    </div>

</fieldset>
</div>
<div class="col-md-12">
    <fieldset>
        <legend>Action</legend>
        <div class="row col-md-12 text-right">
            <button type="button" class="btn btn-sm  btn-success" aria-label="Left Align" ng-click="Save()" ng-disabled="disabled" ng-hide="hidebtnSave"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"> Save</span> </button>
            <button type="button" class="btn btn-sm btn-danger" aria-label="Left Align" ng-click="close()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"> Close</span> </button>
         </div>
    </fieldset>
</div>

</div>

<style type="text/css">
    .regionSC .form-horizontal .control-label {
        padding-top: 3px;
    }


    .form-control {
        height: 26px;
        padding: 0px 6px;
        font-size: 12px;
    }

    .grid {
        width: 100%;
        height: 160px;
    }
    .gridComDist {
        width: 100%;
        height: 140px;
    }

    .regionSC .col-sm-3 {
        width: 38%;
        padding-right: 5px;
        padding-left: 5px;
        margin-bottom: 5px;
    }

    .regionSC .col-sm-2 {
        width: 24%;
        padding-right: 5px;
        padding-left: 5px;
        margin-bottom: 5px;
    }

    .regionSC .col-md-12 {
        width: 100%;
        padding-right: 5px;
        padding-left: 5px;
        margin-bottom: 5px;
    }

    .regionSC .col-md-2 {
        width: 13%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionSC .col-md-3 {
        width: 20%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionSC .col-sm-6 {
        width: 53%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionSC .col-md-4 {
        width: 28%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionSC .col-md-5 {
        width: 40%;
        padding-right: 5px;
        padding-left: 0px;
    }

    .regionSC .col-md-10 {
        width: 86%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionSC .btn-sm {
        padding: 3px 10px;
    }

    .modal-dialog {
        width: 800px;
    }

    .regionSC .input-group-addon {
        padding: 4px 8px;
    }

    .regionSC .col-sm-1 {
        width: 8%;
        padding-left: 5px;
        padding-right: 0px;
    }

    .regionGrid{
        width:70%;
        height:200px;
        float:left;
    }
    .regionGrid .col-md-2{
            width: 21%;
    padding-right: 5px;
    padding-left: 5px;
    }
   
     .regionGrid .col-md-3{
         width: 35%;
    padding-right: 5px;
    padding-left: 5px;
     }
       
    .regionEntry{
        width:29%;
        height:200px;
        float:right;
    }


    .regionEntry .form-textField{
        width:100px;  
        height:24px;
        /*//padding: 5px 2px;*/
         padding: 0px 6px;
        font-size: 12px;
    }

      .regionEntry .col-sm-7 {
        width:63%;
        padding-right:1px;
        padding-left:0px;
    }
     .regionEntry .col-sm-5 {
        width:37%;
        padding-right:2px;
        padding-left:2px;
    }
     .regionEntry .col-sm-4 {
        width:27%;
        padding-right:2px;
        padding-left:2px;
    }
     .regionEntry .col-sm-1 {
        width:12%;
        padding-right:2px;
        padding-left:2px;
    }

</style>

<script type="text/javascript">

    _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    var oExportPI=@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    var oExportPIDetails  =@Html.Raw(Json.Encode(ViewBag.ExportPIDetails));
    var oSalesCommissions  =@Html.Raw(Json.Encode(ViewBag.SalesCommissions));
    var oContractors  =@Html.Raw(Json.Encode(ViewBag.Contractors));
  
    debugger;
    var SalesComDistAppModule = angular.module('SalesComDistApp', ['ms.service','ngAnimate', 'ui.bootstrap', 'ui.grid', 'ui.grid.resizeColumns','ui.grid.selection', 'ui.grid.cellNav','ui.grid.edit']);

    SalesComDistAppModule.controller('SalesComDistCntrlr', function ($scope, $http, $uibModal, $log, uiGridConstants, msModal ,userSession ) {
      
        $scope.initializeDatepicker  =function(){
            $('.date-container').datepicker({
                format: "dd M yyyy",
                calendarWeeks: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        $( document ).ready(function() {
            $(".number-int").icsNumberField({ min: 0,precision: 0 });
            $(".number-precision").icsNumberField({ min: 0,precision: 2 });
        });
        $scope.ExportPI = oExportPI;
        $scope.disabled = false;
        $scope.disabledPayablePercentage =false;
        $scope.disabledremovecommission =false;
        $scope.textdisabled = true
        $scope.textdisabledCAmount = true
        
        $scope.Comm_PI_Rate =0;
        $scope.CalOn =0; // if 1 than grid change % 2 than amount
        
   
        $scope.maturityPercentage =parseFloat(50);
        $scope.CommissionOns=[ {id:0, Value:'Rate(On Qty)'},{id:1, Value:'PI Value'}];
        $scope.Contractors=oContractors;
        $scope.CommissionOn=0;
        if(oSalesCommissions.length >0){
            $scope.maturityPercentage = oSalesCommissions[0].Percentage_Maturity;
            $scope.CommissionOn= oSalesCommissions[0].CommissionOn;
        }
        if($scope.CommissionOn>0)
        {
            $scope.textdisabled = false;
        }
        $scope.ContractorID =oExportPI.ContractorID; //defolt selected PI Con
        $scope.ColumnsContractDetailsgridOptions =[
               {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{rowRenderIndex+1}}</span></div>',cellClass: 'text-center', enableSorting:false, enableColumnResizing:false, enableColumnMenu:false,enableCellEdit:false},
               { field: 'ProductName', name: 'productName', width: '19%',  cellClass: 'text-left',enableCellEdit:false   },
               { field: 'MUName', name: 'MU Unut', width: '6%',  cellClass: 'text-left',enableCellEdit:false   },
               { field: 'Qty', name: 'Qty', width: '10%',  cellClass: 'text-right', cellFilter: 'number: 2', width: '8%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',enableCellEdit:false   },
               { field: 'AdjQty', name: 'Adj.Qty', width: '10%',  cellClass: 'text-right', cellFilter: 'number: 2', width: '8%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',enableCellEdit:false   },
               { field: 'ActualQty', name: 'Actual Qty', width: '10%',  cellClass: 'text-right', cellFilter: 'number: 2', width: '8%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',enableCellEdit:false   },
               { field: 'QtyCom', name: 'Com. Qty', width: '10%',  cellClass: 'text-right', cellFilter: 'number: 2', width: '11%', enableCellEdit: true  },
               { field: 'UnitPrice', name: 'U/P($)', width: '8%', cellClass: 'text-right',enableCellEdit:false  },
               { field: 'Amount', name: 'Amount($)', width: '6%', cellClass: 'text-right',  cellClass: 'text-right', cellFilter: 'number: 2', width: '10%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',enableCellEdit:false  },
               { field: 'CRate', name: 'Com. Rate($)',  cellClass: 'text-right', cellFilter: 'number: 5', width: '11%', enableCellEdit: true},
               { field: 'CRateTwo', name: 'Buyer Rate($)',  cellClass: 'text-right', cellFilter: 'number: 5', width: '11%', enableCellEdit: true},
               { field: 'AmountCom', name: 'Com. value($)',  cellClass: 'text-right', cellFilter: 'number: 2', width: '12%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',enableCellEdit:false  },
               { field: 'AmountComTwo', name: 'Buyer value($)',  cellClass: 'text-right', cellFilter: 'number: 2', width: '12%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',enableCellEdit:false  },
               { field: 'ActualRate', name: 'Actual Rate($)',  cellClass: 'text-right', cellFilter: 'number: 2', width: '12%',enableCellEdit:false },
               {name: 'Change Activity',width:'15%' ,cellTemplate: '<div style="padding-left:3px; padding-right:3px;padding-bottom:2px;" ><button class="btn btn-sm btn-success" ng-click="grid.appScope.saveCRRate();$event.stopPropagation();" ng-disabled="colDef.enableCellEdit"><span class="glyphicon glyphicon-floppy-disk" aria-hidden="true">Update CR Rate</span></button></div>', enableSorting:false, enableColumnResizing:false, enableColumnMenu:false,enableCellEdit:false},    
        ];
     
        if(oSalesCommissions.length>0 && oSalesCommissions[0].Status >1){
            $scope.ColumnsContractDetailsgridOptions.splice($scope.ColumnsContractDetailsgridOptions.length-1, 1);
            $scope.disabledPayablePercentage = $scope.disabledremovecommission = $scope.hidebtnSave=true;
        }

       $scope.SalesContractDetailsgridOptions = {
            enableRowSelection: true,
            enableRowHeaderSelection: false,
            multiSelect: false,
            enableColumnResizing: true,
            showColumnFooter: true,
            cellEditableCondition: function($scope) {
                if(oSalesCommissions.length>0 && oSalesCommissions[0].Status >1)
                    return false;
                else
                    return true;
            },
            columnDefs:  $scope.ColumnsContractDetailsgridOptions,
            data: oExportPIDetails,
            onRegisterApi: function (SalesContractSalesContractgridApi) {
                $scope.SalesContractSalesContractgridApi = SalesContractSalesContractgridApi;
                SalesContractSalesContractgridApi.edit.on.afterCellEdit($scope,
               function (rowEntity, colDef, newValue, oldValue)
               {
                   debugger;
                   ( rowEntity.CRate > rowEntity.UnitPrice || rowEntity.CRate <0)? rowEntity.CRate= oldValue : rowEntity.CRate=(parseFloat(rowEntity.CRate)) ;
                   ( rowEntity.CRateTwo > rowEntity.UnitPrice || rowEntity.CRateTwo <0)? rowEntity.CRateTwo= oldValue : rowEntity.CRateTwo=(parseFloat(rowEntity.CRateTwo)) ;
                   ( rowEntity.QtyCom > (rowEntity.Qty - rowEntity.AdjQty)|| rowEntity.QtyCom <0)? rowEntity.QtyCom= oldValue : rowEntity.QtyCom=(parseFloat(rowEntity.QtyCom)) ;
                  
                   rowEntity.AmountCom=(parseFloat(rowEntity.CRate *rowEntity.QtyCom));
                   rowEntity.AmountComTwo=(parseFloat(rowEntity.CRateTwo *rowEntity.QtyCom));
                   rowEntity.ActualRate=(parseFloat(rowEntity.UnitPrice - rowEntity.CRate - rowEntity.CRateTwo)) ;
                   $scope.getTtlComAmount();
                   $scope.SetComissonAmount();
                   return rowEntity;
                   
               });
            }
       };

       
       if($scope.ExportPI.ContractorID==$scope.ExportPI.BuyerID || $scope.ExportPI.BuyerID<=0){
           $scope.SalesContractDetailsgridOptions.columnDefs[10].visible = false;
           $scope.SalesContractDetailsgridOptions.columnDefs[12].visible = false;
       }
        $scope.getTtlComAmount =function ()
        {
            debugger;
            var oGriddata = $scope.SalesContractDetailsgridOptions.data;
          
            $scope.PIValue =0;
            $scope.Comm_PI_Rate=0;
            if(oGriddata.length>0)
            {
                for(var i =0;i<oGriddata.length;i++)
                {
                    if($scope.CommissionOn==0)
                    {
                        $scope.Comm_PI_Rate+= parseFloat(oGriddata[i].AmountCom)+parseFloat(oGriddata[i].AmountComTwo);
                    }
                    $scope.PIValue+= parseFloat(oGriddata[i].Amount);
                    parseFloat($scope.Comm_PI_Rate);
                    parseFloat($scope.PIValue);
                }
            }

            $scope.PIValue =formatPrice(parseFloat($scope.PIValue),0);
            if($scope.CommissionOn==0)
            {
                $scope.TotalComAmount = 0;
                $scope.ComPercentage = 0;
                $scope.TotalComAmount=formatPrice(parseFloat($scope.Comm_PI_Rate),0);
                $scope.ComPercentage = formatPrice( parseFloat(((icsRemoveComma($scope.TotalComAmount,2 )* 100) / parseFloat(icsRemoveComma($scope.PIValue,2)))),0);
            }
           // (parseFloat(icsRemoveComma($scope.TotalComAmount,2),0) >0)? $scope.textdisabled = true :$scope.textdisabled = false;
        }
        $scope.getTtlComAmount();
        $scope.SalesComDistributiongridOptions = {
            enableRowSelection: true,
            enableRowHeaderSelection: false,
            multiSelect: false,
            enableColumnResizing: true, 
            showColumnFooter: true,
            enableHorizontalScrollbar: uiGridConstants.scrollbars.Never,
            cellEditableCondition: function($scope) {
                if(oSalesCommissions.length > 0 && oSalesCommissions[0].Status >1)
                    return false;
                else
                    return true;
            },
            columnDefs: [
                 {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{rowRenderIndex+1}}</span></div>',cellClass: 'text-center', enableSorting:false, enableColumnResizing:false, enableColumnMenu:false,enableCellEdit:false},
                 { field: 'ContractorName', name: 'Party Name', width: '20%', cellClass: 'text-left',enableCellEdit:false  },
                 { field: 'CPName', name: 'Person Name', width: '20%', cellClass: 'text-left',enableCellEdit:false  },
                 { field: 'Percentage', name: 'Percentage(%)',  cellClass: 'text-right', cellFilter: 'number: 2', width: '22%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',enableCellEdit:true },
                 { field: 'CommissionAmount', name: 'Commission Amount($)',  cellClass: 'text-right', cellFilter: 'number: 2', width: '25%', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',  enableSorting: false,enableCellEdit:true }
            ],
            data: oSalesCommissions,
            onRegisterApi: function (salesComgridApi) {
                $scope.SalesComgridApi = salesComgridApi;

                salesComgridApi.edit.on.afterCellEdit($scope,
                function (rowEntity, colDef, newValue, oldValue)
                {
                    if(parseFloat(icsRemoveComma($scope.TotalComAmount,2))>0){
                        var nTotalCom= (rowEntity.ContractorID==$scope.ExportPI.BuyerID?$scope.GetTotalAmountCom('AmountComTwo'):$scope.GetTotalAmountCom('AmountCom'));
                        
                        if($scope.CommissionOn>0 || $scope.GetTotalAmountCom('AmountComTwo')<=0)
                        {
                            nTotalCom=parseFloat(icsRemoveComma($scope.TotalComAmount));
                        }

                        debugger;
                        if(colDef.field=='Percentage')
                        {
                            (rowEntity.Percentage >100 || rowEntity.Percentage <0) ?  rowEntity.Percentage=oldValue : rowEntity.Percentage=(parseFloat(rowEntity.Percentage)) ;
                        
                            var nCommissionAmount=(parseFloat(parseFloat(icsRemoveComma($scope.TotalComAmount,2)) * rowEntity.Percentage /100)) ;

                            (nCommissionAmount>nTotalCom?rowEntity.Percentage=oldValue: rowEntity.CommissionAmount=nCommissionAmount)

                            $scope.CalOn =1;
                        }
                        if(colDef.field=='CommissionAmount')
                        {
                            if($scope.CommissionOn>0)
                            {
                                (rowEntity.CommissionAmount < 0) ? rowEntity.CommissionAmount=oldValue :rowEntity.CommissionAmount=(parseFloat(rowEntity.CommissionAmount)) ;
                            }
                            else{
                                (rowEntity.CommissionAmount >parseFloat(icsRemoveComma($scope.TotalComAmount,2)) || rowEntity.CommissionAmount <0 || rowEntity.CommissionAmount>nTotalCom) ? rowEntity.CommissionAmount=oldValue :rowEntity.CommissionAmount=(parseFloat(rowEntity.CommissionAmount)) ;
                            }
                            $scope.CalOn =2;
                            rowEntity.Percentage=(parseFloat( rowEntity.CommissionAmount * 100 /parseFloat(icsRemoveComma($scope.TotalComAmount,2)))) ;
                        }
                    }
                    $scope.getTotal();

                    return rowEntity;
                });
               
            }
        };

        $scope.getTotal =function ()
        {
            $scope.Percentage=0;
            $scope.CommissionAmount=0;
            var odata = $scope.SalesComDistributiongridOptions.data;
            if(odata.length>0)
            {
                for(var i =0;i<odata.length;i++)
                {
                    //if($scope.CalOn==2){odata[i].Percentage=(parseFloat(parseFloat(odata[i].CommissionAmount )* 100)/icsRemoveComma($scope.TotalComAmount,2))}
                    $scope.Percentage+= parseFloat(odata[i].Percentage);
                    $scope.CommissionAmount+= parseFloat(odata[i].CommissionAmount);
                    parseFloat(  $scope.Percentage);  
                    parseFloat($scope.CommissionAmount);
                }
            }
            if($scope.CommissionOn>0 )
            {
                //alert($scope.CalOn);
                if($scope.CalOn!=1)
                {
                    $scope.TotalComAmount=formatPrice(parseFloat($scope.CommissionAmount).toFixed(2),2);
                    $scope.ComPercentage = formatPrice( parseFloat(((icsRemoveComma($scope.TotalComAmount,2 )* 100) / parseFloat(icsRemoveComma($scope.PIValue,2)))),0);
                }
            }
            if($scope.CommissionAmount != parseFloat(icsRemoveComma($scope.TotalComAmount,2)) &&  $scope.Percentage!=100)
            {
                $scope.disabled= true;
            }
            else{
                $scope.disabled= false;
            }
        }
        $scope.getTotal();
        $scope.getMaturityPercentage = function()
        {
            var oGriddata = $scope.SalesComDistributiongridOptions.data;
            if($scope.maturityPercentage >=0 && $scope.maturityPercentage <=100){
                if(oGriddata.length>0)
                {
                    for(var i =0;i<oGriddata.length;i++)
                    {
                        oGriddata[i].Percentage_Maturity = $scope.maturityPercentage;
                    }
                    $scope.SalesComDistributiongridOptions.data = oGriddata;
                }
            }
           
        }
        $scope.close = function () {
            userSession.previousPage();
        };
        $scope.setComPercentageByComAmount =function()
        {
            if($scope.TotalComAmount >icsRemoveComma($scope.PIValue,4))
             {
                 $scope.TotalComAmount =formatPrice(0);
                 $scope.ComPercentage =formatPrice(0);
             }
             else{
                 $scope.ComPercentage =   formatPrice(icsRemoveComma($scope.TotalComAmount,4) * 100 / icsRemoveComma($scope.PIValue,4),0);
            }

            var oGriddata = $scope.SalesComDistributiongridOptions.data;
            $scope.SalesComgridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);
            //$scope.$apply();
           

            //$scope.SalesComgridApi.selection.selectRow(oServiceOrderList[userSession.getRowIndex()]);
            //$scope.RowSelect(oServiceOrderList[userSession.getRowIndex()]);
            //if($scope.TotalComAmount >=0 )
            //{
            //    if(oGriddata.length>0)
            //    {
            //        for(var i =0;i<oGriddata.length;i++)
            //        {
            //            oGriddata[i].CommissionAmount =(oGriddata[i].Percentage*$scope.TotalComAmount)/100;
            //            //oSalesCommissions[i].CommissionAmount=parseFloat((oSalesCommissions[i].Percentage* _nCommissionAmount)/100);
            //        }
            //        $scope.SalesComDistributiongridOptions.data = oGriddata;
            //    }
            //}
       
        }

        $scope.setComAmountByComPercentage =function()
         {
             if($scope.ComPercentage >100)
             {
                 $scope.ComPercentage =formatPrice(0);
                 $scope.TotalComAmount =formatPrice(0);
             }
             else{
                 $scope.TotalComAmount =  parseFloat((icsRemoveComma($scope.ComPercentage,2) * icsRemoveComma ($scope.PIValue,2)) /100);
             }
             var oGriddata = $scope.SalesComDistributiongridOptions.data;
             if($scope.TotalComAmount >=0 )
             {
                 if(oGriddata.length>0)
                 {
                     for(var i =0;i<oGriddata.length;i++)
                     {
                         oGriddata[i].CommissionAmount =(oGriddata[i].Percentage*$scope.TotalComAmount)/100;
                     }
                     //for(var i =0;i<oGriddata.length;i++)
                     //{
                    
                     //    oGriddata[i].Percentage=parseFloat((oGriddata[i].CommissionAmount)*100)/ icsRemoveComma($scope.TotalComAmount,2);
                     //}
                    // if($scope.CalOn==2){odata[i].Percentage=(parseFloat(parseFloat(odata[i].CommissionAmount )* 100)/icsRemoveComma($scope.TotalComAmount,2))}
                     $scope.SalesComDistributiongridOptions.data = oGriddata;
                     $scope.SalesComgridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);
                 }
             }
             //$scope.getTotal();
     
         }
        $scope.SearchCPNameByKeyUp = function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) {
                var PersonName = $.trim($scope.CPName);
                
                $scope.PickCP();
            }
            else if (code == 8) //backspace=8
            {
               
                $scope.CPName = '';
                $scope.CPIDs = '';
            }
        };
        $scope.SearchCPName =function(){
            $scope.PickCP();
        }
        
        $scope.PickCP = function () {
            if($scope.ContractorID<=0)
            {
                alert("Please Select Buyer/Factory Name")
                return;
            }
           
            var oCPConcern = {
                ContractorName: $scope.ContractorID,
                Name: $.trim($scope.CPName)
            };
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress + '/ContractorPersonal/GetsByContractors', $.param(oCPConcern), config).then(
                                function (response) {
                                    var oColumns = [];
                                    var oColumn = { field: 'ContactPersonnelID', name: 'Code', width: '20%' }; oColumns.push(oColumn);
                                    oColumn = { field: 'Name', name: 'Personnel Name', width: '50%', enableSorting: false }; oColumns.push(oColumn);
                                    oColumn = { field: 'ContractorName', name: 'Contractor Name', width: '30%', enableSorting: false }; oColumns.push(oColumn);
                                    var results = jQuery.parseJSON(response.data);
                                    var modalObj = {
                                        size: 'md',
                                        modalcontroller: 'ModalCommonListCtrl',
                                        appcontroller: 'SalesComDistCntrlr',
                                        objs: results,
                                        multiSelect: true,
                                        pickertitle: 'Concern Person List',
                                        searchingbyfieldName: 'Name',
                                        columns: oColumns
                                    }
                                    sessionStorage.setItem('BaseAddress',_sBaseAddress);
                                    var modalInstance = msModal.Instance(modalObj);
                                    modalInstance.result.then(function (result) {
                                        $scope.CPName = result.length > 1 ? result.length + "Item's Selected" : result[0].Name;
                                        //$scope.CPIDs = icsMethod.ICS_PropertyConcatation(result, 'ContactPersonnelID');
                                        if(result.length>0){
                                            $scope.getContactPersonnel(result) ;
                                            $scope.getTotal();
                                            }
                                    }, function () {
                                        $log.info('Modal dismissed at: ' + new Date());
                                    });
                                 
                                },
                                  function (response) { alert(jQuery.parseJSON(response.data).Message); }
                            );
        };

        $scope.RemoveCommission =function ()
        {
            var data =$scope.SalesComgridApi.selection.getSelectedRows();;
            if(data==null || data.length<=0)
            {
                msModal.Message({headerTitle : '', bodyText:'Select At least One item !', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data[0].ExportPIID > 0 && data[0].ContactPersonnelID > 0 && data[0].SalesCommissionID >0)
            {
                $http.post(_sBaseAddress+'/ExportSC/DeleteSalesCommossion',JSON.stringify(data[0])).then(
                              function (response) {
                                  if(jQuery.parseJSON(response.data)=='Deleted'){
                                      debugger;
                                      angular.forEach($scope.SalesComDistributiongridOptions.data,function(value,index){
                                          if(value.ContactPersonnelID==data[0].ContactPersonnelID){
                                              $scope.SalesComDistributiongridOptions.data.splice(index,1);
                                            }
                                      },$scope.SalesComDistributiongridOptions.data);
                                      $scope.getTotal();
                                  }
                                  else{
                                      alert(jQuery.parseJSON(response.data));
                                  }
                              },
                              function (response) {alert(jQuery.parseJSON(response.data));}
                          );
            }
            else {
                angular.forEach($scope.SalesComDistributiongridOptions.data, function (value, index)
                {
                    if (value.ContactPersonnelID == data[0].ContactPersonnelID)
                    {
                        $scope.SalesComDistributiongridOptions.data.splice(index, 1);
                    }
                       
                }, $scope.SalesComDistributiongridOptions.data);
                $scope.getTotal();
            
            }
        };

        $scope.Save =function()
        {
            debugger;
            if( !$scope.Validation())
                return false;
            var obj = $scope.refreshObjectSalesCommission();
            $http.post(_sBaseAddress+'/ExportSC/SaveSalesCommossion', JSON.stringify(obj)).then(
                            function (response) {
                                var result=jQuery.parseJSON(response.data);
                                debugger;
                                if(result[0].ErrorMessage == '' || result[0].ErrorMessage == null)
                                {
                                    $http.post(_sBaseAddress+'/SalesCommissionLC/GetSalesCommissionLCByExportPIID', JSON.stringify($scope.ExportPI)).then(
                                     function (response) {
                                     var objSalesCom=jQuery.parseJSON(response.data);
                                    debugger;
                                    if(objSalesCom.ExportPIID>0)
                                    {
                                        userSession.setData('CreateDistribution',objSalesCom);
                                        userSession.previousPage();
                                     }
                                else{
                                  
                                        msModal.Message({headerTitle : '', bodyText:objSalesCom.ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                }
                            },
                            function (response) {
                                msModal.Message({headerTitle : '', bodyText:(response.data).ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});}

                        );
                                  
                                }
                               else{
                                  
                                    msModal.Message({headerTitle : '', bodyText:result[0].ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                }
                            },
                            function (response) {
                                msModal.Message({headerTitle : '', bodyText:(response.data).ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});}

                        );
        };
        
        $scope.Validation= function()
        {    
            var nPercentage=0;
            var nCommissionAmount=0;
            var oSalesCommissions = $scope.SalesComDistributiongridOptions.data;
            //for(var i=0 ;i<oSalesCommissions.length ;i++){
            //    oSalesCommissions[i].Percentage=(parseFloat(parseFloat(oSalesCommissions[i].CommissionAmount )* 100)/icsRemoveComma($scope.TotalComAmount,2))
       
            //}
            debugger
            for(var i=0 ;i<oSalesCommissions.length ;i++)
            {
                // oSalesCommissions[i].Percentage=(parseFloat(parseFloat(oSalesCommissions[i].CommissionAmount )* 100)/icsRemoveComma($scope.TotalComAmount,2))}
                nPercentage= nPercentage+ oSalesCommissions[i].Percentage;
                nCommissionAmount=parseFloat((parseFloat(nCommissionAmount))+parseFloat(oSalesCommissions[i].CommissionAmount)).toFixed(2);
            }

            if( parseFloat(nPercentage) !=100)
            {
                msModal.Message({headerTitle : '', bodyText:"Total Commission Percentage (person wise) must be 100% !", sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }

            if($scope.TotalComAmount==undefined || parseFloat(icsRemoveComma($scope.TotalComAmount,2),0) <=0){
                msModal.Message({headerTitle : '', bodyText:"Sales Commission Amount Needed!", sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            else if($scope.ComPercentage==undefined || parseFloat(icsRemoveComma($scope.TotalComAmount,2),0) <=0){
            msModal.Message({headerTitle : '', bodyText:"Sales Commission Percentage Needed!", sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            debugger;
            if($scope.CommissionOn==0)
            {
                if( ($scope.TotalComAmount==undefined) || ( parseFloat($scope.Comm_PI_Rate).toFixed(2) != parseFloat($scope.CommissionAmount).toFixed(2)) )
                {
                    msModal.Message({headerTitle : '', bodyText:"Total P/I Commission is not equal to person assign commission ! Total Commission(PI):"+parseFloat($scope.Comm_PI_Rate).toFixed(2)+" Person wise Total:"+ parseFloat($scope.CommissionAmount).toFixed(2), sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                    return false;
                }
            }

            if($scope.CommissionOn>0)
            {
                //alert($scope.TotalComAmount);
                //alert(nCommissionAmount);
                if( parseFloat(icsRemoveComma($scope.TotalComAmount)).toFixed(2) !=parseFloat(nCommissionAmount).toFixed(2))
                {
                    msModal.Message({headerTitle : '', bodyText:"Sales Commission Amount is not correct !. Total Commission:"+$scope.TotalComAmount+" Person wise Total:"+nCommissionAmount, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                    return false;
                }
            }
        
            return true;
        };

        $scope.refreshObjectSalesCommission = function()
        {
            var oSalesCommissions = $scope.SalesComDistributiongridOptions.data;
            for(var i=0 ;i<oSalesCommissions.length ;i++){
                oSalesCommissions[i].Status = 1;
                oSalesCommissions[i].CommissionOn = $scope.CommissionOn;
                oSalesCommissions[i].Percentage_Maturity = $scope.maturityPercentage;
            }
            return oSalesCommissions;
        };

        $scope.getContactPersonnel = function(results)
        {
            debugger;
            var bExists=false;
            var oSalesCommission=null;
        
            for (i=0; i<results.length;i++)
            {
                oSalesCommission={ SalesCommissionID: 0,
                    ContactPersonnelID:results[i].ContactPersonnelID,
                    CPName :results[i].Name,
                    ContractorName:results[i].ContractorName,
                    ContractorID:$scope.ContractorID,
                    ExportPIID :oExportPI.ExportPIID,
                    Currency :oExportPI.Currency,
                    Percentage:0,
                    CommissionAmount:0,
                    Percentage_Maturity:0
                };

                var bExists=  $scope.alreadyExists(results[i].ContactPersonnelID);
                if(!bExists)
                {
                    $scope.SalesComDistributiongridOptions.data.push(oSalesCommission);
                }
            }
            
            $scope.SetComissonAmount();
        };
        $scope.alreadyExists = function(nContactPersonnelID)
        {
             var odatas = $scope.SalesComDistributiongridOptions.data;
             for (var i = 0; i < odatas.length; i++) 
             {
                if (parseInt(odatas[i].ContactPersonnelID) == parseInt(nContactPersonnelID))
                {
                    return true;
                }
             }
             return false;
        };

        $scope.SetComissonAmount= function(){
            var oSalesCommissions_Result=[];
            var oSalesCommissions= $scope.SalesComDistributiongridOptions.data;
            var oSalesCommissions_Buyer=$scope.GetCPByID($scope.ExportPI.BuyerID);
            var oSalesCommissions_Customer=$scope.GetCPByID($scope.ExportPI.ContractorID);
            var TotalAmount_Buyer=$scope.GetTotalAmountCom('AmountComTwo');
            var TotalAmount_Customer=$scope.GetTotalAmountCom('AmountCom');
            for (i=0; i<oSalesCommissions_Customer.length;i++)
            {
                oSalesCommissions_Customer[i].CommissionAmount=(TotalAmount_Customer/oSalesCommissions_Customer.length);
                oSalesCommissions_Customer[i].Percentage= (TotalAmount_Customer/oSalesCommissions_Customer.length)*100/(parseFloat(TotalAmount_Buyer) + parseFloat(TotalAmount_Customer)) ;
                oSalesCommissions_Result.push(oSalesCommissions_Customer[i]);
            }
            for (i=0; i<oSalesCommissions_Buyer.length;i++)
            {
                oSalesCommissions_Buyer[i].CommissionAmount=(TotalAmount_Buyer/oSalesCommissions_Buyer.length);
                oSalesCommissions_Buyer[i].Percentage= (TotalAmount_Buyer/oSalesCommissions_Buyer.length)*100/(parseFloat(TotalAmount_Buyer) + parseFloat(TotalAmount_Customer)) ;
                oSalesCommissions_Result.push(oSalesCommissions_Buyer[i]);
            }
            //$scope.SalesComDistributiongridOptions.data=[];
            //$scope.SalesComDistributiongridOptions.data=oSalesCommissions_Result;
            $scope.SalesComgridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN); 
            $scope.getTotal();
        }
        $scope.GetTotalAmountCom=function(sField)
        {
            var nAmountCom_Total=0;
            var oDetails= $scope.SalesContractDetailsgridOptions.data;
            for(var i=0; i<oDetails.length;i++){
                nAmountCom_Total= parseFloat(nAmountCom_Total)+ parseFloat(oDetails[i][sField]);
            }
            return nAmountCom_Total;
        }
        $scope.GetCPByID= function(nID){
            var results=[];
            var odatas = $scope.SalesComDistributiongridOptions.data;
            for (var i = 0; i < odatas.length; i++) 
            {
                if (parseInt(odatas[i].ContractorID) == parseInt(nID))
                {
                    results.push(odatas[i]);
                }
            }
            return results;
        }

        $scope.saveCRRate = function()
        {
           var data=$scope.SalesContractSalesContractgridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'No item selected!.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            $scope.ExportPI = oExportPI;
            $scope.ExportPIDetail = data[0];
            msModal.Message({headerTitle : '', bodyText:'Are you sure to Change CR Rate?.', sucessText : ' Ok', cancelText : ' Cancel', feedbackType:true, autoClose : false}).result.then(function(result){
            if(result){
    
            $http.post(_sBaseAddress+'/SalesCommissionLC/UpdateCRRate',JSON.stringify(data[0])).then(
                                       function (response) {
                                           var result=jQuery.parseJSON(response.data);
                                           if(result.ExportPIDetailID >0){
                                               angular.forEach($scope.SalesContractDetailsgridOptions.data,function(value,index){
                                                   if(value.ExportPIDetailID==data[0].ExportPIDetailID){
                                                      $scope.index=index;
                                                       $scope.SalesContractDetailsgridOptions.data[index]=result;
                                                   }
                                               },$scope.SalesContractDetailsgridOptions.data);
                                            
                                           }
                                           else{
                                               alert(jQuery.parseJSON(response.data));
                                           }
                                       },
                                       function (response) {alert(jQuery.parseJSON(response.data));}
                                  );
            }
            });

       
        }
        $scope.Refresh_CommissionOn = function()
        {
            if($scope.CommissionOn>0){ $scope.textdisabled = false ;}
            else { $scope.TotalComAmount=$scope.Comm_PI_Rate;$scope.textdisabled = true; }
            $scope.getTtlComAmount();
        }
 });

</script>
