<html>
<head>
    @{ViewBag.Title = "Voucher Bill";}
</head>

@model ESimSol.BusinessObjects.VoucherBill
<body>
    <div class="menuMainCollectionTable">
        <div class="easyui-panel" title="Voucher Bill" style="font-family:Tahoma; text-align:center; height:89%;">
            <fieldset style="height:95%; text-align:center;">
                <legend style="font-weight:bold;"> Voucher Bill Informations : </legend>
                <table border="0" cellspacing="2" cellpadding="2" style="font-size:11px; font-weight:bold; text-align:center; width:70%">
                    <tr>
                        <td style="width:25%; height:20px;">&nbsp;</td>
                        <td style="width:25%; height:20px;">&nbsp;</td>
                        <td style="width:25%; height:20px;">&nbsp;</td>
                        <td style="width:25%; height:20px;">&nbsp;</td>
                    </tr>
                    <tr>
                        <td style="width:25%; text-align:right">
                            Business Unit :
                        </td>
                        <td colspan="3" style="width:75%">
                            @Html.DropDownListFor(m => m.BUID, Model.BusinessUnits.Select(x => new SelectListItem() { Text = x.Name, Value = x.BusinessUnitID.ToString() }), new { id = "cboBusinessUnit", style = "width: 101%;" })
                        </td>
                    </tr>
                    <tr>
                        <td style="width:25%; text-align:right">
                            Account Head :
                        </td>
                        <td colspan="3" style="width:75%">
                            @Html.TextBoxFor(model => model.AccountHeadName, new { style = "width: 100%;", id = "txtAccountHeadName", placeholder = "Account head Name/Code" })
                        </td>
                    </tr>
                    <tr>
                        <td style="width:25%; text-align:right">
                            Sub Ledger :
                        </td>
                        <td colspan="3" style="width:75%">
                            @Html.TextBoxFor(model => model.SubLedgerName, new { style = "width: 100%;", id = "txtSubLedgerName", placeholder = "SubLedger Name/Code" })
                        </td>
                    </tr>
                    <tr>
                        <td style="width:25%; text-align:right">
                            Bill No :
                        </td>
                        <td style="width:25%">
                            @Html.TextBoxFor(model => model.BillNo, new { style = "width: 100%;", id = "txtBillNo" })
                        </td>
                        <td style="width:25%; text-align:right">
                            Bill Date :
                        </td>
                        <td style="width:25%">
                            <input id="txtBillDate" type="text" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser,onSelect: CalculateCreditDays" required="required" style="width:100%;" />
                        </td>
                    </tr>   
                    <tr>
                        <td style="width:25%; text-align:right">
                            Credit Days :
                        </td>
                        <td style="width:25%">
                            @Html.TextBoxFor(model => model.CreditDays, new { style = "width: 100%;", id = "txtCreditDays" })
                        </td>
                        <td style="width:25%; text-align:right">
                            Maturity Date :
                        </td>
                        <td style="width:25%">
                            <input id="txtDueDate" type="text" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser,onSelect: CalculateCreditDays" required="required" style="width:100%;" />
                        </td>
                    </tr>   
                    <tr>
                        <td style="width:25%; text-align:right">
                            Currency :
                        </td>
                        <td style="width:25%">
                            @Html.DropDownListFor(m => m.CurrencyID, Model.Currencys.Select(x => new SelectListItem() { Text = x.Symbol, Value = x.CurrencyID.ToString() }), new { id = "cboCurrency", style = "width: 104%;" })
                        </td>
                        <td style="width:25%; text-align:right">
                            C Rate :
                        </td>
                        <td style="width:25%">
                            @Html.TextBoxFor(model => model.CurrencyRate, new { style = "width: 100%;", id = "txtConversionRate" })
                        </td>
                    </tr>                 
                    <tr>
                        <td style="width:25%; text-align:right">
                            Currency Amount :
                        </td>
                        <td style="width:25%">
                            @Html.TextBoxFor(model => model.CurrencyAmount, new { style = "width: 100%;", id = "txtCurrencyAmount" })
                        </td>
                        <td style="width:25%; text-align:right">
                            Amount In BDT :
                        </td>
                        <td style="width:25%">
                            @Html.TextBoxFor(model => model.Amount, new { style = "width: 100%;", id = "txtAmountInBDT" })
                        </td>
                    </tr>
                    <tr>
                        <td style="width:25%; text-align:right">
                            Opening Date :
                        </td>
                        <td style="width:25%; text-align:left">
                            <input id="txtOpeningBillDate" type="text" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser" style="width:102%;" />
                        </td>
                        <td style="width:25%; text-align:right">
                            Opening Amount :
                        </td>
                        <td style="width:25%">
                            @Html.TextBoxFor(model => model.OpeningBillAmount, new { style = "width:100%;", id = "txtOpeningBillAmount" })
                        </td>
                    </tr>
                    <tr>
                        <td style="width:25%; text-align:right; vertical-align:top">
                            Remarks :
                        </td>
                        <td colspan="3" style="width:75%">
                            @Html.TextAreaFor(model => model.Remarks, new { style = "width: 100%;", id = "txtRemarks" })
                        </td>
                    </tr>
                    
                </table>
            </fieldset>
        </div>

        <fieldset>
            <legend style="font-weight:bold"> Action : </legend>
            <table border="0" cellspacing="2" cellpadding="2" style="font-size:11px; font-weight:bold; width:100%;">
                <tr>
                    <td style="width:100%;text-align:right">
                        <a href="javascript:void(0)" id="btnSave" class="easyui-linkbutton" iconcls="icon-save" plain="true">Save</a>
                        <a href="javascript:void(0)" id="btnClose" class="easyui-linkbutton" iconcls="icon-cancel" plain="true">Close</a>
                    </td>
                </tr>
            </table>
        </fieldset>
    </div>
</body>
</html>

<script type="text/javascript">    
    var _oVoucherBill = null;
    var _oCurrencys=[];  
    var _nAccountHeadID=0,_nSubLedgerID=0;
    $(document).ready(function () {        
        _oVoucherBill = @Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));        
        $('#txtCreditDays').icsCurrencyBox();
        $('#txtCurrencyAmount').icsCurrencyBox();
        $('#txtConversionRate').icsCurrencyBox();
        $('#txtAmountInBDT').icsCurrencyBox();
        $('#txtOpeningBillAmount').icsCurrencyBox();
        $("#txtAmountInBDT").prop("disabled",true);       
        
        var sOperation = sessionStorage.getItem("VoucherBillHeader");
        if(sOperation === "Add Voucher Bill")
        {
            $('#txtBillDate').datebox('setValue', icsdateformat(new Date()));
            $('#txtDueDate').datebox('setValue', icsdateformat(new Date()));
            $('#txtOpeningBillDate').datebox('setValue', icsdateformat(new Date()));
            $("#txtConversionRate").prop("disabled",true);
            $("#txtConversionRate").val(1.00);
            $("#txtCurrencyAmount").val(0.00);
            $("#txtAmountInBDT").val(0.00);
        }
        else if(sOperation === "Edit Voucher Bill")
        {
            $('#txtBillDate').datebox('setValue', _oVoucherBill.BillDateInString);
            $('#txtDueDate').datebox('setValue', _oVoucherBill.DueDateInString);
            $('#txtOpeningBillDate').datebox('setValue',_oVoucherBill.OpeningBillDateInString);
            _nAccountHeadID=parseInt(_oVoucherBill.AccountHeadID);
            _nSubLedgerID=parseInt(_oVoucherBill.SubLedgerID);
            var txttempAccountHead=document.getElementById("txtAccountHeadName");
            txttempAccountHead.value=_oVoucherBill.AccountHeadName;
            txttempAccountHead.style.color="blue";
            txttempAccountHead.style.fontWeight="bold";

            var selectedCbo =document.getElementById("cboCurrency");
            var cboCurrencyVal = selectedCbo.options[selectedCbo.selectedIndex].value;
            if(parseInt(cboCurrencyVal) == 1)
            {
                $("#txtConversionRate").prop("disabled",true);
            }
        }
        else if(sOperation == "View Voucher Bill")
        {
            DisableFields();
        }        
        CalculateCreditDays();
    });
    function CalculateCreditDays(date){
        var dSalesDate=new Date($('#txtBillDate').datebox('getValue'));
        var dMaturityDate=new Date($('#txtDueDate').datebox('getValue'));
        var nCreditDays= Math.floor((dMaturityDate - dSalesDate) / (1000*60*60*24));
        if(nCreditDays<0){
            nCreditDays=0;
            $('#txtDueDate').datebox('setValue', icsdateformat(dSalesDate));
        }
        $('#txtCreditDays').val(nCreditDays);
    }
    $('#txtCreditDays').keyup(function(e){        
        var nDays=parseInt($(this).val());
        var sSalesDate=$('#txtBillDate').datebox('getValue');
        var dSalesDate=new Date(sSalesDate);
        var dMaturityDate=dSalesDate;
        dMaturityDate.setDate(dMaturityDate.getDate()+nDays);
        $('#txtDueDate').datebox('setValue', icsdateformat(dMaturityDate));
    });
   
    function DisableFields()
    {
        $("#cboBusinessUnit").prop("disabled",true);
        $("#txtAccountHeadName").prop("disabled",true);
        $("#txtSubLedgerName").prop("disabled",true);
        $('#txtCreditDays').prop('disabled',true);
        $("#txtBillNo").prop("disabled",true);
        $("#txtCurrencyAmount").prop("disabled",true);
        $("#txtConversionRate").prop("disabled",true);
        $("#txtAmountInBDT").prop("disabled",true);
        $("#cboCurrency").prop("disabled",true);
        $("#txtRemarks").prop("disabled",true);        
        $("#txtOpeningBillAmount").prop("disabled",true);
        $("#btnSave").hide();
        $('#txtBillDate').datebox({ disabled: true });
        $('#txtDueDate').datebox({ disabled: true });
        $('#txtOpeningBillDate').datebox({ disabled: true });

        $('#txtBillDate').datebox('setValue',_oVoucherBill.BillDateInString);
        $('#txtDueDate').datebox('setValue',_oVoucherBill.DueDateInString);
        $('#txtOpeningBillDate').datebox('setValue',_oVoucherBill.OpeningBillDateInString);
    }

    $('#txtAccountHeadName').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            var txtAccountHead = $.trim($('#txtAccountHeadName').val());
            if(txtAccountHead!="")
            {
                var oChartsOfAccount = { AccountHeadName: txtAccountHead};
                var obj = {
                    BaseAddress:sessionStorage.getItem("BaseAddress"),
                    Object: oChartsOfAccount,
                    ControllerName: "ChartsOfAccount",
                    ActionName: "GetAccountsHeads",
                    IsWinClose: false
                };
                $.icsDataGets(obj, function (response) {
                    debugger;
                    if (response.status && response.objs.length > 0) {
                        if (response.objs[0].AccountHeadID > 0) {
                            debugger;
                            var tblColums = []; var oColumn = { field: "AccountCode", title: "Account Code", width: 200, align: "left" }; tblColums.push(oColumn);
                            oColumn = { field: "AccountHeadName", title: "Account Head Name", width:170, align: "left" }; tblColums.push(oColumn);
                            var oPickerParam = {
                                winid: 'winAccountHeads',
                                winclass: 'clsAccountHead',
                                winwidth: 600,
                                winheight: 460,
                                tableid: 'tblAccountHeads',
                                tablecolumns: tblColums,
                                datalist: response.objs,
                                multiplereturn: false,
                                searchingbyfieldName: 'AccountHeadName',
                                windowTittle: 'AccountHead List'
                            };
                            $.icsPicker(oPickerParam);
                            IntializePickerbutton(oPickerParam);
                        }
                        else { alert(response.objs[0].ErrorMessage); }
                    }else{
                        alert("Data Not Found.");
                    }
                });

            }
        }else if (code == 8) //backspace=8   
        {
            var txtAccountHeadName=document.getElementById("txtAccountHeadName");
            txtAccountHeadName.style.color="black";
            txtAccountHeadName.style.fontWeight="normal";
            _nAccountHeadID=0;
        } 
    });

    $('#txtSubLedgerName').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) {
            if(parseInt(_nAccountHeadID)<=0){
                alert('Please select Account Head first!');
                return false;
            }
            var txtSubLedger = $.trim($('#txtSubLedgerName').val()); 
            if(txtSubLedger!="")
            {
                var oACCostCenter = {AccountHeadID:_nAccountHeadID,  CategoryName: txtSubLedger};
                var obj = {
                    BaseAddress: sessionStorage.getItem("BaseAddress"),
                    Object: oACCostCenter,
                    ControllerName: "ACCostCenter",
                    ActionName: "GetACCostCenters",
                    IsWinClose: false
                };
                $.icsDataGets(obj, function (response) {
                    debugger;
                    if (response.status && response.objs.length > 0) {
                        if (response.objs[0].ACCostCenterID > 0) {
                            debugger;
                            var tblColums = []; var oColumn = { field: "Code", title: "Code", width: 200, align: "left" }; tblColums.push(oColumn);
                            oColumn = { field: "Name", title: "Name", width:170, align: "left" }; tblColums.push(oColumn);
                            var oPickerParam = {
                                winid: 'winSubLedger',
                                winclass: 'clsSubLedger',
                                winwidth: 600,
                                winheight: 460,
                                tableid: 'tblSubLedgers',
                                tablecolumns: tblColums,
                                datalist: response.objs,
                                multiplereturn: false,
                                searchingbyfieldName: 'AccountHeadName',
                                windowTittle: 'Sub Ledger List'
                            };
                            $.icsPicker(oPickerParam);
                            IntializePickerbutton(oPickerParam);
                        }
                        else { alert(response.objs[0].ErrorMessage); }
                    }else{
                        alert("Data Not Found.");
                    }
                });
            }
        }else if (code == 8) //backspace=8   
        {
            var txtSubLedgerName=document.getElementById("txtSubLedgerName");                                     
            txtSubLedgerName.style.color="black";
            txtSubLedgerName.style.fontWeight="normal";
            _nSubLedgerID=0;
        } 
    });


    function IntializePickerbutton(oPickerobj) {
        debugger;
        $("#" + oPickerobj.winid).find("#btnOk").click(function () {
            debugger;
            //for Single Select
            PickerEvents(oPickerobj);
        });
        $(document).find('.' + oPickerobj.winclass).keydown(function (e) {
            if (e.which == 13)//enter=13
            {
                PickerEvents(oPickerobj);
            }
        });
    }
    function PickerEvents(oPickerobj) {
        var oreturnobj = null, oreturnobjs = [];
        if (oPickerobj.multiplereturn)
        {
            oreturnobjs = $('#' + oPickerobj.tableid).datagrid('getChecked');
        } else
        {
            oreturnobj = $('#' + oPickerobj.tableid).datagrid('getSelected');
        }

        $("#" + oPickerobj.winid).icsWindow("close");
        $("#" + oPickerobj.winid).remove();
        if (oPickerobj.winclass == 'clsAccountHead')
        { 
            if(parseInt(oreturnobj.AccountHeadID)>0)
            {
                _nAccountHeadID=oreturnobj.AccountHeadID;
              //  var txttempAccountHead=$("#txtAccountHeadName").val();
                var txttempAccountHead=document.getElementById("txtAccountHeadName");
                txttempAccountHead.value=oreturnobj.AccountHeadName;
                txttempAccountHead.style.color="blue";
                txttempAccountHead.style.fontWeight="bold";
                $("#txtAccountHeadName").focus();
            }
            else
            {
                _nAccountHeadID=0;
            }
        }else  if (oPickerobj.winclass == 'clsSubLedger')
        { 
            if(parseInt(oreturnobj.ACCostCenterID)>0)
            {
                _nSubLedgerID=oreturnobj.ACCostCenterID;
                var txttempSubLedger=document.getElementById("txtSubLedgerName");
                txttempSubLedger.value=oreturnobj.Name;
                txttempSubLedger.style.color="blue";
                txttempSubLedger.style.fontWeight="bold";
                $("#txtSubLedgerName").focus();
            }
            else
            {
                _nSubLedgerID=0;
            }
        }
    }
   

    function isNumberKey(evt){
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode != 46 &&(charCode < 48 || charCode > 57)))
            return false;
        return true;
    }

    $("#txtConversionRate").keyup(function (e){
        var nConversionRate =  $(this).val();
        var nCurrencyAmount = icsRemoveComma($("#txtCurrencyAmount").val());
        var nAmountInBDT = parseFloat(nCurrencyAmount) * parseFloat(nConversionRate);
        nAmountInBDT = Math.round(parseFloat(nAmountInBDT)*1000) / 1000;
        if(isNaN(nAmountInBDT))
        {
            nAmountInBDT = 0;
        }
        $('#txtAmountInBDT').val(icsFormatPrice(parseFloat(nAmountInBDT.toFixed(2))));
    });

    $("#txtCurrencyAmount").keyup(function (e){
        var nCurrencyAmount =  $(this).val();
        var nConversionRate = icsRemoveComma($("#txtConversionRate").val());
        var nAmountInBDT = parseFloat(nCurrencyAmount) * parseFloat(nConversionRate);
        nAmountInBDT = Math.round(parseFloat(nAmountInBDT)*1000) / 1000;
        if(isNaN(nAmountInBDT))
        {
            nAmountInBDT = 0;
        }
        $('#txtAmountInBDT').val(icsFormatPrice(parseFloat(nAmountInBDT.toFixed(2))));
    });

    $('#cboCurrency').change(function(){
        var nCurrencyID =  $("#cboCurrency").val();
        if(nCurrencyID == 1)
        {
            $("#txtConversionRate").prop("disabled",true);
            $("#txtConversionRate").val(1.00);
        }
        else
        {
            $("#txtConversionRate").prop("disabled",false);
            $("#txtConversionRate").val(0.00);
            var amountInBDT = icsRemoveComma($("#txtAmountInBDT").val());
            var nGivenAmount = icsRemoveComma($('#txtCurrencyAmount').val());
            var nCRate = parseFloat(amountInBDT) / parseFloat(nGivenAmount);
            if(isNaN(nCRate))
            {
                nCRate = 0;
            }
            nCRate = Math.round(parseFloat(nCRate)*1000)/1000;
            $('#txtConversionRate').val(icsFormatPrice(nCRate));
        }
    });

    function LoadCurrency(Currencys)
    {
        var listItems="";
        for (i = 0; i < Currencys.length; i++)
        {
            listItems += "<option value='" + Currencys[i].CurrencyID+"'>" + Currencys[i].Symbol+"</option>";
        }
        $("#cboCurrency").html(listItems);
    }

    function RefershObj()
    {
        var nAccountHeadID = 0;
        var nVoucherBillID = 0;        
        if(_oVoucherBill.VoucherBillID > 0)
        {
            nVoucherBillID = _oVoucherBill.VoucherBillID
        }
        
        debugger;
        var nCurrencyRate = icsRemoveComma($('#txtConversionRate').val());
        nCurrencyRate = parseFloat(nCurrencyRate).toFixed(2);

        var nCurrencyAmount = icsRemoveComma($('#txtCurrencyAmount').val());
        nCurrencyAmount = parseFloat(nCurrencyAmount).toFixed(2);

        var nAmount = icsRemoveComma($('#txtAmountInBDT').val());
        nAmount = parseFloat(nAmount).toFixed(2);

        var sOpeningBillAmount = icsRemoveComma($('#txtOpeningBillAmount').val());
        nOpeningBillAmount = parseFloat(sOpeningBillAmount).toFixed(2);
        
        _oVoucherBill.VoucherBillID = nVoucherBillID;
        _oVoucherBill.BUID = parseInt($("#cboBusinessUnit").val());
        _oVoucherBill.BillNo = $("#txtBillNo").val();
        _oVoucherBill.AccountHeadID = parseInt(_nAccountHeadID);
        _oVoucherBill.SubLedgerID = parseInt(_nSubLedgerID);
        _oVoucherBill.CreditDays = parseFloat(icsRemoveComma($('#txtCreditDays').val()))?parseFloat(icsRemoveComma($('#txtCreditDays').val())):0.00;
        _oVoucherBill.BillDate = $('#txtBillDate').datebox('getValue');
        _oVoucherBill.DueDate = $('#txtDueDate').datebox('getValue');
        _oVoucherBill.Amount = parseFloat(nAmount);
        _oVoucherBill.CurrencyID = parseInt($("#cboCurrency").val());
        _oVoucherBill.CurrencyRate = parseFloat(nCurrencyRate);
        _oVoucherBill.CurrencyAmount = parseFloat(nCurrencyAmount);
        _oVoucherBill.OpeningBillAmount =  nOpeningBillAmount;
        _oVoucherBill.OpeningBillDate = $('#txtOpeningBillDate').datebox('getValue');
        _oVoucherBill.Remarks = $("#txtRemarks").val();
    }

    $("#btnSave").click(function(){
        RefershObj();
        if(parseInt(_oVoucherBill.BUID) <= 0)
        {
            alert("Please Select An Business Unit.");
            return false;
        }
        if(_oVoucherBill.AccountHeadID == 0)
        {
            alert("Please Select An Account Head.");
            return false;
        }
        if(_oVoucherBill.BillNo == "")
        {
            alert("Please give Bill No");
            return false;
        }
        if(_oVoucherBill.CurrencyAmount == 0)
        {
            alert("Please give Currency Amount");
            return false;
        }
        if(_oVoucherBill.CurrencyRate == 0)
        {
            alert("Please give Currency Rate");
            return false;
        }
        var dSalesDate=new Date(_oVoucherBill.BillDate);
        var dMaturity=new Date(_oVoucherBill.DueDate);
        if(dMaturity.getTime() ===dSalesDate.getTime()){
            if(!confirm('Maturity Date: '+_oVoucherBill.DueDate+' and Bill Date: '+_oVoucherBill.BillDate+', is same.\nConfirm to Save?')){return false;}
        }

        $.ajax({
            type: "POST",
            dataType: "json",
            url : sessionStorage.getItem('BaseAddress')+  "/VoucherBill/Save",
            traditional: true,
            data:  JSON.stringify(_oVoucherBill),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                oVoucherBill = jQuery.parseJSON(data);
                if (oVoucherBill.VoucherBillID>0) {
                    alert("Data Saved sucessfully");
                    var oVoucherBills = sessionStorage.getItem("VoucherBills");
                    var nIndex = parseInt(sessionStorage.getItem("SelectedRowIndex"));
                    if (oVoucherBills != null) {
                        oVoucherBills = jQuery.parseJSON(oVoucherBills);
                    }
                    else {
                        oVoucherBills = [];
                    }
                    if (nIndex != -1) {
                        oVoucherBills[nIndex] = oVoucherBill;
                    }
                    else {
                        sessionStorage.setItem("SelectedRowIndex", oVoucherBills.length);
                        oVoucherBills.push(oVoucherBill);
                    }
                    sessionStorage.setItem("VoucherBills", JSON.stringify(oVoucherBills));
                    window.location.href = sessionStorage.getItem("BackLink");
                }
                else {
                    alert(oVoucherBill.ErrorMessage);
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }

        });
    });

    $("#btnClose").click(function(){
        window.location.href = sessionStorage.getItem("BackLink");
    });
</script>