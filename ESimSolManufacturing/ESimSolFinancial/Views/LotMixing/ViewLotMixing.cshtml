@{
    ViewBag.Title = "LotMixing";
}
@model ESimSol.BusinessObjects.LotMixing

<div style="padding-top:5px; height:99%" ng-app="LotMixingAPP"  class="form-horizontal regionLotMixing menuMainCollectionTable">
    <div ng-controller="LotMixingCtrl" style="height:100%;">
        <div style="height:89%; overflow-y:scroll; overflow-x:hidden">
            @*Requisition INFO*@
            <div style="height:20%">
                <fieldset style="height:100%">
                    <legend>Lot Info: </legend>
                    <div class="row col-md-12">
                        <div class="col-md-1 text-right">
                            <label class="control-label">Store :</label>
                        </div>
                        <div class="col-md-2 text-left">
                            <select class="form-control" ng-model="LotMixing.WorkingUnitID" ng-options="item.WorkingUnitID as item.OperationUnitName for item in IssueStores" ng-disabled="disabled">
                                <option value="">--Select Store--</option>
                            </select>
                        </div>
                        <div class="col-md-1 text-right"><label class="control-label">SL No:</label></div>
                        <div class="col-md-2 text-left">
                            <input ng-model="LotMixing.TWNo" class="form-control" disabled />
                        </div>
                        <div class="col-md-1 text-right"><label class="control-label"> Date:</label></div>
                        <div class="col-md-2 text-left">
                            <div class="input-group date date-container" style="width:100%">
                                <input type="text" class="form-control" ng-disabled="disabled" ng-model="LotMixing.CreateDateInString">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                            </div>
                        </div>
                        <div class="col-md-1 text-right"><label class="control-label">Prepare By:</label></div>
                        <div class="col-md-2 text-left">
                            <input ng-model="LotMixing.PrepareByName" class="form-control" disabled />
                        </div>
                    </div>
                    <div class="row col-md-12">
                        <div class="col-md-1 text-right"><label class="control-label">Note:</label></div>
                        <div class="col-md-9 text-left">
                            <input ng-model="LotMixing.Remarks" ng-disabled="disabled" class="form-control" />
                        </div>
                       
                        <div class="col-md-1 text-right"><label class="control-label">Approve By:</label></div>
                        <div class="col-md-2 text-left">
                            <input ng-model="LotMixing.ApproveByName" class="form-control" disabled />
                        </div>
                    </div>
                 
                </fieldset>
            </div>
            @*DETAILS TABLE OUT*@
            <div style="height:50%; width:100%">
                <fieldset style="height:100%">
                    <legend>Product : </legend>
                    <div class="row ui-grid-panel">
                        <div class="container col-md-12">
                            <div class="form-inline">
                                <input style="width:20%; height:25px; margin:5px" class="form-control" ng-model="txtProductOut" placeholder="Type Product Name & Press Enter" ng-disabled="disabled" ng-keydown="SearchKeyProduct($event,102)" required />
                               
                                <button type="button" class="btn btn-primary btn-sm" aria-label="right Align" ng-click="PickProduct(102)" ng-disabled="disabled"><span aria-hidden="true"> Pick </span></button>
                                <button type="button" class="btn btn-danger btn-sm" aria-label="right Align" ng-click="ClearProduct()" ng-disabled="disabled"><span aria-hidden="true" class="glyphicon glyphicon-trash"></span></button>
                              
                                <input class="form-control" ng-model="txtLotNo" placeholder="Type Lot No & Press Enter" ng-disabled="disabled" ng-keydown="SearchKeyDownLot($event)" style="width:17%; margin-left:8%" required />
                                <button type="button" class="btn btn-primary btn-sm" aria-label="right Align" ng-click="PickLot()" ng-disabled="disabled"><span aria-hidden="true"> Pick </span></button>
                                <button type="button" class="btn btn-danger btn-sm" aria-label="right Align" ng-click="ClearLot()" ng-disabled="disabled"><span class="glyphicon glyphicon-trash"></span></button>
                               
                                <button type="button" style="margin-left:2%" class="btn btn-success btn-sm" aria-label="right Align" ng-click="AddProduct()" ng-disabled="disabled"><span class="glyphicon glyphicon-plus"> Add Product</span></button>
                          
                                <button type="button" style="float:right; margin-right:35px;" class="btn btn-danger btn-sm" aria-label="right Align" ng-click="RemoveProduct(102)" ng-disabled="disabled"><span aria-hidden="true"> Remove </span></button>
                            </div>
                        </div>
                    </div>
                    <div class="row col-md-12">
                        <div style="height:180px" ui-grid="gridOptionsLotOut" ui-grid-selection ui-grid-resize-columns ui-grid-edit ui-grid-row-edit class="grid ui-grid-selectable"></div>
                    </div>
                </fieldset>
            </div>
            @*DETAILS TABLE IN*@
            <div style="height:40%;">
                <fieldset style="height:100%;">
                    <legend>Details : </legend>
                    <div class="row ui-grid-panel">
                        <div class="container col-md-12">
                            <div class="form-inline">
                                <input style="width:20%; height:25px; margin:5px" class="form-control" ng-model="txtProductIn" placeholder="Type Product Name & Press Enter" ng-disabled="disabled" ng-keydown="SearchKeyProduct($event,101)" required />
                                <button type="button" class="btn btn-primary btn-sm" aria-label="right Align" ng-click="PickProduct(101)" ng-disabled="disabled"><span aria-hidden="true"> Pick </span></button>
                                <label style="padding-left:8%">Percentage:</label> 
                                <input style="width:10%; height:25px;" class="form-control number" ng-model="LotMixing.Percentage" ng-keyup="CalculatePercentage()" placeholder="Qty Percentage" ng-disabled="disabled" required />
                                <input style="width:2.8%; font-weight:bold; height:25px;" class="form-control" disabled value="%"/>
                             
                                <button type="button" style="float:right; margin-right:40px;" class="btn btn-danger btn-sm" aria-label="right Align" ng-click="RemoveProduct(101)" ng-disabled="disabled"><span aria-hidden="true"> Remove </span></button>
                            </div>
                        </div>
                    </div>
                    <div class="row col-md-12">
                        <div style="height:120px; width:98.7%" ui-grid="gridOptionsLotIn" ui-grid-selection ui-grid-resize-columns ui-grid-edit ui-grid-row-edit class="grid ui-grid-selectable"></div>
                    </div>
                </fieldset>
            </div>
        
        </div>
        <div style="height:10%">
            <fieldset>
                <legend>Action</legend>
                <div class="row col-md-12 text-right">
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Save()" ng-show="hide_Save"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true">Save</span> </button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Complete()" ng-show="hide_Complete"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true">Complete</span> </button>
                    @*<button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Complete()" ng-show="hide_Issue"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true">Issue</span> </button>*@
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Approve()" ng-show="hide_Approve"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true">Approve</span> </button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="UndoApprove()" ng-show="hide_UndoApprove"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true">UndoApprove</span> </button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Close()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"> Close</span> </button>
                </div>
            </fieldset>
        </div>
    </div>
    <script type="text/ng-template" id="LotMixing.html">
        <div class="modal-header">
            <h4 class="modal-title" id="modal-title">Lot No :</h4>
        </div>
        <div class="modal-body form-horizontal regionExportUP ms-custom-control" id="modal-body">
            <div class="row">
                <div class="col-md-12 ">
                    <div class="col-md-3 text-right"><label class="control-label">Product:</label></div>
                    <div class="col-md-7 text-left">
                        <input ng-model="LotMixingDetail.OrderProduct" class="form-control" disabled>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 ">
                    <div class="col-md-3 text-right"><label class="control-label">Store:</label></div>
                    <div class="col-md-7 text-left">
                        <input type="text" class="form-control" ng-model="LotMixingDetail.BUID_issueName" disabled>
                    </div>
                </div>
            </div>
            @*<div class="row">
                <div class="col-md-12 ">
                    <div class="col-md-3 text-right"><label class="control-label">Product:</label></div>
                    <div class="col-md-7 text-left">
                        <div class="form-inline">
                            <input class="form-control" ng-model="txtProductName" placeholder="Type Name & Press Enter" ng-disabled="disabled" ng-keydown="SearchKeyDownProduct($event)" style="width:80%;" required />
                            <button type="button" class="btn btn-default btn-sm" aria-label="right Align" ng-click="PickProduct()" ng-disabled="disabled"><span aria-hidden="true"> Pick </span></button>
                        </div>
                    </div>
                </div>
            </div>*@
            <div class="row">
                <div class="col-md-12 ">
                    <div class="col-md-3 text-right"><label class="control-label">LotNo:</label></div>
                    <div class="col-md-7 text-left">
                        <div class="form-inline">
                            <input class="form-control" ng-model="txtLotNo" placeholder="Type Lot No & Press Enter" ng-disabled="disabled" ng-keydown="SearchKeyDownLot($event)" style="width:80%;" required />
                            <button type="button" class="btn btn-default btn-sm" aria-label="right Align" ng-click="PickLot()" ng-disabled="disabled"><span aria-hidden="true"> Pick </span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-success btn-sm" aria-label="Left Align" ng-click="UpdateLot()" ng-disabled="disabled" ng-hide="hide"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span> OK</button>
            <button type="button" class="btn-danger btn-sm" aria-label="Left Align" ng-click="cancel()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Cancel</button>
        </div>
    </script>
</div>

<style type="text/css">
   
    /*.ui-grid-panel {
        background: linear-gradient(to bottom,#EFF5FF 0,#E0ECFF 100%);
        height:35px;
    }*/
    .regionLotMixing .form-horizontal .control-label {
        padding-top: 3px;
    }

    .regionLotMixing .form-control {
        height: 26px;
        padding: 0px 6px;
        font-size: 12px;
    }

    .regionLotMixing .col-md-12 {
        width: 100%;
        padding-right: 5px;
        padding-left: 5px;
        margin-bottom: 5px;
    }

     .regionLotMixing .col-md-1 {
        width: 8.6%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionLotMixing .col-md-2 {
        width: 16.4%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionLotMixing .col-md-3 {
        width: 20%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionLotMixing .col-md-4 {
        width: 28%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionLotMixing .col-md-5 {
        width: 37%;
        padding-right: 5px;
        padding-left: 0px;
    }

    .regionLotMixing .col-md-6 {
        width: 41.2%;
        padding-right: 5px;
        padding-left: 5px;
    }
    
    .regionLotMixing .col-md-9 {
        width: 66.4%;
        padding-right: 5px;
        padding-left: 5px;
    }
    .regionLotMixing .col-md-10 {
        width: 83%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionLotMixing .col-md-8 {
        width: 69%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionLotMixing .btn-sm {
        padding: 3px 10px;
    }

    .regionLotMixing .input-group-addon {
        padding: 4px 8px;
    }
</style>

<script type="text/javascript">

    _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    var oLotMixing =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    var oRequisitionTypes =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.RequisitionTypes));
    var oIssueStores =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.IssueStores));
   
    $('.date-container').datepicker({
        format: "dd M yyyy",
        calendarWeeks: true,
        autoclose: true,
        todayHighlight: true
    });

    var LotMixingModule = angular.module('LotMixingAPP', ['ngAnimate', 'ui.bootstrap', 'ui.grid', 'ui.grid.selection', 'ui.grid.edit','ui.grid.resizeColumns','ui.grid.cellNav','ms.service']);
    LotMixingModule.controller('LotMixingCtrl', function ($scope, $http, $uibModal, $log, uiGridConstants, msModal,icsMethod, userSession,msGridControl) {
        debugger;
        var viewType = sessionStorage.getItem("Operation");


        //if (viewType == 'View') //Default
        $scope.disabled=$scope.hide=$scope.hide_Complete=$scope.hide_Issue=false;
        $scope.hide_Approve=$scope.hide_UndoApprove=$scope.hide_Save=false;

        $scope.viewType=viewType;
       
        if (viewType == 'Approve')
        {
            $scope.disabled= $scope.hide_Approve=$scope.hide=true;
            $scope.hide_Complete=$scope.hide_Issue=$scope.hide_UndoApprove=$scope.hide_Save=false;
        }
        if(viewType == 'UndoApprove')
        {
            $scope.disabled= true;
            $scope.hide=true;
            $scope.hide_Complete=false;
            $scope.hide_Issue=false;
            $scope.hide_UndoApprove=true;
            $scope.hide_Approve=false;
            $scope.hide_Save=false;
        }
        else  if (viewType == 'Complete')
        {
            $scope.disabled= true;
            $scope.hide=true;
            $scope.hide_Complete=true;
            $scope.hide_Issue=false;
            $scope.hide_Approve=false;
            $scope.hide_UndoApprove=false;
            $scope.hide_Save=false;
        }else  if (viewType == 'Issue')
        {
            $scope.disabled= true;
            $scope.hide=true;
            $scope.hide_Issue=true;
            $scope.hide_Complete=false;
            $scope.hide_UndoApprove=false;
            $scope.hide_Approve=false;
            $scope.hide_Save=false;
        }
        else if (viewType == 'Edit' || viewType == 'New')
        {
            $scope.disabled= $scope.hide=$scope.hide_Request=$scope.hide_UndoApprove=$scope.hide_Approve=false;
            $scope.hide_Save=true;
        }
        else if (viewType == 'View')
        {
            $scope.disabled= true;
            $scope.hide=true;
            $scope.hide_Request=false;
            $scope.hide_UndoApprove=false;
            $scope.hide_Approve=false;
            $scope.hide_Save=false;
        }

        $scope.BuyerID=0;
        $scope.Product={};
        $scope.Lots={};
        $scope.IssueStores=oIssueStores;
        $scope.RequisitionTypes=oRequisitionTypes;
        $scope.LotMixing=oLotMixing;
        $scope.LotMixing.LotMixingDetails_In=oLotMixing.LotMixingDetails_In;
        $scope.LotMixing.LotMixingDetails_Out=oLotMixing.LotMixingDetails_Out;
        $scope.LotMixing=oLotMixing;

        $scope.txtBuyer=oLotMixing.ContractorName;
        $scope.txtOrderNo=oLotMixing.DyeingOrderNo;

        $scope.BusinessUnitID=sessionStorage.getItem('BUID');
        //$scope.LotMixingDetail.BUID=sessionStorage.getItem('BUID');
       
        $scope.Validation = function()
        {
            debugger;
            if($scope.LotMixing.LotMixingDetails_In.length<=0)
            {
                alert("Please Get Details And Try Again.");
                return false;
            }

            if (viewType == 'Complete')
            {
               
                if($scope.LotMixing.LotMixingDetails_Out.length<=0)
                {
                    alert("Please Pick A Product And Try Again.");
                    return false;
                }
                // var oLotMixingDetails =  $scope.gridOptionsLotIn.data;
                //for(var i=0; i<oLotMixingDetails.length; i++)
                //{
                //    if(oLotMixingDetails[i].LotID==0)
                //    {
                //        alert("Please Pick Lot For "+oLotMixingDetails[i].ProductName+" And Try Again.");
                //        return false;
                //    }
                //}
            }
            return true;
        }
        $scope.Save = function () {
            if(!$scope.Validation()) return;
            var oTW=[];
            oTW= $scope.LotMixing;
            oTW.ReceiveDate = new Date($scope.LotMixing.ReceiveDateSt);
            oTW.LotMixingDetails=[];
            for(var i=0;i<$scope.gridOptionsLotIn.data.length; i++)
            {
                oTW.LotMixingDetails.push($scope.gridOptionsLotIn.data[i]);
            }
            for(var i=0;i<$scope.LotMixing.LotMixingDetails_Out.length; i++)
            {
                oTW.LotMixingDetails.push($scope.LotMixing.LotMixingDetails_Out[i]);
            }
            //console.log(oTW);return;
            $http.post(_sBaseAddress+'/LotMixing/Save',JSON.stringify(oTW)).then(
                function (response) {
                    
                    debugger;
                    var result=jQuery.parseJSON(response.data);
                    console.log(result);
                    if(result.ErrorMessage=="" || result.ErrorMessage==null)
                    {
                        alert("Data Saved Successfully!!");
                        //$scope.LotMixing=result;
                        userSession.setData('LotMixings',result);
                        userSession.previousPage();
                    }
                    else
                    {
                        alert(result.ErrorMessage);
                    }
                },
                function (response) {debugger; alert(response.Message);}
        );
        };

        $scope.Approve = function () {

            if(!$scope.Validation())
                return;
            var oLotMixing= $scope.LotMixing;
            oLotMixing.IssueDate = new Date($scope.LotMixing.IssueDateST);
            oLotMixing.ReqDate = new Date($scope.LotMixing.ReqDateST);
            oLotMixing.ImportLCDate = new Date($scope.LotMixing.ImportLCDateST);

            debugger;
            $http.post(_sBaseAddress+'/LotMixing/Approve',JSON.stringify(oLotMixing)).then(
                function (response) {
                    var result=jQuery.parseJSON(response.data);
                    if(result.LotMixingID>0)
                    {
                        debugger;
                        $scope.LotMixing=result;
                        userSession.setData('LotMixings',$scope.LotMixing);
                        userSession.previousPage();
                    }
                    else
                    {
                        alert(result.ErrorMessage);
                    }
                },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
        );
        };
        $scope.UndoApprove = function () {

            if(!$scope.Validation())
                return;
            var oLotMixing= $scope.LotMixing;
            oLotMixing.IssueDate = new Date($scope.LotMixing.IssueDateST);
            oLotMixing.ReqDate = new Date($scope.LotMixing.ReqDateST);
            oLotMixing.ImportLCDate = new Date($scope.LotMixing.ImportLCDateST);

            debugger;
            $http.post(_sBaseAddress+'/LotMixing/UndoApprove',JSON.stringify(oLotMixing)).then(
                function (response) {
                    var result=jQuery.parseJSON(response.data);
                    if(result.LotMixingID>0)
                    {
                        debugger;
                        $scope.LotMixing=result;
                        userSession.setData('LotMixings',$scope.LotMixing);
                        userSession.previousPage();
                    }
                    else
                    {
                        alert(result.ErrorMessage);
                    }
                },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
        );
        };
        $scope.Receive= function ()
        {

            if(!$scope.Validation())
                return;
            var oLotMixing= $scope.LotMixing;
            oLotMixing.IssueDate = new Date($scope.LotMixing.IssueDateST);
            oLotMixing.ReqDate = new Date($scope.LotMixing.ReqDateST);
            oLotMixing.ImportLCDate = new Date($scope.LotMixing.ImportLCDateST);

            debugger;
            $http.post(_sBaseAddress+'/LotMixing/RecivedLotMixing',JSON.stringify(oLotMixing)).then(
                function (response) {
                    var result=jQuery.parseJSON(response.data);
                    if(result.LotMixingID>0)
                    {
                        debugger;
                        $scope.LotMixing=result;
                        userSession.setData('LotMixings',$scope.LotMixing);
                        //sessionStorage.setItem('LotMixing',$scope.LotMixing);
                        userSession.previousPage();
                        // msModal.Message({headerTitle : '', bodyText:'Save Successfully.', sucessText : 'Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                    }
                    else
                    {
                        alert(result.ErrorMessage);
                    }
                },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
        );
        };
        $scope.Complete = function () {

            if(!$scope.Validation())
                return;
            var oLotMixing= $scope.LotMixing;
            $http.post(_sBaseAddress+'/LotMixing/Complete',JSON.stringify(oLotMixing)).then(
                function (response) {
                    var result=jQuery.parseJSON(response.data);
                    if(result.LotMixingID>0)
                    {
                        debugger; console.log(result)
                        if(result.ErrorMessage==null || result.ErrorMessage=="")
                        {
                            $scope.LotMixing=result;
                            userSession.setData('LotMixings',$scope.LotMixing);
                            userSession.previousPage();
                        }
                        else
                            alert(result.ErrorMessage);
                      }
                    else
                    {
                        alert(result.ErrorMessage);
                    }
                },
                function (response) { alert(response.statusText);}
        );
        };

        $scope.PickProduct= function (nInoutType,sProductName)
        {
            if($scope.LotMixing.WorkingUnitID<=0)
            {
                alert("Select Issue Store!!");
                return;
            }

            var oPorduct= {
                ProductName:(sProductName==undefined?"":sProductName),
                BUID:sessionStorage.getItem('BUID'),
                WorkingUnitID:$scope.LotMixing.WorkingUnitID
            };

            debugger;
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/LotMixing/GetProducts',$.param(oPorduct), config).then(
                        function (response)
                        {
                            var oDetailColumns = [];
                            var   oColumn = { field: 'ProductCode', name:'Code', width:'30%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'ProductName', name:'Porduct', width:'30%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'ProductCategoryName', name:'Category', width:'30%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            var results=jQuery.parseJSON(response.data);
                            var modalObj={
                                size:'md',
                                modalcontroller:'',
                                appcontroller:'',
                                objs:results,
                                multiSelect:false,
                                pickertitle:'Porduct List',
                                searchingbyfieldName:'ProductName',
                                columns:oDetailColumns
                            }
                            var modalInstance=msModal.Instance(modalObj);
                            modalInstance.result.then(function (result)
                            {
                                if(result.ProductID>0)
                                {
                                   
                                    var oTD={
                                        LotMixingDetailID:0,
                                        LotMixingID:$scope.LotMixing.LotMixingID,
                                        DyeingOrderDetailID:0,
                                        Qty: 0,
                                        Qty_Percentage:0,
                                        UnitPrice: result.UnitPrice,
                                        Remarks: '',
                                        LotID: 0,
                                        MUnitID: 0,
                                        MUnit:result.MUnit,
                                        MUSymbol:result.MUnit,
                                        CurrencyID:0,
                                        LotNo:'',
                                        InOutTypeInt:nInoutType,
                                        ProductID:result.ProductID,
                                        ProductName:result.ProductName,
                                        ProductCode:result.ProductName,
                                        BagCount:0.0,
                                    };
                                    $scope.LotMixing.ProductID_TW=result.ProductID;

                                    if(nInoutType==102)
                                    {
                                        $scope.Product=oTD;
                                        $scope.txtProductOut=oTD.ProductName;
                                    }
                                    else
                                    {
                                        $scope.gridOptionsLotIn.data=[];

                                        var nTotalQty=GetTotal('Qty', $scope.gridOptionsLotOut.data);
                                        nTotalQty= parseFloat(nTotalQty) + (parseFloat(nTotalQty)*parseFloat(($scope.LotMixing.Percentage))/100);
                                        var nTotalAmount=GetTotal('Amount', $scope.gridOptionsLotOut.data);
                                        console.log(nTotalQty+','+nTotalAmount);
                                        if(!ISExists(oTD.ProductID,$scope.gridOptionsLotIn.data))
                                        {
                                            oTD.Qty_Percentage=nTotalQty;
                                            oTD.Qty=nTotalQty;
                                            oTD.UnitPrice=nTotalAmount/nTotalQty;
                                            oTD.Amount=oTD.Qty*oTD.UnitPrice;

                                            $scope.gridOptionsLotIn.data.push(oTD);
                                            $scope.LotMixing.LotMixingDetails_In=$scope.gridOptionsLotIn.data;
                                        }
                                    }
                                }
                            }, function () {
                                $log.info('Modal dismissed at: ' + new Date());
                            });
                        },
                            function (response) { alert(jQuery.parseJSON(response.data).Message);}
                    );
        };
        $scope.SearchKeyProduct = function (e,nInoutType){
            //debugger;
            
            debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {
                var sProductName="";
                if(nInoutType==102)
                    sProductName=($scope.txtProductOut == undefined ? "" : $.trim($scope.txtProductOut));
                else if (nInoutType==101)
                    sProductName=($scope.txtProductIn == undefined ? "" : $.trim($scope.txtProductIn));

                if(sProductName=="" || sProductName==null)
                {
                    alert("Type Product Name and Press Enter");
                    return;
                }

                $scope.PickProduct(nInoutType,sProductName);
            }else if (code == 8) //backspace=8
            {
                //debugger;
                $scope.ClearProduct();
            }
        };
        $scope.RemoveProduct=function(nInoutType)
        {
            if(nInoutType==102)
            {
                var data=$scope.gridApiOut.selection.getSelectedRows()[0];
                
                if (!confirm("Confirm to Delete?")) return ;
                $scope.gridOptionsLotOut.data.splice($scope.gridOptionsLotOut.data.indexOf(data),1);
                $scope.LotMixing.LotMixingDetails_Out=$scope.gridOptionsLotOut.data;
            }
            else
            {
                var data=$scope.gridApiIn.selection.getSelectedRows()[0];
                
                if (!confirm("Confirm to Delete?")) return ;
                $scope.gridOptionsLotIn.data.splice($scope.gridOptionsLotIn.data.indexOf(data),1);
                $scope.LotMixing.LotMixingDetails_In=$scope.gridOptionsLotIn.data;
            }
        }

        $scope.ClearProduct=function()
        {
            $scope.txtProductOut ="";
            $scope.Product={};
            $scope.ClearLot();
        }

        $scope.PickLot= function ()
        {
            if($scope.Product.ProductID==undefined || $scope.Product.ProductID==0)
            {
                alert("Please Pick A Product And Try Again"); return;
            }
            debugger;
            var oDyeingPorduct= {
                ProductID:$scope.Product.ProductID,
                BUID:$scope.LotMixing.BUID,
                LotNo:($scope.txtLotNo == undefined ? "" : $scope.txtLotNo),
                WorkingUnitID:$scope.LotMixing.WorkingUnitID
            };
            $scope.txtLotNo ="";
            debugger;
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/LotMixing/GetsLot',$.param(oDyeingPorduct), config).then(
                        function (response)
                        {
                            debugger;
                            var oDetailColumns = [];
                            var oColumn = { field: 'LotNo', name:'Lot No', width:'20%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn ={ field: 'Balance', name:'Qty', width:'20%',cellClass: 'text-left',enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn ={ field: 'ReportUnitSymbol', name:'Unit', width:'15%',cellClass: 'text-left',enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'LocationName', name:'Location', width:'20%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'OperationUnitName', name:'Operation Unit', width:'20%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);

                            var results=jQuery.parseJSON(response.data);
                            if(results.length<=0)
                            {
                                alert("No Data Found!!"); return;
                            }

                            var modalObj={
                                size:'lg',
                                modalcontroller:'',
                                appcontroller:'',
                                objs:results,
                                multiSelect:true,
                                pickertitle:'Porduct List',
                                searchingbyfieldName:'DestinationLotNo',
                                columns:oDetailColumns
                            }
                            var modalInstance=msModal.Instance(modalObj);
                            modalInstance.result.then(function (result)
                            {
                                if(result.length>0 && (result[0].ErrorMessage=="" ||result[0].ErrorMessage==null))
                                {
                                    $scope.Lots=result;

                                    if(result.length==1)
                                        $scope.txtLotNo=result[0].LotNo;
                                    else
                                        $scope.txtLotNo=result.length+" Lot(s) Selected"
                                }
                                else
                                {
                                    $scope.Lots=[];
                                    alert(result[0].ErrorMessage);
                                }
                            }, function () {
                                $log.info('Modal dismissed at: ' + new Date());
                            });
                        },
                            function (response) { alert(response.statusText);}
                    );
        };
        $scope.SearchKeyDownLot = function (e){
            //debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {
                var txtLotNo = $.trim($scope.txtLotNo);
                if(txtLotNo=="" || txtLotNo==null)
                {
                    alert("Type Lot No and Press Enter");
                    return;
                }
                $scope.PickLot();
            }else if (code == 8) //backspace=8
            {
                //debugger;
                $scope.txtPorductNo='';
            }
        };
        $scope.ClearLot=function()
        {
            $scope.txtLotNo ="";
            $scope.Lots=[];
        }

        function ISExists(nProductID, nList)
        {
            for(var i=0;i<nList.length;i++){
                if(nList[i].ProductID==nProductID){
                    return true;
                }
            }
            return false;
        }
        function GetTotal(sField, nList)
        {
            var result=0;
            for(var i=0;i<nList.length;i++){
                result+= parseFloat(nList[i][sField]);
            }
            return result;
        }

        $scope.AddProduct=function()
        {
            if($scope.Lots.length<=0)
            {
                alert("Please Pick Lot(s) And Try Again !");return;
            }

            for(var i=0; i<$scope.Lots.length;i++)
            {
                var oLotMixingDetail= Object.assign({}, $scope.Product);
                oLotMixingDetail.LotID=$scope.Lots[i].LotID;
                oLotMixingDetail.LotNo=$scope.Lots[i].LotNo;
                oLotMixingDetail.UnitPrice=$scope.Lots[i].UnitPrice;
                oLotMixingDetail.Qty=$scope.Lots[i].Balance;
                oLotMixingDetail.LotBalance=$scope.Lots[i].Balance;
                oLotMixingDetail.Amount=$scope.Lots[i].UnitPrice*$scope.Lots[i].Balance;

                $scope.gridOptionsLotOut.data.push(oLotMixingDetail);
                $scope.LotMixing.LotMixingDetails_Out=$scope.gridOptionsLotOut.data;
                //$scope.gridOptionsLotIn.data=[];
            }
            $scope.ClearLot();
            $scope.ClearProduct();
        }

        $scope.CalculatePercentage=function()
        {
            var oData=$scope.gridOptionsLotIn.data;
          
            if(isNaN($scope.LotMixing.Percentage))
                $scope.LotMixing.Percentage=0;

            for(var i=0;i<oData.length;i++)
            {
                var nTotalQty=GetTotal('Qty', $scope.gridOptionsLotOut.data);
                nTotalQty= parseFloat(nTotalQty) + (parseFloat(nTotalQty)*parseFloat(($scope.LotMixing.Percentage))/100);
                var nTotalAmount=GetTotal('Amount', $scope.gridOptionsLotOut.data);
               
                oData[i].Qty_Percentage=nTotalQty;
                oData[i].Qty=nTotalQty;
                oData[i].UnitPrice=nTotalAmount/nTotalQty;
                oData[i].Amount=oData[i].Qty*oData[i].UnitPrice;
            }
            $scope.gridOptionsLotIn.data=oData;
        }

        $scope.MakeLotMixingOut= function()
        {
            debugger;
            var oDetailColumns = [];
            var oColumn = { field: 'ProductCode', name:'Code', width:'10%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn = { field: 'ProductName', name:'Commodity', width:'25%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn = { field: 'LotNo', name:'Lot No', width:'15%',cellClass: 'text-right', enableCellEdit:false};oDetailColumns.push(oColumn);
            //cellTemplate:'<div>' +'<span> {{row.entity.LotNo}} </span><button style="align:right" ng-click="grid.appScope.OpenLotModal(row.entity)">Pick</button>' +'</div>'};oDetailColumns.push(oColumn);
            oColumn ={ field: 'MUSymbol', name:'Unit', width:'7%',cellClass: 'text-left',enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn ={ field: 'LotBalance', name:'Balance', width:'12%',cellClass: 'text-right', cellFilter:'number:2', enableCellEdit:false,aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'  };oDetailColumns.push(oColumn);
            oColumn ={ field: 'Qty', name:'Qty', width:'12%',cellClass: 'text-right', cellFilter:'number:2', enableCellEdit:true,aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'  };oDetailColumns.push(oColumn);
            //oColumn ={ field: 'UnitPrice', name:'Unit Price', width:'8%',cellClass: 'text-right', cellFilter:'number:2', enableCellEdit:true };oDetailColumns.push(oColumn);
            //oColumn ={ field: 'Amount', name:'Amount', width:'8%',cellClass: 'text-right', cellFilter:'number:2', enableCellEdit:true,aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'  };oDetailColumns.push(oColumn);
            oColumn ={ field: 'Remarks', name:'Remarks', width:'16%',cellClass: 'text-left',enableCellEdit:true };oDetailColumns.push(oColumn);

            $scope.gridOptionsLotOut = {
                enableRowSelection: true,
                enableRowHeaderSelection: false,
                multiSelect: false,
                enableColumnResizing: true,
                showColumnFooter: true,
                cellEditableCondition: function($scope)
                {
                    debugger;
                    if (viewType == 'Edit' || viewType == 'New')
                    {
                        if($scope.row.entity.LotBalance<0 ||$scope.row.entity.LotBalance==undefined)
                            return false;
                        else
                            return true;
                    }else
                        return false;
                },
                columnDefs:oDetailColumns,
                data:  $scope.LotMixing.LotMixingDetails_Out,
                onRegisterApi: function (gridApi)
                {
                    $scope.gridApiOut = gridApi;

                    gridApi.edit.on.afterCellEdit($scope,
                     function (rowEntity, colDef, newValue, oldValue)
                     {
                         debugger;
                         if(rowEntity.Qty > rowEntity.LotBalance)
                         {
                             rowEntity.Qty=rowEntity.OrderQty;
                             alert("Lot Qty Can Not Be Greater Than Balance Qty!!");
                         }
                         else if(rowEntity.Qty<=0 )
                         {
                             rowEntity.Qty=rowEntity.OrderQty;
                             alert("Lot Qty Can Not Be Equal Or Less Then Zero!!");
                         }
                         else rowEntity.Amount=rowEntity.Qty*rowEntity.UnitPrice;

                         $scope.CalculatePercentage();
                         return rowEntity;
                     });
                }
            };
        }
        $scope.MakeLotMixingOut();
        $scope.MakeLotMixingIn= function()
        {
            debugger;

            var oDetailColumns = [];
            var oColumn = { field: 'ProductCode', name:'Code', width:'10%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn = { field: 'ProductName', name:'Commodity', width:'25%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn = { field: 'LotNo', name:'Lot No', width:'15%',cellClass: 'text-right', enableCellEdit:true};oDetailColumns.push(oColumn);
                //cellTemplate:'<div>' +'<span> {{row.entity.LotNo}} </span><button style="align:right" ng-click="grid.appScope.OpenLotModal(row.entity)">Pick</button>' +'</div>'};oDetailColumns.push(oColumn);
            oColumn ={ field: 'MUSymbol', name:'Unit', width:'7%',cellClass: 'text-left',enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn ={ field: 'Qty_Percentage', name:'Qty(%)', width:'12%',cellClass: 'text-right', cellFilter:'number:2', enableCellEdit:false };oDetailColumns.push(oColumn); 
            oColumn ={ field: 'Qty', name:'Qty', width:'12%',cellClass: 'text-right', cellFilter:'number:2', enableCellEdit:true };oDetailColumns.push(oColumn); 
            //oColumn ={ field: 'UnitPrice', name:'Unit Price', width:'9%',cellClass: 'text-right', cellFilter:'number:2', enableCellEdit:true };oDetailColumns.push(oColumn);
            //oColumn ={ field: 'Amount', name:'Amount', width:'8%',cellClass: 'text-right', cellFilter:'number:2', enableCellEdit:true };oDetailColumns.push(oColumn);
            
            oColumn ={ field: 'Remarks', name:'Remarks', width:'18%',cellClass: 'text-left',enableCellEdit:true };oDetailColumns.push(oColumn);

            $scope.gridOptionsLotIn = {
                enableRowSelection: true,
                enableRowHeaderSelection: false,
                multiSelect: false,
                enableColumnResizing: true,
                showColumnFooter: false,
                cellEditableCondition: function($scope)
                {
                    if (viewType == 'Edit' || viewType == 'New')
                    {
                        if($scope.row.entity.Qty<0 ||$scope.row.entity.Qty==undefined)
                            return false;
                        else
                        {
                            if($scope.row.entity.OrderQty==undefined)
                                $scope.row.entity.OrderQty=$scope.row.entity.Qty;
                            return true;
                        }
                    }else
                        return false;
                },
                columnDefs:oDetailColumns,
                data:  $scope.LotMixing.LotMixingDetails_In,
                cellEditableCondition: function($scope)
                {
                    debugger;
                    if (viewType == 'Edit' || viewType == 'New')
                    {
                        return true;
                    }else
                        return false;
                },
                onRegisterApi: function (gridApi)
                {
                    $scope.gridApiIn = gridApi;

                    gridApi.edit.on.afterCellEdit($scope,
                     function (rowEntity, colDef, newValue, oldValue)
                     {
                         debugger;
                         if(rowEntity.Qty > rowEntity.OrderQty)
                         {
                             rowEntity.Qty=rowEntity.Qty_Percentage;
                             alert("Lot Qty Can Not Be Greater Than Qty(%)!!");
                         }
                         else if(rowEntity.Qty<=0 )
                         {
                             rowEntity.Qty=rowEntity.Qty_Percentage;
                             alert("Lot Qty Can Not Be Equal Or Less Zero!!");
                         }else       rowEntity.Amount=rowEntity.Qty*rowEntity.UnitPrice;
                         return rowEntity;
                     });
                }
            };

            //var oLotMixingDetails=$scope.LotMixing.LotMixingDetails;
            // $scope.gridOptionsLotIn.data=[];
            // $scope.gridOptionsLotIn.data= $scope.LotMixing.LotMixingDetails;
        }
        $scope.MakeLotMixingIn();

        $scope.Close = function () {
            userSession.previousPage();
        };
    });

</script>


