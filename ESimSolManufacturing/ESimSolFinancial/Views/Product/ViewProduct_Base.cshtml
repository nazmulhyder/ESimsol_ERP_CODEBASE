@{
    ViewBag.Title = "Add Product";
}
@model ESimSol.BusinessObjects.Product
<html>

<body>
    <div id="divProduct" class="easyui-panel menuMainCollectionTable" title="Add Product" style="font-family:Tahoma; height:100%; width:100%">
        <div style="width:100%; height:88%; text-align:center">
            <fieldset style="height:97%">
                <legend style="font-weight:bold;text-align:left;"> Item Informations : </legend>
                <table border="0" cellspacing="2" cellpadding="2" style="font-size:11px;width:100%;">

                    <tr>
                        <td style="width:10%;  text-align:right">
                            Code
                        </td>
                        <td style="width:25%;  text-align:left">
                            @Html.TextBoxFor(model => model.ProductCode, new { style = "width: 99%;", id = "txtProductCode", disabled = "disabled" })
                        </td>
                        <td style="width:10%; text-align:right">
                            Item
                        </td>
                        <td style="width:45%; text-align:left">
                            @Html.TextBoxFor(model => model.ProductName, new { style = "width: 99%;", id = "txtProductName" })
                        </td>
                        <td style="width:10%;  text-align:right"></td>
                    </tr>
                    <tr>
                        <td style="width:10%;  text-align:right">
                            Brand
                        </td>
                        <td style="width:25%;  text-align:left">
                            @Html.TextBoxFor(model => model.Note, new { style = "width: 99%;", id = "txtNote" })
                        </td>
                        <td style="width:10%;  text-align:right">
                            Part No
                        </td>
                        <td style="width:45%; text-align:left">
                            @Html.TextBoxFor(model => model.ShortName, new { style = "width: 99%;", id = "txtShortName" })
                        </td>
                        <td style="width:10%;  text-align:right"></td>
                    </tr>

                    <tr>
                        <td style="width:10%;  text-align:right">
                            HS Code
                        </td>
                        <td style="width:25%;   text-align:left">
                            @Html.TextBoxFor(model => model.AddOne, new { style = "width: 99%;", id = "txtAddOne" })
                        </td>
                        <td style="width:10%;  text-align:right">
                            Unit Type
                        </td>
                        <td style="width:45%; text-align:left">
                            <table cellpadding="0" cellspacing="2" style="width:100%;">
                                <tr>
                                    <td style="width:25%;  text-align:left">
                                        @Html.DropDownListFor(model => model.UnitType, new SelectList(Enum.GetValues(typeof(ICS.Core.Utility.EnumUniteType))), new { id = "cboMeasurmentUniteType", style = "width: 100%;", @class = "_ChangeIssueA" })
                                    </td>
                                    <td style="width:20%;text-align:right">
                                        <label>Unit</label>
                                    </td>
                                    <td style="width:55%;  text-align:left;">
                                        <select id="cboMeasurmentUnit" style="width:102%;"></select>
                                    </td>
                                </tr>
                            </table>

                        </td>
                        <td style="width:10%;  text-align:right"></td>
                    </tr>
                    <tr>
                        <td style="width:10%;  text-align:right">
                            Add ++
                        </td>
                        <td style="width:25%;  text-align:left">
                            @Html.TextBoxFor(model => model.AddTwo, new { style = "width: 99%;", id = "txtAddTwo" })
                        </td>
                        <td style="width:10%;  text-align:right">
                            Product Type
                        </td>
                        <td style="width:45%;   text-align:left">
                            <table cellpadding="0" cellspacing="2" style="width:100%;">
                                <tr>
                                    <td style="width:25%;  text-align:left">
                                        <select id="cboProductType" style="width:100%" class="_ChangeIssueProductType"></select>
                                    </td>
                                    <td style="width:20%;text-align:right">
                                        <label>Account Head</label>
                                    </td>
                                    <td style="width:55%;  text-align:left;">
                                        @Html.TextBoxFor(model => model.AccountHeadCodeName, new { style = "width: 77%;", id = "txtAccountHeadName", placeholder = "Type Head Name & Press Enter" })<a id="btnPickAccountHead" href="javascript:void(0)" class="easyui-linkbutton" style="width:20%;" iconcls="icon-ok" plain="false">Pick</a>
                                    </td>
                                </tr>
                            </table>

                        </td>
                        <td style="width:10%;  text-align:right"></td>
                    </tr>
                    <tr>
                        <td colspan="5" style="width:100%;">
                            <div style="width:100%;">
                                <table border="0" cellspacing="2" cellpadding="2" style=" font-weight: bold; width:100%">
                                    <tr>
                                        <td style="width:10%;  text-align:right;vertical-align:middle">
                                            Apply Plant No @Html.CheckBoxFor(model => model.IsSerialNoApply, new { id = "chkIsSerialNoApply" })
                                        </td>
                                        <td style="width:10%;   text-align:center; vertical-align:middle">
                                            Apply Property @Html.CheckBoxFor(model => model.ApplyProperty, new { id = "chkApplyProperty" })                                            
                                        </td>
                                        <td style=" text-align:left; width:4%;">
                                            <label id="lblCaption"> Full Name : </label>
                                        </td>
                                        <td style="background-color:darkturquoise; text-align:left; width:23%; color:White">
                                            <label id="lblFullName" style="font-size:13px; font-weight:bold">  </label>
                                        </td>
                                        <td style=" text-align:left; width:5%;"></td>
                                    </tr>
                                </table>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="5" style="width:100%;">
                            <div id="divPropertyValues" style="width:100%;">
                                <table id="tblPorpertyValues" class="easyui-datagrid" title="Property List" style="width:100%;height:250px;" data-options="singleSelect: true,fitColumns:true,rownumbers:true,pagination:false,autoRowHeight:false,toolbar: '#toolbar' ">
                                    <thead>
                                        <tr>
                                            <th field="PropertyName" width="40%">Property Name</th>
                                            <th field="ValueOfProperty" width="60%">Value</th>
                                        </tr>
                                    </thead>
                                </table>
                                <div id="toolbar">
                                    <a id="btnAddProperty" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-add" plain="true">New Property</a>
                                    <input id="txtPropertyName" type="text" placeholder="Property Name" style="width:120px;" />
                                    <a id="btnPickProperty" href="javascript:void(0)" class="easyui-linkbutton easyui-tooltip" title="Pick Properties" iconcls="icon-pick" plain="true"></a>
                                    <input id="txtValueOfProperty" type="text" placeholder="Property Value" style="width:120px;" />
                                    <a id="btnPickValue" href="javascript:void(0)" class="easyui-linkbutton easyui-tooltip" title="Pick Values" iconcls="icon-pick" plain="true"></a>
                                    <a id="btnAddValue" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-add" plain="true">New Value</a>
                                    <a id="btnRemove" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-remove" plain="true">Remove</a>
                                </div>
                            </div>
                        </td>
                    </tr>


                </table>
            </fieldset>

        </div>
        <div style="width:100%; height:10%">
            <fieldset>
                <legend style="font-weight: bold">Action : </legend>
                <table border="0" cellspacing="2" cellpadding="2" style=" font-weight: bold; width:100%">
                    <tr>
                        <td style="width:80%; text-align:right"></td>
                        <td style="width: 10%">
                            <a id="btnSave" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="true">Save</a>
                        </td>
                        <td style="width: 10%">
                            <a id="btnClose" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="true">Close</a>
                        </td>
                    </tr>
                </table>
            </fieldset>
        </div>
    </div>
</body>
</html>


<script type="text/javascript">

    var _oMeasurementUnits = [];
    var _sBaseAddress ="";
    var _oUnitTypes = [];
    var _oProduct =null;
    var _oProductTypes = [];
    $(document).ready(function () {
        _sBaseAddress =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
        _oProduct =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
        _oMeasurementUnits = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.MeasurementUnits));
        _oProductTypes=@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.ProductTypeObjs));
     if(parseInt(_oProduct.ProductID)>0)
     {
         LoadUnits();
     }
     _sProductHeader=sessionStorage.getItem("ProductsHeader");
     $('#divProduct').panel({ title:_sProductHeader+" in Group : "+_oProduct.GroupName});
     $("#cboProductType").icsLoadCombo({List: _oProductTypes,OptionValue: "id",DisplayText: "Value"});
     $("#cboProductType").val(_oProduct.ProductType);
     if(parseInt($("#cboProductType").val())==1)
     {
         _oProduct.AccountHeadID = 0;
         document.getElementById("txtAccountHeadName").disabled = true;
         $('#txtAccountHeadName').val('');
         $("#btnPickAccountHead").hide();
     }else  if(parseInt($("#cboProductType").val())>1)
     {
         document.getElementById("txtAccountHeadName").disabled = false;
         var txtAccountHeadName = document.getElementById("txtAccountHeadName");
         txtAccountHeadName.style.color = "blue";
         txtAccountHeadName.style.fontWeight = "bold";
         $("#btnPickAccountHead").show();
     }
     if(_sProductHeader=="View Item")
     {
         $('#btnPickAccountHead').hide();
         $('#btnSave').hide();
     }
     $('#chkApplyProperty').change();
     FullName_keyup();

 });
    $('#chkApplyProperty').change(function (){
        if(this.checked){
            $('#divPropertyValues').show();
            DynamicRefreshList(_oProduct.PPIs, 'tblPorpertyValues');
        }
        else{
            $('#divPropertyValues').hide();
            DynamicRefreshList([], 'tblPorpertyValues');
        }
    });

    //pick Account Head
    $("#txtAccountHeadName").keydown(function (e) {
        debugger;
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) // Enter Press
        {
            var nComponentID=0;
            if(parseInt($('#cboProductType').val()) && parseInt($('#cboProductType').val())=== 2)
            {
                nComponentID=2;
            }
            else if(parseInt($('#cboProductType').val()) && parseInt($('#cboProductType').val())=== 3)
            {
                nComponentID=6;
            }
            var oChartsOfAccount= {ComponentID:nComponentID,AccountTypeInInt:5, AccountHeadName: $.trim($('#txtAccountHeadName').val()) };
            var obj = {
                BaseAddress: _sBaseAddress,
                Object: oChartsOfAccount,
                ControllerName: "ChartsOfAccount",
                ActionName: "GetsAccountsHeadByComponentAndAccountType",
                IsWinClose: false
            };
            $.icsDataGets(obj, function (response) {
                debugger;
                if (response.status && response.objs.length > 0) {
                    if (response.objs[0].AccountHeadID> 0) {
                        debugger;
                        var tblColums = []; var oColumn = { field: "AccountHeadCodeName", title: "Account Head", width: 300, align: "left" }; tblColums.push(oColumn);
                        var oPickerParam = {
                            winid: 'winAccountHeads',
                            winclass: 'clsAccountHead',
                            winwidth: 450,
                            winheight: 460,
                            tableid: 'tblAccountHeads',
                            tablecolumns: tblColums,
                            datalist: response.objs,
                            multiplereturn: false,
                            searchingbyfieldName: 'AccountHeadName',
                            windowTittle: 'AccountHead List'
                        };
                        $.icsPicker(oPickerParam);
                        IntializePickerbutton(oPickerParam);
                    }
                    else { alert(response.objs[0].ErrorMessage); }
                }else{
                    alert("Data Not Fund");
                    return;
                }
            });
        }
        if (code == 8|| code == 46) //backspace=8,delete=46
        {
            $("#txtAccountHeadName").val('');
            var txtAccountHeadName = document.getElementById("txtAccountHeadName");
            txtAccountHeadName.style.color = "black";
            txtAccountHeadName.style.fontWeight = "normal";
            //debugger;
            _oProduct.AccountHeadID = 0;
        }
    });
    $("#btnPickAccountHead").click(function () {

        var oChartsOfAccount= {ComponentID:2,AccountTypeInInt:5 };
        var obj = {
            BaseAddress: _sBaseAddress,
            Object: oChartsOfAccount,
            ControllerName: "ChartsOfAccount",
            ActionName: "GetsAccountsHeadByComponentAndAccountType",
            IsWinClose: false
        };
        $.icsDataGets(obj, function (response) {
            debugger;
            if (response.status && response.objs.length > 0) {
                if (response.objs[0].AccountHeadID> 0) {
                    debugger;
                    var tblColums = []; var oColumn = { field: "AccountHeadCodeName", title: "Account Head", width: 300, align: "left" }; tblColums.push(oColumn);
                    var oPickerParam = {
                        winid: 'winAccountHeads',
                        winclass: 'clsAccountHead',
                        winwidth: 450,
                        winheight: 460,
                        tableid: 'tblAccountHeads',
                        tablecolumns: tblColums,
                        datalist: response.objs,
                        multiplereturn: false,
                        searchingbyfieldName: 'AccountHeadName',
                        windowTittle: 'AccountHead List'
                    };
                    $.icsPicker(oPickerParam);
                    IntializePickerbutton(oPickerParam);
                }
                else { alert(response.objs[0].ErrorMessage); }
            }else{
                alert("Data Not Fund");
                return;
            }
        });

    });



    ///start PPI
    ///property
    $("#txtPropertyName").keydown(function (e) {
        debugger;
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) // Enter Press
        {


            var oProperty= { PropertyName: $.trim($('#txtPropertyName').val()) };
            var obj = {
                BaseAddress: _sBaseAddress,
                Object: oProperty,
                ControllerName: "Property",
                ActionName: "GetsByName",
                IsWinClose: false
            };
            $.icsDataGets(obj, function (response) {
                debugger;
                if (response.status && response.objs.length > 0) {
                    if (response.objs[0].PropertyID> 0) {
                        debugger;
                        var tblColums = []; var oColumn = { field: "PropertyName", title: "Property", width: 200, align: "left" }; tblColums.push(oColumn);
                        var oPickerParam = {
                            winid: 'winPropertys',
                            winclass: 'clsProperty',
                            winwidth: 450,
                            winheight: 460,
                            tableid: 'tblPropertys',
                            tablecolumns: tblColums,
                            datalist: response.objs,
                            multiplereturn: true,
                            searchingbyfieldName: 'PropertyName',
                            windowTittle: 'Property List'
                        };
                        $.icsPicker(oPickerParam);
                        IntializePickerbutton(oPickerParam);
                    }
                    else { alert(response.objs[0].ErrorMessage); }
                }else{
                    alert("Data Not Fund");
                    return;
                }
            });
        }
        if (code == 8|| code == 46) //backspace=8,delete=46
        {
            $("#txtPropertyName").val('');
            $("#txtPropertyName").removeClass('fontColorOfPickItem');
            //debugger;
            _oBOQ.PropertyValueID = 0;
        }
    });
    $("#btnPickProperty").click(function () {

        var oProperty= { PropertyName: '' };
        var obj = {
            BaseAddress: _sBaseAddress,
            Object: oProperty,
            ControllerName: "Property",
            ActionName: "GetsByName",
            IsWinClose: false
        };
        $.icsDataGets(obj, function (response) {
            debugger;
            if (response.status && response.objs.length > 0) {
                if (response.objs[0].PropertyID> 0) {
                    debugger;
                    var tblColums = []; var oColumn = { field: "PropertyName", title: "Property", width: 200, align: "left" }; tblColums.push(oColumn);
                    var oPickerParam = {
                        winid: 'winPropertys',
                        winclass: 'clsProperty',
                        winwidth: 450,
                        winheight: 460,
                        tableid: 'tblPropertys',
                        tablecolumns: tblColums,
                        datalist: response.objs,
                        multiplereturn: true,
                        searchingbyfieldName: 'PropertyName',
                        windowTittle: 'Property List'
                    };
                    $.icsPicker(oPickerParam);
                    IntializePickerbutton(oPickerParam);
                }
                else { alert(response.objs[0].ErrorMessage); }
            }else{
                alert("Data Not Fund");
                return;
            }
        });

    });


    ///value
    $("#txtValueOfProperty").keydown(function (e) {
        debugger;
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) // Enter Press
        {
            var oPropertyValue = $('#tblPorpertyValues').datagrid('getSelected');
            if(oPropertyValue==null || oPropertyValue.PropertyID<=0)
            {
                alert("Please select a item from list!");
                return false;
            }


            var oPropertyValue = { ValueOfProperty: $.trim($('#txtValueOfProperty').val()),PropertyID:oPropertyValue.PropertyID };
            var obj = {
                BaseAddress: _sBaseAddress,
                Object: oPropertyValue,
                ControllerName: "PropertyValue",
                ActionName: "GetsByName",
                IsWinClose: false
            };
            $.icsDataGets(obj, function (response) {
                debugger;
                if (response.status && response.objs.length > 0) {
                    if (response.objs[0].PropertyValueID> 0) {
                        debugger;
                        var tblColums = []; var oColumn = { field: "PropertyName", title: "Property", width: 200, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "ValueOfProperty", title: "Value", width: 80, align: "left" }; tblColums.push(oColumn);
                        var oPickerParam = {
                            winid: 'winPropertyValues',
                            winclass: 'clsPropertyValue',
                            winwidth: 450,
                            winheight: 460,
                            tableid: 'tblPropertyValues',
                            tablecolumns: tblColums,
                            datalist: response.objs,
                            multiplereturn: false,
                            searchingbyfieldName: 'Name',
                            windowTittle: 'PropertyValue List'
                        };
                        $.icsPicker(oPickerParam);
                        IntializePickerbutton(oPickerParam);
                    }
                    else { alert(response.objs[0].ErrorMessage); }
                }else{
                    alert("Data Not Fund");
                    return;
                }
            });
        }
        if (code == 8|| code == 46) //backspace=8,delete=46
        {
            $("#txtValueOfProperty").val('');
            $("#txtValueOfProperty").removeClass('fontColorOfPickItem');
            //debugger;
            _oBOQ.PropertyValueID = 0;
        }
    });
    $("#btnPickValue").click(function () {
        var oPropertyValue = $('#tblPorpertyValues').datagrid('getSelected');
        if(oPropertyValue==null || oPropertyValue.PropertyID<=0)
        {
            alert("Please select a item from list!");
            return false;
        }

        var oPropertyValue = {ValueOfProperty: "",PropertyID:oPropertyValue.PropertyID };
        var obj = {
            BaseAddress: _sBaseAddress,
            Object: oPropertyValue,
            ControllerName: "PropertyValue",
            ActionName: "GetsByName",
            IsWinClose: false
        };
        $.icsDataGets(obj, function (response) {
            debugger;
            if (response.status && response.objs.length > 0) {
                if (response.objs[0].PropertyValueID > 0) {
                    var tblColums = []; var oColumn = { field: "PropertyName", title: "Property", width: 200, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "ValueOfProperty", title: "Value", width: 80, align: "left" }; tblColums.push(oColumn);
                    var oPickerParam = {
                        winid: 'winPropertyValues',
                        winclass: 'clsPropertyValue',
                        winwidth: 450,
                        winheight: 460,
                        tableid: 'tblPropertyValues',
                        tablecolumns: tblColums,
                        datalist: response.objs,
                        multiplereturn: false,
                        searchingbyfieldName: 'Name',
                        windowTittle: 'PropertyValue List'
                    };
                    $.icsPicker(oPickerParam);
                    IntializePickerbutton(oPickerParam);
                }
                else { alert(response.objs[0].ErrorMessage); }
            }else{
                alert("Data Not Fund");
                return;
            }
        });

    });

    function IntializePickerbutton(oPickerobj) {
        debugger;
        $("#" + oPickerobj.winid).find("#btnOk").click(function () {
            debugger;
            //for Single Select
            SetPickerValueAssign(oPickerobj);
        });
        $(document).find('.' + oPickerobj.winclass).keydown(function (e) {
            if (e.which == 13)//enter=13
            {
                SetPickerValueAssign(oPickerobj);

            }
        });
    }

    function SetPickerValueAssign(oPickerobj) {
        debugger;
        var oreturnObj = null, oreturnobjs = [];
        if (oPickerobj.multiplereturn) {
            oreturnobjs = $('#' + oPickerobj.tableid).datagrid('getChecked');
        } else {
            oreturnObj = $('#' + oPickerobj.tableid).datagrid('getSelected');
        }
        $("#" + oPickerobj.winid).icsWindow("close");
        $("#" + oPickerobj.winid).remove();
        if (oPickerobj.winid == 'winPropertyValues') {
            if (oreturnObj != null && oreturnObj.PropertyValueID > 0) {
                $("#txtValueOfProperty").val(oreturnObj.ValueOfProperty);
                $("#txtValueOfProperty").addClass('fontColorOfPickItem');

                var oPropertyValue = $('#tblPorpertyValues').datagrid('getSelected');
                var SelectedRowIndex=$('#tblPorpertyValues').datagrid('getRowIndex',oPropertyValue);
                oPropertyValue.PropertyValueID=oreturnObj.PropertyValueID;
                oPropertyValue.ValueOfProperty=oreturnObj.ValueOfProperty;
                $('#tblPorpertyValues').datagrid('updateRow',{index:SelectedRowIndex,row:oPropertyValue});
                $('#txtValueOfProperty').focus();
            }
        } else if (oPickerobj.winid=='winPropertys') {

            $("#txtPropertyName").addClass('fontColorOfPickItem');
            debugger;
            if(oPickerobj.multiplereturn)
            {
                if (oreturnobjs.length > 0)
                {

                    $("#txtPropertyName").val((oreturnobjs.length>1) ? oreturnobjs.length+" Item(s) Selected":oreturnobjs[0].PropertyName);
                    for(var i=0;i<oreturnobjs.length;i++){
                        if(!IsExit(oreturnobjs[i].PropertyID)){
                            var oPPI={ProductPropertyInfoID : 0,
                                ProductID : _oProduct==null?0: _oProduct.ProductID,
                                PropertyID :oreturnobjs[i].PropertyID,
                                PropertyValueID :0,
                                PropertyName :oreturnobjs[i].PropertyName,
                                ValueOfProperty:''};
                            $('#tblPorpertyValues').datagrid('appendRow',oPPI);
                        }
                    }
                }
            }else{
                if (oreturnObj != null && oreturnObj.PropertyID > 0 ) {
                    $("#txtPropertyName").val(oreturnObj.PropertyName);
                    if(!IsExit(oreturnObj.PropertyID)){
                        var oPPI={ProductPropertyInfoID : 0,
                            ProductID : _oProduct==null?0: _oProduct.ProductID,
                            PropertyID :oreturnObj.PropertyID,
                            PropertyValueID :0,
                            PropertyName :oreturnObj.PropertyName,
                            ValueOfProperty:''};
                        $('#tblPorpertyValues').datagrid('appendRow',oPPI);
                    }
                }
            }
            $('#txtPropertyName').focus();
        }else  if (oPickerobj.winid == 'winAccountHeads') {
            if (oreturnObj != null && oreturnObj.AccountHeadID > 0) {
                $("#txtAccountHeadName").val(oreturnObj.AccountHeadCodeName);
                var txtAccountHeadName = document.getElementById("txtAccountHeadName");
                txtAccountHeadName.style.color = "blue";
                txtAccountHeadName.style.fontWeight = "bold";
                _oProduct.AccountHeadID = oreturnObj.AccountHeadID;
                $('#txtAccountHeadName').focus();
            }
        } 

    }


    $("#btnAddValue").click(function (){
        var oPropertyValue = $('#tblPorpertyValues').datagrid('getSelected');
        if(oPropertyValue==null || oPropertyValue.PropertyID<=0)
        {
            alert("Please select a item from list!");
            return false;
        }
        sessionStorage.setItem("PropertyValueBackTo", window.location.href);
        window.location.href = _sBaseAddress+ "/PropertyValue/ViewPropertyValue?id="+oPropertyValue.PropertyID;
        //$('#tblPorpertyValues').datagrid('deleteRow',SelectedRowIndex);
    });
    $("#btnAddProperty").click(function (){

        sessionStorage.setItem("PropertyBackTo", window.location.href);
        window.location.href = _sBaseAddress+ "/Property/ViewPropertysFromItem?id="+0;
        //$('#tblPorpertyValues').datagrid('deleteRow',SelectedRowIndex);
    });
    $("#btnRemove").click(function (){
        var oPropertyValue = $('#tblPorpertyValues').datagrid('getSelected');
        if(oPropertyValue==null || oPropertyValue.PropertyID<=0)
        {
            alert("Please select a item from list!");
            return false;
        }
        var SelectedRowIndex=$('#tblPorpertyValues').datagrid('getRowIndex',oPropertyValue);
        $('#tblPorpertyValues').datagrid('deleteRow',SelectedRowIndex);
    });

    function IsExit(nPropertyID)
    {
        var oPPIs = $('#tblPorpertyValues').datagrid('getRows');
        if(oPPIs.length>0)
        {
            for(var i = 0;i<oPPIs.length;i++)
            {
                if(parseInt(oPPIs[i].PropertyID)=== parseInt(nPropertyID))
                {
                    return true;
                }
            }
        }
        return false;
    }
    ///end PPI
 $('._ChangeIssueA').change(function () {


    LoadUnits();
})



 ///end PPI
 $('._ChangeIssueProductType').change(function () 
 {
     _oProduct.AccountHeadID = 0;
     $("#txtAccountHeadName").val('');
     var txtAccountHeadName = document.getElementById("txtAccountHeadName");
     txtAccountHeadName.style.color = "black";
     txtAccountHeadName.style.fontWeight = "normal";
     if(parseInt($("#cboProductType").val())==1)
     {
         document.getElementById("txtAccountHeadName").disabled = true;
         $("#btnPickAccountHead").hide();
     }else  if(parseInt($("#cboProductType").val())>1)
     {
         document.getElementById("txtAccountHeadName").disabled = false;
         $("#btnPickAccountHead").show();
     }
   
 })
function LoadUnits()
 {
   var scboMeasurmentUniteType=document.getElementById("cboMeasurmentUniteType");
   var nUnitType= parseInt($('#cboMeasurmentUniteType').val());// scboMeasurmentUniteType.options[scboMeasurmentUniteType.selectedIndex].index;
   $('#cboMeasurmentUnit').empty();
   var listItems= "<option value='"+0+"'>" +"--Select Unit--" + "</option>";
    if (_oMeasurementUnits !=null)
    {
          if(_oMeasurementUnits.length>0)
           {
                 for (var i = 0; i < _oMeasurementUnits.length; i++)
                 {
                    if(_oMeasurementUnits[i].UnitType==nUnitType)
                    {
                      listItems += "<option value='" + _oMeasurementUnits[i].MeasurementUnitID+"'>" + _oMeasurementUnits[i].UnitName+"</option>";
                    }
                 }
          }
          $("#cboMeasurmentUnit").html(listItems);
          $('#cboMeasurmentUnit').val(_oProduct.MeasurementUnitID);
     }
 }



function RefreshObject()
{
    var oProduct= {
        ProductID : _oProduct.ProductID,
        ProductCategoryID : _oProduct.ProductCategoryID,
        ProductName: $.trim($("#txtProductName").val()),
        AddOne:  $.trim($("#txtAddOne").val()),
        AddTwo :  $.trim($("#txtAddTwo").val()),
        ShortName :  $.trim($("#txtShortName").val()),
        UnitTypeInInt:parseInt($("#cboMeasurmentUniteType").val()),
        MeasurementUnitID : parseInt($("#cboMeasurmentUnit").val()),
        ProductBaseID: _oProduct.ProductBaseID,
        Note :  $.trim($("#txtNote").val()),
        ProductType:$("#cboProductType").val(),
        AccountHeadID:_oProduct.AccountHeadID,        
        ApplyProperty:$('#chkApplyProperty').is(':checked'),
        IsSerialNoApply:$('#chkIsSerialNoApply').is(':checked'),        
        PPIs: $('#chkApplyProperty').is(':checked')? $('#tblPorpertyValues').datagrid('getRows'):[]
    };
    return oProduct;
}

function ValidateInput()
{
    if(_oProduct==null)
    {
        alert("Invalid Product Category!");
        return false;
    }
    if(document.getElementById('txtProductName').value ==null || document.getElementById('txtProductName').value =="")
    {
        alert("Please Type Item.");
        $('#txtProductName').focus();
        return false;
    }
    if(parseInt($("#cboProductType").val())<=0)
    {
        alert("Select Product Type!");
        $("#cboProductType").focus();
      return false;
    }
    if(parseInt($("#cboProductType").val())>1)
    {
        if(_oProduct.AccountHeadID==0)
        {
            alert("Please Pick Account Head!");
            $("#txtAccountHeadName").focus();
            return false;
        }
    }
    var cboMeasurmentUniteType =document.getElementById("cboMeasurmentUniteType");
    var nUnitType = cboMeasurmentUniteType.options[cboMeasurmentUniteType.selectedIndex].index;
    if(parseInt(nUnitType)<=0)
    {
        alert("Please Select Unit Type");
        $('#cboMeasurmentUniteType').focus();
        return false;
    }
    var cboMeasurmentUnit =document.getElementById("cboMeasurmentUnit");
    var nUnitID = cboMeasurmentUnit.options[cboMeasurmentUnit.selectedIndex].value;

    if( parseInt(nUnitID)==0)
    {
        alert("Please select Unit");
        $('#cboMeasurmentUnit').focus();
        return false;
    }
    if($('#chkApplyProperty').is(':checked')){
        var oPPIs=$('#tblPorpertyValues').datagrid('getRows');
        if(oPPIs==null||oPPIs.length<=0){
            alert('Please select Some Property Values!');
            $('#txtValueOfProperty').focus();
            return false;
        }
    }
    return true;
}

$('#btnSave').click(function () {
    if(!ValidateInput()) return false;
        var oProduct = RefreshObject();
         $.ajax({
          type: "POST",
          dataType: "json",
          url: '@Url.Action("Save", "Product")',
            data:  JSON.stringify(oProduct),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                var _oProduct = jQuery.parseJSON(data);
                if (_oProduct!=null)
                {
                    if(_oProduct.ErrorMessage!="")
                    {
                        alert(_oProduct.ErrorMessage);
                        return;
                    }
                    else
                    {
                        document.getElementById("txtProductCode").value = _oProduct.ProductCode;
                        alert("Data Saved sucessfully");
                        var oProducts =sessionStorage.getItem("Products");
                        var nIndex= parseInt(sessionStorage.getItem("SelectedRowIndex"));
                        if(oProducts!=null)
                        {
                            oProducts = jQuery.parseJSON(oProducts);
                        }
                        else
                        {
                            oProducts=[];
                        }
                        if(nIndex!=-1)
                        {
                            oProducts[nIndex]=_oProduct;
                        }
                        else
                        {
                            sessionStorage.setItem("SelectedRowIndex", oProducts.length);
                            oProducts.push(_oProduct);
                        }
                        sessionStorage.setItem("Products", JSON.stringify(oProducts));
                        var tsv=((new Date()).getTime())/1000;
                        window.location.href = _sBaseAddress+ "/Product/ViewProducts_Base?nid="+_oProduct.ProductBaseID+"&ts="+tsv;
                    }
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });

    });


    $("#btnClose").click(function(){
        var tsv=((new Date()).getTime())/1000;
        window.location.href = window.location.href = sessionStorage.getItem("BackLink");
    });

    $(document).keydown(function(e) {
        if(e.which == 27)//escape=27
        {
            var tsv=((new Date()).getTime())/1000;
            window.location.href = _sBaseAddress+ "/Product/ViewProducts_Base?nid="+_oProduct.ProductBaseID+"&ts="+tsv;
        }
    });


    $("#txtProductName").keyup(function (e){

        FullName_keyup()
    });

    $("#txtShortName").keyup(function (e){

        FullName_keyup()
    });

    $("#txtProductName").keyup(function (e){

        FullName_keyup()
    });

    $("#txtNote").keyup(function (e){

        FullName_keyup()
    });


    function FullName_keyup()
    {
        var sFullName="";
        var sTemp="";
        sFullName=_oProduct.GroupName;
        sTemp=$("#txtNote").val();
        if( sTemp.length>0)
        {
            sFullName=sFullName+" - "+sTemp;
        }
        sTemp=$("#txtProductName").val();
        if( sTemp.length>0)
        {
            sFullName=sFullName+" - "+sTemp;
        }
        sTemp=$("#txtShortName").val();
        if( sTemp.length>0)
        {
            sFullName=sFullName+" - "+sTemp;
        }

        document.getElementById("lblFullName").innerHTML = sFullName;
    }





</script>