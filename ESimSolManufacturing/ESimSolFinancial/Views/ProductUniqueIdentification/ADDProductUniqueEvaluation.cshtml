<html>
<head>
    @*<link href="@Url.Content("~/Content/CSS/pagelayout.css")" rel="stylesheet" type="text/css" />*@
    <link href="@Url.Content("~/Content/CSS/icon.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/CSS/easyui.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/CSS/Pikerstyle.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/jquery-1.7.1.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.ics.customize.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.easyui.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery-ui.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/json2.js")" type="text/javascript"></script>
</head>
<body>
    @{
        ViewBag.Title = "";
    }
    @model ESimSol.BusinessObjects.ProductUniqueEvaluation 
    @Html.ValidationSummary(true)
    <div style="font-family: Tahoma">
        <table border="0" cellspacing="2" cellpadding="2">
            <tr>
                <td style="background-color: #CFB53B; text-align: center; width: 469px; color: White">
                    <label id="lblHeaderName" style="font-size: 15px; font-weight: bold; text-decoration: Underline;
                        width: 465px">
                        Add Product Unique Evaluation
                    </label>
                </td>
            </tr>
        </table>
        <fieldset style="width: 450px; text-align: right">
            <table border="0">
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Group:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.DropDownListFor(model => model.PUEGID, Model.ProductUniqueEvaluationGroups.Select(x => new SelectListItem() { Text = x.Name, Value = x.PUEGID.ToString() }), new { id = "cboProductUniqueEvaluationGroup", style = "width: 239px;" })
                    </td>
                    <td style="width: 40px; text-align: left">
                        <input type="button" value="Create" id="btnCreateGroup" />
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Evaluation Type:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.DropDownListFor(model => model.EvaluationType, new SelectList(Enum.GetValues(typeof(ICS.Core.Utility.EnumEvaluationType))), new { id = "cboEvaluationType", style = "width: 240px;" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Evaluation On:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.DropDownListFor(model => model.EvaluationOn, new SelectList(Enum.GetValues(typeof(ICS.Core.Utility.EnumEvaluationOn))), new { id = "cboEvaluationOn", style = "width: 240px;" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr>
                    <td id="ChkTime" style="width: 155px; font-size: 13px; text-align: left">
                        Time Period: @Html.CheckBoxFor(model => model.ByTimePeriod, new { id = "chkByTimePeriod", onClick = "chkByTimePeriod()" })
                    </td>
                    <td id="ChkPer" style="width: 240px; font-size: 13px; text-align: left">
                        Percentage: @Html.CheckBoxFor(model => model.ByPercentage, new { id = "chkByByPercentage", onClick = "chkByByPercentage()" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr id="VPS">
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Value Per Session(%):
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.TextBoxFor(model => model.EvaluationValuePerSession, new { style = "width: 240px;", id = "txtEvaluationValuePerSession" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr id="MonthYear">
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Yearly/Monthly
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.DropDownListFor(model => model.CalculationType, new SelectList(Enum.GetValues(typeof(ICS.Core.Utility.EnumCalculationType))), new { id = "cboCalculationType", style = "width: 240px;" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr id="TimePeriod">
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Time:
                    </td>
                    <td style="width: 240px; font-size: 13px; text-align: left">
                        @Html.TextBoxFor(model => model.EvaluationValuePerTime, new { style = "width: 240px;", id = "txtEvaluationValuePerTime" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr id="hidden">
                    <td style="width: 155px; font-size: 13px; text-align: left; visibility: hidden">
                        @Html.TextBoxFor(model => model.SerialNo, new { style = "width: 19px;", id = "txtSerial" })
                        @Html.TextBox("EvaluationDate", DateTime.Today.ToString("dd MMMM yyyy"), new { style = "width: 19px;", id = "txtEvaluationDate" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                    </td>
                </tr>
            </table>
            <table>
                <tr>
                    <td style="width: 80px; text-align: right">
                    </td>
                    <td style="width: 110px; text-align: right">
                    </td>
                    <td style="width: 80px; text-align: right">
                    </td>
                    <td style="width: 80px; text-align: right">
                        <input type="button" value="Save" id="btnSave" style="width: 70px;" />
                    </td>
                    <td style="width: 80px; text-align: right">
                        <input type="button" value="Cancel" id="btnCancel" style="width: 70px;" />
                    </td>
                </tr>
            </table>
        </fieldset>
    </div>
</body>
</html>
<script>

var _oProductUniqueEvaluation=null;
var nConditionCheck = 0;

$(document).ready(function () {
    debugger;

        document.getElementById("VPS").style.display = 'none';
        document.getElementById("MonthYear").style.display = 'none'; 
        document.getElementById("TimePeriod").style.display = 'none'; 

        _oProductUniqueEvaluation =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));    
        dataProductUniqueEvaluationGroups = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.ProductUniqueEvaluationGroups));  
        _oProductUniqueIdentification = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.ProductUniqueIdentification));    
        initializeDatepicker(); // this function is in GlobalScript.js. used for date picker.  
        LoadProductEvaluationGroup();
       

$("#txtSerial").keydown(function(event) 
{
//////debugger;
        // Allow: backspace, delete, tab, escape, and enter
        if ( event.keyCode == 46 || event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 27 || event.keyCode == 13 || 
             // Allow: Ctrl+A
            (event.keyCode == 65 && event.ctrlKey === true) || 
             // Allow: home, end, left, right
            (event.keyCode >= 35 && event.keyCode <= 39)) {
                 // let it happen, don't do anything
                 return;
        }
        else 
        {
            // Ensure that it is a number and stop the keypress
            if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105 )) {
            event.preventDefault(); 
        }   
 }
 });

$("#txtEvaluationValuePerSession").keydown(function(event) 
{
//////debugger;
        // Allow: backspace, delete, tab, escape, and enter
        if ( event.keyCode == 46 || event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 27 || event.keyCode == 13 || 
             // Allow: Ctrl+A
            (event.keyCode == 65 && event.ctrlKey === true) || 
             // Allow: home, end, left, right
            (event.keyCode >= 35 && event.keyCode <= 39)) {
                 // let it happen, don't do anything
                 return;
        }
        else 
        {
            // Ensure that it is a number and stop the keypress
            if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105 )) {
            event.preventDefault(); 
        }   
 }
 });
         
}); //End of Ready Function


// Load Group
function LoadProductEvaluationGroup() 
{
       // ////debugger;
       
        $.ajax({
            type: "GET",
            dataType: "json",
            url: '@Url.Action("LoadProductEvaluationGroup", "ProductUniqueIdentification")',
            data: {},
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                //////debugger;
                var ProductEvaluationGroups = jQuery.parseJSON(data)
                if (ProductEvaluationGroups != null) {
                    var numItems = 0;
                    document.getElementById("cboProductUniqueEvaluationGroup").options.length = 0;
                    if (ProductEvaluationGroups != null) {
                        for (var i = 0; i < ProductEvaluationGroups.length; i++) {
                            addOption = new Option(ProductEvaluationGroups[i].Name, ProductEvaluationGroups[i].PUEGID);
                            document.getElementById("cboProductUniqueEvaluationGroup").options[numItems] = addOption
                            numItems++;
                        }
                    }
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });
}


function chkByTimePeriod() 
{
    //debugger;
    var ByTimePeriod = document.getElementById("chkByTimePeriod");
    if (ByTimePeriod.checked == true)         
    {         
        document.getElementById("VPS").style.display = 'none'; 
        document.getElementById("MonthYear").style.display = ''; 
        document.getElementById("TimePeriod").style.display = '';
        document.getElementById("ChkPer").style.display = 'none'; 
        $("#txtEvaluationValuePerSession")[0].value = 0;         
        nConditionCheck = "BYTIMEPERIOD";        
    }

    if (ByTimePeriod.checked == false)         
    {         
         $("#txtEvaluationValuePerTime")[0].value = 0;               
         document.getElementById("ChkPer").style.display = ''; 
         document.getElementById("MonthYear").style.display = 'none'; 
         document.getElementById("TimePeriod").style.display = 'none';  
         nConditionCheck = "";      
    }   
        
}

function chkByByPercentage() 
{
 ////debugger;
    var ByPercentage = document.getElementById("chkByByPercentage");
    if (ByPercentage.checked == true)         
    {         
        document.getElementById("VPS").style.display = ''; 
        document.getElementById("MonthYear").style.display = ''; 
        document.getElementById("TimePeriod").style.display = 'none'; 
        document.getElementById("ChkTime").style.display = 'none';
        $("#txtEvaluationValuePerTime")[0].value = 0;          
        nConditionCheck = "BYPERCENT";        
    }

    if (ByPercentage.checked == false)         
    {                 
        document.getElementById("VPS").style.display = 'none'; 
        document.getElementById("MonthYear").style.display = 'none'; 
        document.getElementById("TimePeriod").style.display = 'none'; 
        document.getElementById("ChkTime").style.display = ''; 
        $("#txtEvaluationValuePerSession")[0].value = 0;          
        nConditionCheck = "";        
    }  
        
}



$('#btnCreateGroup').click(function () {
// ////debugger;
    var oParameter = new Object();                         
    var url = "/ProductUniqueIdentification/ADDPUIGroup";   
    var oProductUniqueIdentificationpopup = window.showModalDialog(url, oParameter, 'dialogHeight:395px;dialogWidth:300px;dialogLeft:505;dialogTop:150;center:yes;resizable:no;status:no;scroll:no');           
    
    window.close();   
});

$('#btnCancel').click(function () {
        
    window.close();          
});



function ValidateInput()
{
        var ProductUniqueEvaluationGroup = $("#cboProductUniqueEvaluationGroup").val(); 
        if(ProductUniqueEvaluationGroup<=0)  
        {
            alert("Invalid Group");
            return false;
        }     
        var evaluationType = $("#cboEvaluationType").val(); 
        if(evaluationType=="None")  
        {
            alert("Select Evaluation Type"); 
            return false;
        }       
        var EvaluationOn = $("#cboEvaluationOn").val(); 
        if(EvaluationOn=="None")  
        {
            alert("Select Evaluation On"); 
            return false;
        } 

        //debugger;
        var ByTimePeriod = document.getElementById("chkByTimePeriod");
        var ByPercentage = document.getElementById("chkByByPercentage");
        if(ByTimePeriod.checked==false && ByPercentage.checked==false)
        {
            alert("Select your Calculation By Percent Value or By Time Period");
            return false;
        }

        if(ByTimePeriod.checked==true && ByPercentage.checked==true)
        {
            alert("Select One Either By Percent Value or By Time Period");
            return false;
        }

        var EvaluationValuePerSession = $("#txtEvaluationValuePerSession").val(); 
        if(EvaluationValuePerSession<=0 && ByPercentage.checked==true )  
        {
            alert("Enter Numeric Positive Number for Percent Value Per Session"); 
            $('#txtEvaluationValuePerSession').focus();
            return false;
        }

        var cboCalculationType = $("#cboCalculationType").val(); 
        if(cboCalculationType=="None" && ByTimePeriod.checked==true)  
        {
            alert("Select Yearly Or Monthly"); 
            return false;
        } 

        if(cboCalculationType=="None" && ByPercentage.checked==true)  
        {
            alert("Select Yearly Or Monthly"); 
            return false;
        }

        var EvaluationValuePerTime = $("#txtEvaluationValuePerTime").val(); 
        if(EvaluationValuePerTime<=0 && ByTimePeriod.checked==true)  
        {
            alert("Provide Value for Evaluation Period"); 
             $('#txtEvaluationValuePerTime').focus();
            return false;
        }



        var bFlag3 = isNumber($("#txtEvaluationValuePerSession")[0].value);      
        if (!bFlag3)
        { 
            alert("Please insert only Numeric Positive Value For Evaluation Value Per Session"); 
            return false;
        }       
      
       
      return true; 
}


 $('#btnSave').click(function () {
      //debugger; 
        if(!ValidateInput()) return false;
        var oProductUniqueEvaluation=RefreshObject();
       
         $.ajax({
          type: "POST",
          dataType: "json",
          url: '@Url.Action("AddPUEvaluation", "ProductUniqueIdentification")',
          data:  JSON.stringify(oProductUniqueEvaluation),
          contentType: "application/json; charset=utf-8",
          success: function (data) {
              //debugger;
              var oProductUniqueEvaluation = jQuery.parseJSON(data);
              if (oProductUniqueEvaluation[0].ErrorMessage == '' || oProductUniqueEvaluation[0].ErrorMessage == null) 
              {
                  alert("Data Saved sucessfully");
                  window.returnValue = oProductUniqueEvaluation;                 
                  window.close();

              }
              else 
              {
                  alert(oProductUniqueEvaluation[0].ErrorMessage);
              }
          },
          error: function (xhr, status, error) {
              alert(error);
          }

      });
          
    });


function isNumber(n) // This function works to allow only numeric positive values
{    
  return !isNaN(parseFloat(n)) && isFinite(n);
} 



//An Ajax Object, that works for transfer data to controller
 function RefreshObject()
 { 
    debugger;
    var oProductUniqueEvaluation= {                                    
                                    PUEID :  _oProductUniqueEvaluation.PUEID,
                                    PUEGID : $("#cboProductUniqueEvaluationGroup").val(),                                    
                                    EvaluationType : $("#cboEvaluationType").val(),
                                    EvaluationOnInInt : document.getElementById("cboEvaluationOn").selectedIndex,
                                    EvaluationValuePerSession : $("#txtEvaluationValuePerSession").val(),  
                                    EvaluationValuePerTime : $("#txtEvaluationValuePerTime").val(),
                                    CalculationType : $("#cboCalculationType").val(),
                                    PUIIDs : _oProductUniqueEvaluation.PUIIDs,
                                    ConditionCheck :nConditionCheck 
                                 };
        return oProductUniqueEvaluation;
 }








</script>
