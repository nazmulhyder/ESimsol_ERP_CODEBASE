<html>
<head>
    @*<link href="@Url.Content("~/Content/CSS/pagelayout.css")" rel="stylesheet" type="text/css" />*@
    <link href="@Url.Content("~/Content/CSS/icon.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/CSS/easyui.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/CSS/Pikerstyle.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/jquery-1.7.1.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.ics.customize.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.easyui.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery-ui.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/json2.js")" type="text/javascript"></script>
</head>
<body>
    @{
        ViewBag.Title = "";
    }
    @model ESimSol.BusinessObjects.ProductUniqueIntegrationSetup
    @Html.ValidationSummary(true)
    <div id="menu-wrapper">
        <table border="0">
            <tr>
                <td style="width: 220px; vertical-align: top">
                </td>
                <td style="width: 330px; text-align: center; text-decoration: underline; font-size: x-large;
                    color: White">
                </td>
            </tr>
        </table>
    </div>
    <div class="PageBody" style="overflow: auto">
        <table>
            <tr>
                <td style="width: 50px; text-align: center">
                </td>
                <td style="width: 50px; text-align: center">
                </td>
            </tr>
            <tr id="chkbyGroup">
                <td style="width: 50px; text-align: left; font-size: small">
                    Group
                </td>
                <td style="width: 50px; text-align: center">
                    @Html.CheckBoxFor(model => model.CreateByGroup, new { id = "chkCreateByGroup", onClick = "ChkUserInputbyGroup()" })
                </td>
            </tr>
            <tr id="chkbyProduct">
                <td style="width: 50px; text-align: left; font-size: small">
                    Product
                </td>
                <td style="width: 50px; text-align: center">
                    @Html.CheckBoxFor(model => model.CreateByIndividual, new { id = "ChkByIndividual", onClick = "checkuserinputbyProduct()" })
                </td>
            </tr>
            <tr id="ByGroup">
                <td style="width: 200px; text-align: left; font-size: small">
                    Group Name
                </td>
                <td style="width: 50px; text-align: center">
                    @Html.DropDownListFor(model => model.PUEGID, Model.ProductUniqueEvaluationGroups.Select(x => new SelectListItem() { Text = x.Name, Value = x.PUEGID.ToString() }), new { id = "cboProductUniqueEvaluationGroup", style = "width: 199px;" })
                </td>
            </tr>
            <tr id="ByProduct">
                <td style="width: 200px; text-align: left; font-size: small">
                    Product Name:
                </td>
                <td style="width: 50px; text-align: center">
                    @Html.TextBoxFor(model => model.ProductName, new { style = "width: 195px;", id = "txtProductName" })
                </td>
                <td style="width: 50px; text-align: center; visibility: hidden">@Html.TextBoxFor(model => model.PUIID, new { style = "width: 35px;", id = "txtPUIID" })
                </td>
            </tr>
            <tr id="EnumEvaluationType">
                <td style="width: 200px; text-align: left; font-size: small">
                    Evaluation Type:
                </td>
                <td style="width: 50px; text-align: center">
                    @*@Html.TextBoxFor(model => model.EvaluationTypeInString, new { style = "width: 195px;", id = "txtEvaluationTypeInString", @readonly = "readonly" })*@
                    @Html.DropDownListFor(model => model.EvaluationType, new SelectList(Enum.GetValues(typeof(ICS.Core.Utility.EnumEvaluationType))), new { id = "cboEvaluationType", style = "width: 199px;" })
                </td>
            </tr>
            <tr id="cboVoucherTypetr">
                <td style="width: 200px; text-align: left; font-size: small">
                    Voucher Name
                </td>
                <td style="width: 50px; text-align: center">
                    @Html.DropDownListFor(model => model.VoucherTypeID, Model.Vouchers.Select(x => new SelectListItem() { Text = x.VoucherName, Value = x.VoucherTypeID.ToString() }), new { id = "cboVoucherType", style = "width: 199px;" })
                </td>
            </tr>
            <tr id="txtDebitAccountHeadNameDEBIT">
                <td style="width: 300px; text-align: left; font-size: small">
                    Debit Ledger
                </td>
                <td style="width: 50px; text-align: center">
                    @Html.TextBoxFor(model => model.AccountHeadName, new { style = "width: 195px;", id = "txtDebitAccountHeadName" })
                </td>
                <td style="visibility: hidden">
                    @Html.TextBoxFor(model => model.DebitAccountHeadID, new { style = "width: 20px;", id = "txtDebitAccountHeadID" })
                </td>
            </tr>
            <tr id="txtDebitAccountHeadNameCRDIT">
                <td style="width: 300px; text-align: left; font-size: small">
                    Credit Ledger
                </td>
                <td style="width: 50px; text-align: center">
                    @Html.TextBoxFor(model => model.AccountHeadName, new { style = "width: 195px;", id = "txtCreditAccountHeadName" })
                </td>
                <td style="visibility: hidden">
                    @Html.TextBoxFor(model => model.DebitAccountHeadID, new { style = "width: 20px;", id = "txtCreditAccountHeadID" })
                </td>
            </tr>
            <tr id="cboCostCenterForDEBIT">
                <td style="width: 200px; text-align: left; font-size: small">
                    Cost Center For
                </td>
                <td style="width: 50px; text-align: center">
                    @Html.DropDownListFor(model => model.CostCenterFor, new SelectList(Enum.GetValues(typeof(ICS.Core.Utility.EnumDebitCredit))), new { id = "cboCostCenterFor", style = "width: 199px;" })
                </td>
            </tr>
            <tr id="txtNametr">
                <td style="width: 50px; text-align: left; font-size: small">
                    CostCenter
                </td>
                <td style="width: 50px; text-align: center">
                    @Html.TextBoxFor(model => model.Name, new { style = "width: 195px;", id = "txtName" })
                </td>
            </tr>
            <tr>
                <td style="width: 50px; text-align: left; font-size: small; visibility: hidden">
                    CostCenter:
                </td>
                <td style="width: 50px; text-align: left; font-size: small; visibility: hidden">
                    @Html.TextBoxFor(model => model.CCID, new { style = "width: 35px;", id = "txtCCID" })
                </td>
                <td style="width: 50px; text-align: left; font-size: small; visibility: hidden">
                    @Html.TextBoxFor(model => model.EvaluationType, new { style = "width: 35px;", id = "txtEvaluationType" })
                </td>
            </tr>
            <tr>
                <td style="width: 30px; text-align: right">
                </td>
                <td>
                    <input type="button" value="Save" id="btnSave" />
                </td>
                <td>
                    <input type="button" value="Cancel" id="btnCancel" />
                </td>
            </tr>
        </table>
    </div>
</body>
</html>
<script type="text/javascript">
var _oProductUniqueEvaluation=null;
    $(document).ready(function () {
       debugger;
        _oProductUniqueIntegrationSetup =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));    
        _oProductUniqueIdentification = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.ProductUniqueIdentification)); 
         dataVouchers = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.Vouchers));  
         _COA_ChartsOfAccounts = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.COA_ChartsOfAccounts));  
         dataProductUniqueEvaluationGroups = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.ProductUniqueEvaluationGroups));  
         LoadProductEvaluationGroup();
         LoadVoucherType();
         initializeDatepicker(); // this function is in GlobalScript.js. used for date picker.
         hideunhide()  
         $("#txtProductName")[0].value = 'Press Enter';
         $("#txtName")[0].value = 'Press Enter';
         $("#txtDebitAccountHeadName")[0].value = 'Press Enter';
         $("#txtCreditAccountHeadName")[0].value = 'Press Enter';
          
}); //End of Ready Function

function hideunhide()
{
    //debugger;
    document.getElementById("ByGroup").style.display = 'none';
    document.getElementById("ByProduct").style.display = 'none';
    document.getElementById("EnumEvaluationType").style.display = 'none';
    document.getElementById("cboVoucherTypetr").style.display = 'none';
    document.getElementById("txtNametr").style.display = 'none';
    document.getElementById("txtDebitAccountHeadNameDEBIT").style.display = 'none';  
    document.getElementById("txtDebitAccountHeadNameCRDIT").style.display = 'none';   
    document.getElementById("cboCostCenterForDEBIT").style.display = 'none'; 
    document.getElementById("chkbyGroup").style.display = ''; 
    document.getElementById("chkbyProduct").style.display = '';
    $("#txtDebitAccountHeadName")[0].value = 'Press Enter';
    $("#txtCreditAccountHeadName")[0].value = 'Press Enter'; 
    $("#txtName")[0].value = 'Press Enter';     
    document.getElementById('cboProductUniqueEvaluationGroup').value = 0;  
    $("#txtProductName")[0].value = 'Press Enter';
    document.getElementById('txtPUIID').value = 0;
    document.getElementById('txtCCID').value = 0;
    document.getElementById('cboCostCenterFor').value = 0;
}

// if user select Group on Check Box Hide Product Fields
function ChkUserInputbyGroup() 
{     //debugger;
        var CheckbyGroup = document.getElementById("chkCreateByGroup");        
        if (CheckbyGroup.checked)         
        {         
                document.getElementById("ByGroup").style.display = '';
                document.getElementById("ByProduct").style.display = 'none'; 
                document.getElementById("chkbyProduct").style.display = 'none';
                document.getElementById("cboVoucherTypetr").style.display = '';
                document.getElementById("txtNametr").style.display = '';
                document.getElementById("txtDebitAccountHeadNameDEBIT").style.display = '';
                document.getElementById("cboCostCenterForDEBIT").style.display = ''; 
                document.getElementById("txtDebitAccountHeadNameCRDIT").style.display = ''; 
                document.getElementById("EnumEvaluationType").style.display = ''; 
                document.getElementById('txtDebitAccountHeadID').value = 0;      
                document.getElementById('txtCreditAccountHeadID').value = 0;   
                document.getElementById('txtDebitAccountHeadName').value = 'Press Enter';
                document.getElementById('txtCreditAccountHeadName').value = 'Press Enter';    
                             
        }
        if (CheckbyGroup.checked==false)         
        {         
             hideunhide();             
        }       
        
}
// if user select Product on Check Box Hide Group Fields
function checkuserinputbyProduct()
{
    //debugger;
     var ByIndividual = document.getElementById("ChkByIndividual");
        if (ByIndividual.checked)         
        {         
                document.getElementById("ByProduct").style.display = '';
                document.getElementById("ByGroup").style.display = 'none';
                document.getElementById("chkbyGroup").style.display = 'none';
                document.getElementById("cboVoucherTypetr").style.display = '';
                document.getElementById("txtNametr").style.display = '';
                document.getElementById("txtDebitAccountHeadNameDEBIT").style.display = '';
                document.getElementById("cboCostCenterForDEBIT").style.display = ''; 
                document.getElementById("txtDebitAccountHeadNameCRDIT").style.display = '';       
                document.getElementById("EnumEvaluationType").style.display = '';  
                document.getElementById('txtDebitAccountHeadID').value = 0;      
                document.getElementById('txtCreditAccountHeadID').value = 0;   
                document.getElementById('txtDebitAccountHeadName').value = 'Press Enter';
                document.getElementById('txtCreditAccountHeadName').value = 'Press Enter'; 
        }
        if (ByIndividual.checked==false)         
        {         
               hideunhide();                    
        }
}

$('#txtName').keypress(function (e) {
      //debugger;
        var keyCode = e.keyCode || e.which;
        if (keyCode == 13) {           
            var oParameter = new Object();
            oParameter.MultipleReturn = false;
            var url = '@Url.Action("CCPikerWithCheckBox", "CostCenter")';           
            var oReturnObject = window.showModalDialog(url, oParameter, 'dialogHeight:590px;dialogWidth:630px;dialogLeft:500;dialogTop:100;center:yes;resizable:no;status:no;scroll:no');
            //debugger;
            if (oReturnObject != null) 
            {
                 if(oReturnObject.SelectedCostCenter !=null)
                 {
                        document.getElementById('txtName').value = oReturnObject.ReturnString;
                         document.getElementById('txtCCID').value = oReturnObject.SelectedCostCenter.data.oNodeID;
                                    
                 }             
            }
            else {
                $('#txtName').focus();
            }
            return false;
        }

    })


$('#txtProductName').keypress(function (e) {
  // debugger;     
        var keyCode = e.keyCode || e.which;
        if (keyCode == 13) {           
        var oParameter = new Object();
        oParameter.MultipleReturn = false;          
        var url = '@Url.Action("PUIPiker", "ProductUniqueIdentification", new { AccountHead = "2~1" })'; 
        //var oReturnObject =  window.showModalDialog(url, oParameter, 'dialogHeight:550px;dialogWidth:500px;dialogLeft:400;dialogTop:100;center:yes;resizable:no;status:no;scroll:no');
         var oReturnObject = window.showModalDialog(url, oParameter, 'dialogHeight:470px;dialogWidth:480px;dialogLeft:300;dialogTop:130;center:yes;resizable:no;status:no;scroll:no'); 
        //debugger;
        if (oReturnObject != null) 
        {
          document.getElementById('txtProductName').value = oReturnObject.ProductName;
          document.getElementById('txtPUIID').value = oReturnObject.PUIID;
          
        }
       else 
         {
                $('#txtProductName').focus();
         }
            return false;
       }

   })

function LoadProductEvaluationGroup() 
{
       // debugger;
       
        $.ajax({
            type: "GET",
            dataType: "json",
            url: '@Url.Action("LoadProductEvaluationGroup", "ProductUniqueIdentification")',
            data: {},
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                //debugger;
                var ProductEvaluationGroups = jQuery.parseJSON(data)
                if (ProductEvaluationGroups != null) {
                    var numItems = 0;
                    document.getElementById("cboProductUniqueEvaluationGroup").options.length = 0;
                    if (ProductEvaluationGroups != null) {
                        for (var i = 0; i < ProductEvaluationGroups.length; i++) {
                            addOption = new Option(ProductEvaluationGroups[i].Name, ProductEvaluationGroups[i].PUEGID);
                            document.getElementById("cboProductUniqueEvaluationGroup").options[numItems] = addOption
                            numItems++;
                        }
                    }
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });
}

function LoadVoucherType() 
{
      // debugger;       
        $.ajax({
            type: "GET",
            dataType: "json",
            url: '@Url.Action("LoadVoucherType", "ProductUniqueIdentification")',
            data: {},
            contentType: "application/json; charset=utf-8",
            success: function (data) {
               // debugger;
                var VoucherTypes = jQuery.parseJSON(data)
                if (VoucherTypes != null) {
                    var numItems = 0;
                    document.getElementById("cboVoucherType").options.length = 0;
                    if (VoucherTypes != null) {
                        for (var i = 0; i < VoucherTypes.length; i++) {
                            addOption = new Option(VoucherTypes[i].VoucherName, VoucherTypes[i].VoucherTypeID);
                            document.getElementById("cboVoucherType").options[numItems] = addOption
                            numItems++;
                        }
                    }
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });
}

function ValidateInput() 
{
    //debugger;
        var VoucherType =$("#cboVoucherType").val();  
        if (VoucherType <= 0) 
        {alert("Please Select Voucher Type"); $('#cboVoucherType').focus(); return false;}        
        var CostCenterFor =$("#cboCostCenterFor").val();  
        if (CostCenterFor == "None") 
        {alert("Please Select Cost Center For"); $('#cboCostCenterFor').focus(); return false;}
        var ByIndividual = document.getElementById("ChkByIndividual");
        if (ByIndividual.checked)
        { var ProductName =$("#txtProductName").val(); 
          if (ProductName =="") 
          {alert("Please Provide Note"); $('#txtProductName').focus(); return false;}
        }
        var CheckbyGroup = document.getElementById("chkCreateByGroup");        
        if (CheckbyGroup.checked)
        {
            var ProductUniqueEvaluationGroup =$("#cboProductUniqueEvaluationGroup").val();  
            if (ProductUniqueEvaluationGroup <= 0) 
            {alert("Please Select Group"); $('#cboProductUniqueEvaluationGroup').focus(); return false;} 
        }
        var CostCenterName =$("#txtName").val(); 
        if (CostCenterName =="") 
        {alert("Please Provide Cost Center Name"); $('#txtName').focus(); return false;}
        var creditledgerid = $("#txtCreditAccountHeadID").val(); 
        var debitledgerid = $("#txtDebitAccountHeadID").val();
        if(creditledgerid == debitledgerid)
        {alert("Debit and Credit Can not be same, chose different"); $('#txtDebitAccountHeadName').focus(); return false;} 
        return true;
}

//An Ajax Object, that works for transfer data to controller
 function RefreshObject()
 { 
 debugger;     
 var oProductIntegrationSetup= {
                                    CreateByGroup: document.getElementById("chkCreateByGroup").checked,
                                    CreateByIndividual :  document.getElementById("ChkByIndividual").checked,
                                    PUEGID : $("#cboProductUniqueEvaluationGroup").val(),    
                                    EvaluationType : _oProductUniqueIdentification.EvaluationType,
                                    VoucherTypeID : $("#cboVoucherType").val(),
                                    Name : $("#txtName").val(),                                                                 
                                    CCID : $("#txtCCID").val(),   
                                    PUIID : $("#txtPUIID").val(),
                                    ProductName : $("#txtProductName").val(),
                                    CostCenterFor : $("#cboCostCenterFor").val(),
                                    CreditLedgerID: $("#txtCreditAccountHeadID").val(), 
                                    DebitLedgerID: $("#txtDebitAccountHeadID").val(),
                                    EvaluationType: $("#cboEvaluationType").val()
                                  };
        return oProductIntegrationSetup;
 }



$('#txtDebitAccountHeadName').keypress(function (e) {
       // debugger;
        var keyCode = e.keyCode || e.which;
        if (keyCode == 13) {           
            var oParameter = new Object();
            oParameter.MultipleReturn = false;          
            var url = "/ChartsOfAccount/ChartOfAccountPiker";
            var oReturnObject = window.showModalDialog(url, oParameter, 'dialogHeight:540px;dialogWidth:700px;dialogLeft:400;dialogTop:100;center:yes;resizable:no;status:no;scroll:no');        
            
            //debugger;
            if (oReturnObject != null) {
                document.getElementById('txtDebitAccountHeadName').value = oReturnObject.AccountHeadCodeName;
                document.getElementById('txtDebitAccountHeadID').value = oReturnObject.AccountHeadID;                
                $('#txtCreditAccountHeadName').focus();               
            }
            else
            {
                $('#txtDebitAccountHeadName').focus();
            }
            return false;
        }
        
})


$('#txtDebitAccountHeadName').keydown(function (e) {
        //debugger;
        var keyCode = e.keyCode || e.which;
        //    Enter=13, tab=9, ctrl=17, c=67, d=68
        if (keyCode == 13 || keyCode == 9 || keyCode == 17 || keyCode == 67 || keyCode == 68) {
            return true;
        }
        else
        {
            return false;
        }        
})

$('#txtCreditAccountHeadName').keypress(function (e) {
       // debugger;
        var keyCode = e.keyCode || e.which;
        if (keyCode == 13) {           
            var oParameter = new Object();
            oParameter.MultipleReturn = false;          
            var url = "/ChartsOfAccount/ChartOfAccountPiker";
            var oReturnObject = window.showModalDialog(url, oParameter, 'dialogHeight:540px;dialogWidth:700px;dialogLeft:400;dialogTop:100;center:yes;resizable:no;status:no;scroll:no');        
            
            //debugger;
            if (oReturnObject != null) {
                document.getElementById('txtCreditAccountHeadName').value = oReturnObject.AccountHeadCodeName;
                document.getElementById('txtCreditAccountHeadID').value = oReturnObject.AccountHeadID;                
                $('#cboCostCenterFor').focus();               
            }
            else
            {
                $('#txtCreditAccountHeadName').focus();
            }
            return false;
        }
        
})


$('#txtCreditAccountHeadName').keydown(function (e) {
        //debugger;
        var keyCode = e.keyCode || e.which;
        //    Enter=13, tab=9, ctrl=17, c=67, d=68
        if (keyCode == 13 || keyCode == 9 || keyCode == 17 || keyCode == 67 || keyCode == 68) {
            return true;
        }
        else
        {
            return false;
        }        
})


 $('#btnSave').click(function () {
      debugger; 
        if(!ValidateInput()) return false;
        var oProductIntegrationSetup=RefreshObject(); 
         $.ajax({
          type: "POST",
          dataType: "json",
          url: '@Url.Action("AddPUIntegrationSetup", "ProductUniqueIdentification")',
          data:  JSON.stringify(oProductIntegrationSetup),
          contentType: "application/json; charset=utf-8",
          success: function (data) {
              debugger;
              var oPUIntegrationSetup = jQuery.parseJSON(data);
              if (oPUIntegrationSetup.ErrorMessage == '' || oPUIntegrationSetup.ErrorMessage == null) 
              {
                  alert("Data Saved sucessfully");
                  window.returnValue = oPUIntegrationSetup;                 
                  window.close();

              }
              else 
              {
                  alert(oPUIntegrationSetup.ErrorMessage);
              }
          },
          error: function (xhr, status, error) {
              alert(error);
          }

      });
          
    });

    $('#btnCancel').click(function () {
         alert("Closed without Data Save");
        window.close();          
    });

</script>
