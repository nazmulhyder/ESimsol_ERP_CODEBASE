@{
    ViewBag.Title = "Export UP";
}

@model ESimSol.BusinessObjects.ExportIncentive

<div ng-app="TipsnSpeedApp" ng-controller="TipsnSpeedCntrl" class="form-horizontal regionExportIncentive ms-custom-control">

    <fieldset>
        <legend>U/P Information</legend>
        <div class="col-md-12 ">
            <div class="col-md-2 text-right"><label class="control-label">LC No:</label></div>
            <div class="col-md-3 text-left form-inline">
                <div class="input-group">
                    <input type="text" ng-model="ExportIncentive.ExportLCNo" class="number-int form-control" style="width:80%" required ng-disabled="disabled" />
                    <input type="text" ng-model="UPYear" class="number-int form-control" style="width:18%" required ng-disabled="disabled" />
                </div>

            </div>
            <div class="col-md-2 text-right"><label class="control-label">Issue Date:</label></div>
            <div class="col-md-3 text-left">
                <div class="input-group date date-container">
                    <input type="text" class="form-control" ng-model="ExportIncentive.ExportIncentiveDateStr" ng-change="changeDate()" ng-disabled="disabled"><span class="input-group-addon"><i class="glyphicon glyphicon-th" ng-disabled="disabled"></i></span>
                </div>
            </div>
            <div class="col-md-2 text-right"><label class="control-label">Prepare By:</label></div>
            <div class="col-md-3 text-left">
                <input ng-model="ExportIncentive.PrepareByName" class="form-control" disabled />
            </div>
        </div>
    </fieldset>
    <div class="ui-grid-top-panel">
        <div class="row col-md-12">
            <div class="col-sm-1 text-right"> <label class="control-label">Type </label> </div>
            <div class="col-sm-2 text-left">
                <select ng-model="TipsTypeID" ng-options="obj.TipsTypeID as obj.TipsTypeName for obj in TipsTypes" class="form-control">
                    <option value="">--Select Type--</option>
                </select>
            </div>
            <div class="col-sm-1 text-center"> <label class="control-label">Amount </label> </div>
            <div class="col-sm-2 text-left">
                <input ng-model="Amount" class="form-control" valid-number />
            </div>
            <div class="col-sm-2 text-left">
                <select ng-model="CurrencyID" ng-options="obj.CurrencyID as obj.CurrencyName for obj in Currencys" class="form-control" ng-change="CRateFieldDisable()"></select>
            </div>
            <div class="col-sm-1 text-right"> <label class="control-label">CR.Rate </label> </div>
            <div class="col-sm-1 text-left">
                <input ng-model="CRate" class="form-control" valid-number ng-disabled="disabled" />
            </div>


            <div class="col-sm-2 text-left">
                <div class="input-group-btn">
                    <button type="button" class="btn-primary btn-sm" aria-label="Left Align" ng-click="add()" ng-hide="hide"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Add</button>
                    <span style="padding-left:2px;"></span>
                    <button type="button" class="btn-warning btn-sm" aria-label="Left Align" ng-click="edit()" ng-hide="hidebtnEdit"> <span class="glyphicon glyphicon-edit" aria-hidden="true"></span> Edit</button>
                    <button type="button" class="btn-warning btn-sm" aria-label="Left Align" ng-click="update()" ng-hide="hidebtnUpdate"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Update</button>
                    <span style="padding-left:2px;"></span>
                    <button type="button" class="btn-danger btn-sm" aria-label="Left Align" ng-click="remove()" ng-hide="hide"> <span class="glyphicon glyphicon-minus" aria-hidden="true"></span> Delete </button>
                </div>
            </div>
        </div>
    </div>
    <div ui-grid="gridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav class="grid ui-grid-selectable"></div>
    <fieldset>
        <legend>Action</legend>
        <div class="row col-md-12 text-right">
            @*<button type="button" class="btn btn-sm btn-success" aria-label="Left Align" ng-click="save()" ng-hide="hide"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span> Save</button>*@
            <button type="button" class="btn btn-sm btn-danger" aria-label="Left Align" ng-click="close()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Close</button>
        </div>
    </fieldset>
</div>

<style type="text/css">
    .grid {
        height: 380px;
        width: 99%;
    }

    .regionExportIncentive .col-md-12 {
        width: 100%;
        padding-right: 5px;
        padding-left: 5px;
        margin-bottom: 5px;
    }

    .regionExportIncentive .col-md-11 {
        width: 86%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionExportIncentive .col-md-2 {
        width: 13%;
        padding-right: 5px;
        padding-left: 5px;
    }
   .col-sm-2{
        width:13.666667%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionExportIncentive .col-md-3 {
        width: 20%;
        padding-right: 5px;
        padding-left: 5px;
    }
</style>

<script type="text/javascript">

    _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    var oExportIncentive=@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    var oTipsTypes   =@Html.Raw(Json.Encode(ViewBag.TipsTypes));
    var oTipsnSpeeds   =@Html.Raw(Json.Encode(ViewBag.TipsnSpeeds));
    var oCurrencys   =@Html.Raw(Json.Encode(ViewBag.Currencys));
    var oBaseCurrencyID   =@Html.Raw(Json.Encode(ViewBag.BaseCurrencyID));
    var onUserID   =@Html.Raw(Json.Encode(((ESimSol.BusinessObjects.User)Session[SessionInfo.CurrentUser]).UserID));
    var onUserName   =@Html.Raw(Json.Encode(((ESimSol.BusinessObjects.User)Session[SessionInfo.CurrentUser]).UserName));
    debugger;

    var TipsnSpeedModule = angular.module('TipsnSpeedApp', ['ms.service','tbICSIsNUmberModule','ngAnimate',  'ui.bootstrap', 'ui.grid', 'ui.grid.resizeColumns','ui.grid.selection', 'ui.grid.cellNav']);

    TipsnSpeedModule.controller('TipsnSpeedCntrl', function ($scope, $http, $uibModal, $log, uiGridConstants, msModal ,userSession ) {


        $scope.ExportIncentive = oExportIncentive;
        $scope.ExportIncentive.PrepareByName=onUserName;
        $scope.ExportIncentive.ExportIncentiveDateStr= icsdateformat(new Date());

        $scope.TipsTypes = oTipsTypes;
    
        $scope.UPYear = new Date($scope.ExportIncentive.ExportIncentiveDateStr).getFullYear().toString().substring(2,4);
        $scope.Currencys = oCurrencys;
        $scope.BaseCurrencyID = oBaseCurrencyID;
        $scope.reset =function(){
            $scope.CurrencyID = $scope.BaseCurrencyID;
            $scope.disabled = true;
            $scope.TipsnSpeedID =0;
            $scope.ReferenceType = 3; // For Reference Type Incentive
            $scope.Note = "";
            $scope.TipsTypeID ="";
            if($scope.TipsTypes.length==1)
            {
                $scope.TipsTypeID=oTipsTypes[0].TipsTypeID;
            }

            $scope.CRate =1;
            $scope.Amount =0;
            $scope.ReferenceID =$scope.ExportIncentive.ExportLCID;
            $scope.hidebtnUpdate = true;
            $scope.hidebtnEdit = false;
        }
        $scope.reset();
        $scope.CRateFieldDisable = function ()
        {
            ($scope.CurrencyID != $scope.BaseCurrencyID) ? $scope.disabled = false : $scope.disabled = true ,$scope.CRate =1 ;
        }
        $scope.gridOptions = {
            enableRowHeaderSelection: false,
            enableRowSelection: true,
            enableFullRowSelection: true,
            multiSelect: false,
            enableColumnResizing: true,
            noUnselect : true,
            enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,
            columnDefs: [
                {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'EntryDateStr', name: 'Date', width: '20%', cellClass: 'text-center', },
                { field: 'TipsTypeName', name: 'Type', width: '20%', cellClass: 'text-center' },
                { field: 'Amount', name: 'Amount', width: '10%' , cellClass: 'text-center', cellFilter: 'number: 2' },
                { field: 'CRate', name: 'C Rate', width: '10%' , cellClass: 'text-center', cellFilter: 'number: 2' },
                { field: 'CurrencySymbol', name: 'Currency', width: '8%' , cellClass: 'text-center'},
                { field: 'AmountWithCRate', name: 'Amount(BDT)', width: '10%', cellClass: 'text-center',cellFilter: 'number: 2' },
                { field: 'EntryUserName', name: 'Entry User', width: '12%', cellClass: 'text-right' }
            ],
            data:oTipsnSpeeds,
            onRegisterApi: function (gridApi) {
                $scope.gridApi = gridApi;
                $scope.gridApi.selection.clearSelectedRows();
                $scope.gridApi.grid.modifyRows(oTipsnSpeeds);
            }
        };

        $scope.Save = function () {
            debugger;
            $scope.GridData = $scope.gridOptions.data;
            if($scope.GridData!=null){
                msModal.Message({headerTitle : '', bodyText:'Save Successfully.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                userSession.previousPage();
            }
            else{
                msModal.Message({headerTitle : '', bodyText:'No data found to save.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
            }

        };

        $scope.close = function () {
            userSession.previousPage();
        };
        $scope.Validation = function(){
            if($scope.ExportIncentive.ExportLCID<=0){
                msModal.Message({headerTitle : '', bodyText:'Invalid Reference.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            else if($scope.TipsTypeID<=0){
                msModal.Message({headerTitle : '', bodyText:'Select Tips Type.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            else  if($scope.Amount<=0){
                msModal.Message({headerTitle : '', bodyText:'Enter Amount.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            else  if($scope.CurrencyID<=0){
                msModal.Message({headerTitle : '', bodyText:'Select Currency.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            else  if($scope.CRRate<=0){
                msModal.Message({headerTitle : '', bodyText:'Enter Converstion Rate.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            return  true;
        }

        $scope.add = function () {
            if(!$scope.Validation())
                return;

            $scope.TipsnSpeed = {
                TipsnSpeedID : 0,
                ReferenceType : 3,// tips Type Incentive/LC
                CurrencyID : $scope.CurrencyID,
                TipsTypeID : $scope.TipsTypeID,
                Note : $scope.Note,
                ReferenceID :$scope.ExportIncentive.ExportLCID,
                CRate : $scope.CRate,
                Amount :$scope.Amount
            }

            $http.post(_sBaseAddress+'/Tips/SaveTipsnSpeed', JSON.stringify( $scope.TipsnSpeed)).then(

                             function (response) {
                                 debugger;
                                 var result=jQuery.parseJSON(response.data);
                                 if(result.TipsnSpeedID>0)
                                 {
                                     $scope.gridOptions.data.push(result);

                                     $scope.reset();
                                 }
                                 else{
                                     msModal.Message({headerTitle : '', bodyText:result.ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                 }
                             },
                             function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
                       );
        };

        $scope.edit = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data.first().nUserID!=onUserID){
                msModal.Message({headerTitle : '', bodyText:'Permission denied.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }

            $scope.index=$scope.gridOptions.data.indexOf(data.first());

            $http.post(_sBaseAddress+'/Tips/GetTipsnSpeed', JSON.stringify(data[0])).then(
                            function (response) {
                                var result=jQuery.parseJSON(response.data);
                                if(result.TipsnSpeedID>0)
                                {
                                    debugger;

                                    $scope.TipsnSpeedID = result.TipsnSpeedID;
                                    $scope.ReferenceType = result.ReferenceType ;
                                    $scope.CurrencyID = result.CurrencyID;
                                    $scope.TipsTypeID = result.TipsTypeID;
                                    $scope.Note = result.Note;
                                    $scope.ReferenceID = result.ReferenceID;
                                    $scope.CRate = result.CRate;
                                    $scope.Amount= result.Amount;
                                    $scope.hidebtnEdit = true;
                                    $scope.hidebtnUpdate = false;

                                }
                                else
                                {
                                    msModal.Message({headerTitle : '', bodyText:result.ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                }
                            },
                            function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
                      );

        };

        $scope.remove = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'No item found to delete. Select an item.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data.first().nUserID!=onUserID){
                msModal.Message({headerTitle : '', bodyText:'Permission denied.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }

            $http.post(_sBaseAddress+'/Tips/DeleteTipsnSpeed',JSON.stringify(data.first())).then(
                            function (response) {
                                if(jQuery.parseJSON(response.data)=='Deleted'){
                                    msModal.Message({headerTitle : '', bodyText:'Delete Successfully.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                    $scope.gridOptions.data.splice($scope.gridOptions.data.indexOf(data.first()),1);
                                    $scope.gridApi.grid.modifyRows($scope.gridOptionDetails.data);
                                }
                                else{
                                    msModal.Message({headerTitle : '', bodyText:jQuery.parseJSON(response.data), sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                }
                            },
                            function (response) {alert(jQuery.parseJSON(response.data));}
                        );

        };

        $scope.update = function () {

            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(data.first().nUserID!=onUserID){
                msModal.Message({headerTitle : '', bodyText:'Permission deni.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(!$scope.Validation())
                return;
            $scope.TipsnSpeed = {
                TipsnSpeedID : $scope.TipsnSpeedID,
                ReferenceType : $scope.ReferenceType,
                CurrencyID : $scope.CurrencyID,
                TipsTypeID : $scope.TipsTypeID,
                Note : $scope.Note,
                ReferenceID :$scope.ExportIncentive.ExportLCID,
                CRate : $scope.CRate,
                Amount :$scope.Amount
            }


            $http.post(_sBaseAddress+'/Tips/SaveTipsnSpeed', JSON.stringify( $scope.TipsnSpeed)).then(

                              function (response) {
                                  debugger;
                                  var result=jQuery.parseJSON(response.data);
                                  if(result.TipsnSpeedID>0)
                                  {

                                      $scope.gridOptions.data[$scope.index]=result;
                                      $scope.gridApi.grid.modifyRows($scope.gridOptions.data);
                                      $scope.gridApi.selection.selectRow($scope.gridOptions.data[$scope.index]);
                                      $scope.index =0;

                                      $scope.reset();
                                  }
                                  else{
                                      msModal.Message({headerTitle : '', bodyText:result.ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                  }
                              },
                              function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
                        );

        };
    });

    var tbICSIsNUmberModule = angular.module('tbICSIsNUmberModule', []);

    tbICSIsNUmberModule.directive('validNumber', function () {
        return {
            require: '?ngModel',
            link: function (scope, element, attrs, ngModelCtrl) {
                if (!ngModelCtrl) {
                    return;
                }

                ngModelCtrl.$parsers.push(function (val) {
                    if (angular.isUndefined(val)) {
                        var val = '';
                    }


                    var clean = val.replace(/[^0-9\.]/g, '');

                    var decimalCheck = clean.split('.');


                    if (!angular.isUndefined(decimalCheck[1])) {
                        decimalCheck[1] = decimalCheck[1].slice(0,5);
                        clean = decimalCheck[0] + '.' + decimalCheck[1];
                    }

                    if (val !== clean) {
                        ngModelCtrl.$setViewValue(clean);
                        ngModelCtrl.$render();
                    }
                    return clean;
                });

                element.bind('keypress', function (event) {
                    if (event.keyCode === 32) {
                        event.preventDefault();
                    }
                });
            }
        };
    });
</script>