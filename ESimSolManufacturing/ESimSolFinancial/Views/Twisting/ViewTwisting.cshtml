@{
    ViewBag.Title = "Twisting";
}
@model ESimSol.BusinessObjects.Twisting

<div style="padding-top:5px; height:99%" ng-app="TwistingAPP"  class="form-horizontal regionTwisting menuMainCollectionTable">
    <div ng-controller="TwistingCtrl" style="height:100%;">
        <div style="height:89%; overflow:scroll">
            @*Requisition INFO*@
            <div style="height:24%">
                <fieldset style="height:100%">
                    <legend>Requisition Info: </legend>
                    <div class="row col-md-12">
                        <div class="col-md-1 text-right"><label class="control-label">Ord. Type:</label></div>
                        <div class="col-md-2 text-left">
                            <select ng-model="Twisting.TwistingOrderType" ng-options="obj.id as obj.Value for obj in TwistingOrderTypes" ng-change="OrderTypeChange()" ng-disabled="disabled" class="form-control">
                                <option value="0">--Select Type--</option>
                            </select>
                        </div>
                        <div class="col-md-1 text-right">
                            <label class="control-label">Order No :</label>
                        </div>
                        <div class="col-md-2 text-left">
                            <div class="input-group">
                                <input type="text" class="form-control" ng-model="txtOrderNo" ics-tab="1" placeholder="Type Order & Enter" ng-disabled="disabled" ng-keydown="SearchKeyDownOrder($event)" style="width:100px; height:24px;" required />
                                <button type="button" class="btn btn-primary btn-sm" aria-label="right Align" ng-click="PickOrder()" ng-disabled="disabled"><span aria-hidden="true">P</span></button>
                            </div>
                        </div>
                        <div class="col-md-1 text-right"><label class="control-label">SL No:</label></div>
                        <div class="col-md-2 text-left">
                            <input ng-model="Twisting.TWNo" class="form-control" disabled />
                        </div>
                        <div class="col-md-1 text-right"><label class="control-label"> Rcv. Date:</label></div>
                        <div class="col-md-2 text-left">
                            <div class="input-group date date-container" style="width:100%">
                                <input type="text" class="form-control"  ng-disabled="disabled" ng-model="Twisting.ReceiveDateSt">
                                <span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                            </div>
                        </div>
                        
                    </div>
                    <div class="row col-md-12">
                        <div class="col-md-1 text-right"><label class="control-label">Rcv. By:</label></div>
                        <div class="col-md-2 text-left">
                            <input ng-model="Twisting.ReceiveByName" class="form-control" disabled />
                        </div>
                        <div class="col-md-1 text-right"><label class="control-label">Buyer:</label></div>
                        <div class="col-md-2 text-left">
                            <div class="input-group" style="width:100%">
                                <input type="text" class="form-control" ng-model="txtBuyer" placeholder="Type Name & Press Enter" ng-disabled="(Twisting.DyeingOrderID>0)" ng-keydown="SearchKeyDownBuyer($event)" style="width:100px; height:24px;" required />
                                <button type="button" class="btn btn-primary btn-sm" aria-label="right Align" ng-click="PickBuyer()" ng-disabled="(Twisting.DyeingOrderID>0)"><span aria-hidden="true">P</span></button>
                            </div>
                        </div>
                        <div class="col-md-1 text-right"><label class="control-label">Store:</label></div>
                        <div class="col-md-2 text-left">
                            <select ng-model="Twisting.WorkingUnitID" ng-options="obj.WorkingUnitID as obj.OperationUnitName for obj in IssueStores" ng-disabled="disabled" class="form-control">
                                <option value="0">--Select One--</option>
                            </select>
                        </div>
                        <div class="col-md-1 text-right"><label class="control-label">Machine:</label></div>
                        <div class="col-md-2 text-left">
                            <input type="text" ng-model="Twisting.MachineDes" ng-disabled="disabled" class="form-control" />
                        </div>
                    </div>
                    <div class="row col-md-12">
                        <div class="col-md-1 text-right"><label class="control-label">Note:</label></div>
                        <div class="col-md-11 text-left">
                            <input type="text" ng-model="Twisting.Note" ng-disabled="disabled" class="form-control" />
                        </div>
                    </div>
                </fieldset>
            </div>

            @*DETAILS TABLE*@
            <div style="height:40%;">
                <fieldset style="height:100%;">
                    <legend>Details : </legend>
                    <div class="ui-grid-panel">
                        <div class="container col-md-12">
                            <div class="form-inline">
                                <button type="button" style="padding-left:5px" class="btn btn-primary btn-sm" aria-label="right Align" ng-hide="IsDetailsShow" ng-click="GetDetails()" ng-disabled="disabled"><span aria-hidden="true"> Get Details </span></button>
                                <input type="text" style="margin-left:5px" class="form-control" ng-model="txtProductOpen" placeholder="Type Prodyct Name & Press Enter" ng-hide="IsTxtProductOpenShow" ng-disabled="disabled" ng-keydown="SearchKeyProductOpen($event)" style="width:46%; height:25px;" required />
                                <button type="button" class="btn btn-primary btn-sm" aria-label="right Align" ng-click="PickProductOpen()" ng-hide="IsBtnProductOpenShow" ng-disabled="disabled"><span aria-hidden="true"> Pick </span></button>
                                @*<button type="button" class="btn btn-primary btn-sm" aria-label="right Align" ng-click="MakeTwistingDetail()" ng-disabled="disabled"><span aria-hidden="true"> Refresh </span></button>*@
                                <button type="button" class="btn btn-danger btn-sm" aria-label="right Align" ng-click="RemoveOrder()" ng-disabled="disabled" style="float:right"><span aria-hidden="true"> Remove </span></button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div style="height:135px;" ui-grid="gridOptionsTwistingDetail" ui-grid-selection ui-grid-resize-columns ui-grid-edit ui-grid-row-edit class="grid ui-grid-selectable"></div>
                    </div>
                </fieldset>
            </div>
            @*DETAILS TABLE*@
            <div style="height:35%; width:100%">
                <fieldset style="height:100%">
                    <legend>Product : </legend>
                    <div class="ui-grid-panel">
                        <div class="container col-md-12">
                            <div class="form-inline">                                
                                <select ng-model="Twisting.CompleteWorkingUnitID" style="width:180px;" ng-options="obj.WorkingUnitID as obj.OperationUnitName for obj in ReceiveStores" ng-hide="IsCompleteWorkingUnitShow" class="form-control">
                                    <option value="0">--Select Complete Store--</option>
                                </select>
                                <input type="text" style="margin-left:5px" class="form-control" ng-model="txtProduct" placeholder="Type Prodyct Name & Press Enter" ng-disabled="disabled" ng-keydown="SearchKeyProduct($event)" style="width:46%; height:25px;" required />
                                <button type="button" class="btn btn-primary btn-sm" aria-label="right Align" ng-click="PickProduct()" ng-disabled="disabled"><span aria-hidden="true"> Pick </span></button>
                                <button type="button" class="btn btn-danger btn-sm" aria-label="right Align" style="float:right" ng-click="RemoveProduct()" ng-disabled="disabled"><span aria-hidden="true">Remove</span></button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div style="height:100px" ui-grid="gridOptionsTwistingProduct" ui-grid-selection ui-grid-resize-columns ui-grid-edit ui-grid-row-edit class="grid ui-grid-selectable"></div>
                    </div>
                </fieldset>
            </div>
        </div>
        <div style="height:10%">
            <fieldset>
                <legend>Action</legend>
                <div class="row col-md-12 text-right">
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Save()" ng-show="hide_Save"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true">Save</span> </button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Complete()" ng-show="hide_Complete"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true">Complete</span> </button>
                    @*<button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Complete()" ng-show="hide_Issue"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true">Issue</span> </button>*@
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Approve()" ng-show="hide_Approve"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true">Approve</span> </button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="UndoApprove()" ng-show="hide_UndoApprove"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true">UndoApprove</span> </button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Close()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"> Close</span> </button>
                </div>
            </fieldset>
        </div>
    </div>
    <script type="text/ng-template" id="Twisting.html">
        <div class="modal-header">
            <h4 class="modal-title" id="modal-title">Lot No :</h4>
        </div>
        <div class="modal-body form-horizontal regionExportUP ms-custom-control" id="modal-body">
            <div class="row">
                <div class="col-md-12 ">
                    <div class="col-md-3 text-right"><label class="control-label">Order Product:</label></div>
                    <div class="col-md-7 text-left">
                        <input ng-model="TwistingDetail.OrderProduct" class="form-control" disabled>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 ">
                    <div class="col-md-3 text-right"><label class="control-label">Store:</label></div>
                    <div class="col-md-7 text-left">
                        <input type="text" class="form-control" ng-model="TwistingDetail.BUID_issueName" disabled>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 ">
                    <div class="col-md-3 text-right"><label class="control-label">Product:</label></div>
                    <div class="col-md-7 text-left">
                        <div class="form-inline">
                            <input class="form-control" ng-model="txtProductName" placeholder="Type Name & Press Enter" ng-disabled="disabled" ng-keydown="SearchKeyDownProduct($event)" style="width:80%;" required />
                            <button type="button" class="btn btn-default btn-sm" aria-label="right Align" ng-click="PickProduct()" ng-disabled="disabled"><span aria-hidden="true"> Pick </span></button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 ">
                    <div class="col-md-3 text-right"><label class="control-label">LotNo:</label></div>
                    <div class="col-md-7 text-left">
                        <div class="form-inline">
                            <input class="form-control" ng-model="txtLotNo" placeholder="Type Lot No & Press Enter" ng-disabled="disabled" ng-keydown="SearchKeyDownLot($event)" style="width:80%;" required />
                            <button type="button" class="btn btn-default btn-sm" aria-label="right Align" ng-click="PickLot()" ng-disabled="disabled"><span aria-hidden="true"> Pick </span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-success btn-sm" aria-label="Left Align" ng-click="UpdateLot()" ng-disabled="disabled" ng-hide="hide"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span> OK</button>
            <button type="button" class="btn-danger btn-sm" aria-label="Left Align" ng-click="cancel()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Cancel</button>
        </div>
    </script>
</div>

<style type="text/css">
   
    /*.ui-grid-panel {
        background: linear-gradient(to bottom,#EFF5FF 0,#E0ECFF 100%);
        height:35px;
    }*/
    .regionTwisting .form-horizontal .control-label {
        padding-top: 3px;
    }

    .regionTwisting .form-control {
        height: 24px;
        padding: 0px 6px;
        font-size: 12px;
        border-radius:0px;
    }
    .regionTwisting .btn .input-group-addon{
        height: 24px;
        padding: 0px 6px;
        font-size: 12px;
        border-radius:0px;
    }

    .regionTwisting .col-md-12 {
        width: 100%;
        padding-right: 0px;
        padding-left: 2px;
        margin-bottom: 5px;
    }

     .regionTwisting .col-md-1 {
        width: 7.5%;
        padding-right: 0px;
        padding-left: 2px;
    }

    .regionTwisting .col-md-2 {
        width: 16.6%;
        padding-right: 0px;
        padding-left: 2px;
    }

    .regionTwisting .col-md-3 {
        width: 25%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionTwisting .col-md-4 {
        width: 33%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionTwisting .col-md-5 {
        width: 37%;
        padding-right: 5px;
        padding-left: 0px;
    }

    .regionTwisting .col-md-6 {
        width: 40.7%;
        padding-right: 0px;
        padding-left: 2px;
    }

    .regionTwisting .col-md-10 {
        width: 83%;
        padding-right: 5px;
        padding-left: 5px;
    }
    
    .regionTwisting .col-md-11 {
        width: 89%;
        padding-right: 0px;
        padding-left: 2px;
    }

    .regionTwisting .col-md-8 {
        width: 69%;
        padding-right: 5px;
        padding-left: 5px;
    }

    .regionTwisting .btn-sm {
        padding: 3px 10px;
    }

    .regionTwisting .input-group-addon {
        padding: 4px 8px;
    }
     .regionTwisting .ui-grid-header-cell-primary-focus {
        line-height: 1;
    }
</style>

<script type="text/javascript">

    _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    var oTwisting =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    var oRequisitionTypes =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.RequisitionTypes));
    var oIssueStores =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.IssueStores));
    var oReceiveStores =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.ReceivedStores));
    var oTwistingOrderTypes =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.TwistingOrderTypes));

    $('.date-container').datepicker({
        format: "dd M yyyy",
        calendarWeeks: true,
        autoclose: true,
        todayHighlight: true
    });

    var TwistingModule = angular.module('TwistingAPP', ['ngAnimate', 'ui.bootstrap', 'ui.grid', 'ui.grid.selection', 'ui.grid.edit','ui.grid.resizeColumns','ui.grid.cellNav','ms.service']);
    TwistingModule.controller('TwistingCtrl', function ($scope, $http, $uibModal, $log, uiGridConstants, msModal,icsMethod, userSession,msGridControl) {
        debugger;
        var viewType = sessionStorage.getItem("Operation");


        //if (viewType == 'View') //Default
        $scope.disabled=$scope.hide=$scope.hide_Complete=$scope.hide_Issue=false;
        $scope.hide_Approve=$scope.hide_UndoApprove=$scope.hide_Save=false;

        $scope.viewType=viewType;
        $scope.IsCompleteWorkingUnitShow =true;
        if (viewType == 'Approve')
        {
            $scope.disabled= $scope.hide_Approve=$scope.hide=true;
            $scope.hide_Complete=$scope.hide_Issue=$scope.hide_UndoApprove=$scope.hide_Save=false;
        }
        if(viewType == 'UndoApprove')
        {
            $scope.disabled= true;
            $scope.hide=true;
            $scope.hide_Complete=false;
            $scope.hide_Issue=false;
            $scope.hide_UndoApprove=true;
            $scope.hide_Approve=false;
            $scope.hide_Save=false;
        }
        else  if (viewType == 'Complete')
        {
            $scope.disabled= true;
            $scope.hide=true;
            $scope.hide_Complete=true;
            $scope.hide_Issue=false;
            $scope.hide_Approve=false;
            $scope.hide_UndoApprove=false;
            $scope.hide_Save=false;
            $scope.IsCompleteWorkingUnitShow =false;
        }else  if (viewType == 'Issue')
        {
            $scope.disabled= true;
            $scope.hide=true;
            $scope.hide_Issue=true;
            $scope.hide_Complete=false;
            $scope.hide_UndoApprove=false;
            $scope.hide_Approve=false;
            $scope.hide_Save=false;
        }
        else if (viewType == 'Edit' || viewType == 'New')
        {
            $scope.disabled= $scope.hide=$scope.hide_Request=$scope.hide_UndoApprove=$scope.hide_Approve=false;
            $scope.hide_Save=true;
        }
        else if (viewType == 'View')
        {
            $scope.disabled= true;
            $scope.hide=true;
            $scope.hide_Request=false;
            $scope.hide_UndoApprove=false;
            $scope.hide_Approve=false;
            $scope.hide_Save=false;
        }
        if(oTwisting.TwistingOrderType==1)//Open Order
        {
            $scope.IsDetailsShow =true;    
            $scope.IsTxtProductOpenShow =false;
            $scope.IsBtnProductOpenShow =false;
        }
        else
        {
            $scope.IsDetailsShow =false;    
            $scope.IsTxtProductOpenShow =true;
            $scope.IsBtnProductOpenShow =true;
        }
        $scope.BuyerID=0;
        $scope.IssueStores=oIssueStores;
        $scope.ReceiveStores=oReceiveStores;
        $scope.TwistingOrderTypes=oTwistingOrderTypes;
        $scope.RequisitionTypes=oRequisitionTypes;
        $scope.Twisting=oTwisting;
        $scope.Twisting.TwistingDetails_Twisting=oTwisting.TwistingDetails_Twisting;
        $scope.Twisting.TwistingDetails_Product=oTwisting.TwistingDetails_Product;
        //$scope.TwistingDetails=oTwisting.TwistingDetails_Twisting;

        $scope.txtBuyer=oTwisting.ContractorName;
        $scope.txtOrderNo=oTwisting.DyeingOrderNo;

        $scope.BusinessUnitID=sessionStorage.getItem('BUID');
        //$scope.TwistingDetail.BUID=sessionStorage.getItem('BUID');        

        $scope.OrderTypeChange = function()
        {
            debugger;
            if($scope.Twisting.TwistingOrderType==1)//Open Order
            {
                $scope.IsDetailsShow =true;    
                $scope.IsTxtProductOpenShow =false;
                $scope.IsBtnProductOpenShow =false;
                //$scope.gridOptionsTwistingDetail.columnDefs[2].visible = false;
            }
            else
            {
                $scope.IsDetailsShow =false;    
                $scope.IsTxtProductOpenShow =true;
                $scope.IsBtnProductOpenShow =true;
                //$scope.gridOptionsTwistingDetail.columnDefs[2].visible = true;
            }
            $scope.gridOptionsTwistingDetail.data=[];
            
        };
       
        $scope.Validation = function()
        {
            debugger;
            if($scope.Twisting.TwistingDetails_Twisting.length<=0)
            {
                alert("Please Add Details And Try Again.");
                return false;
            }

            if (viewType == 'Complete')
            {
               
                if($scope.Twisting.TwistingDetails_Product.length<=0)
                {
                    alert("Please Pick A Product And Try Again.");
                    return false;
                }
            }
            if($scope.Twisting.TwistingOrderType != 1){
                for(var i=0; i<$scope.Twisting.TwistingDetails_Twisting.length; i++){
                    if($scope.Twisting.TwistingDetails_Twisting[i].YetQty < $scope.Twisting.TwistingDetails_Twisting[i].Qty)
                    {
                        alert("Qty Can not be greater than Yet Qty for Code:" + $scope.Twisting.TwistingDetails_Twisting[i].ProductCode);
                        return false;
                    }
                }
            }
            return true;
        }
        $scope.Save = function () {
            if(!$scope.Validation()) return;
            var oTW=[];
            oTW= $scope.Twisting;
            oTW.ReceiveDate = new Date($scope.Twisting.ReceiveDateSt);
            oTW.TwistingDetails=[];
            for(var i=0;i<$scope.gridOptionsTwistingDetail.data.length; i++)
            {
                oTW.TwistingDetails.push($scope.gridOptionsTwistingDetail.data[i]);
            }
            for(var i=0;i<$scope.Twisting.TwistingDetails_Product.length; i++)
            {
                oTW.TwistingDetails.push($scope.Twisting.TwistingDetails_Product[i]);
            }
            console.log(oTW); //return;
            $http.post(_sBaseAddress+'/Twisting/Save',JSON.stringify(oTW)).then(
                function (response) {
                    
                    debugger;
                    var result=jQuery.parseJSON(response.data);
                    console.log(result);
                    if(result.ErrorMessage=="" || result.ErrorMessage==null)
                    {
                        alert("Data Saved Successfully!!");
                        //$scope.Twisting=result;
                        userSession.setData('Twistings',result);
                        userSession.previousPage();
                    }
                    else
                    {
                        alert(result.ErrorMessage);
                    }
                },
                function (response) {debugger; alert(response.Message);}
        );
        };

        $scope.Approve = function () {

            if(!$scope.Validation())
                return;
            var oTwisting= $scope.Twisting;
            oTwisting.IssueDate = new Date($scope.Twisting.IssueDateST);
            oTwisting.ReqDate = new Date($scope.Twisting.ReqDateST);
            oTwisting.ImportLCDate = new Date($scope.Twisting.ImportLCDateST);

            debugger;
            $http.post(_sBaseAddress+'/Twisting/Approve',JSON.stringify(oTwisting)).then(
                function (response) {
                    var result=jQuery.parseJSON(response.data);
                    if(result.TwistingID>0)
                    {
                        debugger;
                        $scope.Twisting=result;
                        userSession.setData('Twistings',$scope.Twisting);
                        userSession.previousPage();
                    }
                    else
                    {
                        alert(result.ErrorMessage);
                    }
                },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
        );
        };
        $scope.UndoApprove = function () {

            if(!$scope.Validation())
                return;
            var oTwisting= $scope.Twisting;
            oTwisting.IssueDate = new Date($scope.Twisting.IssueDateST);
            oTwisting.ReqDate = new Date($scope.Twisting.ReqDateST);
            oTwisting.ImportLCDate = new Date($scope.Twisting.ImportLCDateST);

            debugger;
            $http.post(_sBaseAddress+'/Twisting/UndoApprove',JSON.stringify(oTwisting)).then(
                function (response) {
                    var result=jQuery.parseJSON(response.data);
                    if(result.TwistingID>0)
                    {
                        debugger;
                        $scope.Twisting=result;
                        userSession.setData('Twistings',$scope.Twisting);
                        userSession.previousPage();
                    }
                    else
                    {
                        alert(result.ErrorMessage);
                    }
                },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
        );
        };
        $scope.Complete= function ()
        {
            debugger;
            if(!$scope.Validation())
                return;
            var oTwisting= $scope.Twisting;
            oTwisting.IssueDate = new Date($scope.Twisting.IssueDateST);
            oTwisting.ReqDate = new Date($scope.Twisting.ReqDateST);
            oTwisting.ImportLCDate = new Date($scope.Twisting.ImportLCDateST);

            debugger;
            $http.post(_sBaseAddress+'/Twisting/RecivedTwisting',JSON.stringify(oTwisting)).then(
                function (response) {
                    var result=jQuery.parseJSON(response.data);
                    if(result.TwistingID>0)
                    {
                        debugger;
                        $scope.Twisting=result;
                        userSession.setData('Twistings',$scope.Twisting);
                        //sessionStorage.setItem('Twisting',$scope.Twisting);
                        userSession.previousPage();
                        // msModal.Message({headerTitle : '', bodyText:'Save Successfully.', sucessText : 'Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                    }
                    else
                    {
                        alert(result.ErrorMessage);
                    }
                },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
        );
        };
        $scope.Complete = function () {
            debugger;
            if($scope.Twisting.CompleteWorkingUnitID<=0)
            {
                alert("Please Select Complete Store!"); return;
            }
            if(!$scope.Validation())
                return;
            var oTwisting= $scope.Twisting;
            $http.post(_sBaseAddress+'/Twisting/Complete',JSON.stringify(oTwisting)).then(
                function (response) {
                    var result=jQuery.parseJSON(response.data);
                    if(result.TwistingID>0)
                    {
                        debugger;
                        $scope.Twisting=result;
                        userSession.setData('Twistings',$scope.Twisting);
                        //sessionStorage.setItem('Twisting',$scope.Twisting);
                        userSession.previousPage();
                        // msModal.Message({headerTitle : '', bodyText:'Save Successfully.', sucessText : 'Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                    }
                    else
                    {
                        alert(result.ErrorMessage);
                    }
                },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
        );
        };

        $scope.GetDetails= function ()
        {
            debugger;
            //alert($scope.Twisting.ImportLCID);

            if($scope.Twisting.DyeingOrderID<=0)
            {
                alert("Please Pick An Order!"); return;
            }
            var oDyeingOrder= {
                DyeingOrderID:$scope.Twisting.DyeingOrderID
            };

            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/Twisting/GetsDyeingOrderDetails',$.param(oDyeingOrder), config).then(
                        function (response)
                        {
                            var result=jQuery.parseJSON(response.data);
                            debugger;
                            //$scope.gridOptionsTwistingDetail.data=[];
                            if(result.length>0)
                            {
                                for(var i=0; i<result.length; i++)
                                {
                                    if(!icsMethod.ICS_IsExist( $scope.Twisting.TwistingDetails_Twisting,'DyeingOrderDetailID', result[i].DyeingOrderDetailID))
                                    {
                                        for(var k=0;k<$scope.Twisting.TwistingDetails.length;k++){
                                            if($scope.Twisting.TwistingDetails[k].InOutTypeInt == 102 && $scope.Twisting.TwistingDetails[k].DyeingOrderDetailID == result[i].DyeingOrderDetailID){
                                                var nYetQty = $scope.Twisting.TwistingDetails[k].YetQty; //+ result[i].YetQty +  ;
                                                break;
                                            }
                                        }
                                        var oTD={
                                            TwistingDetailID:0,
                                            TwistingID:$scope.Twisting.TwistingID,
                                            DyeingOrderDetailID:result[i].DyeingOrderDetailID,
                                            Qty: (nYetQty == undefined) ? result[i].YetQty : nYetQty,//result[i].YetQty,
                                            Qty_Order:result[i].Qty,
                                            UnitPrice: result[i].UnitPrice,
                                            Note: '',
                                            LotID: 0,
                                            MUnitID:result[i].MUnitID,
                                            MUnit:result[i].MUnit,
                                            LotNo:'',
                                            InOutType:102,
                                            ProductID:result[i].ProductID,
                                            ProductName:result[i].ProductName,
                                            ProductCode:result[i].ProductName,
                                            BagCount:0.0,
                                            ColorName: result[i].ColorName,
                                            YetQty: (nYetQty == undefined) ? result[i].YetQty : nYetQty,//result[i].YetQty
                                        };
                                        $scope.gridOptionsTwistingDetail.data.push(oTD);
                                        $scope.Twisting.TwistingDetails_Twisting=$scope.gridOptionsTwistingDetail.data;
                                    }
                                }
                            }else {alert("No Data Found!!");}
                        },
                            function (response) {debugger; alert(response.statusText);}
                    );
        };

        $scope.PickProductOpen= function ()
        {
            var oPorduct= {
                ProductName:($scope.txtProductOpen == undefined ? "" : $scope.txtProductOpen),
                BUID:sessionStorage.getItem('BUID')
            };
            debugger;
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/Twisting/GetProducts',$.param(oPorduct), config).then(
                        function (response)
                        {
                            var oDetailColumns = [];
                            var   oColumn = { field: 'ProductCode', name:'Code', width:'30%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'ProductName', name:'Porduct', width:'30%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'ProductCategoryName', name:'Category', width:'30%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            var results=jQuery.parseJSON(response.data);
                            var modalObj={
                                size:'md',
                                modalcontroller:'',
                                appcontroller:'',
                                objs:results,
                                multiSelect:true,
                                pickertitle:'Porduct List',
                                searchingbyfieldName:'ProductName',
                                columns:oDetailColumns
                            }
                            var modalInstance=msModal.Instance(modalObj);
                            modalInstance.result.then(function (result)
                            {
                                //$scope.gridOptionsTwistingDetail.data=[];
                                if(result.length>0)
                                {
                                    for(var i=0; i<result.length; i++)
                                    {
                                        if(!icsMethod.ICS_IsExist( $scope.Twisting.TwistingDetails_Twisting,'ProductID', result[i].ProductID))
                                        {
                                            var oTD={
                                                TwistingDetailID:0,
                                                TwistingID:$scope.Twisting.TwistingID,
                                                DyeingOrderDetailID:0,
                                                Qty: 0,
                                                Qty_Order:0,
                                                UnitPrice: 0,
                                                Note: '',
                                                LotID: 0,
                                                MUnitID:result[i].MeasurementUnitID,
                                                MUnit:result[i].MUnit,
                                                LotNo:'',
                                                InOutType:102,
                                                ProductID:result[i].ProductID,
                                                ProductName:result[i].ProductName,
                                                ProductCode:result[i].ProductCode,
                                                BagCount:0.0, 
                                            };
                                            $scope.gridOptionsTwistingDetail.data.push(oTD);
                                            $scope.Twisting.TwistingDetails_Twisting=$scope.gridOptionsTwistingDetail.data;
                                        }
                                    }
                                }else {alert("No Data Found!!");}
                                
                            }, function () {
                                $log.info('Modal dismissed at: ' + new Date());
                            });
                        },
                            function (response) { alert(jQuery.parseJSON(response.data).Message);}
                    );
        };
        $scope.SearchKeyProductOpen = function (e){
            debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {
                var txtPorduct = $.trim($scope.txtProductOpen);
                if(txtPorduct=="" || txtPorduct==null)
                {
                    alert("Type Product Name and Press Enter");
                    return;
                }

                $scope.PickProductOpen();
            }else if (code == 8) //backspace=8
            {
                //debugger;
                $scope.txtPorductOpen='';
            }
        };

        
        function GetLotNo()
        {
            var sLotNo ="";
            var data =  $scope.gridOptionsTwistingDetail.data;
            for(var i=0; i<data.length;i++)
                sLotNo += data[i].LotNo+'+';
            return sLotNo.substring(0, sLotNo.length - 1);
        }

        $scope.PickProduct= function ()
        {
            var oPorduct= {
                ProductName:($scope.txtProduct == undefined ? "" : $scope.txtProduct),
                BUID:sessionStorage.getItem('BUID')
            };
            debugger;
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/Twisting/GetProducts',$.param(oPorduct), config).then(
                        function (response)
                        {
                            var oDetailColumns = [];
                            var   oColumn = { field: 'ProductCode', name:'Code', width:'30%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'ProductName', name:'Porduct', width:'30%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'ProductCategoryName', name:'Category', width:'30%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            var results=jQuery.parseJSON(response.data);
                            var modalObj={
                                size:'md',
                                modalcontroller:'',
                                appcontroller:'',
                                objs:results,
                                multiSelect:false,
                                pickertitle:'Porduct List',
                                searchingbyfieldName:'ProductName',
                                columns:oDetailColumns
                            }
                            var modalInstance=msModal.Instance(modalObj);
                            modalInstance.result.then(function (result)
                            {
                                if(result.ProductID>0)
                                {
                                    $scope.gridOptionsTwistingProduct.data=[];
                                    var oTD={
                                        TwistingDetailID:0,
                                        TwistingID:$scope.Twisting.TwistingID,
                                        DyeingOrderDetailID:0,
                                        Qty: 0,
                                        UnitPrice: 0,
                                        Note: '',
                                        LotID: 0,
                                        MUnitID: 0,
                                        MUnit:result.MUnit,
                                        LotNo:GetLotNo(),
                                        InOutType:101,
                                        ProductID:result.ProductID,
                                        ProductName:result.ProductName,
                                        ProductCode:result.ProductName,
                                        BagCount:0.0,
                                    };
                                    $scope.Twisting.ProductID_TW=result.ProductID;
                                   
                                    $scope.gridOptionsTwistingProduct.data.push(oTD);
                                    $scope.Twisting.TwistingDetails_Product=$scope.gridOptionsTwistingProduct.data;
                                }
                                else
                                {
                                    var oTD={
                                        
                                    };
                                }
                            }, function () {
                                $log.info('Modal dismissed at: ' + new Date());
                            });
                        },
                            function (response) { alert(jQuery.parseJSON(response.data).Message);}
                    );
        };
        $scope.SearchKeyProduct = function (e){
            debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {
                var txtPorduct = $.trim($scope.txtProduct);
                if(txtPorduct=="" || txtPorduct==null)
                {
                    alert("Type Product Name and Press Enter");
                    return;
                }

                $scope.PickProduct();
            }else if (code == 8) //backspace=8
            {
                //debugger;
                $scope.txtPorductNo='';
            }
        };

        $scope.PickOrder= function ()
        {
            if($scope.Twisting.TwistingOrderType == 1){
                alert("You can not pick Order No for Open Twisting!!"); return;
            }
            var oDyeingOrder= {
                ObjectID:$scope.Twisting.TwistingID,
                OrderNo:($scope.txtOrderNo == undefined ? "" : $scope.txtOrderNo),
                DyeingOrderType: ($scope.Twisting.TwistingOrderType == 2) ? 10 : 11, //Twisting:10
                ContractorID:$scope.BuyerID
            };

            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/Twisting/GetsDyeingOrder',$.param(oDyeingOrder), config).then(
                        function (response)
                        {
                            var oDetailColumns = [];
                            var oColumn = { field: 'OrderNoFull', name:'Order No', width:'20%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'ContractorName', name:'Buyer', width:'20%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'MKTPName', name:'Recevied By', width:'20%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn ={ field: 'Qty', name:'Qty', width:'12%',cellClass: 'text-left',enableCellEdit:false };oDetailColumns.push(oColumn);

                            var results=jQuery.parseJSON(response.data);

                            if(results.length<=0)
                            {
                                alert("No Order Found!!"); return;
                            }

                            var modalObj={
                                size:'lg',
                                modalcontroller:'',
                                appcontroller:'',
                                objs:results,
                                multiSelect:false,
                                pickertitle:'Order List',
                                searchingbyfieldName:'OrderNoFull',
                                columns:oDetailColumns
                            }
                            var modalInstance=msModal.Instance(modalObj);
                            //var oTwistingDetails =  $scope.gridOptionsTwistingDetail.data;
                            modalInstance.result.then(function (result)
                            {
                                debugger;
                                //var result=jQuery.parseJSON(result);
                                if(result.DyeingOrderID>0)
                                {
                                    $scope.Twisting.DyeingOrderID=result.DyeingOrderID;
                                    $scope.Twisting.OrderNo=result.OrderNoFull;
                                    $scope.Twisting.IsInHouse=result.IsInHouse;
                                    $scope.Twisting.ContractorName=result.ContractorName;
                                    $scope.txtBuyer=result.ContractorName;
                                    $scope.txtOrderNo=result.OrderNoFull;
                                }
                            }, function () {
                                $log.info('Modal dismissed at: ' + new Date());
                            });
                        },
                            function (response) { alert(jQuery.parseJSON(response.data).Message);}
                    );
        };
        $scope.SearchKeyDownOrder = function (e){
            //debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {
                var txtOrder = $.trim($scope.txtOrderNo);
                if(txtOrder=="" || txtOrder==null)
                {
                    alert("Type Invoice No and Press Enter");
                    return;
                }

                $scope.PickOrder();
            }else if (code == 8) //backspace=8
            {
                //debugger;
                //$scope.txtOrderNo='';
                $scope.Twisting.DyeingOrderID=0;
                $scope.Twisting.OrderNo='';
                $scope.Twisting.TwistingDetails_Twisting=[];
                $scope.gridOptionsTwistingDetail.data=[];
                $scope.gridOptionsTwistingProduct.data=[];
                $scope.Twisting.TwistingDetails_Product=[];
            }
        };
        $scope.RemoveOrder= function ()
        {
            debugger;
            var oDetail = $scope.gridDetailApi.selection.getSelectedRows()[0];
            //var data=$scope.gridApi.selection.getSelectedRows();
            if(oDetail==null)
            {
                alert("Select At least One item !");
                return;
            }
            var SelectedRowIndex=$scope.gridOptionsTwistingDetail.data.indexOf(oDetail);
            if (!confirm("Confirm to Remove?")) return ;
            $scope.gridOptionsTwistingDetail.data.splice(SelectedRowIndex,1);
        }
        $scope.RemoveProduct= function ()
        {
            debugger;
            var oDetail = $scope.gridProductApi.selection.getSelectedRows()[0];
            //var data=$scope.gridApi.selection.getSelectedRows();
            if(oDetail==null)
            {
                alert("Select At least One item !");
                return;
            }
            var SelectedRowIndex=$scope.gridOptionsTwistingProduct.data.indexOf(oDetail);
            if (!confirm("Confirm to Remove?")) return ;
            $scope.gridOptionsTwistingProduct.data.splice(SelectedRowIndex,1);
        }

        $scope.PickBuyer= function ()
        {
            var oContractor = {
                Params: '2' + '~' + $.trim($scope.txtBuyer)+'~'+$scope.BusinessUnitID
            };
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress+'/Contractor/ContractorSearchByNameType',$.param(oContractor), config).then(
                                function (response)
                                {
                                    var oColumns = [];
                                    var oColumn = { field: 'ContractorID', name: 'Code',width: '20%'  };oColumns.push(oColumn);
                                    oColumn = { field: 'Name', name: 'Applicant Name',width: '50%', enableSorting: false  };oColumns.push(oColumn);
                                    oColumn = { field: 'Address', name: 'Address',width: '30%', enableSorting: false  };oColumns.push(oColumn);
                                    //var results=jQuery.parseJSON(response.data);
                                    var results=response.data;
                                    if(results.length<=0)
                                    {
                                        alert("No Data Found!!"); return;
                                    }else if(results[0].ContractorID==0)
                                    {
                                        alert(results[0].ErrorMessage);return;
                                    }

                                    var modalObj={
                                        size:'md',
                                        modalcontroller:'ModalCommonListCtrl',
                                        appcontroller:'SalesQuotationController',
                                        objs:results,
                                        multiSelect:false,
                                        pickertitle:'Buyer List',
                                        searchingbyfieldName:'Name',
                                        columns:oColumns
                                    }
                                    var modalInstance=msModal.Instance(modalObj);
                                    modalInstance.result.then(function (result)
                                    {
                                        if(result.ContractorID>0)
                                        {
                                            $scope.stlBuyer= {
                                                "color" : "blue",
                                                "font-size" : "12px"
                                            };
                                            $scope.BuyerID=result.ContractorID;
                                            $scope.txtBuyer=result.Name;
                                        }

                                    }, function () {
                                        $log.info('Modal dismissed at: ' + new Date());
                                    });
                                },
                                    function (response) { alert(jQuery.parseJSON(response.data).Message);}
                            );
        };
        $scope.SearchKeyDownBuyer = function (e){
            //debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13) 
            {
                if($scope.BusinessUnitID==0 || $scope.BusinessUnitID==null)
                {
                    alert("Please Select Business Unit!");
                    return;
                }
                $scope.PickBuyer();
            }else if (code == 8) //backspace=8
            {
                //debugger;
                $scope.BuyerID=0;
            }
        };

        $scope.Modal = function (objSQ, operation) {
            debugger;
            var modalInstance = $uibModal.open({
                ariaLabelledBy: 'modal-title',
                ariaDescribedBy: 'modal-body',
                size: 'md',
                templateUrl: 'Twisting.html',
                controller: 'ModalInstanceCtrl',
                controllerAs: 'TwistingCtrl',
                resolve: {
                    obj: function () {
                        return { TwistingDetail:objSQ, Operation: operation  };
                    }
                }
            });

            modalInstance.result.then(function (result) {
                debugger;
                if(result.ProductID>0)
                {
                    debugger;
                    var index=sessionStorage.getItem('SelectedLotIndex');
                    $scope.gridOptionsTwistingDetail.data[index]=result;
                    $scope.gridDetailApi.selection.selectRow($scope.gridOptionsTwistingDetail.data[index]);
                    //$scope.RowSelect(oTwistings[userSession.getRowIndex()]);
                }
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };
        //$scope.OrderQty=0.0;
        $scope.OpenLotModal = function()
        {
            debugger;
            var oTwisting = $scope.gridDetailApi.selection.getSelectedRows()[0];
            //if($scope.Twisting.WorkingUnitID_Issue<=0)
            //{
            //    alert("Select Issue Store!!");
            //    return;
            //}

            //$scope.cboIssueStoreChange();

            debugger;

            angular.forEach($scope.gridOptionsTwistingDetail.data,function(value,index){
                if(value.ProductID==oTwisting.ProductID)
                {
                    sessionStorage.setItem("SelectedLotIndex", index);
                }
            },$scope.gridOptionsTwistingDetail.data);

            oTwisting.BUID=$scope.BusinessUnitID;
            oTwisting.DyeingOrderID=$scope.Twisting.DyeingOrderID;
            oTwisting.WorkingUnitID=$scope.Twisting.WorkingUnitID;
            oTwisting.IsInHouse=$scope.Twisting.IsInHouse;
            oTwisting.TwistingOrderType=$scope.Twisting.TwistingOrderType;
            $scope.Modal( oTwisting, 'Edit');
        }

        $scope.MakeTwistingDetail= function()
        {
            debugger;
            var oDetailColumns = [];
            var oColumn = { field: 'ProductCode', name:'Code', width:'12%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn = { field: 'ProductName', name:'Commodity', width:'15%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn = { field: 'ColorName', name:'Color', width:'10%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn = { field: 'LotNo', name:'Lot No', width:'12%',cellClass: 'text-right', enableCellEdit:false,
                cellTemplate:'<div>' +'<span> {{row.entity.LotNo}} </span><button style="align:right" ng-click="grid.appScope.OpenLotModal()">Pick</button>' +'</div>'};oDetailColumns.push(oColumn);
            oColumn ={ field: 'MUnit', name:'Unit', width:'6%',cellClass: 'text-left',enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn ={ field: 'Qty_Order', name:'Order Qty', width:'8%',cellClass: 'text-right',aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn ={ field: 'YetQty', name:'Yet Qty', width:'8%',cellClass: 'text-right',aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right',enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn ={ field: 'Qty', name:'Qty', width:'7%',cellClass: 'text-right', cellFilter:'number:2', enableCellEdit:true };oDetailColumns.push(oColumn);
            oColumn ={ field: 'UnitPrice', name:'Unit Price', width:'7%',cellClass: 'text-right', cellFilter:'number:2', enableCellEdit:true };oDetailColumns.push(oColumn);
            oColumn ={ field: 'Note', name:'Remarks', width:'14%',cellClass: 'text-left',enableCellEdit:true };oDetailColumns.push(oColumn);

            $scope.gridOptionsTwistingDetail = {
                enableRowSelection: true,
                enableRowHeaderSelection: false,
                multiSelect: false,
                enableColumnResizing: true,
                showColumnFooter: false,
                rowHeight: 25 ,
                columnFooterHeight:25,
                enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,
                cellEditableCondition: function($scope)
                {
                    if (viewType == 'Edit' || viewType == 'New')
                    {
                        if($scope.row.entity.Qty<0 ||$scope.row.entity.Qty==undefined)
                            return false;
                        else
                        {
                            if($scope.row.entity.OrderQty==undefined)
                                $scope.row.entity.OrderQty=$scope.row.entity.Qty;
                            return true;
                        }
                    }else
                        return false;
                },
                columnDefs:oDetailColumns,
                data:  $scope.Twisting.TwistingDetails_Twisting,
                onRegisterApi: function (gridApi)
                {
                    $scope.gridDetailApi = gridApi;
                    debugger;                    
                    gridApi.edit.on.afterCellEdit($scope,
                     function (rowEntity, colDef, newValue, oldValue)
                     {
                         debugger;
                         //if($scope.Twisting.TwistingOrderType != 1){
                         //    if(rowEntity.Qty > rowEntity.OrderQty)
                         //    {
                         //        rowEntity.Qty=rowEntity.OrderQty;
                         //        alert("Requ. Qty Can Not Be Greater Than Order Qty!!");
                         //    }
                         //    //$scope.gridOptionsTwistingDetail.columnDefs[2].visible = true;
                         //}

                         //if(rowEntity.Qty<=0 )
                         //{
                         //    rowEntity.Qty=rowEntity.OrderQty;
                         //    alert("Requ. Qty Can Not Be Equal Or Less Then Zero!!");
                         //}
                         return rowEntity;
                     });
                }
            };

            //var oTwistingDetails=$scope.Twisting.TwistingDetails;
            // $scope.gridOptionsTwistingDetail.data=[];
            // $scope.gridOptionsTwistingDetail.data= $scope.Twisting.TwistingDetails;
        }
        $scope.MakeTwistingDetail();


        $scope.MakeTwistingProduct= function()
        {
            debugger;
            var oDetailColumns = [];
            var oColumn = { field: 'ProductCode', name:'Code', width:'14%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn = { field: 'ProductName', name:'Commodity', width:'15%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
            //oColumn = { field: 'ColorName', name:'Color', width:'15%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn = { field: 'LotNo', name:'Lot No', width:'20%',cellClass: 'text-left', enableCellEdit:true };oDetailColumns.push(oColumn);
            //oColumn = { field: 'LotNo', name:'Lot No', width:'25%',cellClass: 'text-right', enableCellEdit:true,
            //    cellTemplate:'<div>' +'<span> {{row.entity.LotNo}} </span></div>'};oDetailColumns.push(oColumn);
            oColumn ={ field: 'MUnit', name:'Unit', width:'6%',cellClass: 'text-left',enableCellEdit:false };oDetailColumns.push(oColumn);
            oColumn ={ field: 'Qty', name:'Qty', width:'8%',cellClass: 'text-right', cellFilter:'number:2', enableCellEdit:true };oDetailColumns.push(oColumn);
            oColumn ={ field: 'Note', name:'Remarks', width:'14%',cellClass: 'text-left',enableCellEdit:true };oDetailColumns.push(oColumn);

            $scope.gridOptionsTwistingProduct = {
                enableRowSelection: true,
                enableRowHeaderSelection: false,
                multiSelect: false,
                rowHeight: 25 ,
                columnFooterHeight:25,
                enableColumnResizing: true,
                showColumnFooter: false,
                enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,
                //cellEditableCondition: function($scope)
                //{
                //    if (viewType == 'Edit' || viewType == 'New')
                //    {
                //        //if($scope.row.entity.Qty<0 ||$scope.row.entity.Qty==undefined)
                //        //    return false;
                //        //else
                //        //{
                //        //    if($scope.row.entity.OrderQty==undefined)
                //        //        $scope.row.entity.OrderQty=$scope.row.entity.Qty;
                //        //    return true;
                //        //}
                //        return true;

                //    }else
                //        return false;
                //},
                columnDefs:oDetailColumns,
                data:  $scope.Twisting.TwistingDetails_Product,
                onRegisterApi: function (gridApi)
                {
                    $scope.gridProductApi = gridApi;

                    gridApi.edit.on.afterCellEdit($scope,
                     function (rowEntity, colDef, newValue, oldValue)
                     {
                         debugger;
                         //if(rowEntity.Qty > rowEntity.OrderQty)
                         //{
                         //    rowEntity.Qty=rowEntity.OrderQty;
                         //    alert("Requ. Qty Can Not Be Greater Than Order Qty!!");
                         //}
                         //else if(rowEntity.Qty<=0 )
                         //{
                         //    rowEntity.Qty=rowEntity.OrderQty;
                         //    alert("Requ. Qty Can Not Be Equal Or Less Then Zero!!");
                         //}
                         return rowEntity;
                     });
                }
            };

            //var oTwistingDetails=$scope.Twisting.TwistingDetails;
            // $scope.gridOptionsTwistingDetail.data=[];
            // $scope.gridOptionsTwistingDetail.data= $scope.Twisting.TwistingDetails;
        }
        $scope.MakeTwistingProduct();
        
        $scope.Close = function () {
            userSession.previousPage();
        };
    });

    TwistingModule.controller('ModalInstanceCtrl', function ($scope, $http, $uibModalInstance, uiGridConstants, msModal, obj) {
        debugger;
        var viewType = sessionStorage.getItem("Operation");
        $scope.disabled= true;
        if (viewType == 'Edit' || viewType == 'New')
        {
            $scope.disabled= false;
        }

        $scope.Operation=obj.Operation;
        $scope.TwistingDetail=obj.TwistingDetail;
        if(obj.TwistingDetail.ProductID==null || obj.TwistingDetail.ProductID<=0)
        {
            $scope.TwistingDetail={
                TwistingID : 0,
                BUID:sessionStorage.getItem('BUID'),
                Name : "",
                Activity : true
            }
        }
        else
        {
            $scope.TwistingDetail = obj.TwistingDetail;
            $scope.TwistingDetail.OrderProduct=obj.TwistingDetail.ProductName;
            $scope.txtProductName=obj.TwistingDetail.ProductName;

            if(obj.TwistingDetail.LotNo!="")
                $scope.txtLotNo=obj.TwistingDetail.LotNo;//+" [BL"+obj.TwistingDetail.LotQty+"]";
            $scope.TwistingDetail.LotProductID=obj.TwistingDetail.ProductID;

            if(obj.TwistingDetail.LotID>0)
            {
                $scope.txtProductName=obj.TwistingDetail.LotProductName;
            }
            //$scope.TwistingDetail.LotNo="";
            //$scope.TwistingDetail.LotID=0;
        }

        $scope.PickLot= function ()
        {
            $scope.TwistingDetail.LotID=0;
            $scope.TwistingDetail.LotNo="";

            if($scope.TwistingDetail.LotProductID<=0)
            {
                alert("Please Pick a Product And Try Again"); return;
            }
            debugger;
            var sParam="NotInHouse";
            if($scope.TwistingDetail.IsInHouse==1) sParam="IsInHouse";

            var oDyeingPorduct= {
                Params:sParam,
                ProductID:$scope.TwistingDetail.LotProductID,
                DyeingOrderID:$scope.TwistingDetail.DyeingOrderID,
                BUID:$scope.TwistingDetail.BUID,
                LotNo:($scope.txtLotNo == undefined ? "" : $scope.txtLotNo),
                WorkingUnitID:$scope.TwistingDetail.WorkingUnitID,
                OrderType: $scope.TwistingDetail.TwistingOrderType
            };
            $scope.txtLotNo ="";
            debugger;
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/Twisting/GetsLotByHouse',$.param(oDyeingPorduct), config).then(
                        function (response)
                        {
                            debugger;
                            var oDetailColumns = [];
                            var oColumn = { field: 'LotNo', name:'Lot No', width:'20%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn ={ field: 'Balance', name:'Qty', width:'20%',cellClass: 'text-left',enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn ={ field: 'ReportUnitSymbol', name:'Unit', width:'15%',cellClass: 'text-left',enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'LocationName', name:'Location', width:'20%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'OperationUnitName', name:'Operation Unit', width:'20%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);

                            var results=jQuery.parseJSON(response.data);
                            if(results.length<=0)
                            {
                                alert("No Data Found!!"); return;
                            }
                            if(results[0].ErrorMessage != '')
                            {
                                alert(results[0].ErrorMessage); return;
                            }

                            var modalObj={
                                size:'lg',
                                modalcontroller:'',
                                appcontroller:'',
                                objs:results,
                                multiSelect:false,
                                pickertitle:'Porduct List',
                                searchingbyfieldName:'LotNo',
                                columns:oDetailColumns
                            }
                            var modalInstance=msModal.Instance(modalObj);
                            modalInstance.result.then(function (result)
                            {
                                if(result.LotID>0)
                                {
                                    $scope.TwistingDetail.LotID=result.LotID;
                                    $scope.TwistingDetail.LotNo=result.LotNo;
                                    $scope.txtLotNo=result.LotNo+" [BL-"+result.Balance+"]";
                                }
                                else
                                {
                                    $scope.TwistingDetail.LotID=0;
                                    $scope.TwistingDetail.LotNo="";
                                    $scope.txtLotNo="";
                                }
                            }, function () {
                                $log.info('Modal dismissed at: ' + new Date());
                            });
                        },
                            function (response) { alert(jQuery.parseJSON(response.data).Message);}
                    );
        };
        $scope.SearchKeyDownLot = function (e){
            //debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {
                var txtLotNo = $.trim($scope.txtLotNo);
                if(txtLotNo=="" || txtLotNo==null)
                {
                    alert("Type Lot No and Press Enter");
                    return;
                }
                $scope.PickLot();
            }else if (code == 8) //backspace=8
            {
                //debugger;
                $scope.txtPorductNo='';
            }
        };
        $scope.PickProduct= function ()
        {
            debugger;
            $scope.TwistingDetail.LotProductID="";
            $scope.TwistingDetail.LotProductName="";
            $scope.TwistingDetail.LotID=0;
            $scope.TwistingDetail.LotNo="";
            $scope.txtLotNo="";
            if($scope.TwistingDetail.BUID==undefined || $scope.TwistingDetail.BUID<=0)
            {
                alert("Invalid BusinessUnit!!");
            }
            var oPorduct= {
                ProductName:($scope.txtProductName == undefined ? "" : $scope.txtProductName),
                BUID:$scope.TwistingDetail.BUID
            };
            debugger;
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/Twisting/GetProducts',$.param(oPorduct), config).then(
                        function (response)
                        {
                            var oDetailColumns = [];
                            var   oColumn = { field: 'ProductCode', name:'Code', width:'30%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'ProductName', name:'Porduct', width:'30%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            oColumn = { field: 'ProductCategoryName', name:'Category', width:'30%',cellClass: 'text-left', enableCellEdit:false };oDetailColumns.push(oColumn);
                            var results=jQuery.parseJSON(response.data);
                            var modalObj={
                                size:'md',
                                modalcontroller:'',
                                appcontroller:'',
                                objs:results,
                                multiSelect:false,
                                pickertitle:'Porduct List',
                                searchingbyfieldName:'ProductName',
                                columns:oDetailColumns
                            }
                            var modalInstance=msModal.Instance(modalObj);
                            modalInstance.result.then(function (result)
                            {
                                if(result.ProductID>0)
                                {
                                    $scope.TwistingDetail.LotProductID=result.ProductID;
                                    $scope.TwistingDetail.LotProductName=result.ProductName;
                                    $scope.txtProductName=result.ProductName;
                                }
                                else
                                {
                                    $scope.TwistingDetail.ProductID=0;
                                    $scope.TwistingDetail.ProductName="";
                                    $scope.TwistingDetail.MUnit="";
                                    $scope.txtProductName="";
                                }
                            }, function () {
                                $log.info('Modal dismissed at: ' + new Date());
                            });
                        },
                            function (response) { alert(jQuery.parseJSON(response.data).Message);}
                    );
        };
        $scope.SearchKeyDownProduct = function (e){
            //debugger;
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 13)
            {
                var txtPorduct = $.trim($scope.txtProductName);
                if(txtPorduct=="" || txtPorduct==null)
                {
                    alert("Type Product Name and Press Enter");
                    return;
                }

                $scope.PickProduct();
            }else if (code == 8) //backspace=8
            {
                //debugger;
                $scope.txtPorductNo='';
            }
        };


        $scope.Validation=function()
        {
            if($scope.TwistingDetail.Name == "" || $scope.TwistingDetail.Name == undefined){
                msModal.Message({headerTitle : '', bodyText:'Enter DyeingType Name.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }

            return  true;
        };

        $scope.UpdateLot= function ()
        {
            var oTwistingDetail= $scope.TwistingDetail;
            $uibModalInstance.close(jQuery.parseJSON(oTwistingDetail));
        };

        $scope.cancel= function () {
            $uibModalInstance.close();
        };



    });

</script>


