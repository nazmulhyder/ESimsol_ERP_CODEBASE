@model ESimSol.BusinessObjects.AccountOpenning
@{
    ViewBag.Title = "AccountOpenning  Creation";
}
<div style="font-family:Tahoma; margin-left: 0px; height: 100%; width:100%">
    <div id="p" class="easyui-panel" title="AccountOpenning  Creation" data-options="tools:'#toolbar'" fit="true" style="width:100%;padding:1px">
        <div style="width:100%">
            <table border="0" cellpadding="2" cellspacing="2" width="100%">
                <tr>
                    <td style="width:11%; font-size:12px;text-align: right;">
                        Account Head:
                    </td>
                    <td style="width:30%; font-size:12px;">
                        <input type="text" id="txtAccountHead" style="width: 100%;" placeholder="Enter Account head and Press Enter" />
                    </td>
                    <td style="width:10%; font-size:12px;">
                        Openning Balance:
                    </td>
                    <td style="width:20%; font-size:12px;">
                        <input type="text" id="txtOpenningBalance" style="width: 100%;text-align: center;" disabled />
                    </td>
                    <td style="width:10%; font-size:12px; text-align:right">
                        Openning Date:
                    </td>
                    <td style="width:20%; font-size:12px;">
                        <input id="txtDate" type="text" class="easyui-datebox" required="required" data-options="formatter:icsdateformat,parser:icsdateparser" style="width:100%;" />
                    </td>
                </tr>
                <tr>
                    <td style="width:30%; font-size:12px;" colspan="4">
                        New Openning Balance:
                        <select id="cboNewOpenningBalanceType" style="width: 7%;margin-left: 5px;">
                            <option value="1">Dr</option>
                            <option value="0">Cr</option>
                        </select>
                        @Html.DropDownListFor(m => m.CurrencyID, Model.LstCurrency.Select(x => new SelectListItem() { Text = x.Symbol, Value = x.CurrencyID.ToString() }), new { id = "cboCurrency", style = "width: 50px;", @class = "Currency_change" })
                        <input type="text" id="txtNewOpenningBalance" style="width: 15%;text-align: right;" />
                        <input type="text" id="txtNewOpenningBalanceCRate" style="width: 7%;text-align: right;" />
                        <input type="text" id="txtAmountInBDT" style="width: 15%;text-align: right;" />
                    </td>
                    <td style="width:10%; font-size:12px; text-align:right">
                        Business Unit:
                    </td>
                    <td style="width:20%; font-size:12px;">
                        @Html.DropDownListFor(m => m.BusinessUnitID, Model.BusinessUnits.Select(x => new SelectListItem() { Text = x.Name, Value = x.BusinessUnitID.ToString() }), new { id = "cboBusinessUnit", style = "width: 100%;", @class = "BusinessUnit_change" })
                    </td>                    
                </tr>

            </table>
        </div>
        <hr>
        <div style="width:100%">
            <table border="0" cellpadding="0" cellspacing="0" width="100%">
                <tr>
                    <td style="width:3%; text-align:left">Del</td>
                    <td style="width:10%; text-align:left">Ref Type</td>
                    <td style="width:7%; text-align:left">Dr/Cr</td>
                    <td style="width:40%; text-align:left">Particulars</td>
                    <td style="width:20%; text-align:right">Amount In Currency</td>
                    <td style="width:10%; text-align:right">Debit<span class="lblBaseCurrency"></span></td>
                    <td style="width:10%; text-align:right">Credit<span class="lblBaseCurrency"></span></td>
                </tr>
            </table>
        </div>
        <hr>
        <div id="divVoucherDetails" style="height:340px; width:100%; overflow:auto">
            <table id="tblRefDetail" border="0" cellpadding="0" cellspacing="0"></table>
        </div>
        <div style="width:100%">
            <table border="0" cellpadding="0" cellspacing="0" width="100%">
                <tr>
                    <td style="width:80%; text-align:right; font-size:12px; font-weight:bold"></td>
                    <td colspan="2" style="width:20%; text-align:right; font-size:12px; font-weight:bold"><hr /></td>
                </tr>
                <tr>
                    <td style="width:80%; text-align:left; font-size:10px; font-weight:bold"></td>
                    <td style="width:10%; text-align:right; font-size:11px; font-weight:bold"><span class="lblBaseCurrency" style="margin-right:2px;"></span><label id="lblTotalDebitAmount">0.00</label></td>
                    <td style="width:10%; text-align:right; font-size:11px; font-weight:bold"><span class="lblBaseCurrency" style="margin-right:2px;"></span><label id="lblTotalCreditAmount"> 0.00</label>&nbsp;&nbsp;</td>
                </tr>
                <tr>
                    <td style="width:80%; text-align:right; font-size:12px; font-weight:bold"></td>
                    <td colspan="2" style="width:20%; text-align:right; font-size:12px; font-weight:bold"><hr /><hr /></td>
                </tr>
                <tr>
                    <td colspan="3" style="width:100%;font-size:12px; font-weight:bold; text-align:center"></td>
                </tr>
                <tr style="height:40px">
                    <td colspan="3" style="width:100%; text-align:right; font-size:12px; font-weight:bold">
                        <a id="btnSave" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="false">Save</a>
                        <a id="btnExportToExcel" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-print" plain="false">Export To Excel</a>
                        <a id="btnClose" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-closed" plain="false">Close</a>
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div id="toolbar">        
    </div>
    <div id="winAccountHead" class="easyui-window" title="Account Head" data-options="modal:true,closed:true,collapsible:false,minimizable:false,maximizable:false,closable:false" style="width:400px;height:300px;padding:1px">
        <div style="margin-left:0px; height:198px">
            <input type="text" id="txtSearchByAccountHeadName" style="width:374px" />
            <table id="tblAccountHead" title="" class="easyui-datagrid" style="width:380px;height:195px" fitcolumns="false" rownumbers="true" pagination="false" singleselect="true" autorowheight="false">
                <thead>
                    <tr>
                        <th field="AccountCode" width="100">Account Code</th>
                        <th field="AccountHeadName" width="230">Account Head Name </th>
                    </tr>
                </thead>
            </table>
            <table border="0" cellpadding="1" cellspacing="1">
                <tr style="height:35px;vertical-align:middle;">
                    <td style="width:256px"></td>
                    <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-ok" plain="true" id="btnOkAccountHead">Ok</a> </td>
                    <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-closed" plain="true" id="btnCloseAccountHead">Close</a> </td>
                </tr>
            </table>
        </div>
    </div>
    <div id="winCostCenterName" class="easyui-window" title="Cost Center Name" data-options="modal:true,closed:true,collapsible:false,minimizable:false,maximizable:false,closable:false" style="width:490px;height:280px;padding:1px">
        <div style="margin-left:0px; height:198px">
            <input type="text" id="txtSearchByCostCenterName" style="width:464px;" />
            <table id="tblCostCenterName" title="" class="easyui-datagrid" style="width:470px;height:180px" fitcolumns="false" rownumbers="true" pagination="false" singleselect="true" autorowheight="false">
                <thead>
                    <tr>
                        <th field="Name" width="250">Cost Center Name</th>
                        <th field="CategoryName" width="150">Category</th>
                    </tr>
                </thead>
            </table>
            <table border="0" cellpadding="1" cellspacing="1">
                <tr style="height:35px;vertical-align:middle;">
                    <td style="width:348px"></td>
                    <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-ok" plain="true" id="btnOkCostCenterName">Ok</a> </td>
                    <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-closed" plain="true" id="btnCostCenterName">Close</a> </td>
                </tr>
            </table>
        </div>
    </div>
    <div id="winProduct" class="easyui-window" title="Product Name" data-options="modal:true,closed:true,collapsible:false,minimizable:false,maximizable:false,closable:false" style="width:470px;height:310px;padding:1px">
        <div style="margin-left:0px; height:198px">
            <input type="text" id="txtSearchByProductName" style="width:444px;" />
            <table id="tblProduct" title="" class="easyui-datagrid" style="width:450px;height:195px" fitcolumns="false" rownumbers="true" pagination="false" singleselect="true" autorowheight="false">
                <thead>
                    <tr>
                        <th field="ProductCode" width="100"> Code </th>
                        <th field="ProductName" width="200"> Product Name </th>
                        <th field="ProductCategoryName" width="100"> Category Name </th>
                    </tr>
                </thead>
            </table>
            <table border="0" cellpadding="1" cellspacing="1">
                <tr style="height:35px;vertical-align:middle;">
                    <td style="width:314px"></td>
                    <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-ok" plain="true" id="btnOkProduct">Ok</a> </td>
                    <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-closed" plain="true" id="btnCloseProduct">Close</a> </td>
                </tr>
            </table>
        </div>
    </div>
    <div id="winWorkingUnit" class="easyui-window" title="Working Unit" data-options="modal:true,closed:true,collapsible:false,minimizable:false,maximizable:false,closable:false" style="width:400px;height:300px;padding:1px">
        <div style="margin-left:0px; height:198px">
            <input type="text" id="txtSearchByWorkingUnit" style="width:374px" />
            <table id="tblWorkingUnit" title="" class="easyui-datagrid" style="width:380px;height:195px" fitcolumns="false" rownumbers="true" pagination="false" singleselect="true" autorowheight="false">
                <thead>
                    <tr>
                        <th field="OperationUnitName" width="150">Operation Unit Name </th>
                        <th field="LocationName" width="100">Location Name </th>
                    </tr>
                </thead>
            </table>
            <table border="0" cellpadding="1" cellspacing="1">
                <tr style="height:35px;vertical-align:middle;">
                    <td style="width:316px"></td>
                    <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-ok" plain="true" id="btnOkWorkingUnit">Ok</a> </td>
                    <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-closed" plain="true" id="btnCloseWorkingUnit">Close</a> </td>
                </tr>
            </table>
        </div>
    </div>
    <div id="winMUnit" class="easyui-window" title="Measurement Unit" data-options="modal:true,closed:true,collapsible:false,minimizable:false,maximizable:false,closable:false" style="width:400px;height:300px;padding:1px">
        <div style="margin-left:0px; height:198px">
            <input type="text" id="txtSearchByMUnit" style="width:374px" />
            <table id="tblMUnit" title="" class="easyui-datagrid" style="width:380px;height:195px" fitcolumns="false" rownumbers="true" pagination="false" singleselect="true" autorowheight="false">
                <thead>
                    <tr>
                        <th field="UnitName" width="100">Unit Name </th>
                        <th field="Symbol" width="100">Symbol </th>
                    </tr>
                </thead>
            </table>
            <table border="0" cellpadding="1" cellspacing="1">
                <tr style="height:35px;vertical-align:middle;">
                    <td style="width:316px"></td>
                    <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-ok" plain="true" id="btnOkMUnit">Ok</a> </td>
                    <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-closed" plain="true" id="btnCloseMUnit">Close</a> </td>
                </tr>
            </table>
        </div>
    </div>


    <div id="winBillNo" class="easyui-window" title="Bill" data-options="modal:true,closed:true,collapsible:false,minimizable:false,maximizable:false,closable:false" style="width:770px;height:300px;padding:1px">
        <div style="margin-left:0px; height:198px">
            <input type="text" id="txtSearchByBillNo" style="width:745px" />
            <table id="tblBillNo" title="" class="easyui-datagrid" style="width:750px;height:195px" fitcolumns="false" rownumbers="true" pagination="false" singleselect="true" autorowheight="false">
                <thead>
                    <tr>
                        <th field="BillNo" width="280" align="left">Bill No</th>
                        <th field="BillDateInString" width="90" align="center">Bill Date</th>
                        <th field="DueDateInString" width="90" align="center">Due Date</th>
                        <th field="CurrencyAmountWithSymbol" width="120" align="right">Amount</th>

                    </tr>
                </thead>
            </table>
            <table border="0" cellpadding="1" cellspacing="1">
                <tr style="height:35px;vertical-align:middle;">
                    <td style="width:316px"><input type="button" id="btnCreateNewBill" value="Create New Bill (+)" onclick="CreateNewBill();" /></td>
                    <td style="width:316px"><input type="button" id="btnEditVoucherBill" value="Edit Bill" onclick="EditVoucherBill();" /></td>
                    <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-ok" plain="true" id="btnOkBillNo">Ok</a> </td>
                    <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-closed" plain="true" id="btnCloseBillNo">Close</a> </td>
                </tr>
            </table>
        </div>
    </div>

    <div id="winVoucherBill" class="easyui-window" title="Voucher Bill" style="width:540px;height:435px;padding:2px;" data-options="modal:true,closed:true,collapsible:false,minimizable:false,maximizable:false,closable:false">
        <div>
            <fieldset>
                <legend style="font-weight:bold"> Voucher Bill Info : </legend>
                <table border="0" cellspacing="2" cellpadding="2" style="font-size:11px; font-weight:bold">
                    <tr>
                        <td style="width:170px; text-align:right">
                            Business Unit :
                        </td>
                        <td style="width:370px">
                            <input type="text" style="width: 370px;" id="txtVBBusinessUnit" />
                        </td>
                    </tr>
                    <tr>
                        <td style="width:170px; text-align:right">
                            Account Head :
                        </td>
                        <td style="width:370px">
                            <input type="text" style="width: 370px;" id="txtVBAccountHead" />
                        </td>
                    </tr>
                    <tr>
                        <td style="width:170px; text-align:right">
                            Sub Ledger :
                        </td>
                        <td style="width:370px">
                            <input type="text" style="width: 370px;" id="txtVBSubLedger" />
                        </td>
                    </tr>
                    <tr>
                        <td style="width:170px; text-align:right">
                            Bill No :
                        </td>
                        <td style="width:370px">
                            <input type="text" style="width: 370px;" id="txtVBBillNo" />
                        </td>
                    </tr>
                    <tr>
                        <td style="width:170px; text-align:right">
                            Bill Date :
                        </td>
                        <td style="width:370px">
                            <table border="0" cellpadding="0" cellspacing="0" style="font-size: 12px">
                                <tr>
                                    <td style="width: 140px; font-size: 12px; text-align: left">
                                        <input id="txtVBBillDate" type="text" style="width: 140px;" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser" />
                                    </td>
                                    <td style="width: 110px; text-align:right; font-size: 12px">
                                        Credit Days :
                                    </td>
                                    <td style="width: 120px; text-align:right; font-size: 12px">
                                        <input id="txtVBCreditDays" style="width:118px" />
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <td style="width:170px; text-align:right">
                            Maturity Date :
                        </td>
                        <td style="width:370px">
                            <table border="0" cellpadding="0" cellspacing="0" style="font-size: 12px">
                                <tr>
                                    <td style="width: 140px; font-size: 12px; text-align: left">
                                        <input id="txtVBMaturityDate" type="text" style="width: 140px;" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser" />
                                    </td>
                                    <td style="width: 110px; text-align:right; font-size: 12px">
                                        Currency :
                                    </td>
                                    <td style="width: 120px; text-align:right; font-size: 12px">
                                        <select id="cboVBCurrency" style="width:123px"></select>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <td style="width:170px; text-align:right">
                            Currency Amount :
                        </td>
                        <td style="width:370px">
                            <table border="0" cellpadding="0" cellspacing="0" style="font-size: 12px">
                                <tr>
                                    <td style="width: 140px; font-size: 12px; text-align: left">
                                        <input id="txtVBCurrencyAmount" style="width:134px" />
                                    </td>
                                    <td style="width: 110px; text-align:right; font-size: 12px">
                                        C Rate :
                                    </td>
                                    <td style="width: 120px; text-align:right; font-size: 12px">
                                        <input id="txtVBCRate" style="width:118px" />
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <td style="width:170px; text-align:right">
                            Amount In BDT :
                        </td>
                        <td style="width:370px">
                            <input type="text" style="width: 368px;" id="txtVBAmountInBDT" />
                        </td>
                    </tr>
                    <tr>
                        <td style="width:170px; text-align:right">
                            Opening Date :
                        </td>
                        <td style="width:370px">
                            <table border="0" cellpadding="0" cellspacing="0" style="font-size: 12px">
                                <tr>
                                    <td style="width: 140px; font-size: 12px; text-align: left">
                                        <input id="txtVBOpeningDate" type="text" style="width: 140px;" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser" />
                                    </td>
                                    <td style="width: 110px; text-align:right; font-size: 12px">
                                        Open Amount:
                                    </td>
                                    <td style="width: 120px; text-align:right; font-size: 12px">
                                        <input id="txtVBPeningAmount" style="width:118px" />
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <td style="width:170px; text-align:right">
                            Remarks :
                        </td>
                        <td style="width:370px">
                            <input type="text" style="width:368px;" id="txtVBRemarks" />
                        </td>
                    </tr>
                </table>
            </fieldset>
        </div>
        <fieldset style="width:498px; vertical-align:top;">
            <legend style="font-weight:bold"> Action : </legend>
            <table border="0" cellspacing="2" cellpadding="2" style="font-size:11px; font-weight:bold;">
                <tr>
                    <td style="width:100px;text-align:right"></td>
                    <td style="width:408px;text-align:right;">
                        <a id="btnVBSave" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="true">Save</a>
                        <a id="btnVBClose" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="true">Close</a>
                    </td>
                </tr>
            </table>
        </fieldset>
    </div>

    <div id="winCurrency" class="easyui-window" title="Currency" data-options="modal:true,closed:true,collapsible:false,minimizable:false,maximizable:false,closable:false" style="width:400px;height:260px;padding:1px">
        <div style="margin-left:0px; height:160px">
            <fieldset>
                <legend style="font-weight: bold">Currency : </legend>
                <table id="tblCurrency" style="font-family:Tahoma;font-size:12px;">
                    <thead>
                        <tr>
                            <td>
                                <label style="margin-right: 14px;margin-left: 13px;">Currency Symbol :</label>
                                <input type="text" id="txtCurrencySymbol" style="width: 190px;" />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label style="margin-right: 15px;margin-left: 59px;">Amount :</label>
                                <input type="text" id="txtCurrencyAmount" style="width: 190px;" />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label style="margin: 15px;">Conversion Rate :</label>
                                <input type="text" id="txtConversionRate" style="width: 190px;" />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label style="margin: 17px;">Amount in BDT :</label>
                                <input type="text" id="txtBaseCurrencyAmount" style="width: 190px;" />
                            </td>
                        </tr>
                    </thead>
                </table>
            </fieldset>
            <fieldset>
                <legend style="font-weight: bold">Action : </legend>
                <table border="0" cellpadding="1" cellspacing="1">
                    <tr style="height:35px;vertical-align:middle;">
                        <td style="width:256px"></td>
                        <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-ok" plain="true" id="btnOkCurrency">Ok</a> </td>
                        <td style="width:60px; text-align:center"><a href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-closed" plain="true" id="btnCloseCurrency">Close</a> </td>
                    </tr>
                </table>
            </fieldset>
        </div>
    </div>
</div>


<style type="text/css">
    .highlight {
        background-color: #CFB53B !important;
        color: white !important;
    }

    .textboxstyle {
        background-color: black !important;
        color: white !important;
        border: none !important;
        font-weight: bold !important;
    }

    .textboxstyle2 {
        background-color: #CFB53B !important;
        color: white !important;
        border: none !important;
    }

    .debitcreditclass {
        border: none !important;
    }

    .accountclass {
        border: none !important;
    }

    .narrationclass {
        border: none !important;
    }

    .currencyclass {
        border: none !important;
    }

    .debitclass {
        border: none !important;
        text-align: right !important;
    }

    .creditclass {
        border: none !important;
        text-align: right !important;
    }

    .reftypeclass {
        border: none !important;
    }

    .tableclass tr td {
        background-color: white !important;
    }

    .tableclass tr:hover td {
        background-color: #CFB53B !important;
        color: white !important;
    }

    .nameclass, .cfomatclass, .cAmountclass {
        border: none !important;
    }

    .ccamountclass {
        border: none !important;
        text-align: right !important;
    }

    .nameclass, .irWorkingUnitClass, .irMeasurementUnitClass {
        border: none !important;
    }

    .irQtyClass, .irUnitPriceClass {
        border: none !important;
        text-align: right !important;
    }

    .irAmountClass {
        border: none !important;
        text-align: right !important;
    }

    .btTrTypeClass, .nameclass, .btBillDateClass {
        border: none !important;
    }

    .btAmountClass {
        border: none !important;
        text-align: right !important;
    }
</style>

<script type="text/javascript">    
    var _oAccountOpenning=null;
    var _nInputBoxIndex=-1;
    var _sInputBoxClass='';
    var _oAccountHeads = [];
    var _oProducts=[];
    var _oWorkingUnits=[];
    var _oMeasurementUnits=[];
    var _oVoucherBills=[];
    var _oLstCurrencys = [];

    var _nComponentID = 0;
    var _nAccountHeadID = 0;    
    var _IsCostCenterApply = false;
    var _IsBillRefApply = false;
    var _IsInventoryApply = false;

    $(document).ready(function () {        
        _oAccountOpenning =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
        _oLstCurrencys = _oAccountOpenning.LstCurrency;
        
        $('#cboCurrency').data('Currencys', _oAccountOpenning.LstCurrency);
        $('#cboBusinessUnit').data('BusinessUnits', _oAccountOpenning.BusinessUnits);

        $(".lblBaseCurrency").html("("+_oAccountOpenning.BaseCurrencySymbol+")");
        TextFieldsSettings();
        $('#Mainlayout').layout('collapse', 'west');

        $('#txtVBCreditDays').icsCurrencyBox(null, null, 0);
        $('#txtVBCurrencyAmount').icsCurrencyBox(null, null, 2);
        $('#txtVBCRate').icsCurrencyBox(null, null, 2);
        $('#txtVBAmountInBDT').icsCurrencyBox(null, null, 2);
        $('#txtVBPeningAmount').icsCurrencyBox(null, null, 2); 
    });
    
    $(document).on('keydown', function(event) {
        if (event.keyCode == 9) {   //tab
            event.preventDefault(); // stops tab's default action
        }
    });

    $('.Currency_change').change(function (){
        var currencyVal = $("#cboCurrency").val();
        if(parseInt(currencyVal) == 1)
        {
            $("#txtNewOpenningBalanceCRate").val(1);
            $("#txtNewOpenningBalanceCRate").prop("disabled",true);
        }
        else
        {
            $("#txtNewOpenningBalanceCRate").val(0);
            $("#txtNewOpenningBalanceCRate").prop("disabled",false);
        }


       
        ChangeDrCrAmountWithCurrency();

        
        var txtNewOpenningBalance = icsRemoveComma($("#txtNewOpenningBalance").val(), 2);
        var txtNewOpenningBalanceCRate = $("#txtNewOpenningBalanceCRate").val();
        CurrencyInBDT(txtNewOpenningBalance,txtNewOpenningBalanceCRate);
    });

    $('.BusinessUnit_change').change(function (){        
        var nBusinessUnitID = parseInt($('#cboBusinessUnit').val());
        window.location.href = sessionStorage.getItem('BaseAddress') +'/AccountOpenning/SetOpeningBalance?buid='+nBusinessUnitID+"&menuid="+sessionStorage.getItem('MenuID');
    });

    $("#btnOkCurrency").click(function(){
        var ntxtCurrencySymbol = $("#txtCurrencySymbol").val();
        var ntxtCurrencyAmount = $("#txtCurrencyAmount").val();
        var ntxtConversionRate = $("#txtConversionRate").val();
        var ntxtAmountInBDT = $("#txtBaseCurrencyAmount ").val();
        var nCurrencyId = 0;
        var checkCurrency =  CheckAndGetCurrency(ntxtCurrencySymbol);
        checkCurrency = checkCurrency.split(",");
        if(checkCurrency[0] == "Invalid Currency")
        {
            if(ntxtCurrencySymbol == "")
            {
                alert("Please Give Currency Symbol");
            }
            else
            {
                alert(checkCurrency[0]);
            }
            $('#txtCurrencySymbol').focus();
            $('#txtCurrencySymbol').select();
            return false;
        }
        else
        {
            nCurrencyId = checkCurrency[1];
            if(parseInt(_oAccountOpenning.BaseCurrencyId) != parseInt(nCurrencyId))
            {
                if(parseFloat(parseFloat(ntxtCurrencyAmount).toFixed(2)) == 0)
                {
                    alert("Please Give Currency Amount");
                    $('#txtCurrencyAmount').focus();
                    $('#txtCurrencyAmount').select();
                    return false;
                }
                else if(parseFloat(parseFloat(ntxtConversionRate).toFixed(2)) == 0)
                {
                    alert("Please Give Currency Rate");
                    $('#txtConversionRate').focus();
                    $('#txtConversionRate').select();
                    return false;
                }
                else if(parseFloat(parseFloat(ntxtAmountInBDT).toFixed(2)) == 0)
                {
                    alert("Please Give Base Currency Amount");
                    $('#txtBaseCurrencyAmount').focus();
                    $('#txtBaseCurrencyAmount').select();
                    return false;
                }
            }
        }

        var nIndex = $("#tblRefDetail").data('selectedIndex');
        var txtCurrency = $('#tblRefDetail tr').eq(nIndex).find('.cfomatclass');
        ntxtCurrencyAmount = parseFloat(ntxtCurrencyAmount).toFixed(2);
        ntxtConversionRate = parseFloat(ntxtConversionRate).toFixed(2);
        var makeString = "";
        if(_oAccountOpenning.BaseCurrencySymbol == ntxtCurrencySymbol.toUpperCase())
        {
            makeString = ntxtCurrencySymbol.toUpperCase() + " " +parseFloat(ntxtCurrencyAmount).toFixed(2);
            ntxtConversionRate = 1;
        }
        else
        {
            makeString = ntxtCurrencySymbol.toUpperCase() + parseFloat(ntxtCurrencyAmount).toFixed(2) + "@@" + parseFloat(ntxtConversionRate).toFixed(2);
        }
        txtCurrency.text(makeString);
        $("#tblRefDetail").data('rows')[nIndex].CFormat = makeString;

        var amount = parseFloat(ntxtAmountInBDT).toFixed(2);

        var txtDebitCredit = null;
        if($("#tblRefDetail").data('rows')[nIndex].DR_CR == "Debit")
        {
            $("#tblRefDetail").data('rows')[nIndex].DrAmount=parseFloat(amount);
            $("#tblRefDetail").data('rows')[nIndex].CrAmount=parseFloat(0.00);
            txtDebitCredit= $('#tblRefDetail tr').eq(nIndex).find('.debitclass');
            txtDebitCredit.val(formatPrice(amount,null));
        }
        else
        {
            $("#tblRefDetail").data('rows')[nIndex].DrAmount=parseFloat(0.00);
            $("#tblRefDetail").data('rows')[nIndex].CrAmount=parseFloat(amount);
            txtDebitCredit= $('#tblRefDetail tr').eq(nIndex).find('.creditclass');
            txtDebitCredit.val(formatPrice(amount,null));
        }
        ntxtCurrencyAmount = parseFloat(ntxtCurrencyAmount).toFixed(2);
        $("#tblRefDetail").data('rows')[nIndex].Amount=parseFloat(amount);
        $("#tblRefDetail").data('rows')[nIndex].CFormat = makeString;
        $("#tblRefDetail").data('rows')[nIndex].CID  = parseFloat(nCurrencyId);
        $("#tblRefDetail").data('rows')[nIndex].CAmount = parseFloat(ntxtCurrencyAmount);
        $("#tblRefDetail").data('rows')[nIndex].CRate = parseFloat(ntxtConversionRate);
        $("#tblRefDetail").data('rows')[nIndex].CSymbol = ntxtCurrencySymbol;
        $('#winCurrency').window('close');
        SetOpenningAccountBalance();
        //GetTotalAmount(sAHOBTStr);
        IdentifyConfiguration(nIndex,txtDebitCredit[0]);
    });

    function RefreshObject()
    {
        var cboNewOpenningBalanceType =document.getElementById("cboNewOpenningBalanceType");
        var nDebitCredit = cboNewOpenningBalanceType.options[cboNewOpenningBalanceType.selectedIndex].value;
        var txtNewOpenningBalance = $("#txtNewOpenningBalance").val();
        var txtNewOpenningBalanceCRate = $("#txtNewOpenningBalanceCRate").val();
        var txtAmountInBDT = $("#txtAmountInBDT").val();
        var txtOpenningBalance  = $("#txtOpenningBalance").val();

        var oAHOBs = $("#tblRefDetail").data('rows');
        if(oAHOBs!=null && oAHOBs.length>0)
        {
            for(var i=0; i<oAHOBs.length; i++)
            {
                oAHOBs[i].CID = parseInt($("#cboCurrency").val());
                oAHOBs[i].CRate = parseFloat(RemoveComma(txtNewOpenningBalanceCRate));
            }
        }

        var oAccountOpenning =  {
            AccountHeadID : _nAccountHeadID,
            AccountingSessionID: parseInt(_oAccountOpenning.AccountingSessionID),
            BusinessUnitID : parseInt($('#cboBusinessUnit').val()),
            OpenningDate : $('#txtDate').datebox('getValue'),
            IsDebit : Boolean(parseInt(nDebitCredit)),   // 0 = Credit and  1 = Debit
            CurrencyID : parseInt($("#cboCurrency").val()),
            AmountInCurrency:parseFloat(RemoveComma(txtNewOpenningBalance)),
            ConversionRate : parseFloat(RemoveComma(txtNewOpenningBalanceCRate)),
            OpenningBalance : parseFloat(RemoveComma(txtAmountInBDT)),
            AHOBs : oAHOBs
        };
        return oAccountOpenning ;
    }

    function ValidateInput()
    {
        var result = "";
        var accountHeadAmount = $("#txtAmountInBDT").val();
        var countRows = $("#tblRefDetail tr").length;
        if(_nAccountHeadID == 0)
        {
            result = "WrongInput" + "," + "Please Select an Account Head.";
        }
        //if(result == "")
        //{
        //    if(parseFloat(RemoveComma(accountHeadAmount)).toFixed(2) == 0)
        //    {
        //        result = "WrongInput" + "," + "Please Give Amount.";
        //    }
        //}

        //Check Amounts Equal or Not
        if(result == "")
        {
            var totalDebitCC = 0;
            var totalCreditCC = 0;

            var totalDebitBT = 0;
            var totalCreditBT = 0;

            var totalDebitIR = 0;
            var totalCreditIR = 0;


            for(var i=0;i<countRows;i++)
            {
                var refType = $("#tblRefDetail").data('rows')[i].AHOBTStr;
                var drAmount = $("#tblRefDetail").data('rows')[i].DrAmount;
                var crAmount = $("#tblRefDetail").data('rows')[i].CrAmount;

                if(refType == "Subledger")
                {
                    totalDebitCC = parseFloat(totalDebitCC) + parseFloat(drAmount);
                    totalCreditCC = parseFloat(totalCreditCC) + parseFloat(crAmount);
                }
                else if(refType == "Bill")
                {
                    totalDebitBT = parseFloat(totalDebitBT) + parseFloat(drAmount);
                    totalCreditBT = parseFloat(totalCreditBT) + parseFloat(crAmount);
                }
                else if(refType == "Inventory")
                {
                    totalDebitIR = parseFloat(totalDebitIR) + parseFloat(drAmount);
                    totalCreditIR = parseFloat(totalCreditIR) + parseFloat(crAmount);
                }
            }

            var naccountHeadAmount = parseFloat(RemoveComma(accountHeadAmount));
            naccountHeadAmount = parseFloat(naccountHeadAmount.toFixed(2));

            var ReferenceList = CheckReference();
            if(ReferenceList!=null)
            {
                for(var i=0;i<ReferenceList.length;i++)
                {
                    //Khan
                    if(ReferenceList[i] == "Subledger")
                    {
                        if(_nComponentID == 2 || _nComponentID == 6)
                        {
                            var checkAmount = parseFloat(totalDebitCC) - parseFloat(totalCreditCC);
                            if(checkAmount < 0)
                            {
                                checkAmount = checkAmount * (-1);
                            }
                            var nGapAmount = naccountHeadAmount- parseFloat(checkAmount.toFixed(2));
                            nGapAmount = parseFloat(nGapAmount.toFixed(2));
                            if(nGapAmount<0)
                            {
                                nGapAmount=nGapAmount*(-1);
                            }
                            if(nGapAmount>0.01)
                            {
                                result = "WrongInput" + "," + "Total Subledger Amount is "+parseFloat(checkAmount.toFixed(2))+" but total Acc Head amount is " + parseFloat(naccountHeadAmount.toFixed(2));
                            }
                        }
                        else if(_nComponentID == 1 || _nComponentID == 3 ||_nComponentID == 4 ||_nComponentID == 5)
                        {
                            var checkAmount = parseFloat(totalCreditCC) - parseFloat(totalDebitCC);
                            if(checkAmount < 0)
                            {
                                checkAmount = checkAmount * (-1);
                            }
                            var nGapAmount = naccountHeadAmount- parseFloat(checkAmount.toFixed(2));
                            nGapAmount = parseFloat(nGapAmount.toFixed(2));
                            if(nGapAmount<0)
                            {
                                nGapAmount=nGapAmount*(-1);
                            }
                            if(nGapAmount>0.01)
                            {
                                result = "WrongInput" + "," + "Total Subledger Amount is "+parseFloat(checkAmount.toFixed(2))+" but total Acc Head amount is " + parseFloat(naccountHeadAmount.toFixed(2));
                            }
                        }
                    }
                    else if(ReferenceList[i] == "Bill")
                    {
                        if(_nComponentID == 2 || _nComponentID == 6)
                        {
                            var checkAmount = parseFloat(totalDebitBT) - parseFloat(totalCreditBT);
                            if(checkAmount < 0)
                            {
                                checkAmount = checkAmount * (-1);
                            }
                            var nGapAmount = naccountHeadAmount- parseFloat(checkAmount.toFixed(2));
                            nGapAmount = parseFloat(nGapAmount.toFixed(2));
                            if(nGapAmount<0)
                            {
                                nGapAmount=nGapAmount*(-1);
                            }
                            if(nGapAmount>0.01)
                            {
                                result = "WrongInput" + "," + "Total Bill Amount is "+parseFloat(checkAmount.toFixed(2))+" but total Acc Head amount is " + parseFloat(naccountHeadAmount.toFixed(2));
                            }
                        }
                        else if(_nComponentID == 1 || _nComponentID == 3 ||_nComponentID == 4 ||_nComponentID == 5)
                        {
                            var checkAmount = parseFloat(totalCreditBT) - parseFloat(totalDebitBT);
                            if(checkAmount < 0)
                            {
                                checkAmount = checkAmount * (-1);
                            }
                            var nGapAmount = naccountHeadAmount- parseFloat(checkAmount.toFixed(2));
                            nGapAmount = parseFloat(nGapAmount.toFixed(2));
                            if(nGapAmount<0)
                            {
                                nGapAmount=nGapAmount*(-1);
                            }
                            if(nGapAmount>0.01)
                            {
                                result = "WrongInput" + "," + "Total Bill Amount is "+parseFloat(checkAmount.toFixed(2))+" but total Acc Head amount is " + parseFloat(naccountHeadAmount.toFixed(2));
                            }
                        }
                    }
                    else if(ReferenceList[i] == "Inventory")
                    {
                        if(_nComponentID == 2 || _nComponentID == 6)
                        {
                            var checkAmount = parseFloat(totalDebitIR) - parseFloat(totalCreditIR);
                            if(checkAmount < 0)
                            {
                                checkAmount = checkAmount * (-1);
                            }
                            var nGapAmount = naccountHeadAmount- parseFloat(checkAmount.toFixed(2));
                            nGapAmount = parseFloat(nGapAmount.toFixed(2));
                            if(nGapAmount<0)
                            {
                                nGapAmount=nGapAmount*(-1);
                            }
                            if(nGapAmount>0.01)
                            {
                                result = "WrongInput" + "," + "Total Inventory Amount is "+parseFloat(checkAmount.toFixed(2))+" but total Acc Head amount is " + parseFloat(naccountHeadAmount.toFixed(2));
                            }
                        }
                        else if(_nComponentID == 1 || _nComponentID == 3 ||_nComponentID == 4 ||_nComponentID == 5)
                        {
                            var checkAmount = parseFloat(totalCreditIR) - parseFloat(totalDebitIR);
                            if(checkAmount < 0)
                            {
                                checkAmount = checkAmount * (-1);
                            }
                            var nGapAmount = naccountHeadAmount- parseFloat(checkAmount.toFixed(2));
                            nGapAmount = parseFloat(nGapAmount.toFixed(2));
                            if(nGapAmount<0)
                            {
                                nGapAmount=nGapAmount*(-1);
                            }
                            if(nGapAmount>0.01)
                            {
                                result = "WrongInput" + "," + "Total Inventory Amount is "+parseFloat(checkAmount.toFixed(2))+" but total Acc Head amount is " + parseFloat(naccountHeadAmount.toFixed(2));
                            }
                        }
                    }
                }
            }
        }
        result = result.split(",");
        return result;
    }

    function SetAccountHead()
    {
        var oSelectedLedger= $('#tblAccountHead').datagrid('getSelected');
        if(oSelectedLedger ==null || parseInt(oSelectedLedger.AccountHeadID)<=0)
        {
            alert("Please select an account head!");
            return;
        }
        $('#winAccountHead').window('close');
        $("#txtAccountHead").val(oSelectedLedger.AccountHeadName);
        _nAccountHeadID = oSelectedLedger.AccountHeadID;
        _nComponentID = oSelectedLedger.ComponentID;
        _IsCostCenterApply = oSelectedLedger.IsCostCenterApply;
        _IsBillRefApply = oSelectedLedger.IsBillRefApply;
        _IsInventoryApply = oSelectedLedger.IsInventoryApply;


        if(_IsBillRefApply == false && _IsCostCenterApply == false && _IsInventoryApply == false)
        {
            $("#cboNewOpenningBalanceType").prop("disabled",false);
            $("#txtNewOpenningBalance").prop("disabled",false);
        }
        else
        {
            $("#cboNewOpenningBalanceType").prop("disabled",true);
            $("#txtNewOpenningBalance").prop("disabled",true);
            $("#cboCurrency").focus();
            $("#cboCurrency").select();
            $("#cboCurrency").css("border","1px solid #3392FF");
        }

        txtAccountHead=document.getElementById("txtAccountHead");
        txtAccountHead.value=oSelectedLedger.AccountHeadName;
        txtAccountHead.style.color="blue";
        txtAccountHead.style.fontWeight="bold";

        $("#cboNewOpenningBalanceType").focus();
        $("#cboNewOpenningBalanceType").select();
        $("#cboNewOpenningBalanceType").css("border","1px solid #3392FF");

        var oAccountOpenning = {
            AccountHeadID : _nAccountHeadID,
            BusinessUnitID : parseInt($("#cboBusinessUnit").val())
        }
        $.ajax({
            type: "POST",
            dataType: "json",
            url : sessionStorage.getItem('BaseAddress')+  "/AccountOpenning/GetOpenningBalance",
            traditional: true,
            data:  JSON.stringify(oAccountOpenning),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                var oAccountOpenning = data;
                if(oAccountOpenning!=null)
                {
                    _oAccountOpenning.AccountingSessionID = parseInt(oAccountOpenning.AccountingSessionID);                    
                    if(parseInt(oAccountOpenning.AccountOpenningID)>0 && parseFloat(oAccountOpenning.OpenningBalance)!=0)
                    {
                        var makeString = "";
                        var cboNewOpenningBalanceTypeVal = 1;
                        if(oAccountOpenning.DR_CR == "Debit")
                        {
                            cboNewOpenningBalanceTypeVal = 1;
                        }
                        else
                        {
                            cboNewOpenningBalanceTypeVal = 0;
                        }

                        if(parseInt(oAccountOpenning.CurrencyID)==parseInt(_oAccountOpenning.BaseCurrencyId))
                        {
                            makeString = oAccountOpenning.DR_CR + " " + oAccountOpenning.CSymbol + " " +formatPrice(oAccountOpenning.AmountInCurrency,null);
                        }
                        else
                        {
                            makeString = oAccountOpenning.DR_CR + " " + oAccountOpenning.CSymbol + " " + formatPrice(oAccountOpenning.AmountInCurrency,null)  + "@@" + formatPrice(oAccountOpenning.OpenningBalance,null);
                        }
                        $("#txtOpenningBalance").val(makeString);
                        $("#cboNewOpenningBalanceType").val(cboNewOpenningBalanceTypeVal);
                        $("#cboCurrency").val(oAccountOpenning.CurrencyID);
                        $("#txtNewOpenningBalance").val(parseFloat(oAccountOpenning.AmountInCurrency).toFixed(2));
                        $("#txtNewOpenningBalanceCRate").val(oAccountOpenning.ConversionRate);
                        $("#txtAmountInBDT").val(parseFloat(oAccountOpenning.OpenningBalance).toFixed(2));
                        $("#cboCurrency").val(oAccountOpenning.CurrencyID);

                        RemakeGrid(oAccountOpenning.AHOBs);
                        RefreshSummery();
                        //Khan
                    }
                    else
                    {
                        var oRefDetail=null;
                        if(_IsCostCenterApply)
                        {
                            oRefDetail = NewObject(1);
                        }
                        else if(_IsBillRefApply)
                        {
                            oRefDetail = NewObject(2);
                        }
                        else if(_IsInventoryApply)
                        {
                            oRefDetail = NewObject(4);
                        }
                        if(oRefDetail!=null)
                        {
                            AddRefDetail(oRefDetail);
                            var nNextRowIndex = 0;
                            $('#tblRefDetail tr').eq(nNextRowIndex).addClass("highlight");
                            $('#tblRefDetail tr').eq(nNextRowIndex).find('input').addClass("textboxstyle2");        
                            $("#tblRefDetail").data("selectedIndex", nNextRowIndex);
                            ResetAllInputBox(0, '.reftypeclass');
                            RefreshSummery();
                            InitializeKeyDownEvent(".reftypeclass"); return;
                        }
                    }

                                  
                    ChangeDrCrAmountWithCurrency();
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });
        CheckReference();
    }

    $('#btnExportToExcel').click(function(){
        if(parseInt(_nAccountHeadID)<=0)
        {
            alert("Please Select Account Head!");
            return;
        }
        if(parseInt($("#cboBusinessUnit").val())<=0)
        {
            alert("Please Select Business Unit!");
            return;
        }
        window.open(sessionStorage.getItem('BaseAddress')+'/AccountOpenning/ExportToExcel?id=' + parseInt(_nAccountHeadID)+'&buid='+parseInt($("#cboBusinessUnit").val()), "_blank");
    });


    //Start Voucher Bill
    function RefreshVBComboBoxControls()
    {   
        var oCurrencys =$('#cboCurrency').data('Currencys');
        $("#cboVBCurrency").icsLoadCombo({ List: oCurrencys, OptionValue: "CurrencyID", DisplayText: "NameSymbol", InitialValue : "Custom" });
    }

    function RefreshVBControls(oVoucherBill)
    {   
        $('#winVoucherBill').data('VoucherBill', oVoucherBill);
        $('#txtVBBusinessUnit').val(oVoucherBill.BUName);
        $('#txtVBAccountHead').val(oVoucherBill.AccountHeadName);
        $('#txtVBSubLedger').val(oVoucherBill.SubLedgerName);
        $('#txtVBBillNo').val(oVoucherBill.BillNo);
        $('#txtVBBillDate').datebox('setValue', oVoucherBill.BillDateInString);
        $('#txtVBCreditDays').val(oVoucherBill.CreditDays);
        $('#txtVBMaturityDate').datebox('setValue', oVoucherBill.DueDateInString);        
        $('#cboVBCurrency').val(oVoucherBill.CurrencyID);
        $('#txtVBCurrencyAmount').val(formatPrice(oVoucherBill.CurrencyAmount));
        $('#txtVBCRate').val(formatPrice(oVoucherBill.CurrencyRate));
        $('#txtVBOpeningDate').datebox('setValue', oVoucherBill.OpeningBillDateInString);        
        $('#txtVBPeningAmount').val(formatPrice(oVoucherBill.OpeningBillAmount));
        $('#txtVBAmountInBDT').val(formatPrice(oVoucherBill.Amount));
        $('#txtVBRemarks').val(oVoucherBill.Remarks);

        $('#txtVBBusinessUnit').prop("disabled", true);
        $('#txtVBAccountHead').prop("disabled", true);
        $('#txtVBSubLedger').prop("disabled", true);
        $('#txtVBCRate').prop("disabled", true);
        $('#txtVBAmountInBDT').prop("disabled", true);
        $('#txtVBBillNo').focus();
        ChnageCurrency();
    }

    function CalculateCreditDays(date){
        var dBillDate=new Date($('#txtVBBillDate').datebox('getValue'));
        var dMaturityDate=new Date($('#txtVBMaturityDate').datebox('getValue'));
        var nCreditDays= Math.floor((dMaturityDate - dBillDate) / (1000*60*60*24));
        if(nCreditDays<0){
            nCreditDays=0;
            $('#txtVBMaturityDate').datebox('setValue', icsdateformat(dBillDate));
        }
        $('#txtVBCreditDays').val(nCreditDays);
    }

    function VBValidateInput()
    {
        var oVoucherBill = $('#winVoucherBill').data('VoucherBill');
        if(oVoucherBill === null || parseInt(oVoucherBill.BUID) === 0)
        {
            alert("Invalid Business Unit!");
            return false;
        }

        if(oVoucherBill === null || parseInt(oVoucherBill.AccountHeadID) === 0)
        {
            alert("Invalid Account Head!");
            return false;
        }
        if($.trim($('#txtVBBillNo').val()) === null || $.trim($('#txtVBBillNo').val())=== "")
        {
            alert("Please Enter Bill No!");
            $('#txtVBBillNo').focus();
            return false;
        }

        var sBillDate = $('#txtVBBillDate').datebox('getValue');        
        if(sBillDate === null || sBillDate === "")
        {
            alert("Please Select Bill Date");
            $('#txtVBBillDate').focus();
            return false;
        }

        var sDueDate =  $('#txtVBMaturityDate').datebox('getValue');
        if(sDueDate === null || sDueDate === "")
        {
            alert("Please Select Maturity Date");
            $('#txtVBMaturityDate').focus();
            return false;
        }

        var nCurrencyAmount = parseFloat(icsRemoveComma($("#txtVBCurrencyAmount").val()));
        if(nCurrencyAmount <= 0)
        {
            alert("Please Enter Currency Amount");
            $('#txtVBCurrencyAmount').focus();
            return false;
        }

        var nCRate = parseFloat(icsRemoveComma($("#txtVBCRate").val()));
        if(nCRate <= 0)
        {
            alert("Please Enter Currency Conversion Rate!");
            $('#txtVBCRate').focus();
            return false;
        }

        var nAmountInBDT = parseFloat(icsRemoveComma($("#txtVBAmountInBDT").val()));
        if(nAmountInBDT <= 0)
        {
            alert("Please Enter Currency Amount");
            $('#txtVBAmountInBDT').focus();
            return false;
        }

        var dSalesDate=new Date(sBillDate);
        var dMaturity=new Date(sDueDate);
        if(dMaturity.getTime() ===dSalesDate.getTime()){
            if(!confirm('Maturity Date: '+sDueDate+' and Bill Date: '+sBillDate+', is same.\nConfirm to Save?')){return false;}
        }

        return true;
    }

    function VBResreshObject()
    {
        var oTempVoucherBill = $('#winVoucherBill').data('VoucherBill');
        var oVoucherBill =  {
            VoucherBillID : parseInt(oTempVoucherBill.VoucherBillID),
            AccountHeadID : parseInt(oTempVoucherBill.AccountHeadID),
            SubLedgerID : parseInt(oTempVoucherBill.SubLedgerID),
            BUID : parseInt(oTempVoucherBill.BUID),
            BillNo : $.trim($('#txtVBBillNo').val()),
            CreditDays : parseFloat(icsRemoveComma($("#txtVBCreditDays").val())),
            BillDate : $('#txtVBBillDate').datebox('getValue'),
            DueDate : $('#txtVBMaturityDate').datebox('getValue'),
            TrTypeInInt : parseInt(oTempVoucherBill.TrTypeInInt),
            CurrencyID : parseInt($('#cboVBCurrency').val()),
            CurrencyRate : parseFloat(icsRemoveComma($("#txtVBCRate").val())),
            CurrencyAmount : parseFloat(icsRemoveComma($("#txtVBCurrencyAmount").val())),
            Amount : parseFloat(icsRemoveComma($("#txtVBAmountInBDT").val())),
            Remarks : $.trim($('#txtVBRemarks').val()),
            OpeningBillAmount : parseFloat(icsRemoveComma($("#txtVBPeningAmount").val())),
            OpeningBillDate : $('#txtVBOpeningDate').datebox('getValue')
        };
        return oVoucherBill;
    }

    $("#btnVBSave").click(function(){
        if(!VBValidateInput()) return;
        var oVoucherBill = VBResreshObject();
        $.ajax({
            type: "POST",
            dataType: "json",
            url : sessionStorage.getItem('BaseAddress')+  "/VoucherBill/Save",
            traditional: true,
            data:  JSON.stringify(oVoucherBill),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                oVoucherBill = jQuery.parseJSON(data);
                if (oVoucherBill.VoucherBillID>0) {
                    alert("Data Saved sucessfully");                    
                    var  sOperation = $('#winVoucherBill').data('VoucherBillOperation');
                    if(sOperation==='Add Voucher Bill')
                    {
                        var index = $('#tblBillNo').datagrid('getRows').length;
                        $('#tblBillNo').datagrid('appendRow',oVoucherBill);
                        $('#tblBillNo').datagrid('selectRow',index);
                        $("#winVoucherBill").icsWindow('close');
                    }
                    else
                    {
                        var index = $('#winVoucherBill').data('SelectedRowIndex');
                        $('#tblBillNo').datagrid('updateRow',{ index: index, row: oVoucherBill });
                        $('#tblBillNo').datagrid('selectRow',index);
                        $("#winVoucherBill").icsWindow('close');
                    }
                }
                else {
                    alert(oVoucherBill.ErrorMessage);
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }

        });
    });

    $('#txtVBCreditDays').keyup(function(e){        
        var nDays=parseInt($(this).val());
        var sSalesDate=$('#txtVBBillDate').datebox('getValue');
        var dBillDate=new Date(sSalesDate);
        var dMaturityDate=dBillDate;
        dMaturityDate.setDate(dMaturityDate.getDate()+nDays);
        $('#txtVBMaturityDate').datebox('setValue', icsdateformat(dMaturityDate));
    });

    $('#txtVBMaturityDate,#txtVBBillDate').datebox({
        onSelect: function(date){
            CalculateCreditDays();
        }
    });

    $('#cboVBCurrency').change(function(){
        ChnageCurrency();
    });

    function ChnageCurrency()
    {
        var nCurrencyID =  $("#cboVBCurrency").val();
        if(nCurrencyID == 1)
        {
            $("#txtVBCRate").prop("disabled",true);
            $("#txtVBCRate").val(1.00);
            var nCurrencyAmount = parseFloat(icsRemoveComma($('#txtVBCurrencyAmount').val()));            
            $('#txtVBAmountInBDT').val(icsFormatPrice(parseFloat(nCurrencyAmount.toFixed(2))));
        }
        else
        {
            $("#txtVBCRate").prop("disabled",false);
            $("#txtVBCRate").val(0.00);
            var amountInBDT = icsRemoveComma($("#txtVBAmountInBDT").val());
            var nGivenAmount = icsRemoveComma($('#txtVBCurrencyAmount').val());
            var nCRate = parseFloat(amountInBDT) / parseFloat(nGivenAmount);
            if(isNaN(nCRate))
            {
                nCRate = 0;
            }
            nCRate = Math.round(parseFloat(nCRate)*1000)/1000;
            $('#txtVBCRate').val(icsFormatPrice(nCRate));
        }
    }

    $("#txtVBCRate").keyup(function (e){
        var nConversionRate =  $(this).val();
        var nCurrencyAmount = icsRemoveComma($("#txtVBCurrencyAmount").val());
        var nAmountInBDT = parseFloat(nCurrencyAmount) * parseFloat(nConversionRate);
        nAmountInBDT = Math.round(parseFloat(nAmountInBDT)*1000) / 1000;
        if(isNaN(nAmountInBDT))
        {
            nAmountInBDT = 0;
        }
        $('#txtVBAmountInBDT').val(icsFormatPrice(parseFloat(nAmountInBDT.toFixed(2))));
    });

    $("#txtVBCurrencyAmount").keyup(function (e){
        var nCurrencyAmount =  parseFloat(icsRemoveComma($("#txtVBCurrencyAmount").val()));
        var nConversionRate = parseFloat(icsRemoveComma($("#txtVBCRate").val()));
        var nAmountInBDT = parseFloat(nCurrencyAmount) * parseFloat(nConversionRate);
        nAmountInBDT = Math.round(parseFloat(nAmountInBDT)*1000) / 1000;
        if(isNaN(nAmountInBDT))
        {
            nAmountInBDT = 0;
        }
        $('#txtVBAmountInBDT').val(icsFormatPrice(parseFloat(nAmountInBDT.toFixed(2))));
    });

    $('#btnVBClose').click(function(){
        $("#winVoucherBill").icsWindow('close');
    });
    //End Voucher Bill

    function CreateNewBill()
    {

        var nIndex = $("#tblRefDetail").data('selectedIndex');
        var sAccHeadName = $("#txtAccountHead").val();
        var nAccountHeadID = _nAccountHeadID;
        var nCCID = $("#tblRefDetail").data('rows')[nIndex].CCID;
        var sCCName= $("#tblRefDetail").data('rows')[nIndex].CCName;
        
        var nBUID = parseInt($('#cboBusinessUnit').val());
        var oBusinessUnit = { BusinessUnitID: 0, Code :"", Name: "", ShortName : "" };
        var oBusinessUnits  = $('#cboBusinessUnit').data('BusinessUnits');
        var oTempBusinessUnit = ICS_FindObject(oBusinessUnits, 'BusinessUnitID', nBUID);
        if(oTempBusinessUnit != null)
        {
            oBusinessUnit.BusinessUnitID = parseInt(oTempBusinessUnit.BusinessUnitID);
            oBusinessUnit.Code = oTempBusinessUnit.Code;
            oBusinessUnit.Name = oTempBusinessUnit.Name;
            oBusinessUnit.ShortName = oTempBusinessUnit.ShortName;            
        }

        var dBillDate=(new Date());
        var dMaturityDate=(new Date());
        dMaturityDate.setDate(dMaturityDate.getDate()+30);

        var oVoucherBill =  {
            VoucherBillID : 0,
            AccountHeadID : parseInt(nAccountHeadID),
            SubLedgerID : parseInt(nCCID),
            BUID : parseInt($('#cboBusinessUnit').val()),
            BillNo : '',
            CreditDays : 30,
            BillDate : icsdateformat(dBillDate),
            BillDateInString : icsdateformat(dBillDate),
            DueDate : icsdateformat(dMaturityDate),
            DueDateInString : icsdateformat(dMaturityDate),
            TrTypeInInt : 0,
            CurrencyID : parseInt($('#cboCurrency').val()),
            CurrencyRate : parseFloat(1),
            CurrencyAmount : parseFloat(0),
            Amount : parseFloat(0),
            AccountHeadName : sAccHeadName,
            SubLedgerCode : '',
            SubLedgerName : sCCName,
            BUCode : oBusinessUnit.Code,
            BUName : oBusinessUnit.Name,
            BUShortName : oBusinessUnit.ShortName,
            Remarks : 'N/A',
            OpeningBillAmount : 0,
            OpeningBillDateInString : icsdateformat(dBillDate)
        };

        RefreshVBComboBoxControls();
        RefreshVBControls(oVoucherBill);
        $('#winVoucherBill').data('SelectedRowIndex', 0);
        $('#winVoucherBill').data('VoucherBillOperation', 'Add Voucher Bill');
        $("#winVoucherBill").icsWindow('open', "Add Voucher Bill");   
    }

    function EditVoucherBill()
    {
        var oVoucherBill = $('#tblBillNo').datagrid('getSelected');
        if(oVoucherBill == null || parseInt(oVoucherBill.VoucherBillID)<=0)
        {
            alert("Please select a Bill!");
            return;
        }
        var nSelectedRowIndex=$('#tblBillNo').datagrid('getRowIndex',oVoucherBill);

        RefreshVBComboBoxControls();
        RefreshVBControls(oVoucherBill);
        $('#winVoucherBill').data('VoucherBillOperation', 'Edit Voucher Bill');
        $('#winVoucherBill').data('SelectedRowIndex', nSelectedRowIndex);
        $("#winVoucherBill").icsWindow('open', "Edit Voucher Bill");
    }

    function TextFieldsSettings()
    {
        $("#txtOpenningBalance").val(0);

        $("#txtNewOpenningBalanceCRate").val(1);
        $("#txtNewOpenningBalanceCRate").prop("disabled",true);
        $("#txtAmountInBDT").prop("disabled",true);
        $("#txtNewOpenningBalance").val(0);

        $("#txtCurrencyAmount").prop("disabled",true);
        $("#txtCurrencySymbol").prop("disabled",true);
        $('#txtDate').datebox({
            disabled:true
        });
        $('#txtDate').datebox('setValue', _oAccountOpenning.OpenningDateInString);
        CurrencyInBDT(0,1);
    }

    $("#txtNewOpenningBalanceCRate").keyup(function (e){

        //abc
        ChangeDrCrAmountWithCurrency();

        //var txtNewOpenningBalanceCRate = $(this).val();
        //var txtNewOpenningBalance = $("#txtNewOpenningBalance").val();
        //CurrencyInBDT(txtNewOpenningBalance,txtNewOpenningBalanceCRate);
    });

    $("#txtNewOpenningBalance").keyup(function (e){
        var txtNewOpenningBalance = $(this).val();
        var txtNewOpenningBalanceCRate = $("#txtNewOpenningBalanceCRate").val();
        CurrencyInBDT(txtNewOpenningBalance,txtNewOpenningBalanceCRate);
    });

    function CurrencyInBDT(CAmount,CRate)
    {
        
        var txtAmountInBDT = parseFloat(CAmount) * parseFloat(CRate);
        txtAmountInBDT = parseFloat(txtAmountInBDT.toFixed(2));

        if(isNaN(txtAmountInBDT))
        {
            nBaseCurrenctAmount = 0;
        }
        $("#txtAmountInBDT").val(txtAmountInBDT);
    }

    function ResetControllers()
    {
        $("#cboNewOpenningBalanceType").val(1);
        $("#cboNewOpenningBalanceType").prop("disabled",true);
        $("#cboCurrency").val(0);
        $("#txtNewOpenningBalance").val(0);
        $("#txtNewOpenningBalanceCRate").prop("disabled",true);
        $("#txtNewOpenningBalanceCRate").val(1);
        $("#txtAmountInBDT").prop("disabled",true);
        $("#txtAmountInBDT").val(1);
        $("#txtOpenningBalance").val(0);
        $('#tblRefDetail tr').remove();
        $('#tblRefDetail').data('rows', []);
        RefreshSummery();
    }

    $("#txtAccountHead").keydown(function(e){
        if(e.which === 13 || e.which === 9)
        {
            ResetControllers();
            var txtAccountHeadName = $(this).val();
            var oChatOfAccount = {
                AccountHeadName : txtAccountHeadName
            }
            $.ajax({
                type: "POST",
                dataType: "json",
                url : sessionStorage.getItem('BaseAddress')+  "/ChartsOfAccount/GetsAccountsHead",
                traditional: true,
                data:  JSON.stringify(oChatOfAccount),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    var oChatOfAccounts = jQuery.parseJSON(data);
                    $("#txtSearchByAccountHeadName").val(txtAccountHeadName);
                    $('#winAccountHead').window('open');
                    $("#txtSearchByAccountHeadName").select();
                    RefreashAccountHeads(oChatOfAccounts);
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });
        }
    });
    function RefreashAccountHeads(oChartOfAccounts)
    {
        var data=oChartOfAccounts;
        data={"total":""+data.length+"","rows":data};
        $('#tblAccountHead').datagrid('loadData',data);
        $('#tblAccountHead').datagrid('selectRow', 0);
    }
    $("#btnOkAccountHead").click(function(){
        SetAccountHead();
    });
    $("#btnCloseAccountHead").click(function(){
        $('#winAccountHead').window('close');
        $("#txtAccountHead").focus();
        $("#txtAccountHead").select();
    });

    function ReferenceInfoEntryInGrid()
    {
        var checkReherences = CheckReference();
        if(checkReherences == null)
        {
            alert("There is no reference for this account head.");
            $("#btnSave").focus();
            $("#btnSave").select();
            return false;
        }
        var oRefDetails = $("#tblRefDetail").data('rows');
        if(oRefDetails=='undefined'  || oRefDetails==null || oRefDetails.length<=0)
        {
            var txtNewOpenningBalanceCRate = $("#txtNewOpenningBalanceCRate").val();
            if(_nAccountHeadID == 0)
            {
                alert("Please select an account head.");
                return false;
            }
            var oRefDetail=NewObject(checkReherences[0]);
            AddRefDetail(oRefDetail);
        }
        var nNextRowIndex = 0;
        $('#tblRefDetail tr').eq(nNextRowIndex).addClass("highlight");
        $('#tblRefDetail tr').eq(nNextRowIndex).find('input').addClass("textboxstyle2");
        $('#tblRefDetail tr').eq(nNextRowIndex).find('input').addClass("textboxstyle2");
        $("#tblRefDetail").data("selectedIndex", nNextRowIndex);
        ResetAllInputBox(0, '.reftypeclass');
        RefreshSummery();
        InitializeKeyDownEvent(".reftypeclass"); return;
    }

    function CheckReference()
    {
        var result = "";

        if(_IsCostCenterApply == true)
        {
            result = "Subledger";
        }
        if(_IsBillRefApply == true)
        {
            if(result == "")
            {
                result = "Bill" + "," + result;
            }
            else
            {
                result = result  + "," + "Bill" ;
            }
        }
        if(_IsInventoryApply == true)
        {
            if(result == "")
            {
                result = "Inventory" + "," + result;
            }
            else
            {
                result = result  + "," + "Inventory" ;
            }
        }
        result = result.replace(/,\s*$/, '');  //Remove last comma
        result = result.split(",");
        if(result=="")
        {
            result=null;
        }
        return result;
    }

    function NewObject(nAHOBT)
    {
        //VoucherDetail = 0
        //CostCenter = 1
        //BillReference = 2
        //VoucherReference = 3
        //InventoryReference = 4
        //SubledgerBill = 5

        var sAHOBTStr="";
        if(parseInt(nAHOBT)===1)
        {
            sAHOBTStr= "Subledger";
        }
        else if(parseInt(nAHOBT)===2)
        {
            sAHOBTStr= "Bill";
        }
        else if(parseInt(nAHOBT)===4)
        {
            sAHOBTStr= "Inventory";
        }
        else if(parseInt(nAHOBT)===5)
        {
            sAHOBTStr= "SL Bill";
        }
       
        var oRefDetail = {
            AHOBID:0,
            OpenningBalance:0,
            DR_CR:"",
            BObjID:0,
            AHOBTInt: nAHOBT,
            AHOBTStr: sAHOBTStr,
            Name:"",
            Code: "",
            UnitID: 0,
            UName: "",
            WUID: 0,
            WUName: "",
            Qty: 0,
            UPrice: 0,
            Amount: 0,
            DrAmount: 0,
            CrAmount: 0,
            CID:0,
            CRate:0,
            CSymbol : "",
            CAmount:0,
            CFormat: "",
            BillID:0,
            BillDate:new Date(),
            BillDateInString : "",
            BillAmount : 0,
            IsBTAply : false,
            CCID : 0,
            CCName : ""
        };
        return oRefDetail;
    }

    function AddRefDetail(oRefDetail)
    {
        //VoucherDetail = 0
        //CostCenter = 1
        //BillReference = 2
        //VoucherReference = 3
        //InventoryReference = 4
        var nRowIndex=0;
        var oRefDetails = $('#tblRefDetail').data('rows');
        if(oRefDetails=='undefined' || oRefDetails==null||oRefDetails.length<=0)
        {
            nRowIndex=0;
            oRefDetails =[];
        }
        else
        {
            nRowIndex=oRefDetails.length;
        }

        oRefDetails.push(oRefDetail);
        $('#tblRefDetail').data('rows', oRefDetails);
        var table = document.getElementById('tblRefDetail');
        var row = table.insertRow(nRowIndex);

        if(parseInt(oRefDetail.AHOBTInt) === 1)
        {
            var cellDel = row.insertCell(0);
            cellDel.width= "3%";
            cellDel.innerHTML = '<label id="delClass'+nRowIndex+'" rowIndex="'+nRowIndex+'"onclick="DeleteRow('+nRowIndex+');"  class="delClass" style="width:95%;color:#c00;cursor:pointer;" >X</label>';

            var cellAHOBTStr = row.insertCell(1);
            cellAHOBTStr.width= "10%";
            cellAHOBTStr.innerHTML = '<input type="text" id="reftypeclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" value="'+oRefDetail.AHOBTStr+'" class="reftypeclass" style="width:98%;"/>';

            var cellDebitCredit = row.insertCell(2);
            cellDebitCredit.width= "7%";
            cellDebitCredit.innerHTML =  '<input type="text" id="debitcreditclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" value="'+oRefDetail.DR_CR+'" class="debitcreditclass" style="width:98%;"/>';

            var cellCCName = row.insertCell(3);
            cellCCName.colSpan= 4;
            cellCCName.width= "40%";
            cellCCName.innerHTML = '<input type="text" id="nameclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" value="'+oRefDetail.Name+'" class="nameclass" style="width:98%;" />';

            var cellAmountInCurrency = row.insertCell(4);
            cellAmountInCurrency.colSpan= 2;
            cellAmountInCurrency.width= "20%";            
            cellAmountInCurrency.innerHTML = '<input type="text" id="cAmountclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" value="'+formatPrice(oRefDetail.CAmount,null)+'" class="cAmountclass" style="width:98%;text-align:right;" />';


            var cellDebitAmount = row.insertCell(5);
            cellDebitAmount.width= "10%";
            cellDebitAmount.innerHTML = '<label id="debitclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" class="debitclass" style="width:98%;">'+formatPrice(oRefDetail.DrAmount,null)+'</label>';

            var cellCreditAmount = row.insertCell(6);
            cellCreditAmount.width= "10%";
            cellCreditAmount.innerHTML = '<label id="creditclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" class="creditclass" style="width:98%;">'+formatPrice(oRefDetail.CrAmount,null)+'</label>';

            $(".delClass").parent().css("text-align","center");
            $("#debitclass"+nRowIndex).parent().css("text-align","right");
            $("#creditclass"+nRowIndex).parent().css("text-align","right");
            $("#cfomatclass"+nRowIndex).parent().css("text-align","left");
        }
        else if(parseInt(oRefDetail.AHOBTInt) === 2 || parseInt(oRefDetail.AHOBTInt) ===5)
        {

            var cellDel = row.insertCell(0);
            cellDel.width= "3%";
            cellDel.innerHTML = '<label id="delClass'+nRowIndex+'" rowIndex="'+nRowIndex+'"onclick="DeleteRow('+nRowIndex+');"  class="delClass" style="width:95%;color:#c00;cursor:pointer;" >X</label>';

            var cellAHOBTStr = row.insertCell(1);
            cellAHOBTStr.width= "10%";
            cellAHOBTStr.innerHTML = '<input type="text" id="reftypeclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" value="'+oRefDetail.AHOBTStr+'" class="reftypeclass" style="width:98%;"/>';

            var cellDebitCredit = row.insertCell(2);
            cellDebitCredit.width= "7%";
            cellDebitCredit.innerHTML =  '<input type="text" id="debitcreditclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" value="'+oRefDetail.DR_CR+'" class="debitcreditclass" style="width:98%;"/>';

            var cellBTBillNo= row.insertCell(3);
            cellBTBillNo.colSpan = 2;
            cellBTBillNo.width= "20%";
            cellBTBillNo.innerHTML = '<input type="text" rowIndex="'+nRowIndex+'" value="'+oRefDetail.Name+'" class="nameclass" style="width:98%" />';

            var cellBTBillNo= row.insertCell(4);
            cellBTBillNo.colSpan = 2;
            cellBTBillNo.width= "20%";
            cellBTBillNo.innerHTML = '<label rowIndex="'+nRowIndex+'" class="btBillDateClass" style="width:98%" >'+oRefDetail.BillDateInString+'</label>';

            var cellAmountInCurrency = row.insertCell(5);
            cellAmountInCurrency.colSpan= 2;
            cellAmountInCurrency.width= "20%";            
            cellAmountInCurrency.innerHTML = '<input type="text" id="cAmountclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" value="'+formatPrice(oRefDetail.CAmount,null)+'" class="cAmountclass" style="width:98%;text-align:right;" />';


            var cellDebitAmount = row.insertCell(6);
            cellDebitAmount.width= "10%";
            cellDebitAmount.innerHTML = '<label id="debitclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" class="debitclass" style="width:98%;">'+formatPrice(oRefDetail.DrAmount,null)+'</label>';

            var cellCreditAmount = row.insertCell(7);
            cellCreditAmount.width= "10%";
            cellCreditAmount.innerHTML = '<label id="creditclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" class="creditclass" style="width:98%;">'+formatPrice(oRefDetail.CrAmount,null)+'</label>';
            
            $(".delClass").parent().css("text-align","center");
            $("#debitclass"+nRowIndex).parent().css("text-align","right");
            $("#creditclass"+nRowIndex).parent().css("text-align","right");
            $("#cfomatclass"+nRowIndex).parent().css("text-align","left");
        }
        else if(parseInt(oRefDetail.AHOBTInt) === 4)
        {
            var cellDel = row.insertCell(0);
            cellDel.width= "3%";
            cellDel.innerHTML = '<label id="delClass'+nRowIndex+'" rowIndex="'+nRowIndex+'"onclick="DeleteRow('+nRowIndex+');"  class="delClass" style="width:95%;color:#c00;cursor:pointer;" >X</label>';

            var cellAHOBTStr = row.insertCell(1);
            cellAHOBTStr.width= "7%";
            cellAHOBTStr.innerHTML = '<input type="text" id="reftypeclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" value="'+oRefDetail.AHOBTStr+'" class="reftypeclass" style="width:98%;"/>';


            var cellDebitCredit = row.insertCell(2);
            cellDebitCredit.width= "10%";
            cellDebitCredit.innerHTML =  '<input type="text" id="debitcreditclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" value="'+oRefDetail.DR_CR+'" class="debitcreditclass" style="width:98%;"/>';

            var cellProduct = row.insertCell(3);            
            cellProduct.width= "10%";
            cellProduct.innerHTML = '<input type="text" rowIndex="'+nRowIndex+'" value="'+oRefDetail.Name+'" class="nameclass" style="width:98%" placeholder="Product Name"/>';

            var cellWorkingUnit = row.insertCell(4);
            cellWorkingUnit.width= "10%";
            cellWorkingUnit.innerHTML = '<input type="text" rowIndex="'+nRowIndex+'" value="'+oRefDetail.WUName+'" class="irWorkingUnitClass" style="width:98%" placeholder="Working Unit"/>';

            var cellMeasurementUnit = row.insertCell(5);
            cellMeasurementUnit.width= "10%";
            cellMeasurementUnit.innerHTML = '<input type="text" rowIndex="'+nRowIndex+'" value="'+oRefDetail.UName+'" class="irMeasurementUnitClass" style="width:98%;text-align:center;" placeholder="M.Unit"/>';

            var cellQty = row.insertCell(6);
            cellQty.width= "10%";
            cellQty.innerHTML = '<input type="text" id="irQtyClass'+nRowIndex+'" rowIndex="'+nRowIndex+'" value="'+oRefDetail.Qty+'" class="irQtyClass" style="width:98%" placeholder="Qty"/>';

            var cellUnitPrice = row.insertCell(7);
            cellUnitPrice.width= "10%";
            cellUnitPrice.innerHTML = '<input type="text" id="irUnitPriceClass'+nRowIndex+'" rowIndex="'+nRowIndex+'" value="'+oRefDetail.UPrice+'" class="irUnitPriceClass" style="width:98%" placeholder="Unit Price"/>';

            var cellAmount = row.insertCell(8);
            cellAmount.width= "10%";
            cellAmount.innerHTML = '<input type="text" id="irAmountClass'+nRowIndex+'" rowIndex="'+nRowIndex+'" value="'+formatPrice(oRefDetail.CAmount,null)+'" class="irAmountClass" style="width:98%" placeholder="Amount"/>';

            var cellDebitAmount = row.insertCell(9);
            cellDebitAmount.width= "10%";
            cellDebitAmount.innerHTML = '<label id="debitclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" class="debitclass" style="width:98%;">'+formatPrice(oRefDetail.DrAmount,null)+'</label>';

            var cellCreditAmount = row.insertCell(10);
            cellCreditAmount.width= "10%";
            cellCreditAmount.innerHTML = '<label id="creditclass'+nRowIndex+'" rowIndex="'+nRowIndex+'" class="creditclass" style="width:98%;">'+formatPrice(oRefDetail.CrAmount,null)+'</label>';
           
            CheckZero(oRefDetail.Qty,"irQtyClass",nRowIndex);
            CheckZero(oRefDetail.UPrice,"irUnitPriceClass",nRowIndex);
            $("#irUnitPriceClass" + nRowIndex).val((oRefDetail.UPrice).toFixed(3));
            $("#irAmountClass"+nRowIndex).parent().css("text-align","right");
            $("#debitclass"+nRowIndex).parent().css("text-align","right");
            $("#creditclass"+nRowIndex).parent().css("text-align","right");
            $(".delClass").parent().css("text-align","center");
        }
        InitializeEvent();
    }

    function ResetAllInputBox(index, sClass)
    {
        for(var i=0; i<$('.reftypeclass').length; i++)
        {
            $('.debitcreditclass').eq(i).removeClass("highlight");
            $('.debitcreditclass').eq(i).removeClass("textboxstyle");

            $('.nameclass').eq(i).removeClass("highlight");
            $('.nameclass').eq(i).removeClass("textboxstyle");

            $('.reftypeclass').eq(i).removeClass("highlight");
            $('.reftypeclass').eq(i).removeClass("textboxstyle");

            $('.cfomatclass').eq(i).removeClass("highlight");
            $('.cfomatclass').eq(i).removeClass("textboxstyle");

            $('.cAmountclass').eq(i).removeClass("highlight");
            $('.cAmountclass').eq(i).removeClass("textboxstyle");

            $('.ccamountclass').eq(i).removeClass("highlight");
            $('.ccamountclass').eq(i).removeClass("textboxstyle");

            $('.delClass').eq(i).removeClass("highlight");
            $('.delClass').eq(i).removeClass("textboxstyle");

            $('.debitclass').eq(i).removeClass("highlight");
            $('.debitclass').eq(i).removeClass("textboxstyle");

            $('.creditclass').eq(i).removeClass("highlight");
            $('.creditclass').eq(i).removeClass("textboxstyle");

            $('.btBillDateClass').eq(i).removeClass("highlight");
            $('.btBillDateClass').eq(i).removeClass("textboxstyle");

            $('.btAmountClass').eq(i).removeClass("highlight");
            $('.btAmountClass').eq(i).removeClass("textboxstyle");
        }

        for(var i=0; i<$('.irWorkingUnitClass').length; i++)
        {
            $('.irWorkingUnitClass').eq(i).removeClass("highlight");
            $('.irWorkingUnitClass').eq(i).removeClass("textboxstyle");

            $('.irMeasurementUnitClass').eq(i).removeClass("highlight");
            $('.irMeasurementUnitClass').eq(i).removeClass("textboxstyle");

            $('.irQtyClass').eq(i).removeClass("highlight");
            $('.irQtyClass').eq(i).removeClass("textboxstyle");

            $('.irUnitPriceClass').eq(i).removeClass("highlight");
            $('.irUnitPriceClass').eq(i).removeClass("textboxstyle");

            $('.irAmountClass').eq(i).removeClass("highlight");
            $('.irAmountClass').eq(i).removeClass("textboxstyle");
        }

        var nRowIndex= $("#tblRefDetail").data("selectedIndex");
        $('#tblRefDetail tr').eq(nRowIndex).find('input').addClass("highlight");
        $(sClass).eq(index).removeClass("textboxstyle2");
        $(sClass).eq(index).addClass("textboxstyle");
        $(sClass).eq(index).show();
        $(sClass).eq(index).focus();
        $(sClass).eq(index).select();
    }
    
    function CheckZero(value,className,nRowIndex)
    {
        var idMake = className + nRowIndex;
        if(typeof value === "undefined" || value == "" || value == "NaN" || value == 0)
        {
            $("#"+idMake).removeAttr( "value" );
        }
        else
        {
            $("#"+idMake).attr('value', formatPrice(value,null));
        }
        return parseFloat(value);
    }

    function CalculateDebitCredit()
    {
        var accHeadType = $("#cboNewOpenningBalanceType").val();   // 0 = Credit and 1 = Debit
        var nNewOpenningBanalce = $("#txtNewOpenningBalance").val();
        var totalDebitValue = 0;
        var totalCreditValue = 0;
        var countRow = $("#tblRefDetail tr").length;
        for(var i=0;i<countRow;i++)
        {
            var sDr_Cr= $("#tblRefDetail").data('rows')[i].DR_CR;
            var sRefType = $("#tblRefDetail").data('rows')[i].AHOBTStr;
            if(sRefType!="SL Bill")
            {
                if(sDr_Cr == "Debit")
                {
                    totalDebitValue = parseFloat(totalDebitValue) + parseFloat($("#tblRefDetail").data('rows')[i].CAmount);
                }
                else if(sDr_Cr == "Credit")
                {
                    totalCreditValue = parseFloat(totalCreditValue) + parseFloat($("#tblRefDetail").data('rows')[i].CAmount);
                }
            }
        }

        return totalDebitValue + "," + totalCreditValue;
    }

    function SetOpenningAccountBalance()
    {
        var totalValues = CalculateDebitCredit();
        totalValues = totalValues.split(",");
        var txtNewOpenningBalanceCRate = parseFloat($("#txtNewOpenningBalanceCRate").val());
        
        if( _nComponentID == 2|| _nComponentID == 6)
        {
            var remainingValue = parseFloat(totalValues[0]) - parseFloat(totalValues[1]);
            if(parseFloat(remainingValue.toFixed(2)) < 0 )
            {
                $("#cboNewOpenningBalanceType").val(0);
                remainingValue = parseFloat(remainingValue) * (-1) ;
            }
            else
            {
                $("#cboNewOpenningBalanceType").val(1);
            }
            //remainingValue = remainingValue * txtNewOpenningBalanceCRate;
            if(isNaN(remainingValue))
            {
                remainingValue=0;
            }
            $("#txtNewOpenningBalance").val(formatPrice(remainingValue,null));
        }
        else
        {
            var remainingValue = parseFloat(totalValues[1]) - parseFloat(totalValues[0]);
            if(parseFloat(remainingValue.toFixed(2)) < 0 )
            {
                $("#cboNewOpenningBalanceType").val(1);
                remainingValue = parseFloat(remainingValue) * (-1) ;
            }
            else
            {
                $("#cboNewOpenningBalanceType").val(0);
            }
            //remainingValue = remainingValue * txtNewOpenningBalanceCRate;
            if(isNaN(remainingValue))
            {
                remainingValue=0;
            }
            $("#txtNewOpenningBalance").val(formatPrice(remainingValue,null));
        }


        var txtNewOpenningBalance = $("#txtNewOpenningBalance").val();
        var nNewOpenningBalance = parseFloat(RemoveComma(txtNewOpenningBalance));
        if(isNaN(nNewOpenningBalance))
        {
            nNewOpenningBalance=0;
        }
        var txtAmountInBDT = parseFloat(nNewOpenningBalance) * parseFloat(txtNewOpenningBalanceCRate);
        if(isNaN(txtAmountInBDT))
        {
            txtAmountInBDT=0;
        }
        $("#txtAmountInBDT").val(formatPrice(txtAmountInBDT,null));
    }

    function SetCostCenter()
    {
        var oSelectedCostCenter= $('#tblCostCenterName').datagrid('getSelected');
        if(oSelectedCostCenter ==null || parseInt(oSelectedCostCenter.ACCostCenterID)<=0)
        {
            alert("Please select a cost center!");
            return;
        }
        var nRowIndex= $("#tblRefDetail").data("selectedIndex");
        var oRefDetails = $("#tblRefDetail").data('rows');
        for(var i=0;i<oRefDetails.length;i++)
        {
            if(oRefDetails[i].AHOBTInt == 1)
            {
                if(parseInt(oSelectedCostCenter.ACCostCenterID) == parseInt(oRefDetails[i].BObjID))
                {
                    if(nRowIndex!=i)
                    {
                        alert("Sorry,Duplicate Cost Center.");
                        return false;
                    }
                }
            }
        }
        $('#winCostCenterName').window('close');
        var costCenterNameControll = $('#tblRefDetail tr').eq(nRowIndex).find('.nameclass');
        $(costCenterNameControll).val(oSelectedCostCenter.Name);
        $(costCenterNameControll).removeClass("textboxstyle");
        $(costCenterNameControll).addClass("highlight");
        $(costCenterNameControll).addClass("textboxstyle2");
        $("#tblRefDetail").data('rows')[nRowIndex].BObjID=oSelectedCostCenter.ACCostCenterID;
        $("#tblRefDetail").data('rows')[nRowIndex].Name=oSelectedCostCenter.Name;
        $("#tblRefDetail").data('rows')[nRowIndex].AHOBTInt = 1;
        $("#tblRefDetail").data('rows')[nRowIndex].IsBTAply = oSelectedCostCenter.IsBillRefApply;


        var sAHOBTStr = $("#tblRefDetail").data('rows')[nRowIndex].AHOBTStr;
        if(sAHOBTStr == "Subledger")
        {
            var nInputBoxIndex= $('.cAmountclass').index($('#tblRefDetail tr').eq(nRowIndex).find('input.cAmountclass'));
            ResetAllInputBox(nInputBoxIndex, '.cAmountclass');
            InitializeKeyDownEvent(".cAmountclass"); return;
        }
        else
        {
            var DrCr = $("#tblRefDetail").data('rows')[nRowIndex].DR_CR;
            if(DrCr == "Debit")
            {
                var nInputBoxIndex= $('.debitclass').index($('#tblRefDetail tr').eq(nRowIndex).find('input.debitclass'));
                ResetAllInputBox(nInputBoxIndex, '.debitclass');
                InitializeKeyDownEvent(".debitclass"); return;
            }
            else
            {
                var nInputBoxIndex= $('.creditclass').index($('#tblRefDetail tr').eq(nRowIndex).find('input.creditclass'));
                ResetAllInputBox(nInputBoxIndex, '.creditclass');
                InitializeKeyDownEvent(".creditclass"); return;
            }
        }
        
      
    }

    function SetBillTransaction()
    {
        var oSelectedBill= $('#tblBillNo').datagrid('getSelected');
        if(oSelectedBill == null || parseInt(oSelectedBill.VoucherBillID)<=0)
        {
            alert("Please select a Bill No !");
            return;
        }

        var nBUID = parseInt($('#cboBusinessUnit').val());
        if(parseInt(nBUID) != parseInt(oSelectedBill.BUID))
        {
            alert("Selected Bill Business Unit & Opening Business Unit Not Match!!");
            return;
        }

        var nCurrencyID = parseInt($('#cboCurrency').val());
        if(parseInt(nCurrencyID) != parseInt(oSelectedBill.CurrencyID))
        {
            alert("Selected Bill Business Unit & Opening Currency Not Match!!");
            return;
        }

        var nRowIndex= $("#tblRefDetail").data("selectedIndex");
        var oRefDetails = $("#tblRefDetail").data('rows');
        for(var i=0;i<oRefDetails.length;i++)
        {
            if(oRefDetails[i].AHOBTInt == 2)
            {
                if(parseInt(oSelectedBill.VoucherBillID) == parseInt(oRefDetails[i].BObjID))
                {
                    if(nRowIndex!=i)
                    {
                        alert("Sorry,Duplicate Voucher Bill.");
                        return false;
                    }
                }
            }
        }
        $('#winBillNo').window('close');

        var oBillNo = $('#tblRefDetail tr').eq(nRowIndex).find('.nameclass');
        $(oBillNo).val(oSelectedBill.BillNo);
        $(oBillNo).removeClass("textboxstyle");
        $(oBillNo).addClass("highlight");
        $(oBillNo).addClass("textboxstyle2");
        var nInputBoxIndex = $(".nameclass").index(oBillNo);
        var index = $('.nameclass').index(oBillNo);
        $('.btBillDateClass').eq(index).text(oSelectedBill.BillDateInString);

        var txtCurrency = $('#tblRefDetail tr').eq(nRowIndex).find('.cfomatclass');
        var makeString = oSelectedBill.CurrencySymbol + " " + parseFloat(oSelectedBill.CurrencyAmount).toFixed(2);
        txtCurrency.text(makeString);

        var nAmount = oSelectedBill.Amount;
        nAmount = parseFloat(nAmount).toFixed(2);

        var nCurrencyAmount = oSelectedBill.CurrencyAmount;
        nCurrencyAmount = parseFloat(nCurrencyAmount).toFixed(2);

        $("#tblRefDetail").data('rows')[nRowIndex].Name=oSelectedBill.BillNo;
        $("#tblRefDetail").data('rows')[nRowIndex].BillDateInString = oSelectedBill.BillDateInString;
        $("#tblRefDetail").data('rows')[nRowIndex].BObjID = parseInt(oSelectedBill.VoucherBillID);
        $("#tblRefDetail").data('rows')[nRowIndex].BillAmount = parseFloat(nAmount);
        $("#tblRefDetail").data('rows')[nRowIndex].Amount = parseFloat(nAmount);
        $("#tblRefDetail").data('rows')[nRowIndex].CFormat = makeString;
        $("#tblRefDetail").data('rows')[nRowIndex].CID = oSelectedBill.CurrencyID;
        $("#tblRefDetail").data('rows')[nRowIndex].CRate = oSelectedBill.CurrencyRate;
        $("#tblRefDetail").data('rows')[nRowIndex].CSymbol = oSelectedBill.CurrencySymbol;
        $("#tblRefDetail").data('rows')[nRowIndex].CAmount = parseFloat(nCurrencyAmount);
        
        var txtcAmountclass = $('#tblRefDetail tr').eq(nRowIndex).find('.cAmountclass');
        txtcAmountclass.val(formatPrice(parseFloat(nCurrencyAmount),null)); 

        var nInputBoxIndex= $('.cAmountclass').index($('#tblRefDetail tr').eq(nRowIndex).find('input.cAmountclass'));
        ResetAllInputBox(nInputBoxIndex, '.cAmountclass');
        InitializeKeyDownEvent(".cAmountclass"); return;
    }
   
    function CheckAndGetCurrency(userInput)
    {
        var result = "";
        for(var i=0;i<_oLstCurrencys.length;i++)
        {
            var nCurrencyId = 0;
            if(_oLstCurrencys[i].Symbol.toUpperCase() == userInput.toUpperCase())
            {
                nCurrencyId = _oLstCurrencys[i].CurrencyID ;
                break;
            }
            else
            {
                nCurrencyId = 0;
            }
        }


        if(nCurrencyId == 0)
        {
            result = "Invalid Currency"+ ","+ nCurrencyId;
        }
        else
        {
            result = "Valid Currency"+ ","+ nCurrencyId;
        }
        return result;
    }

    function isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    function SplitCurrencyAndAmount(nRowIndex,userInput)
    {
        var editOrNewEntry = "";
        var currency = "";
        var amountInString = "";
        var result = "";
        var count = 0;
        var nAmountInCurrency = 0;
        var nBaseCurrencyAmount = 0;
        var nConversionRate=0;

        for(var i=0;i<userInput.length;i++)
        {
            var char = userInput.charAt(i);
            var charForCheck = char;
            char = char.match(/\d+/g);
            if(char == null && count==0)
            {
                currency = currency + userInput.charAt(i);
            }
            else if(char != null)
            {
                amountInString = amountInString + userInput.charAt(i);
                count=1;
            }
            else if(charForCheck == ",")
            {
                continue;
            }
            else if(charForCheck == ".")
            {
                amountInString = amountInString + userInput.charAt(i);
            }
            else
            {
                result = "WrongInput" + "," + "Please Give Valid Amount.";
                break;
            }
        }

        if(amountInString.length == 0 || parseFloat(amountInString) == 0)
        {
            result = "WrongInput" + "," + "Please Give Amount.";
        }


        if(currency.length == 0)
        {
            var sCurrencySymbol = $("#tblRefDetail").data('rows')[nRowIndex].CSymbol;
            if(sCurrencySymbol.length == 0)
            {
                currency = _oAccountOpenning.BaseCurrencySymbol;
                nConversionRate = 1;
            }
            else
            {
                currency = sCurrencySymbol.toUpperCase();
                nConversionRate = $("#tblRefDetail").data('rows')[nRowIndex].CRate;
            }
        }
        else
        {
            editOrNewEntry = "Edit";
        }
        if(result == "")
        {
            var checkCurrency = CheckAndGetCurrency(currency);
            checkCurrency = checkCurrency.split(",");
            var userInputAmount = parseFloat(RemoveComma(amountInString));
            var checkAmount = isNumber(userInputAmount);
            if(checkCurrency[0] == "Invalid Currency")
            {
                result = "WrongInput" + "," + "Please Give Valid Currency.";
            }
            else if(checkAmount == false)
            {
                result = "WrongInput" + "," + "Please Give Valid Amount.";
            }
            else
            {
                result = currency + "," + userInputAmount + "," + checkCurrency[1] + "," + nConversionRate + "," +editOrNewEntry;
            }
        }
        result = result.split(",");
        return result;
    }

    function RemoveComma(stringValue)
    {
        var stringValues = stringValue.split(',');
        var result = "";
        if(stringValues.length <= 0)
        {
            result = stringValue;
        }
        else
        {
            for(var i=0;i<stringValues.length;i++)
            {
                result = result + stringValues[i];
            }
        }
        return parseFloat(result);
    }

    $("#txtNewOpenningBalance").keypress(function (e) {
        if (e.which != 8 && e.which != 0  && e.which != 46  && (e.which < 48 || e.which > 57)) {
            return false;
        }
    });
    $("#txtNewOpenningBalanceCRate").keypress(function (e) {
        if (e.which != 8 && e.which != 0  && e.which != 46  && (e.which < 48 || e.which > 57)) {
            return false;
        }
    });
    $("#cboNewOpenningBalanceType").keydown(function (e) {
        if (e.which == 13 || e.which == 9) {
            $("#cboCurrency").focus();
            $("#cboCurrency").select();
            $("#cboCurrency").css("border","1px solid #3392FF");
            $("#cboNewOpenningBalanceType").css("border","1px solid #000");
        }
    });

    $('#cboCurrency').keyup(function (e) {
        if (e.which == 13 || e.which == 9) {

            var isDisabled = $('#txtNewOpenningBalance').prop('disabled');
            if(isDisabled == false)
            {
                $("#txtNewOpenningBalance").focus();
                $("#txtNewOpenningBalance").select();
                $("#cboCurrency").css("border","1px solid #000");
            }
            else
            {
                ReferenceInfoEntryInGrid();
            }
        }
    });
    $('#txtAccountHead').keyup(function (e) {
        if (e.which == 8) {
            var txtAccountHead=document.getElementById("txtAccountHead");
            txtAccountHead.style.color="black";
            txtAccountHead.style.fontWeight="normal";
            _nAccountHeadID = 0;
            ResetControllers();
            $("#cboNewOpenningBalanceType").prop("disabled",false);
            $("#cboCurrency").val(1);
            $("#txtNewOpenningBalanceCRate").val(1);
            $("#txtAmountInBDT").val(0);
        }
    });
    $('#txtNewOpenningBalance').keyup(function (e) {
        if (e.which == 13 || e.which == 9) {

            var isDisabled = $('#txtNewOpenningBalanceCRate').prop('disabled');
            if(isDisabled == false)
            {
                $("#txtNewOpenningBalanceCRate").focus();
                $("#txtNewOpenningBalanceCRate").select();
            }
            else
            {
                ReferenceInfoEntryInGrid();
            }
        }
    });
    $('#txtNewOpenningBalanceCRate').keyup(function (e) {
        if (e.which == 13 || e.which == 9) {
            var checkReherences = CheckReference();

            var isDisabled = $('#txtNewOpenningBalanceCRate').prop('disabled');
            var txtNewOpenningBalanceCRate = $("#txtNewOpenningBalanceCRate").val();
            if(_nAccountHeadID == 0)
            {
                alert("Please select an account head.");
                return false;
            }
            if(parseFloat(txtNewOpenningBalanceCRate.toFixed(2)) == 0)
            {
                alert("Please give currency.");
                return false;
            }
            var oRefDetails = $("#tblRefDetail").data('rows');
            if(oRefDetails=='undefined'  || oRefDetails==null || oRefDetails.length<=0)
            {
                if(checkReherences == null)
                {
                    $("#btnSave").focus();
                    $("#btnSave").select();
                }
                else
                {
                    var oRefDetail=NewObject(checkReherences[0]);
                    AddRefDetail(oRefDetail);
                }
            }
            var nNextRowIndex = 0;
            $('#tblRefDetail tr').eq(nNextRowIndex).addClass("highlight");
            $('#tblRefDetail tr').eq(nNextRowIndex).find('input').addClass("textboxstyle2");
            $('#tblRefDetail tr').eq(nNextRowIndex).find('input').addClass("textboxstyle2");
            $("#tblRefDetail").data("selectedIndex", nNextRowIndex);
            ResetAllInputBox(0, '.reftypeclass');
            RefreshSummery();
            InitializeKeyDownEvent(".reftypeclass"); return;
        }
    });

    function InitializeKeyDownEvent(classname)
    {
        $('.delClass').unbind("keydown");
        $('.debitcreditclass').unbind("keydown");
        $('.debitclass').unbind("keydown");
        $('.creditclass').unbind("keydown");
        $('.reftypeclass').unbind("keydown");
        $('.cfomatclass').unbind("keydown");
        $('.cAmountclass').unbind("keydown");
        $('.btBillDateClass').unbind("keydown");
        $('.nameclass').unbind("keydown");
        $('.irWorkingUnitClass').unbind("keydown");
        $('.irMeasurementUnitClass').unbind("keydown");
        $('.irQtyClass').unbind("keydown");
        $('.irUnitPriceClass').unbind("keydown");
        $('.irAmountClass').unbind("keydown");

        if(classname==".reftypeclass")
        {
            $('.reftypeclass').keydown(function (e) {
                if (e.which === 9 || e.which === 13) {
                    var nRowIndex=$("#tblRefDetail").data('selectedIndex');
                    var reftype = $(this).val();
                    var txtAccountHead = $("#txtAccountHead").val();
                    var ReferenceList = CheckReference();
                                        
                    if(reftype == "")
                    {
                        var oRefDetails=[];
                        var oTempRefDetails = $("#tblRefDetail").data('rows');
                        for(var i=0; i<oTempRefDetails.length-1; i++)
                        {
                            oRefDetails.push(oTempRefDetails[i]);
                        }
                        $('#tblRefDetail').data('rows', oRefDetails);
                        document.getElementById("tblRefDetail").deleteRow(nRowIndex);
                        $("#btnSave").focus();
                        $("#btnSave").select();
                        return false;
                    }
                    if(reftype!="SL Bill")
                    {
                        var checkRef = 0;
                        for(var i=0;i<ReferenceList.length;i++)
                        {
                            if(ReferenceList[i] == reftype)
                            {
                                checkRef = 0;
                                break;
                            }
                            else
                            {
                                checkRef = 1;
                            }
                        }
                        if(checkRef == 1)
                        {
                            alert(reftype + " is not enable in account head " + txtAccountHead);
                            return false;
                        }
                    }
                    else
                    {
                        var nIndex = $("#tblRefDetail").data('selectedIndex');
                        var oParentSubLedger = GetParentSubledger(nIndex);
                        if(oParentSubLedger!=null)
                        {
                            if(oParentSubLedger.IsBTAply===false)
                            {
                                alert(reftype + " is not enable for your selected " + oParentSubLedger.Name);
                                return false;
                            }
                        }
                        else
                        {
                            alert(reftype + " is not enable for your selected subledger");
                            return false;
                        }
                    }

                    if(reftype === "Subledger" || reftype === "Bill" || reftype === "Inventory" || reftype === "SL Bill")
                    {
                        //var sAHOBTStr = $("#tblRefDetail").data('rows')[nRowIndex].AHOBTStr;
                        //if(sAHOBTStr!=reftype && reftype=="Inventory"){
                        //    DeleteRowForIR(nRowIndex,reftype);
                        //}else{
                        //    DeleteRowForCCBT(nRowIndex,reftype);
                        //}
                        var nInputBoxIndex= $('.debitcreditclass').index($('#tblRefDetail tr').eq(nRowIndex).find('input.debitcreditclass'));
                        ResetAllInputBox(nInputBoxIndex, '.debitcreditclass');
                        InitializeKeyDownEvent(".debitcreditclass"); return;
                    }
                    else
                    {
                        alert("Sorry,Invalid Reference Type.");
                        return false;
                    }
                }
            });
        }
        else if(classname==".debitcreditclass")
        {
            $('.debitcreditclass').keydown(function (e) {
                if (e.which === 9 || e.which === 13) {

                    var DrCr = $(this).val();
                    var nRowIndex=$("#tblRefDetail").data('selectedIndex');
                    if(DrCr == "Debit" || DrCr == "Credit")
                    {
                        $("#tblRefDetail").data('rows')[nRowIndex].DR_CR = DrCr;
                        if(DrCr == "Debit")
                        {
                            var creditclass = $('#tblRefDetail tr').eq(nRowIndex).find('.creditclass');
                            creditclass.val(0.00);
                            $("#tblRefDetail").data('rows')[nRowIndex].CrAmount = 0.00;
                        }
                        else
                        {
                            var debitclass = $('#tblRefDetail tr').eq(nRowIndex).find('.debitclass');
                            debitclass.val(0.00);
                            $("#tblRefDetail").data('rows')[nRowIndex].DrAmount = 0.00;
                        }
                        RefreshSummery();
                        var nInputBoxIndex= $('.nameclass').index($('#tblRefDetail tr').eq(nRowIndex).find('input.nameclass'));
                        ResetAllInputBox(nInputBoxIndex, '.nameclass');
                        InitializeKeyDownEvent(".nameclass"); return;
                    }
                    else
                    {
                        alert("Sorry,Invalid Dr/Cr.");
                        return false;
                    }
                }
            });
        }
        else if(classname==".nameclass")
        {
            $('.nameclass').keydown(function (e)
            {
                if(e.which === 13 || e.which === 9)
                {
                    var nRowIndex=$("#tblRefDetail").data('selectedIndex');
                    var nReftype = parseInt($("#tblRefDetail").data('rows')[nRowIndex].AHOBTInt);                    

                    if(nReftype === 1)//Subledger
                    {
                        var txtCostCenterName = $(this).val();
                        if(txtCostCenterName==null || txtCostCenterName=="")
                        {
                            alert("Please Press Enter With Cost Center Name!");
                            return false;
                        }
                        var oACCostCenter = {
                            Name : txtCostCenterName,
                            AccountHeadID : _nAccountHeadID
                        };
                        $.ajax({
                            type: "POST",
                            dataType: "json",
                            url : sessionStorage.getItem('BaseAddress')+  "/ACCostCenter/GetsCostCenter",
                            traditional: true,
                            data:  JSON.stringify(oACCostCenter),
                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                var oCostCenters = jQuery.parseJSON(data);
                                _oCostCenters = oCostCenters;
                                RefreashCostCenters(oCostCenters);
                                $("#txtSearchByCostCenterName").val(txtCostCenterName);
                                $('#winCostCenterName').window('open');
                                $("#txtSearchByCostCenterName").select();

                            },
                            error: function (xhr, status, error) {
                                alert(error);
                            }
                        });
                    }
                    else if(nReftype === 2)//Bill
                    {                        
                        var nIndex = $("#tblRefDetail").data('selectedIndex');
                        var billNo = $(this).val();
                        var oVoucherBill = {
                            AccountHeadID : _nAccountHeadID,
                            VoucherBillID : $("#tblRefDetail").data('rows')[nIndex].BObjID,
                            BillNo : billNo,
                            SubLedgerID : 0
                        };
                        $.ajax({
                            type: "POST",
                            dataType: "json",
                            url : sessionStorage.getItem('BaseAddress')+  "/VoucherBill/GetsBillAO",
                            traditional: true,
                            data:  JSON.stringify(oVoucherBill),
                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                var oVoucherBills = jQuery.parseJSON(data);
                                _oVoucherBills = oVoucherBills;
                                RefreashBillNos(oVoucherBills);
                                $("#txtSearchByBillNo").val(billNo);
                                $('#winBillNo').window('open');
                                $("#btnCreateNewBill").show();
                                $("#txtSearchByBillNo").select();
                            },
                            error: function (xhr, status, error) {
                                alert(error);
                            }
                        });
                    }
                    else if(nReftype === 4) //Inventory
                    {
                        var txtProductName = $(this).val();
                        var oProduct = {
                            ProductName : txtProductName,
                            BUID : parseInt($('#cboBusinessUnit').val())
                        };
                        $.ajax({
                            type: "POST",
                            dataType: "json",
                            url : sessionStorage.getItem('BaseAddress')+  "/Product/SearchByProductBUWise",
                            traditional: true,
                            data:  JSON.stringify(oProduct),
                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                var oProducts = data;
                                RefreashProducts(oProducts);
                                $("#txtSearchByProductName").val(txtProductName);
                                $('#winProduct').window('open');
                                $("#txtSearchByProductName").select();
                            },
                            error: function (xhr, status, error) {
                                alert(error);
                            }
                        });
                    }
                    else if(nReftype === 5)//SL Bill
                    {                        
                        var nIndex = $("#tblRefDetail").data('selectedIndex');                        
                        var billNo = $(this).val();
                        var oVoucherBill = {
                            AccountHeadID : _nAccountHeadID,
                            VoucherBillID : $("#tblRefDetail").data('rows')[nIndex].BObjID,
                            BillNo : billNo,
                            SubLedgerID : $("#tblRefDetail").data('rows')[nIndex].CCID
                        };
                        $.ajax({
                            type: "POST",
                            dataType: "json",
                            url : sessionStorage.getItem('BaseAddress')+  "/VoucherBill/GetsBillAO",
                            traditional: true,
                            data:  JSON.stringify(oVoucherBill),
                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                var oVoucherBills = jQuery.parseJSON(data);
                                _oVoucherBills = oVoucherBills;
                                RefreashBillNos(oVoucherBills);
                                $("#txtSearchByBillNo").val(billNo);
                                $('#winBillNo').window('open');
                                $("#btnCreateNewBill").show();
                                $("#txtSearchByBillNo").select();
                            },
                            error: function (xhr, status, error) {
                                alert(error);
                            }
                        });
                    }
                }
            });
        }
        else if(classname==".cAmountclass")
        {
            $('.cAmountclass').keydown(function (e) {
                if (e.which === 9 || e.which === 13) {
                    var nRowIndex=$("#tblRefDetail").data('selectedIndex');
                    var nAHOBTInt = parseInt($("#tblRefDetail").data('rows')[nRowIndex].AHOBTInt);
                    var sAHOBTStr = $("#tblRefDetail").data('rows')[nRowIndex].AHOBTStr;

                    var nCRate = parseFloat(icsRemoveComma($('#txtNewOpenningBalanceCRate').val()));
                    if(nCRate==='NaN' || nCRate=== 'undefined' || nCRate<=0)
                    {
                        alert("Please Enter Conversion Rate.");
                        $('#txtNewOpenningBalanceCRate').focus();
                        return false;
                    }

                    var nGivenAmount = parseFloat(icsRemoveComma($(this).val()));
                    if(nGivenAmount<=0)
                    {
                        alert("Please give Amount.");
                        return false;
                    }
                    var DrCr = $("#tblRefDetail").data('rows')[nRowIndex].DR_CR;
                    if(DrCr == "Debit")
                    {
                        $("#tblRefDetail").data('rows')[nRowIndex].CAmount=nGivenAmount;
                        $("#tblRefDetail").data('rows')[nRowIndex].DrAmount=(nGivenAmount * nCRate);
                        $("#tblRefDetail").data('rows')[nRowIndex].CrAmount=parseFloat(0.00);
                        $('.debitclass').eq(nRowIndex).html(formatPrice((nGivenAmount * nCRate)));
                        $('.creditclass').eq(nRowIndex).html(formatPrice(0.00));
                    }
                    else
                    {
                        $("#tblRefDetail").data('rows')[nRowIndex].CAmount=nGivenAmount;
                        $("#tblRefDetail").data('rows')[nRowIndex].DrAmount=parseFloat(0.00);
                        $("#tblRefDetail").data('rows')[nRowIndex].CrAmount=(nGivenAmount * nCRate);
                        $('.debitclass').eq(nRowIndex).html(formatPrice(0.00));
                        $('.creditclass').eq(nRowIndex).html(formatPrice((nGivenAmount * nCRate)));
                    }
                    $(this).val(formatPrice(nGivenAmount,null));                       
                    RefreshSummery();
                    IdentifyConfiguration(nRowIndex,this);
                }

            });
        }        
        else if(classname==".irWorkingUnitClass")
        {
            $('.irWorkingUnitClass').keydown(function (e)
            {
                if(e.which === 13 || e.which === 9)
                {
                    var txtWorkingUnit = $(this).val();
                    var oGetsWorkingUnit = {
                        LocationName : "" //txtWorkingUnit
                    }
                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        url : sessionStorage.getItem('BaseAddress')+  "/WorkingUnit/GetsWorkingUnit",
                        traditional: true,
                        data:  JSON.stringify(oGetsWorkingUnit),
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            var oWorkingUnits = jQuery.parseJSON(data);
                            _oWorkingUnits = oWorkingUnits;
                            RefreashWorkingUnits(oWorkingUnits);
                            $('#winWorkingUnit').window('open');
                            $("#txtSearchByWorkingUnit").select();
                        },
                        error: function (xhr, status, error) {
                            alert(error);
                        }
                    });
                }
            });
        }
        else if(classname==".irMeasurementUnitClass")
        {
            $('.irMeasurementUnitClass').keydown(function (e)
            {
                if(e.which === 13 || e.which === 9)
                {
                    var txtMUnit = $(this).val();
                    var nRowIndex=$("#tblRefDetail").data('selectedIndex');
                    var productId = $("#tblRefDetail").data('rows')[nRowIndex].BObjID;
                    var oMeasurementUnit = {
                        ProductID : productId
                    }
                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        url : sessionStorage.getItem('BaseAddress')+  "/MeasurementUnit/GetsMUnits",
                        traditional: true,
                        data:  JSON.stringify(oMeasurementUnit),
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            var oMeasurementUnits = jQuery.parseJSON(data);
                            _oMeasurementUnits = oMeasurementUnits;
                            RefreashMUnits(oMeasurementUnits);
                            $("#txtSearchByMUnit").val(txtMUnit);
                            $('#winMUnit').window('open');
                            $("#txtSearchByMUnit").select();
                        },
                        error: function (xhr, status, error) {
                            alert(error);
                        }
                    });
                }
            });
        }
        else if(classname==".irQtyClass")
        {
            $('.irQtyClass').keydown(function (e) {
                if (e.which === 9 || e.which === 13) {

                    var nRowIndex=$("#tblRefDetail").data('selectedIndex');
                    var irQty=$.trim($(this).val());
                    irQty = RemoveComma(irQty);
                    if(irQty==""||irQty==null ||isNaN(irQty))
                    {
                        alert("Please enter some Qty!");
                        return false;
                    }
                    if(parseFloat(irQty)<= 0)
                    {
                        alert("Please enter some Qty!");
                        return false;
                    }
                    var qty = parseFloat(irQty);
                    $("#tblRefDetail").data('rows')[nRowIndex].Qty = qty;
                    var index = $('.irQtyClass').index(this);
                    ResetAllInputBox(index, '.irUnitPriceClass');
                    var sClassName=".irUnitPriceClass";
                    InitializeKeyDownEvent(sClassName); return;
                }
            });
        }
        else if(classname==".irUnitPriceClass")
        {
            $('.irUnitPriceClass').keydown(function (e) {
                if (e.which === 9 || e.which === 13) {
                    var nRowIndex=$("#tblRefDetail").data('selectedIndex');
                    var unitPrice = RemoveComma((($(this).val())));
                    if(unitPrice==""||unitPrice==null ||isNaN(unitPrice))
                    {
                        alert("Please enter Unit Price!");
                        return false;
                    }
                    if(parseFloat(unitPrice)<= 0)
                    {
                        alert("Please enter Unit Price!");
                        return false;
                    }
                    $("#tblRefDetail").data('rows')[nRowIndex].UPrice = unitPrice;
                    var index =  nRowIndex;//$('.irUnitPriceClass').index(this);

                    var qty = $("#tblRefDetail").data('rows')[nRowIndex].Qty;
                    var unitPrice = $("#tblRefDetail").data('rows')[nRowIndex].UPrice;
                    var amount = CalculateIRAmount(qty,unitPrice);
                    $("#tblRefDetail").data('rows')[nRowIndex].Amount = amount;
                    //var index = $('.irAmountClass').index(this);
                    var sIRAmount=$.trim($(this).val());
                    var totalCreditOrDebitAmount = 0;
                    var totalIRAmount = 0;
                    var debitOrCredit = "";

                    for(var i = nRowIndex;i >= 0;i--)
                    {
                        if($("#tblRefDetail").data('rows')[i].DR_CR == "Inventory")
                        {
                            totalIRAmount = parseFloat(totalIRAmount) + parseFloat($("#tblRefDetail").data('rows')[i].Amount);
                           
                        }
                        else if($("#tblRefDetail").data('rows')[i].DR_CR == "Credit")
                        {
                            totalCreditOrDebitAmount = $("#tblRefDetail").data('rows')[i].CAmount;
                            debitOrCredit = "Credit";
                            break;
                        }
                        else if($("#tblRefDetail").data('rows')[i].DR_CR == "Debit")
                        {
                            totalCreditOrDebitAmount = $("#tblRefDetail").data('rows')[i].CAmount;
                            debitOrCredit = "Debit";
                            break;
                        }
                    }
                    if(parseFloat(totalIRAmount.toFixed(2)) > parseFloat(totalCreditOrDebitAmount.toFixed(2)))
                    {
                        alert("Sorry,Total Amount for this "+ debitOrCredit +" is " + parseFloat(totalCreditOrDebitAmount.toFixed(2)));
                        return false;
                    }
                    $('.irAmountClass').eq(index).text(formatPrice(amount,null));


                    
                   

                    var sDR_CR = $("#tblRefDetail").data('rows')[index].DR_CR;
                    var nAmount = parseFloat(qty.toFixed(2)) * parseFloat(parseFloat(sIRAmount).toFixed(2));
                    $("#tblRefDetail").data('rows')[index].CAmount = nAmount;
                    if(sDR_CR == "Debit")
                    {
                        $("#tblRefDetail").data('rows')[index].DrAmount = parseFloat(parseFloat(nAmount.toFixed(2)) * parseFloat($("#txtNewOpenningBalanceCRate").val()));
                        $("#tblRefDetail").data('rows')[index].CrAmount = 0;

                        $('.debitclass').eq(index).text(formatPrice(nAmount,null));
                        $('.creditclass').eq(index).text(formatPrice(0,null));

                    }else{
                        $("#tblRefDetail").data('rows')[index].DrAmount = 0;
                        $("#tblRefDetail").data('rows')[index].CrAmount = parseFloat(parseFloat(nAmount.toFixed(2)) * parseFloat($("#txtNewOpenningBalanceCRate").val()));

                        $('.creditclass').eq(index).text(formatPrice(nAmount,null));
                        $('.debitclass').eq(index).text(formatPrice(0,null));

                    }

                    var sRefType = $("#tblRefDetail").data('rows')[index].AHOBTStr;
                    //if(sRefType == "Inventory")
                    //{
                    //    GetTotalAmount(sRefType);
                    //}
                    RefreshSummery();
                    IdentifyConfiguration(nRowIndex,this);
                }
            });
        }
    }

    function GetParentSubledger(nRowIndex)
    {
        for(var i=nRowIndex; i>=0;i--)
        {
            var oParenSubledger = $("#tblRefDetail").data('rows')[i];
            if(parseInt(oParenSubledger.AHOBTInt) === 1)//CostCenter = 1
            {
                return oParenSubledger;
            }
        }
        return oParenSubledger;
    }

    function CheckDuplicateOrNot(searchItem,configType)
    {
        var rowCount = $("#tblRefDetail").data("selectedIndex");
        var totalCount = $('#tblRefDetail tr').length;
        var ccIDs = [];
        var irIDs = [];
        var vrDexcriptions = [];
        var btIDs = [];
        var nRowIndex=$("#tblRefDetail").data('selectedIndex');
        var currentID = $("#tblRefDetail").data('rows')[nRowIndex].BObjID;
        var currentExplanationDescription = $("#tblRefDetail").data('rows')[nRowIndex].CFormat;
        if(parseInt(searchItem) == parseInt(currentID) || currentExplanationDescription == searchItem)
        {
            result = "Not Duplicate";
        }
        else
        {
            for(var i=rowCount;i>=0;i--)
            {
                var indexExplanationID = parseInt($("#tblRefDetail").data('rows')[i].BObjID);
                if($("#tblRefDetail").data('rows')[i].DR_CR == "Subledger" && indexExplanationID !=0 && parseInt(searchItem) != parseInt(currentID))
                {
                    ccIDs.push(parseInt(indexExplanationID));
                }
                else if($("#tblRefDetail").data('rows')[i].DR_CR == "Bill" && indexExplanationID !=0 && parseInt(searchItem) != parseInt(currentID))
                {
                    btIDs.push(parseInt(indexExplanationID));
                }
                else if($("#tblRefDetail").data('rows')[i].DR_CR == "VR" )
                {
                    vrDexcriptions.push($("#tblRefDetail").data('rows')[i].CFormat);
                }
                else if($("#tblRefDetail").data('rows')[i].DR_CR == "Inventory" && indexExplanationID !=0 && parseInt(searchItem) != parseInt(currentID))
                {
                    irIDs.push(parseInt(indexExplanationID));
                }
                else if($("#tblRefDetail").data('rows')[i].DR_CR == "Credit")
                {
                    break;
                }
                else if($("#tblRefDetail").data('rows')[i].DR_CR == "Debit")
                {
                    break;
                }
            }
            for(var i=rowCount+1;i<totalCount;i++)
            {
                var indexExplanationID = parseInt($("#tblRefDetail").data('rows')[i].BObjID);
                if($("#tblRefDetail").data('rows')[i].DR_CR == "Subledger" && indexExplanationID !=0 && parseInt(searchItem) != parseInt(currentID))
                {
                    ccIDs.push(parseInt(indexExplanationID));
                }
                else if($("#tblRefDetail").data('rows')[i].DR_CR == "Bill" && indexExplanationID !=0 && parseInt(searchItem) != parseInt(currentID))
                {
                    btIDs.push(parseInt(indexExplanationID));
                }
                else if($("#tblRefDetail").data('rows')[i].DR_CR == "VR" )
                {
                    vrDexcriptions.push($("#tblRefDetail").data('rows')[i].CFormat);
                }
                else if($("#tblRefDetail").data('rows')[i].DR_CR == "Inventory" && indexExplanationID !=0 && parseInt(searchItem) != parseInt(currentID))
                {
                    irIDs.push(parseInt(indexExplanationID));
                }
                else if($("#tblRefDetail").data('rows')[i].DR_CR == "Credit")
                {
                    break;
                }
                else if($("#tblRefDetail").data('rows')[i].DR_CR == "Debit")
                {
                    break;
                }
            }
            var result = "Not Duplicate";
            if(configType == "Subledger")
            {
                for(var i=0;i<ccIDs.length;i++)
                {
                    if(parseInt(searchItem) == parseInt(ccIDs[i]))
                    {
                        result = "Duplicate";
                        break;
                    }
                    else
                    {
                        result = "Not Duplicate";
                    }
                }
            }
            else if(configType == "Bill")
            {
                for(var i=0;i<btIDs.length;i++)
                {
                    if(parseInt(searchItem) == parseInt(btIDs[i]))
                    {
                        result = "Duplicate";
                        break;
                    }
                    else
                    {
                        result = "Not Duplicate";
                    }
                }
            }
            else if(configType == "VR")
            {
                for(var i=0;i<vrDexcriptions.length;i++)
                {
                    if(searchItem == vrDexcriptions[i])
                    {
                        result = "Duplicate";
                        break;
                    }
                    else
                    {
                        result = "Not Duplicate";
                    }
                }
            }
            else if(configType == "Inventory")
            {
                for(var i=0;i<irIDs.length;i++)
                {

                    if(parseInt(searchItem) == parseInt(irIDs[i]))
                    {
                        result = "Duplicate";
                        break;
                    }
                    else
                    {
                        result = "Not Duplicate";
                    }
                }
            }
        }
        return result;
    }

    function CalculateIRAmount(qty,unitPrice)
    {
        var amount = parseFloat(qty) * parseFloat(unitPrice);
        return parseFloat(amount);
    }

    function DateValidation(InputDate)
    {
        var MonthArray = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
        var sInputDate = InputDate.split(" ");
        var dateLength =  sInputDate[0].length;
        var monthLength = sInputDate[1].length;
        var trimYear = $.trim(sInputDate[2]);
        var yearLength =  trimYear.length;
        var monthNumber=0;
        var result = "";
        if(parseInt(dateLength) != 2 || parseInt(monthLength) != 3 || parseInt(yearLength) != 4 || parseInt(trimYear) < 2000)
        {
            result = "Invalid Date";
        }
        if(result != "Invalid Date")
        {
            for(var i=0; i<MonthArray.length; i++)
            {
                var makeUpperCase = sInputDate[1].toUpperCase();
                if(makeUpperCase == MonthArray[i].toUpperCase())
                {
                    result = "Valid Month";
                    monthNumber = (i+1);
                    break;
                }
                else
                {
                    result = "Invalid Date";
                }
            }
        }
        if(result == "Valid Month")
        {
            var year = parseInt(trimYear);
            var month = monthNumber;
            var days = Math.round(((new Date(year, month))-(new Date(year, month-1)))/86400000);
            if(parseInt(sInputDate[0]) < 0 || parseInt(sInputDate[0]) > days)
            {
                result = "Invalid Date";
            }
            else
            {
                result = "Valid Date";
            }
        }
        if(result == "Valid Date")
        {
            var sInputDate = InputDate.split(" ");
            sInputDate[1] = CapitaliseFirstLetter(sInputDate[1]);
            result = sInputDate[0] + " " + sInputDate[1] + " " + sInputDate[2];
        }
        return result;
    }

    function CapitaliseFirstLetter(string)
    {
        var result = string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
        return result;
    }

    function IdentifyConfiguration(nRowIndex,InputControl) //Identify what will be the parameter of function "AddRefDetail"
    {
        var parentIndex = 0;
        var bIsSubLedgerBillApply=false;        
        var oCurrentObj=$("#tblRefDetail").data('rows')[nRowIndex];
        var nRowCount=$("#tblRefDetail").data('rows').length;

        if(typeof oCurrentObj!='undefined')
        {
            if(parseInt(oCurrentObj.AHOBTInt) === 1) //Subledger
            {
                if(oCurrentObj.IsBTAply===true)
                {
                    bIsSubLedgerBillApply=oCurrentObj.IsBTAply;                
                    parentIndex = nRowIndex;
                }            
            }
            else if(parseInt(oCurrentObj.AHOBTInt) === 5) //SubledgerBill = 5
            {
                for(var i=nRowIndex ; i>=0;i--)
                {
                    if(parseInt($("#tblRefDetail").data('rows')[i].AHOBTInt) === 1)//CostCenter = 1
                    {
                        bIsSubLedgerBillApply=true;
                        parentIndex = i;
                        break;
                    }
                }

                var nSLBillGapAmount=0; var nSubledgerBillTotal=0;
                var ParentObj=$("#tblRefDetail").data('rows')[parentIndex];
                for(var i=nRowIndex ; i>=0;i--)
                {
                    if(parseInt($("#tblRefDetail").data('rows')[i].AHOBTInt) === 1 && $("#tblRefDetail").data('rows')[i].IsBTAply)//CostCenter = 1
                    {
                        break;
                    }
                    if(parseInt($("#tblRefDetail").data('rows')[i].AHOBTInt) === 5 && parseInt($("#tblRefDetail").data('rows')[i].CCID)>0)//SubledgerBill = 5
                    {
                        nSubledgerBillTotal=nSubledgerBillTotal+ parseFloat(parseFloat($("#tblRefDetail").data('rows')[i].CAmount));
                    }

                }
                nSLBillGapAmount = parseFloat(ParentObj.CAmount) - parseFloat(nSubledgerBillTotal);
                nSLBillGapAmount = parseFloat(nSLBillGapAmount.toFixed(2));
                if(nSLBillGapAmount<0)
                {
                    nSLBillGapAmount=nSLBillGapAmount*(-1);
                }
                if(nSLBillGapAmount<=0.01)
                {
                    bIsSubLedgerBillApply=false;                
                }
            }

            var nSLBillGapAmount=0; var nSubledgerBillTotal=0;
            var ParentObj=$("#tblRefDetail").data('rows')[parentIndex];
            if(bIsSubLedgerBillApply)
            {   
                for(var i=nRowIndex ; i>=0;i--)
                {
                    if(parseInt(oCurrentObj.AHOBTInt)===1 || parseInt(oCurrentObj.AHOBTInt)===5) //CostCenter = 1, SubledgerBill = 5
                    {
                        if(parseInt($("#tblRefDetail").data('rows')[i].AHOBTInt) === 1 && $("#tblRefDetail").data('rows')[i].IsBTAply)//CostCenter = 1
                        {
                            break;
                        }
                        if(parseInt($("#tblRefDetail").data('rows')[i].AHOBTInt) === 5 && parseInt($("#tblRefDetail").data('rows')[i].CCID)>0)//SubledgerBill = 5
                        {
                            nSubledgerBillTotal=nSubledgerBillTotal+ parseFloat(parseFloat($("#tblRefDetail").data('rows')[i].CAmount))
                        }
                    }
                }
                nSLBillGapAmount = parseFloat(ParentObj.CAmount) - parseFloat(nSubledgerBillTotal);
                nSLBillGapAmount = parseFloat(nSLBillGapAmount.toFixed(2));
                if(nSLBillGapAmount<0)
                {
                    nSLBillGapAmount=nSLBillGapAmount*(-1);
                }
            }
        }

     
        //Problem
        if(bIsSubLedgerBillApply === Boolean(1) && nSLBillGapAmount>0.01)
        {
            if(nRowIndex==nRowCount-1)
            {                
                var oRefDetails = PushObject(nRowIndex, 5, ParentObj);//Sub Bill
                RemakeGrid(oRefDetails);
            } 
            else
            {
                var AHOBTInt=parseInt($("#tblRefDetail").data('rows')[nRowIndex+1].AHOBTInt);
                if(AHOBTInt!=5)
                {                    
                    var oRefDetails = PushObject(nRowIndex, 5, ParentObj); // Sub Bill
                    RemakeGrid(oRefDetails);
                }
            }
            ResetAllRows();
            GridStyleCostCenter(InputControl);
        }
        else if(_IsCostCenterApply == Boolean(1))
        {
            if(nRowIndex===0 || nRowIndex==nRowCount-1)
            {                
                var oRefDetails = PushObject(nRowIndex, 1);//Subledger
                RemakeGrid(oRefDetails);
            }            
            ResetAllRows();
            GridStyleCostCenter(InputControl);
        }
        else if(_IsBillRefApply == Boolean(1))
        {
            if(nRowIndex==nRowCount-1)
            {                
                var oRefDetails = PushObject(nRowIndex, 2); //Bill
                RemakeGrid(oRefDetails);
            }            
            ResetAllRows();
            GridStyleBillTransaction(InputControl);
        }
        else if(_IsInventoryApply == Boolean(1))
        {
            if(nRowIndex==nRowCount-1)
            {                
                var oRefDetails = PushObject(nRowIndex, 4); //Inventory
                RemakeGrid(oRefDetails);
            }           
            ResetAllRows();
            GridStyleInventoryReference(InputControl);
        }        
    }

    function PushObject(nCurrentRowIndex, nAHOBT, oParentAOB)
    {
        var oRefDetails=[];
        var oTempVoucherDetails= $("#tblRefDetail").data('rows');
        for(var i=0; i<oTempVoucherDetails.length; i++)
        {
            oRefDetails.push(oTempVoucherDetails[i]);
            if(i==nCurrentRowIndex)
            {
                var oRefDetail=NewObject(nAHOBT);
                if(nAHOBT===5)
                {
                    oRefDetail.CCID = oParentAOB.BObjID;
                    oRefDetail.CCName = oParentAOB.Name;                    
                }                
                oRefDetails.push(oRefDetail);
            }
        }
        return oRefDetails;
    }
    
    function GridStyleCostCenter(InputControl)
    {       
        var nCurrentRowIndex =0;
        if(InputControl!=null)
        {
            nCurrentRowIndex =parseInt(InputControl.attributes["rowIndex"].value);
        }
        var nNextRowIndex =nCurrentRowIndex+1;
        $('#tblRefDetail tr').eq(nNextRowIndex).addClass("highlight");
        $('#tblRefDetail tr').eq(nNextRowIndex).find('input').addClass("textboxstyle2");        
        $("#tblRefDetail").data("selectedIndex", nNextRowIndex);
        var nDebitCreditIndex= $('.reftypeclass').index($('#tblRefDetail tr').eq(nNextRowIndex).find('input.reftypeclass'));        
        ResetAllInputBox(nDebitCreditIndex, '.reftypeclass');
        RefreshSummery();        
        InitializeKeyDownEvent(".reftypeclass"); return;
    }

    function GridStyleBillTransaction(InputControl)
    {
        var nCurrentRowIndex =-1;
        if(InputControl!=null)
        {
            nCurrentRowIndex =parseInt(InputControl.attributes["rowIndex"].value);
        }
        var nNextRowIndex =nCurrentRowIndex+1;
        $('#tblRefDetail tr').eq(nNextRowIndex).addClass("highlight");
        $('#tblRefDetail tr').eq(nNextRowIndex).find('input').addClass("textboxstyle2");
        $('#tblRefDetail tr').eq(nNextRowIndex).find('input').addClass("textboxstyle2");
        $("#tblRefDetail").data("selectedIndex", nNextRowIndex);
        var nDebitCreditIndex=$('.reftypeclass').index($('#tblRefDetail tr').eq(nNextRowIndex).find('input.reftypeclass'));        
        ResetAllInputBox(nDebitCreditIndex, '.reftypeclass');
        RefreshSummery();        
        InitializeKeyDownEvent(".reftypeclass"); return;
    }  
    
    function GridStyleInventoryReference(InputControl)
    {
        var nCurrentRowIndex =-1;
        if(InputControl!=null)
        {
            nCurrentRowIndex =parseInt(InputControl.attributes["rowIndex"].value);
        }
        var nNextRowIndex =nCurrentRowIndex+1;
        $('#tblRefDetail tr').eq(nNextRowIndex).addClass("highlight");
        $('#tblRefDetail tr').eq(nNextRowIndex).find('input').addClass("textboxstyle2");
        $('#tblRefDetail tr').eq(nNextRowIndex).find('input').addClass("textboxstyle2");
        $("#tblRefDetail").data("selectedIndex", nNextRowIndex);
        var nDebitCreditIndex=$('.reftypeclass').index($('#tblRefDetail tr').eq(nNextRowIndex).find('input.reftypeclass'));        
        ResetAllInputBox(nDebitCreditIndex, '.reftypeclass');
        RefreshSummery();        
        InitializeKeyDownEvent(".reftypeclass"); return;
    }
    
    function InitializeEvent()
    {
        $("#tblRefDetail tr").click(function() {
            ResetAllRows();
            $(this).addClass("highlight");
            $(this).find('input').addClass("textboxstyle2");
            $("#tblRefDetail").data("selectedIndex", this.rowIndex);
            ResetAllInputBox(_nInputBoxIndex, _sInputBoxClass);
        });

        $('.debitcreditclass').keyup(function (e) {
            if (e.which == 67) {
                $(this).val("Credit");
            }
            else if (e.which == 68) {
                $(this).val("Debit");
            }
        });

        $('.reftypeclass').keyup(function (e) {
            if (e.which == 83) {
                $(this).val("Subledger");
            }
            else if (e.which == 66) {
                $(this).val("Bill");
            }
            else if (e.which == 73) {
                $(this).val("Inventory");
            }
            else if (e.which == 76) {
                $(this).val("SL Bill");
            }
        });

        $('.debitcreditclass').click(function (e) {
            _nInputBoxIndex = $('.debitcreditclass').index(this);
            _sInputBoxClass='.debitcreditclass';
            InitializeKeyDownEvent(".debitcreditclass"); return;
        });
        $('.accountclass').click(function (e) {
            _nInputBoxIndex = $('.accountclass').index(this);
            _sInputBoxClass='.accountclass';
            InitializeKeyDownEvent(".accountclass"); return;
        });
        $('.narrationclass').click(function (e) {
            _nInputBoxIndex = $('.narrationclass').index(this);
            _sInputBoxClass='.narrationclass';
            InitializeKeyDownEvent(".narrationclass"); return;
        });
        $('.currencyclass').click(function (e) {
            _nInputBoxIndex = $('.currencyclass').index(this);
            _sInputBoxClass='.currencyclass';
            InitializeKeyDownEvent(".currencyclass"); return;
        });
        $('.debitclass').click(function (e) {
            _nInputBoxIndex = $('.debitclass').index(this);
            _sInputBoxClass='.debitclass';
            InitializeKeyDownEvent(".debitclass"); return;
        });
        $('.creditclass').click(function (e) {
            _nInputBoxIndex = $('.creditclass').index(this);
            _sInputBoxClass='.creditclass';
            InitializeKeyDownEvent(".creditclass"); return;
        });
        $('.vrdescriptionclass').click(function (e) {
            _nInputBoxIndex = $('.vrdescriptionclass').index(this);
            _sInputBoxClass='.vrdescriptionclass';
            InitializeKeyDownEvent(".vrdescriptionclass"); return;
        });
        $('.vramountclass').click(function (e) {
            _nInputBoxIndex = $('.vramountclass').index(this);
            _sInputBoxClass='.vramountclass';
            InitializeKeyDownEvent(".vramountclass"); return;
        });
        $('.nameclass').click(function (e) {
            _nInputBoxIndex = $('.nameclass').index(this);
            _sInputBoxClass='.nameclass';
            InitializeKeyDownEvent(".nameclass"); return;
        });
        $('.reftypeclass').click(function (e) {
            _nInputBoxIndex = $('.reftypeclass').index(this);
            _sInputBoxClass='.reftypeclass';
            InitializeKeyDownEvent(".reftypeclass"); return;
        });
        $('.cfomatclass').click(function (e) {
            _nInputBoxIndex = $('.cfomatclass').index(this);
            _sInputBoxClass='.cfomatclass';
            InitializeKeyDownEvent(".cfomatclass"); return;
        });

        //cAmountclass
        $('.cAmountclass').click(function (e) {
            _nInputBoxIndex = $('.cAmountclass').index(this);
            _sInputBoxClass='.cAmountclass';
            InitializeKeyDownEvent(".cAmountclass"); return;
        });






        $('.ccamountclass').click(function (e) {
            _nInputBoxIndex = $('.ccamountclass').index(this);
            _sInputBoxClass='.ccamountclass';
            InitializeKeyDownEvent(".ccamountclass"); return;
        });
        $('.nameclass').click(function (e) {
            _nInputBoxIndex = $('.nameclass').index(this);
            _sInputBoxClass='.nameclass';
            InitializeKeyDownEvent(".nameclass"); return;
        });
        $('.irWorkingUnitClass').click(function (e) {
            _nInputBoxIndex = $('.irWorkingUnitClass').index(this);
            _sInputBoxClass='.irWorkingUnitClass';
            InitializeKeyDownEvent(".irWorkingUnitClass"); return;
        });
        $('.irMeasurementUnitClass').click(function (e) {
            _nInputBoxIndex = $('.irMeasurementUnitClass').index(this);
            _sInputBoxClass='.irMeasurementUnitClass';
            InitializeKeyDownEvent(".irMeasurementUnitClass"); return;
        });
        $('.irQtyClass').click(function (e) {
            _nInputBoxIndex = $('.irQtyClass').index(this);
            _sInputBoxClass='.irQtyClass';
            InitializeKeyDownEvent(".irQtyClass"); return;
        });
        $('.irUnitPriceClass').click(function (e) {
            _nInputBoxIndex = $('.irUnitPriceClass').index(this);
            _sInputBoxClass='.irUnitPriceClass';
            InitializeKeyDownEvent(".irUnitPriceClass"); return;
        });
        $('.irAmountClass').click(function (e) {
            _nInputBoxIndex = $('.irAmountClass').index(this);
            _sInputBoxClass='.irAmountClass';
            InitializeKeyDownEvent(".irAmountClass"); return;
        });
        $('.btTrTypeClass').click(function (e) {
            _nInputBoxIndex = $('.btTrTypeClass').index(this);
            _sInputBoxClass='.btTrTypeClass';
            InitializeKeyDownEvent(".btTrTypeClass"); return;
        });
        $('.nameclass').click(function (e) {
            _nInputBoxIndex = $('.nameclass').index(this);
            _sInputBoxClass='.nameclass';
            InitializeKeyDownEvent(".nameclass"); return;
        });
        $('.btBillDateClass').click(function (e) {
            _nInputBoxIndex = $('.btBillDateClass').index(this);
            _sInputBoxClass='.btBillDateClass';
            InitializeKeyDownEvent(".btBillDateClass"); return;
        });
        $('.btAmountClass').click(function (e) {
            _nInputBoxIndex = $('.btAmountClass').index(this);
            _sInputBoxClass='.btAmountClass';
            InitializeKeyDownEvent(".btAmountClass"); return;
        });
        ////number allow only numeric value
        $(".vramountclass").keypress(function (e) {
            if (e.which != 8 && e.which != 0  && e.which != 46  && (e.which < 48 || e.which > 57)) {
                return false;
            }
        });
        $(".ccamountclass").keypress(function (e) {
            if (e.which != 8 && e.which != 0  && e.which != 46  && (e.which < 48 || e.which > 57)) {
                return false;
            }
        });
        $(".irQtyClass").keypress(function (e) {
            if (e.which != 8 && e.which != 0  && e.which != 46  && (e.which < 48 || e.which > 57)) {
                return false;
            }
        });
        $(".irUnitPriceClass").keypress(function (e) {
            if (e.which != 8 && e.which != 0  && e.which != 46  && (e.which < 48 || e.which > 57)) {
                return false;
            }
        });
        $(".irAmountClass").keypress(function (e) {
            if (e.which != 8 && e.which != 0  && e.which != 46  && (e.which < 48 || e.which > 57)) {
                return false;
            }
        });
        $(".btAmountClass").keypress(function (e) {
            if (e.which != 8 && e.which != 0  && e.which != 46  && (e.which < 48 || e.which > 57)) {
                return false;
            }
        });
        $("#txtConversionRate").keypress(function (e) {
            if (e.which != 8 && e.which != 0  && e.which != 46  && (e.which < 48 || e.which > 57)) {
                return false;
            }
        });
        $("#txtBaseCurrencyAmount").keypress(function (e) {
            if (e.which != 8 && e.which != 0  && e.which != 46  && (e.which < 48 || e.which > 57)) {
                return false;
            }
        });
        $("#txtCurrencyAmount").keypress(function (e) {
            if (e.which != 8 && e.which != 0  && e.which != 46  && (e.which < 48 || e.which > 57)) {
                return false;
            }
        });
    }

    function ResetAllRows()
    {
        var tblRefDetail=document.getElementById("tblRefDetail");
        if(tblRefDetail.rows!=null)
        {
            for(var i=0; i<tblRefDetail.rows.length; i++)
            {
                $('#tblRefDetail tr').eq(i).removeClass("highlight");
                $('#tblRefDetail tr').eq(i).find('input').removeClass("textboxstyle2");
            }
        }
    }

    function RefreshAccountHeadLedger(oLedgerHeads)
    {
        //Load Ledger List
        _oLedgerHeads=oLedgerHeads;
        data = _oLedgerHeads.sort(compare);
        data = { "total": "" + data.length + "", "rows": data };
        $('#tblLedgerHead').datagrid('loadData', data);
    }

    function compare(a,b)
    {
        if (a.AccountHeadName < b.AccountHeadName)
            return -1;
        if (a.AccountHeadName > b.AccountHeadName)
            return 1;
        return 0;
    }

    function RefreshSummery()
    {        
        var nTotalDebitCC = 0, nTotalCreditCC = 0;
        var nTotalDebitBT = 0, nTotalCreditBT = 0;
        var nTotalDebitIR = 0, nTotalCreditIR = 0;
       

        var AHOBTStr = "", DrCr = "";
        var nDrAmount = 0, nCrAmount = 0;

        var oRefDetails= $("#tblRefDetail").data('rows');
        if(oRefDetails==null)
        {
            oRefDetails=[];
        }
        for(var i=0;i<oRefDetails.length;i++)
        {
            AHOBTStr = oRefDetails[i].AHOBTStr; 
            DrCr = oRefDetails[i].DR_CR;
            nDrAmount = oRefDetails[i].DrAmount; 
            nCrAmount = oRefDetails[i].CrAmount;
            if(AHOBTStr == "Subledger" && _IsCostCenterApply == true)
            {
                if(DrCr == "Debit")
                {
                    nTotalDebitCC = parseFloat(nDrAmount) + parseFloat(nTotalDebitCC);
                }
                else
                {
                    nTotalCreditCC = parseFloat(nCrAmount) + parseFloat(nTotalCreditCC);
                }
            }
            else if(AHOBTStr == "Bill" && _IsBillRefApply == true)
            {
                if(DrCr == "Debit")
                {
                    nTotalDebitBT = parseFloat(nDrAmount) + parseFloat(nTotalDebitBT);
                }
                else
                {
                    nTotalCreditBT = parseFloat(nCrAmount) + parseFloat(nTotalCreditBT);
                }
            }
            else if(AHOBTStr == "Inventory" && _IsInventoryApply == true)
            {
                if(DrCr == "Debit")
                {
                    nTotalDebitIR = parseFloat(nDrAmount) + parseFloat(nTotalDebitIR);
                }
                else
                {
                    nTotalCreditIR = parseFloat(nCrAmount) + parseFloat(nTotalCreditIR);
                }
            }
        }

        var nMaxDrAmount = Math.max(nTotalDebitCC, nTotalDebitBT, nTotalDebitIR);
        var nMaxCrAmount = Math.max(nTotalCreditCC, nTotalCreditBT, nTotalCreditIR);

        if(isNaN(nMaxDrAmount)){ nMaxDrAmount=0;}
        if(isNaN(nMaxCrAmount)){ nMaxCrAmount=0;}

        $("#lblTotalDebitAmount").text(formatPrice(nMaxDrAmount, null));
        $("#lblTotalCreditAmount").text(formatPrice(nMaxCrAmount, null));

        SetOpenningAccountBalance();
    }

    function RemakeGrid(oRefDetails)
    {
        $("#tblRefDetail").find("tr").remove();
        $('#tblRefDetail').data('rows', []);
        for(var i=0; i<oRefDetails.length;i++)
        {
            AddRefDetail(oRefDetails[i]);
        }
    }

    function RemainingDrOrCrAmount(drOrCrTotalAmount,referenceTotalAmount)
    {
        var remainingAmount = 0;
        remainingAmount = parseFloat(drOrCrTotalAmount)- parseFloat(referenceTotalAmount);
        return parseFloat(remainingAmount);
    }

    function IsDebitCreditEqual()
    {
        var nTotalDebitAmount=0; var nTotalCreditAmount=0;
        var oRefDetails= $("#tblRefDetail").data('rows');
        for(var i=0; i<oRefDetails.length; i++)
        {
            nTotalDebitAmount=nTotalDebitAmount+ parseFloat(oRefDetails[i].DrAmount)
            nTotalCreditAmount=nTotalCreditAmount+parseFloat(oRefDetails[i].CrAmount);
        }
        if(parseFloat(nTotalDebitAmount.toFixed(2))!=parseFloat(nTotalCreditAmount.toFixed(2)))
        {
            return false;
        }
        return true;
    }

    function RefreshControl()
    {
        $('#txtVoucherNo').val(_oAccountOpenning.VoucherNo);
        $('#txtVoucherDate').datebox('setValue', _oAccountOpenning.VoucherDateAsString);
        document.getElementById('lblVoucherType').innerHTML =_oAccountOpenning.VoucherName;
        $('#txtVoucherNo').focus();
    }

    function GetAllSameTypeRefAmount(nRowIndex)
    {
        var totalRow = $("#tblVoucherDetail tr").length;
        var minIndex = (nRowIndex+1);
        var maxIndex = 0;
        var DrCr = $("#tblVoucherDetail").data('rows')[nRowIndex].DR_CR;
        var parentAmount = $("#tblVoucherDetail").data('rows')[nRowIndex].AmountInCurrency;
        var accountHeadName = $("#tblVoucherDetail").data('rows')[nRowIndex].AccountHeadName;

        for(var i=minIndex;i<totalRow;i++)
        {
            var DrCr = $("#tblVoucherDetail").data('rows')[i].DR_CR;
            if(DrCr == "Debit" || DrCr == "Credit")
            {
                maxIndex = i;
                break;
            }
        }

        var nTotalCCAmount = 0.00;
        var nTotalBTAmount = 0.00;
        var nTotalVRAmount = 0.00;
        var nTotalIRAmount = 0.00;



        var IsCostCenterApply = $("#tblVoucherDetail").data('rows')[nRowIndex].IsCostCenterApply;
        var IsBillRefApply = $("#tblVoucherDetail").data('rows')[nRowIndex].IsBillRefApply;
        var IsReferenceApply = $("#tblVoucherDetail").data('rows')[nRowIndex].IsReferenceApply;
        var IsInventoryApply = $("#tblVoucherDetail").data('rows')[nRowIndex].IsInventoryApply;

        if(IsCostCenterApply == true || IsBillRefApply == true || IsReferenceApply == true || IsInventoryApply == true)
        {
            for(var i=minIndex;i<maxIndex;i++)
            {
                var RefType = $("#tblVoucherDetail").data('rows')[i].DR_CR;
                var RefAmount = $("#tblVoucherDetail").data('rows')[i].ExplanationAmount;
                if(RefType == "Subledger")
                {
                    nTotalCCAmount = parseFloat(nTotalCCAmount) + parseFloat(RefAmount);
                }
                else if(RefType == "Bill")
                {
                    nTotalBTAmount = parseFloat(nTotalBTAmount) + parseFloat(RefAmount);
                }
                else if(RefType == "VR")
                {
                    nTotalVRAmount = parseFloat(nTotalVRAmount) + parseFloat(RefAmount);
                }
                else if(RefType == "Inventory")
                {
                    nTotalIRAmount = parseFloat(nTotalIRAmount) + parseFloat(RefAmount);
                }
            }
        }


        var result = "";

        if(IsCostCenterApply == true && result == "")
        {
            if(parseFloat(nTotalCCAmount.toFixed(2)) != parseFloat(parentAmount.toFixed(2)))
            {
                result = "NotEqual" + "," + "Total amount Of Subledger is "+parseFloat(nTotalCCAmount.toFixed(2))+" but it's Account Head " + parseFloat(accountHeadName.toFixed(2)) + "'s amount is " + parseFloat(parentAmount.toFixed(2));
            }
        }
        if(IsBillRefApply == true && result == "")
        {
            if(parseFloat(nTotalBTAmount.toFixed(2)) != parseFloat(parentAmount.toFixed(2)))
            {
                result = "NotEqual" + "," + "Total amount Of Bill is "+parseFloat(nTotalBTAmount.toFixed(2))+" but it's Account Head " + parseFloat(accountHeadName.toFixed(2)) + "'s amount is " + parseFloat(parentAmount.toFixed(2));
            }
        }        
        result = result.split(",");
        return result;
    }


    function RefreashCostCenters(oCostCenters)
    {
        var data=oCostCenters;
        data={"total":""+data.length+"","rows":data};
        $('#tblCostCenterName').datagrid('loadData',data);
        $('#tblCostCenterName').datagrid('selectRow', 0);
    }

    function RefreashProducts(oProducts)
    {
        var data=oProducts;
        data={"total":""+data.length+"","rows":data};
        $('#tblProduct').datagrid('loadData',data);
        $('#tblProduct').datagrid('selectRow', 0);
    }

    function RefreashWorkingUnits(oWorkingUnits)
    {
        var data=oWorkingUnits;
        data={"total":""+data.length+"","rows":data};
        $('#tblWorkingUnit').datagrid('loadData',data);
        $('#tblWorkingUnit').datagrid('selectRow', 0);
    }

    function RefreashMUnits(oMeasurementUnits)
    {
        var data=oMeasurementUnits;
        data={"total":""+data.length+"","rows":data};
        $('#tblMUnit').datagrid('loadData',data);
        $('#tblMUnit').datagrid('selectRow', 0);
    }

    function RefreashTrTypes(oTrTypes)
    {
        var data=oTrTypes;
        data={"total":""+data.length+"","rows":data};
        $('#tblTrType').datagrid('loadData',data);
        $('#tblTrType').datagrid('selectRow', 0);
    }

    function RefreashBillNos(oBillNos)
    {
        var data=oBillNos;
        data={"total":""+data.length+"","rows":data};
        $('#tblBillNo').datagrid('loadData',data);
        $('#tblBillNo').datagrid('selectRow', 0);
    }

    function DefinePreviousCell(nRowIndex)
    {
        var sReturnClass="";
        var DrCrType = $("#tblRefDetail").data('rows')[nRowIndex].DR_CR;       
        if(DrCrType=="Subledger")
        {
            sReturnClass=".cAmountclass";
        }
        else if(DrCrType=="Bill")
        {
            sReturnClass=".cAmountclass";
        }       
        else if(DrCrType=="Inventory")
        {
            sReturnClass=".cAmountclass";
        }
        return sReturnClass;
    }

    function DeleteRow(nRowIndex)
    {
        if(!confirm("Confirm to delete?")) return false;
        var sAHOBTStr = $("#tblRefDetail").data('rows')[nRowIndex].AHOBTStr;
        var oTempVoucherDetails= $("#tblRefDetail").data('rows');
        var oRefDetails =[]; var bFlag=false;
        var nExplationType=$("#tblRefDetail").data('rows')[nRowIndex].AHOBTInt;
        if(nExplationType==0)
        {
            for(var i=0; i< oTempVoucherDetails.length; i++)
            {
                if(i<nRowIndex)
                {
                    oRefDetails.push(oTempVoucherDetails[i]);
                }
                else if(i>nRowIndex)
                {
                    if(bFlag==false)
                    {
                        if(oTempVoucherDetails[i].AHOBTInt==0)
                        {
                            bFlag=true;
                        }
                    }
                    if(bFlag==true)
                    {
                        oRefDetails.push(oTempVoucherDetails[i]);
                    }
                }
            }
        }
        else
        {
            for(var i=0; i< oTempVoucherDetails.length; i++)
            {
                if(i!=nRowIndex)
                {
                    oRefDetails.push(oTempVoucherDetails[i]);
                }
            }
        }
        if(oRefDetails==null || oRefDetails.length<1)
        {
            var oRefDetail=NewObject(0);
            oRefDetails.push(oRefDetail);
        }

        RemakeGrid(oRefDetails);
        if(nRowIndex<=0)
        {
            nRowIndex=0;
        }
        else
        {
            nRowIndex=nRowIndex-1;
        }
        var sSelectedClass= DefinePreviousCell(nRowIndex);
        $('#tblRefDetail').data('rows', oRefDetails);
        $("#tblRefDetail").data("selectedIndex", nRowIndex);
        $('#tblRefDetail tr').eq(nRowIndex).addClass("highlight");
        $('#tblRefDetail tr').eq(nRowIndex).find('input').addClass("highlight");
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).removeClass("textboxstyle2");
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).addClass("textboxstyle");
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).show();
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).focus();
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).select();
        InitializeKeyDownEvent(sSelectedClass);       
        //GetTotalAmount(sAHOBTStr);
        RefreshSummery();
    }

    $('#btnSave').click(function (e){
        var nBusinessUnitID = parseInt($('#cboBusinessUnit').val());
        if(nBusinessUnitID<=0)
        {
            alert('Please select businessunit!');
            return false;
        }

        var CheckValidation = ValidateInput();
        if(CheckValidation[0] == "WrongInput")
        {
            alert(CheckValidation[1]);
            return false;
        }
        if (!confirm("Confirm to Save AccountOpenning ?")) return ;
        var oAccountOpenning = RefreshObject();
        $.ajax({
            type: "POST",
            dataType: "json",
            url: sessionStorage.getItem('BaseAddress') +'/AccountOpenning/SetOpenningBalance',
            traditional: true,
            data:  JSON.stringify(oAccountOpenning),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                oAccountOpenning  = jQuery.parseJSON(data);
                if (oAccountOpenning.ErrorMessage == '' || oAccountOpenning.ErrorMessage == null)
                {
                    alert("Account Openning  Saved sucessfully");                        
                    var nBusinessUnitID = parseInt($('#cboBusinessUnit').val());
                    window.location.href = sessionStorage.getItem('BaseAddress') +'/AccountOpenning/SetOpeningBalance?buid='+nBusinessUnitID+"&menuid="+sessionStorage.getItem('MenuID');
                }
                else
                {
                    alert(oAccountOpenning.ErrorMessage);
                }
            },
            error: function (xhr, status, error)
            {
                alert(error);
            }
        });
    });

    $('#btnClose').click(function (e){        
        var nBusinessUnitID = parseInt($('#cboBusinessUnit').val());
        window.location.href = sessionStorage.getItem('BaseAddress') +'/AccountOpenning/SetOpeningBalance?buid='+nBusinessUnitID+"&menuid="+sessionStorage.getItem('MenuID');
    });

    $('#btnSave').keydown(function(e){
        if(e.which === 9)
        {
            $('#btnClose').focus();
        }
    });

    $('#btnClose').keydown(function(e){
        if(e.which === 9)
        {
            $('#cboVoucherType').focus();
        }
    });

    $('#cboVoucherType').keydown(function(e){
        if(e.which === 9)
        {
            $('#txtVoucherNo').focus();
        }
    });

    $('#txtCurrencySymbol').keydown(function(e){
        if(e.which === 9)
        {
            $('#txtCurrencyAmount').focus();
            $('#txtCurrencyAmount').select();
        }
    });

    $('#txtConversionRate').keydown(function(e){
        if(e.which === 9)
        {
            $('#txtBaseCurrencyAmount').focus();
            $('#txtBaseCurrencyAmount').select();
        }
    });

    $('#txtCurrencyAmount').keydown(function(e){
        if(e.which === 9)
        {
            $('#txtConversionRate').focus();
            $('#txtConversionRate').select();
        }
    });

    $('#txtBaseCurrencyAmount').keydown(function(e){
        if(e.which === 9)
        {
            $('#btnOkCurrency').focus();
        }
    });

    $('#btnOkCurrency').keydown(function(e){
        if(e.which === 9)
        {
            $('#btnCloseCurrency').focus();
        }
    });

    $('#btnCloseCurrency').keydown(function(e){
        if(e.which === 9)
        {
            $('#txtCurrencySymbol').focus();
            $('#txtCurrencySymbol').select();
        }
    });
    
    $('#winAccountHead').keydown(function (e)
    {
        if (e.which === 27) {
            $('#winAccountHead').window('close');
            var nRowIndex= $("#tblRefDetail").data("selectedIndex");
            $('#tblRefDetail tr').eq(nRowIndex).find('.accountclass').focus();
        }
        else if(e.which == 38 || e.which == 40)
        {
            var oAccountHead= $('#tblAccountHead').datagrid('getSelected');
            var nIndex=$('#tblAccountHead').datagrid('getRowIndex', oAccountHead);
            if(e.which == 38)//up arrow=38
            {
                if(nIndex<=0)
                {
                    $('#tblAccountHead').datagrid('selectRow', 0);
                }
                else
                {
                    $('#tblAccountHead').datagrid('selectRow', nIndex-1);
                }
            }
            if(e.which == 40)//down arrow=40
            {
                var oCurrentList = $('#tblAccountHead').datagrid('getRows');
                if(nIndex>=oCurrentList.length-1)
                {
                    $('#tblAccountHead').datagrid('selectRow', oCurrentList.length-1);
                }
                else
                {
                    $('#tblAccountHead').datagrid('selectRow', nIndex+1);
                }
            }
        }
        else if(e.which == 13)//enter=13
        {
            SetAccountHead();
        }
        else
        {
            var txtSearchByAccountHeadName = document.getElementById('txtSearchByAccountHeadName').value;
            var oSearchedLedger = [];  var sTempName="";
            var oCurrentList = $('#tblAccountHead').datagrid('getRows');
            if (e.which == 8)
            {
                oCurrentList = _oAccountHeads;
            }
            for(i=0;i<oCurrentList.length;i++){
                sTempName=oCurrentList[i].AccountHeadName;
                n=sTempName.toUpperCase().indexOf(txtSearchByAccountHeadName.toUpperCase());
                if(n!=-1)
                {
                    oSearchedLedger.push(oCurrentList[i]);
                }
            }
            RefreashAccountHeads(oSearchedLedger);
        }
    });

    $("#btnOkCostCenterName").click(function(){
        SetCostCenter();
    });

    $("#btnCostCenterName").click(function(){
        $('#winCostCenterName').window('close');
        var nRowIndex= $("#tblRefDetail").data("selectedIndex");
        $('#tblRefDetail tr').eq(nRowIndex).find('.nameclass').focus();
    });

    $('#winCostCenterName').keydown(function (e)
    {
        if (e.which === 27) {
            $('#winCostCenterName').window('close');
            var nRowIndex= $("#tblRefDetail").data("selectedIndex");
            $('#tblRefDetail tr').eq(nRowIndex).find('.nameclass').focus();
        }
        else if(e.which == 38 || e.which == 40)
        {
            var oCostCenter= $('#tblCostCenterName').datagrid('getSelected');
            var nIndex=$('#tblCostCenterName').datagrid('getRowIndex', oCostCenter);
            if(e.which == 38)//up arrow=38
            {
                if(nIndex<=0)
                {
                    $('#tblCostCenterName').datagrid('selectRow', 0);
                }
                else
                {
                    $('#tblCostCenterName').datagrid('selectRow', nIndex-1);
                }
            }
            if(e.which == 40)//down arrow=40
            {
                var oCurrentList = $('#tblCostCenterName').datagrid('getRows');
                if(nIndex>=oCurrentList.length-1)
                {
                    $('#tblCostCenterName').datagrid('selectRow', oCurrentList.length-1);
                }
                else
                {
                    $('#tblCostCenterName').datagrid('selectRow', nIndex+1);
                }
            }
        }

        else if(e.which == 13)//enter=13
        {
            SetCostCenter();

        }
        else
        {
            var txtSearchByAccountHeadName = document.getElementById('txtSearchByCostCenterName').value;
            var oSearchedLedgerCostCenter = [];  var sTempName="";
            var oCurrentList = $('#tblCostCenterName').datagrid('getRows');
            if (e.which == 8)
            {
                oCurrentList = _oCostCenters;
            }
            for(i=0;i<oCurrentList.length;i++){
                sTempName=oCurrentList[i].Name;
                n=sTempName.toUpperCase().indexOf(txtSearchByAccountHeadName.toUpperCase());
                if(n!=-1)
                {
                    oSearchedLedgerCostCenter.push(oCurrentList[i]);
                }
            }
            RefreashCostCenters(oSearchedLedgerCostCenter);
        }
    });
    
    function SetIRProduct()
    {
        var oSelectedProduct= $('#tblProduct').datagrid('getSelected');
        if(oSelectedProduct ==null || parseInt(oSelectedProduct.ProductID)<=0)
        {
            alert("Please select a Product!");
            return;
        }
        var result = CheckDuplicateOrNot(oSelectedProduct.ProductID,"Inventory");
        if(result == "Duplicate")
        {
            alert("Can't take same Product for one debit or credit.");
            return false;
        }


        var nRowIndex= $("#tblRefDetail").data("selectedIndex");
        var oRefDetails = $("#tblRefDetail").data('rows');
        for(var i=0;i<oRefDetails.length;i++)
        {
            if(oRefDetails[i].AHOBTInt == 4)
            {
                if(parseInt(oSelectedProduct.ProductID) == parseInt(oRefDetails[i].BObjID))
                {
                    if(nRowIndex!=i)
                    {
                        alert("Sorry,Duplicate Product.");
                        return false;
                    }
                }
            }
        }


        $('#winProduct').window('close');
        var nRowIndex= $("#tblRefDetail").data("selectedIndex");
        var productControll = $('#tblRefDetail tr').eq(nRowIndex).find('.nameclass');
        $(productControll).val(oSelectedProduct.ProductName);
        $(productControll).removeClass("textboxstyle");
        $(productControll).addClass("highlight");
        $(productControll).addClass("textboxstyle2");
        $("#tblRefDetail").data('rows')[nRowIndex].BObjID=oSelectedProduct.ProductID;
        $("#tblRefDetail").data('rows')[nRowIndex].Name=oSelectedProduct.ProductName;
        var nWorkingUnitClassIndex= $('.irWorkingUnitClass').index($('#tblRefDetail tr').eq(nRowIndex).find('input.irWorkingUnitClass'));
        ResetAllInputBox(nWorkingUnitClassIndex, ".irWorkingUnitClass");
        InitializeKeyDownEvent(".irWorkingUnitClass"); return;
    }

    $("#btnOkProduct").click(function(){
        SetIRProduct();
    });

    $("#btnCloseProduct").click(function(){
        $('#winProduct').window('close');
        var nRowIndex= $("#tblRefDetail").data("selectedIndex");
        $('#tblRefDetail tr').eq(nRowIndex).find('.nameclass').focus();
    });

    $('#winProduct').keydown(function (e)
    {
        if (e.which === 27) {
            $('#winProduct').window('close');
            var nRowIndex= $("#tblRefDetail").data("selectedIndex");
            $('#tblRefDetail tr').eq(nRowIndex).find('.nameclass').focus();
        }
        else if(e.which == 38 || e.which == 40)
        {
            var oProduct= $('#tblProduct').datagrid('getSelected');
            var nIndex=$('#tblProduct').datagrid('getRowIndex', oProduct);
            if(e.which == 38)//up arrow=38
            {
                if(nIndex<=0)
                {
                    $('#tblProduct').datagrid('selectRow', 0);
                }
                else
                {
                    $('#tblProduct').datagrid('selectRow', nIndex-1);
                }
            }
            if(e.which == 40)//down arrow=40
            {
                var oCurrentList = $('#tblProduct').datagrid('getRows');
                if(nIndex>=oCurrentList.length-1)
                {
                    $('#tblProduct').datagrid('selectRow', oCurrentList.length-1);
                }
                else
                {
                    $('#tblProduct').datagrid('selectRow', nIndex+1);
                }
            }
        }
        else if(e.which == 13)//enter=13
        {
            SetIRProduct();
        }
        else
        {
            var txtSearchByProductName = document.getElementById('txtSearchByProductName').value;
            var oSearchedLedgerProduct = [];  var sTempName="";
            var oCurrentList = $('#tblProduct').datagrid('getRows');
            if (e.which == 8)
            {
                oCurrentList = _oProducts;
            }
            for(i=0;i<oCurrentList.length;i++){
                sTempName=oCurrentList[i].NameCode;
                n=sTempName.toUpperCase().indexOf(txtSearchByProductName.toUpperCase());
                if(n!=-1)
                {
                    oSearchedLedgerProduct.push(oCurrentList[i]);
                }
            }
            RefreashProducts(oSearchedLedgerProduct);
        }
    });

    function SetWorkingUnit(){
        var oSelectedWorkingUnit= $('#tblWorkingUnit').datagrid('getSelected');
        if(oSelectedWorkingUnit==null || parseInt(oSelectedWorkingUnit.WorkingUnitID)<=0)
        {
            alert("Please select a Working Unit !");
            return;
        }
        $('#winWorkingUnit').window('close');
        var nRowIndex= $("#tblRefDetail").data("selectedIndex");
        var workingUnitControll = $('#tblRefDetail tr').eq(nRowIndex).find('.irWorkingUnitClass');
        $(workingUnitControll).val(oSelectedWorkingUnit.WorkingUnitName);
        $(workingUnitControll).removeClass("textboxstyle");
        $(workingUnitControll).addClass("highlight");
        $(workingUnitControll).addClass("textboxstyle2");
        //var nInputBoxIndex = $(".irWorkingUnitClass").index(workingUnitControll);
        var nInputBoxIndex= $('.irMeasurementUnitClass').index($('#tblRefDetail tr').eq(nRowIndex).find('input.irMeasurementUnitClass'));
        ResetAllInputBox(nInputBoxIndex, '.irMeasurementUnitClass');
        var nIndex=$("#tblRefDetail").data('selectedIndex');
        $("#tblRefDetail").data('rows')[nRowIndex].WUID=oSelectedWorkingUnit.WorkingUnitID;
        $("#tblRefDetail").data('rows')[nRowIndex].WUName=oSelectedWorkingUnit.WorkingUnitName;
        InitializeKeyDownEvent(".irMeasurementUnitClass"); return;
    }

    $("#btnCloseWorkingUnit").click(function(){
        $('#winWorkingUnit').window('close');
        var nRowIndex= $("#tblRefDetail").data("selectedIndex");
        $('#tblRefDetail tr').eq(nRowIndex).find('.irWorkingUnitClass').focus();
    });

    $("#btnOkWorkingUnit").click(function(){
        SetWorkingUnit();
    });

    $('#winWorkingUnit').keydown(function (e)
    {
        if (e.which === 27) {
            $('#winWorkingUnit').window('close');
            var nRowIndex= $("#tblRefDetail").data("selectedIndex");
            $('#tblRefDetail tr').eq(nRowIndex).find('.irWorkingUnitClass').focus();
        }
        else if(e.which == 38 || e.which == 40)
        {
            var oWorkingUnit= $('#tblWorkingUnit').datagrid('getSelected');
            var nIndex=$('#tblWorkingUnit').datagrid('getRowIndex', oWorkingUnit);
            if(e.which == 38)//up arrow=38
            {
                if(nIndex<=0)
                {
                    $('#tblWorkingUnit').datagrid('selectRow', 0);
                }
                else
                {
                    $('#tblWorkingUnit').datagrid('selectRow', nIndex-1);
                }
            }
            if(e.which == 40)//down arrow=40
            {
                var oCurrentList = $('#tblWorkingUnit').datagrid('getRows');
                if(nIndex>=oCurrentList.length-1)
                {
                    $('#tblWorkingUnit').datagrid('selectRow', oCurrentList.length-1);
                }
                else
                {
                    $('#tblWorkingUnit').datagrid('selectRow', nIndex+1);
                }
            }
        }
        else if(e.which == 13)//enter=13
        {
            SetWorkingUnit();
        }
        else
        {
            var txtSearchByWorkingUnit = document.getElementById('txtSearchByWorkingUnit').value;
            var oSearchedLedgerWorkingUnit = [];  var sTempName="";
            var oCurrentList = $('#tblWorkingUnit').datagrid('getRows');
            if (e.which == 8)
            {
                oCurrentList = _oWorkingUnits;
            }
            for(i=0;i<oCurrentList.length;i++){
                sTempName=oCurrentList[i].WorkingUnitName;
                n=sTempName.toUpperCase().indexOf(txtSearchByWorkingUnit.toUpperCase());
                if(n!=-1)
                {
                    oSearchedLedgerWorkingUnit.push(oCurrentList[i]);
                }
            }
            RefreashWorkingUnits(oSearchedLedgerWorkingUnit);
        }
    });

    function SetMUnit(){
        var oSelectedMUnit= $('#tblMUnit').datagrid('getSelected');
        if(oSelectedMUnit == null || parseInt(oSelectedMUnit.MeasurementUnitID)<=0)
        {
            alert("Please select a Measurement Unit !");
            return;
        }
        $('#winMUnit').window('close');
        var nRowIndex= $("#tblRefDetail").data("selectedIndex");
        var mUnitControll = $('#tblRefDetail tr').eq(nRowIndex).find('.irMeasurementUnitClass');
        $(mUnitControll).val(oSelectedMUnit.UnitName);
        $(mUnitControll).removeClass("textboxstyle");
        $(mUnitControll).addClass("highlight");
        $(mUnitControll).addClass("textboxstyle2");
        //var nInputBoxIndex = $(".irMeasurementUnitClass").index(mUnitControll);
        var nInputBoxIndex= $('.irQtyClass').index($('#tblRefDetail tr').eq(nRowIndex).find('input.irQtyClass'));
        ResetAllInputBox(nInputBoxIndex, '.irQtyClass');
        var nIndex=$("#tblRefDetail").data('selectedIndex');
        $("#tblRefDetail").data('rows')[nRowIndex].UnitID=oSelectedMUnit.MeasurementUnitID;
        $("#tblRefDetail").data('rows')[nRowIndex].UName=oSelectedMUnit.UnitName;
        InitializeKeyDownEvent(".irQtyClass"); return;
    }

    $("#btnCloseMUnit").click(function(){
        $('#winMUnit').window('close');
        var nRowIndex= $("#tblRefDetail").data("selectedIndex");
        $('#tblRefDetail tr').eq(nRowIndex).find('.irMeasurementUnitClass').focus();
    });

    $("#btnOkMUnit").click(function(){
        SetMUnit();
    });

    $('#winMUnit').keydown(function (e)
    {
        if (e.which === 27) {
            $('#winMUnit').window('close');
            var nRowIndex= $("#tblRefDetail").data("selectedIndex");
            $('#tblRefDetail tr').eq(nRowIndex).find('.irMeasurementUnitClass').focus();
        }
        else if(e.which == 38 || e.which == 40)
        {
            var oMUnit= $('#tblMUnit').datagrid('getSelected');
            var nIndex=$('#tblMUnit').datagrid('getRowIndex', oMUnit);
            if(e.which == 38)//up arrow=38
            {
                if(nIndex<=0)
                {
                    $('#tblMUnit').datagrid('selectRow', 0);
                }
                else
                {
                    $('#tblMUnit').datagrid('selectRow', nIndex-1);
                }
            }
            if(e.which == 40)//down arrow=40
            {
                var oCurrentList = $('#tblMUnit').datagrid('getRows');
                if(nIndex>=oCurrentList.length-1)
                {
                    $('#tblMUnit').datagrid('selectRow', oCurrentList.length-1);
                }
                else
                {
                    $('#tblMUnit').datagrid('selectRow', nIndex+1);
                }
            }
        }
        else if(e.which == 13)//enter=13
        {
            SetMUnit();
        }
        else
        {
            var txtSearchByMUnit = document.getElementById('txtSearchByMUnit').value;
            var oSearchedLedgerMUnit = [];  var sTempName="";
            var oCurrentList = $('#tblMUnit').datagrid('getRows');
            if (e.which == 8)
            {
                oCurrentList = _oMeasurementUnits;
            }
            for(i=0;i<oCurrentList.length;i++){
                sTempName=oCurrentList[i].LocationName;
                n=sTempName.toUpperCase().indexOf(txtSearchByMUnit.toUpperCase());
                if(n!=-1)
                {
                    oSearchedLedgerMUnit.push(oCurrentList[i]);
                }
            }
            RefreashMUnits(oSearchedLedgerMUnit);
        }
    });


    $("#btnCloseBillNo").click(function(){
        $('#winBillNo').window('close');
        var nRowIndex= $("#tblRefDetail").data("selectedIndex");
        $('#tblRefDetail tr').eq(nRowIndex).find('.nameclass').focus();
    });

    $('#btnOkBillNo').click(function(){
        SetBillTransaction();
    });

    $('#winBillNo').keydown(function (e)
    {
        if (e.which === 27) {
            $('#winBillNo').window('close');
            var nRowIndex= $("#tblRefDetail").data("selectedIndex");
            $('#tblRefDetail tr').eq(nRowIndex).find('.nameclass').focus();
        }
        else if(e.which == 38 || e.which == 40)
        {
            var oBill= $('#tblBillNo').datagrid('getSelected');
            var nIndex=$('#tblBillNo').datagrid('getRowIndex', oBill);
            if(e.which == 38)//up arrow=38
            {
                if(nIndex<=0)
                {
                    $('#tblBillNo').datagrid('selectRow', 0);
                }
                else
                {
                    $('#tblBillNo').datagrid('selectRow', nIndex-1);
                }
            }
            if(e.which == 40)//down arrow=40
            {
                var oCurrentList = $('#tblBillNo').datagrid('getRows');
                if(nIndex>=oCurrentList.length-1)
                {
                    $('#tblBillNo').datagrid('selectRow', oCurrentList.length-1);
                }
                else
                {
                    $('#tblBillNo').datagrid('selectRow', nIndex+1);
                }
            }
        }
        else if(e.which == 13)//enter=13
        {
            SetBillTransaction();
        }


        else if(e.which == 107)
        {
            CreateNewBill();
        }
        else
        {
            var txtSearchByBillNo = document.getElementById('txtSearchByBillNo').value;
            var oSearchedLedgerBillNo = [];  var sTempName="";
            var oCurrentList = $('#tblBillNo').datagrid('getRows');
            if (e.which == 8)
            {
                oCurrentList = _oVoucherBills;
            }
            for(i=0;i<oCurrentList.length;i++){
                sTempName=oCurrentList[i].BillNo;
                n=sTempName.toUpperCase().indexOf(txtSearchByBillNo.toUpperCase());
                if(n!=-1)
                {
                    oSearchedLedgerBillNo.push(oCurrentList[i]);
                }
            }
            RefreashBillNos(oSearchedLedgerBillNo);
        }
    });

    $("#btnCloseCurrency").click(function(){
        $('#winCurrency').window('close');
        var nIndex=$("#tblRefDetail").data('selectedIndex');
        if($("#tblRefDetail").data('rows')[nIndex].DR_CR == "Debit")
        {
            $('.debitclass').eq(nIndex).focus();
            $('.debitclass').eq(nIndex).select();
        }
        else
        {
            $('.creditclass').eq(nIndex).focus();
            $('.creditclass').eq(nIndex).select();
        }
    });

    $("#txtConversionRate").keyup(function (e){
        var nCRate = $(this).val();
        var nGivenAmount = $("#txtCurrencyAmount").val();
        var nBaseCurrenctAmount = parseFloat(nGivenAmount) * parseFloat(nCRate);
        nBaseCurrenctAmount = nBaseCurrenctAmount.toFixed(2);

        if(isNaN(nBaseCurrenctAmount))
        {
            nBaseCurrenctAmount = 0;
        }
        //nBaseCurrenctAmount = Math.round(parseFloat(nBaseCurrenctAmount)*1000)/1000;
        $("#txtBaseCurrencyAmount").val(parseFloat(nBaseCurrenctAmount));
    });

    $("#txtBaseCurrencyAmount").keyup(function (e){
        var nBaseCurrencyAmount =  $(this).val();
        var nGivenAmount = $("#txtCurrencyAmount").val();
        var nCRate = parseFloat(nBaseCurrencyAmount) / parseFloat(nGivenAmount);
        nCRate = nCRate.toFixed(2);

        if(isNaN(nCRate))
        {
            nCRate = 0;
        }

        //nCRate = Math.round(parseFloat(nCRate)*1000)/1000;
        $("#txtConversionRate").val(parseFloat(nCRate));
    });

    function GetTotalAmount(RefType) //RefType = "Subledger" or "Bill" or "Inventory"
    {
        var countRows = $("#tblRefDetail tr").length;
        var nTotalDebit=0;
        var nTotalCredit=0;
        var nDrAmount=0;
        var nCrAmount=0;
        var nReturnAmount = 0;
        for(var i=0; i<countRows; i++)
        {
            var refType = $("#tblRefDetail").data('rows')[i].AHOBTStr;
            if(RefType!="SL Bill")
            {
                if(refType == RefType)
                {
                    nDrAmount = $("#tblRefDetail").data('rows')[i].DrAmount;
                    nCrAmount = $("#tblRefDetail").data('rows')[i].CrAmount;
                    nTotalDebit = parseFloat(nTotalDebit) + parseFloat(nDrAmount);
                    nTotalCredit = parseFloat(nTotalCredit) + parseFloat(nCrAmount);
                }
            }
        }
        var ReferenceList = CheckReference();
        if(ReferenceList!=null)
        {
            for(var i=0;i<ReferenceList.length;i++)
            {
                if(ReferenceList[i] == RefType)
                {
                    if(RefType == "Subledger")
                    {
                        if(_nComponentID == 2 || _nComponentID == 6)
                        {
                            nReturnAmount = parseFloat(nTotalDebit) - parseFloat(nTotalCredit);
                        }
                        else if(_nComponentID == 1 || _nComponentID == 3 ||_nComponentID == 4 ||_nComponentID == 5)
                        {
                            nReturnAmount = parseFloat(nTotalCredit) - parseFloat(nTotalDebit);
                        }
                    }
                    else if(RefType == "Bill")
                    {
                        if(_nComponentID == 2 || _nComponentID == 6)
                        {
                            nReturnAmount = parseFloat(nTotalDebit) - parseFloat(nTotalCredit);
                        }
                        else if(_nComponentID == 1 || _nComponentID == 3 ||_nComponentID == 4 ||_nComponentID == 5)
                        {
                            nReturnAmount = parseFloat(nTotalCredit) - parseFloat(nTotalDebit);
                        }
                    }
                    else if(RefType == "Inventory")
                    {
                        if(_nComponentID == 2 || _nComponentID == 6)
                        {
                            nReturnAmount = parseFloat(nTotalDebit) - parseFloat(nTotalCredit);
                        }
                        else if(_nComponentID == 1 || _nComponentID == 3 ||_nComponentID == 4 ||_nComponentID == 5)
                        {
                            nReturnAmount = parseFloat(nTotalCredit) - parseFloat(nTotalDebit);
                        }
                    }

                }
            }
        }

        nReturnAmount = parseFloat(nReturnAmount).toFixed(2);
        if( _nComponentID == 2|| _nComponentID == 6)
        {
            if(nReturnAmount < 0 )
            {
                $("#cboNewOpenningBalanceType").val(0);
            }
            else
            {
                $("#cboNewOpenningBalanceType").val(1);
            }
        }
        else
        {
            if(nReturnAmount < 0 )
            {
                $("#cboNewOpenningBalanceType").val(1);
            }
            else
            {
                $("#cboNewOpenningBalanceType").val(0);
            }
        }

        if(nReturnAmount < 0)
        {
            nReturnAmount = nReturnAmount * (-1);
        }
        var nCurrencyVal = parseFloat($("#txtNewOpenningBalanceCRate").val());
        var nAmount = parseFloat(nCurrencyVal)*parseFloat(nReturnAmount);
        nAmount = parseFloat(nAmount).toFixed(2);
        $("#txtNewOpenningBalance").val(nReturnAmount);
        $("#txtAmountInBDT").val(nAmount);
    }

    function DeleteRowForIR(nRowIndex,reftype){
        //var sAHOBTStr = $("#tblRefDetail").data('rows')[nRowIndex].AHOBTStr;
        $("#tblRefDetail").data('rows')[nRowIndex].AHOBTStr = reftype;
        var nAHOBTInt=0;
        if(reftype=="Subledger") nAHOBTInt=1;
        else if(reftype=="Bill") nAHOBTInt=2;
        else if(reftype=="Inventory") nAHOBTInt=4;
        var oTempVoucherDetails= $("#tblRefDetail").data('rows');
        var oRefDetails =[]; var bFlag=false;
        $("#tblRefDetail").data('rows')[nRowIndex].AHOBTInt=nAHOBTInt;
        for(var i=0; i< oTempVoucherDetails.length; i++)
        {
            if(i!=nRowIndex)
            {
                oRefDetails.push(oTempVoucherDetails[i]);
            }
        }
        if(oRefDetails==null || oRefDetails.length<1)
        {
            var oRefDetail=NewObject("Inventory");
            oRefDetails.push(oRefDetail);
        }

        RemakeGrid(oRefDetails);
        if(nRowIndex<=0)
        {
            nRowIndex=0;
        }
        else
        {
            nRowIndex=nRowIndex;
        }
        var sSelectedClass= DefinePreviousCell(nRowIndex);
        $('#tblRefDetail').data('rows', oRefDetails);
        $("#tblRefDetail").data("selectedIndex", nRowIndex);
        $('#tblRefDetail tr').eq(nRowIndex).addClass("highlight");
        $('#tblRefDetail tr').eq(nRowIndex).find('input').addClass("highlight");
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).removeClass("textboxstyle2");
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).addClass("textboxstyle");
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).show();
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).focus();
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).select();
        InitializeKeyDownEvent(sSelectedClass);        
        //GetTotalAmount(reftype);
        RefreshSummery();
    }

    function DeleteRowForCCBT(nRowIndex,reftype){
        $("#tblRefDetail").data('rows')[nRowIndex].AHOBTStr = reftype;
        var nAHOBTInt=0;
        if(reftype=="Subledger") nAHOBTInt=1;
        else if(reftype=="Bill") nAHOBTInt=2;
        else if(reftype=="Inventory") nAHOBTInt=4;
        var oTempVoucherDetails= $("#tblRefDetail").data('rows');
        var oRefDetails =[]; var bFlag=false;
        $("#tblRefDetail").data('rows')[nRowIndex].AHOBTInt=nAHOBTInt;
        for(var i=0; i< oTempVoucherDetails.length; i++)
        {
            if(i!=nRowIndex)
            {
                oRefDetails.push(oTempVoucherDetails[i]);
            }
        }
        if(oRefDetails==null || oRefDetails.length<1)
        {
            var oRefDetail=NewObject(reftype);
            oRefDetails.push(oRefDetail);
        }

        RemakeGrid(oRefDetails);
        if(nRowIndex<=0)
        {
            nRowIndex=0;
        }
        else
        {
            nRowIndex=nRowIndex;
        }
        var sSelectedClass= DefinePreviousCell(nRowIndex);
        $('#tblRefDetail').data('rows', oRefDetails);
        $("#tblRefDetail").data("selectedIndex", nRowIndex);
        $('#tblRefDetail tr').eq(nRowIndex).addClass("highlight");
        $('#tblRefDetail tr').eq(nRowIndex).find('input').addClass("highlight");
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).removeClass("textboxstyle2");
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).addClass("textboxstyle");
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).show();
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).focus();
        $('#tblRefDetail tr').eq(nRowIndex).find(sSelectedClass).select();
        
        InitializeKeyDownEvent(sSelectedClass);        
        //GetTotalAmount(reftype);
        RefreshSummery();
    }

    function ChangeDrCrAmountWithCurrency()
    {
        //Khan
        var oRefDetails=[];
        var oRows = $("#tblRefDetail").data('rows');

        var nCAmount=0;
        var nTotalCAmount=0;
        var nTotalCDebitAmount=0;
        var nTotalCCreditAmount=0;
                
        for(var i=0;i<oRows.length;i++)
        {
            var sDR_CR = oRows[i].DR_CR;
            nCAmount = oRows[i].CAmount;
            var s = oRows[i].AHOBTStr;

            var nAmount = parseFloat(parseFloat($("#txtNewOpenningBalanceCRate").val()) * parseFloat(nCAmount));
            if(isNaN(nAmount))
            {
                nAmount=0;
            }
            if(sDR_CR == "Debit")
            {
                nTotalCDebitAmount = parseFloat(nCAmount) + parseFloat(nTotalCDebitAmount);

                oRows[i].DrAmount = nAmount;
                oRows[i].CrAmount = 0;
            }
            else
            {
                nTotalCCreditAmount = parseFloat(nCAmount) + parseFloat(nTotalCCreditAmount);

                oRows[i].DrAmount = 0;
                oRows[i].CrAmount = nAmount;
            }
            oRefDetails.push(oRows[i]);
        }

        if(_nComponentID == 2 || _nComponentID == 6)
        {
            nTotalCAmount = parseFloat(nTotalCDebitAmount) - parseFloat(nTotalCCreditAmount);
            if(nTotalCAmount<0)
            {
                $("#cboNewOpenningBalanceType").val(0);
                nTotalCAmount = parseFloat(nTotalCAmount) * (-1);
            }
            else
            {
                $("#cboNewOpenningBalanceType").val(1);
            }
        }
        else if(_nComponentID == 3 || _nComponentID == 4 || _nComponentID == 5)
        {
            nTotalCAmount = parseFloat(nTotalCCreditAmount) - parseFloat(nTotalCDebitAmount);

            if(nTotalCAmount<0)
            {
                $("#cboNewOpenningBalanceType").val(1);
                nTotalCAmount = parseFloat(nTotalCAmount) * (-1);
            }
            else
            {
                $("#cboNewOpenningBalanceType").val(0);
            }
        }

        var nRate = parseFloat($("#txtNewOpenningBalanceCRate").val());
        $("#txtNewOpenningBalance").val(nTotalCAmount);
        if(isNaN(nRate))
        {
            nRate = 0;
        }
        var nAmountInBDT = nTotalCAmount * nRate;
        if(isNaN(nAmountInBDT))
        {
            nAmountInBDT = 0;
        }
        $("#txtAmountInBDT").val(nAmountInBDT);
        RemakeGrid(oRefDetails);
        RefreshSummery();
    }

</script>