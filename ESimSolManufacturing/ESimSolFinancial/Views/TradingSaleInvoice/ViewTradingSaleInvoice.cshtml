@{
    ViewBag.Title = "Sale Invoice";
}

@model ESimSol.BusinessObjects.TradingSaleInvoice
<div id="progbarParent" style="width:100%;height:100%;margin:0 auto;text-align:center; margin-left: auto;margin-right: auto;left: 0;right: 0;z-index: 1;">
    <div style="margin: 0px auto;margin-top: 251px;text-align:center;width:390px;">
        <label style="font-size:18px;">Please wait</label>
        <div id="progbar" style="width:100%;height:37px;"></div>
    </div>
</div>
<div id="winContactPersonnel" class="easyui-window" title="Add Contact Personeel" data-options="modal:true,closed:true,collapsible:false,minimizable:false,maximizable:false,closable:false">
    <div>
        <fieldset>
            <legend style="font-weight:bold"> Contact Personnel Informations : </legend>
            <table border="0" cellspacing="2" cellpadding="2" style="font-size:11px; font-weight:bold">
                <tr>
                    <td style="width:125px; text-align:right">
                        Name :
                    </td>

                    <td style="width:200px">
                        <input type="text" style="width: 200px;" id="txtCPName" />
                    </td>
                    <td style="width:50px"> </td>
                    <td style="width:125px; text-align:right">
                        Address :
                    </td>
                    <td style="width:300px">
                        <input type="text" style="width: 300px;" id="txtCPAddress" />
                    </td>
                </tr>
                <tr>
                    <td style="width:125px; text-align:right">
                        Phone :
                    </td>

                    <td style="width:200px">
                        <input type="text" style="width: 200px;" id="txtCPPhone" />
                    </td>
                    <td style="width:50px"> </td>
                    <td style="width:125px; text-align:right">
                        Email :
                    </td>
                    <td style="width:300px">
                        <input type="text" style="width: 300px;" id="txtCPEmail" />
                    </td>
                </tr>
                <tr>
                    <td style="width:125px; text-align:right">
                        Note :
                    </td>
                    <td colspan="4">
                        <input type="text" style="width: 690px;" id="txtCPNote" />
                    </td>
                </tr>
            </table>
        </fieldset>
    </div>
    <fieldset style="width:97%;height:8%; vertical-align:top;">
        <legend style="font-weight:bold"> Action : </legend>
        <table border="0" cellspacing="2" cellpadding="2" style="font-size:11px; font-weight:bold;">
            <tr>
                <td style="width:7%;text-align:right;">
                    <a id="btnSaveContactPersonnel" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="true">Save</a>
                    <a id="btnCloseContactPersonnel" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="true">Close</a>
                </td>

            </tr>
        </table>
    </fieldset>
</div>
<div class="menuMainCollectionTable">
    <div id="divTradingSaleInvoice" class="easyui-panel" title="Sale Invoice" style="font-family:Tahoma; text-align:center; height:89%; width:100%">
        <fieldset>
            <legend style="font-weight:bold">Basic Informations : </legend>
            <table border="0" cellspacing="1" cellpadding="1" style="font-size:11px; font-weight:bold; width:100%;">
                <tr>
                    <td style="width:10%; text-align:right">
                        Invoice No:
                    </td>
                    <td style="width:29%">
                        @Html.TextBoxFor(model => model.InvoiceNo, new { style = "width: 98%;", id = "txtInvoiceNo", disabled = "disabled" })
                    </td>
                    <td style="width:11%; text-align:right">
                        Invocie Date :
                    </td>
                    <td style="width:15%">
                        <input id="txtInvoiceDate" type="text" style="width:100%;" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser" />
                    </td>

                    <td style="width:10%; text-align:right;font-weight:bold">
                        Curency :
                    </td>
                    <td style="width:25%;font-size:11px">
                        @Html.DropDownListFor(model => model.CurrencyID, Model.Currencys.Select(x => new SelectListItem() { Text = x.CurrencyName, Value = x.CurrencyID.ToString() }), new { id = "cboCurrency", style = "width:98%;" })
                    </td>
                </tr>
                <tr>
                    <td style="width:10%; text-align:right; font-weight:bold">Buyer : </td>
                    <td style="width:29%; text-align:left">
                        @Html.TextBoxFor(model => model.BuyerName, new { style = "width: 81.8%;", id = "txtBuyerName", placeholder = "Press enter with Buyer name" }) <input type="button" value="Pick" id="btnBuyer" style="width:15%" />
                    </td>
                    <td style="width:11%; text-align:right">
                        C. Person :
                    </td>
                    <td style="width:15%">
                        <select id="cboContactPerson" style="width:70%"></select>  <input type="button" value="Add" id="btnAddContactPersonnel" style="width:26%; text-align:center" />
                    </td>
                    <td style="width:10%; text-align:right;font-weight:bold">
                        Remarks :
                    </td>
                    <td style="width:25%;font-size:11px">
                        @Html.TextBoxFor(model => model.Note, new { style = "width: 96%;", id = "txtNote" })
                    </td>
                </tr>
            </table>
        </fieldset>
        <div style="margin-left:2px; height:335px; margin-left:2px; width:99.80%">
            <table id="tblTradingSaleInvoiceDetail" title="Item Description" class="easyui-datagrid" style="width:100%;height:227px"
                   data-options="singleSelect: true, fitColumns:false, rownumbers:true,pagination:false,autoRowHeight:false,toolbar: '#toolbar',onClickRow: onClickRow ">
                <thead>
                    <tr>
                        <th field="ProductCode" width="85" align="left">Code</th>
                        <th field="ProductName" width="130" align="left">Product Name</th>
                        <th data-options="field:'ItemDescription',width:140,align:'left',editor:{type:'textbox'}">Item Description</th>
                        <th field="Symbol" width="70" align="left">Unit</th>
                        <th field="CurrentStock" width="70" align="right" formatter="formatPrice">Stock Qty</th>
                        <th data-options="field:'InvoiceQty',width:70,align:'right',editor:{type:'numberbox',options:{precision:2}}" formatter="formatPrice" align="right">Quantity</th>
                        <th data-options="field:'UnitPrice',width:70,align:'right',editor:{type:'numberbox',options:{precision:3}}" formatter="formatPrice" align="right">Price</th>
                        <th data-options="field:'DiscountInPercentage',width:75,align:'right',editor:{type:'numberbox',options:{precision:2}}" formatter="formatPrice" align="right">Discount(%)</th>
                        <th field="Discount" width="75" align="right" formatter="formatPrice">Discount</th>
                        <th field="Amount" width="90" align="right" formatter="formatPrice">Value</th>
                        <th field="NetAmount" width="85" align="right" formatter="formatPrice">Net Amount</th>
                    </tr>
                </thead>
            </table>
            <div id="toolbar" style=" height:25px">
                <input type="text" id="txtProductName" placeholder="Press enter with product name or code" style="width: 30%" />
                <a id="btnPickProduct" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-search" plain="true">Pick</a>
                <select id="cboMeasurementUnit" style="width: 10%"></select>
                Qty : <input type="text" id="txtQty" style="width: 10%; text-align:right;" />
                Rate : <input type="text" id="txtUnitPrice" style="width: 10%; text-align:right;" />
                <a id="btnAdd" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-add" plain="true"> Add</a>
                <a id="btnRemove" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-remove" plain="true">Remove</a>
                <a id="btnRefresh" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-reload" plain="true">Refresh</a>
            </div>
            <div style="width:100%">
                <fieldset>
                    <table border="0" cellpadding="1" cellspacing="1" width="100%" style="font-size:11px; font-family:Tahoma; font-weight:bold">
                        <tr>
                            <td style="width:60%; text-align:left; vertical-align:middle"></td>
                            <td style="width:20%; text-align:right"> Gross Amount : </td>
                            <td style="width:20%; text-align:right">
                                @Html.TextBoxFor(model => model.GrossAmount, new { style = "width: 96%; text-align:right", id = "txtGrossAmount", disabled = "disabled" })
                            </td>
                        </tr>
                        <tr>
                            <td style="width:60%; text-align:left"></td>
                            <td style="width:20%; text-align:right"> (-)Less Amount : </td>
                            <td style="width:20%; text-align:right">
                                @Html.TextBoxFor(model => model.DiscountAmount, new { style = "width: 50%; text-align:right", id = "txtDiscountAmount" })
                                (%)@Html.TextBoxFor(model => model.DiscountAmountInPercent, new { style = "width: 30%; text-align:right", id = "txtDiscountAmountInPercent", @tabindex = "-1" })
                            </td>
                        </tr>
                        <tr>
                            <td style="width:60%; text-align:left"></td>
                            <td style="width:20%; text-align:right"> (+)Vat Amount : </td>
                            <td style="width:20%; text-align:right">
                                @Html.TextBoxFor(model => model.VatAmount, new { style = "width: 50%; text-align:right", id = "txtVatAmount" })
                                (%)@Html.TextBoxFor(model => model.VatAmountInPercent, new { style = "width: 30%; text-align:right", id = "txtVatAmountInPercent", @tabindex = "-1" })
                            </td>
                        </tr>
                        <tr>
                            <td style="width:60%; text-align:left"></td>
                            <td style="width:20%; text-align:right">(+)Service Charge : </td>
                            <td style="width:20%; text-align:right">
                                @Html.TextBoxFor(model => model.ServiceCharge, new { style = "width: 50%; text-align:right", id = "txtServiceCharge" })
                                (%)@Html.TextBoxFor(model => model.ServiceChargeInPercent, new { style = "width: 30%; text-align:right", id = "txtServiceChargeInPercent", @tabindex = "-1" })
                            </td>
                        </tr>
                        <tr>
                            <td style="width:60%; text-align:left"></td>
                            <td style="width:20%; text-align:right;">(-)Less Commission</td>
                            <td style="width:20%; text-align:right">
                                @Html.TextBoxFor(model => model.CommissionAmount, new { style = "width: 96%; text-align:right", id = "txtCommissionAmount", disabled = "disabled" })
                            </td>
                        </tr>
                        <tr>
                            <td style="width:60%; text-align:left"></td>
                            <td style="width:20%; text-align:right">Net Amount: </td>
                            <td style="width:20%; text-align:right">
                                @Html.TextBoxFor(model => model.NetAmount, new { style = "width: 96%; text-align:right", id = "txtNetAmount", disabled = "disabled" })
                            </td>
                        </tr>
                    </table>
                </fieldset>
            </div>

        </div>
    </div>
    <fieldset style="height:8%">
        <legend style="font-weight: bold">Action : </legend>
        <table border="0" cellspacing="2" cellpadding="2" style="font-size: 11px; font-weight: bold; width:100%">
            <tr>
                <td style="width:83%; text-align:right"></td>
                <td style="width:17%;text-align:right;">
                    <a id="btnSave" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="true">Save</a>
                    <a id="btnClose" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="true">Close</a>
                </td>
            </tr>
        </table>
    </fieldset>
</div>



<script type="text/javascript">
    var _oTradingSaleInvoice=null;
    $(document).ready(function () {
        debugger;
        _oTradingSaleInvoice = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
        var nBUID  = parseInt(sessionStorage.getItem("BUID"));
        $('#divTradingSaleInvoice').data('BUID', nBUID);
        $('#txtBuyerName').data('BuyerID', _oTradingSaleInvoice.BuyerID);

        $('#txtQty,#txtUnitPrice').icsCurrencyBox();
        $('#txtGrossAmount,#txtNetAmount').icsCurrencyBox();
        $('#txtDiscountAmount,#txtDiscountAmountInPercent').icsCurrencyBox();
        $('#txtVatAmount,#txtVatAmountInPercent').icsCurrencyBox();
        $('#txtServiceCharge,#txtServiceChargeInPercent').icsCurrencyBox();
        $("#progbar").progressbar({ value: 0 });
        $("#progbarParent").hide();
        $('#txtInvoiceDate').datebox('setValue', _oTradingSaleInvoice.InvoiceDateInString);
        $('#txtGrossAmount').val(icsFormatPrice(parseFloat(_oTradingSaleInvoice.GrossAmount)));
        $('#txtDiscountAmount').val(icsFormatPrice(parseFloat(_oTradingSaleInvoice.DiscountAmount)));
        $('#txtVatAmount').val(icsFormatPrice(parseFloat(_oTradingSaleInvoice.VatAmount)));
        $('#txtServiceCharge').val(icsFormatPrice(parseFloat(_oTradingSaleInvoice.ServiceCharge)));
        $('#txtCommissionAmount').val(icsFormatPrice(parseFloat(_oTradingSaleInvoice.CommissionAmount)));
        $('#txtNetAmount').val(icsFormatPrice(parseFloat(_oTradingSaleInvoice.NetAmount)));
        RefreshList(_oTradingSaleInvoice.TradingSaleInvoiceDetails);
        RefreshLayOut();
    });

    function updateProgress() {
        var value =$('#progbar').progressbar('getValue');
        if (value < 96){
            value += Math.floor(Math.random() * 10);
            $('#progbar').progressbar('setValue', value);
        }
    }

    function hideShow(miliseconds) {
        $("#progbarParent").hide();
    }

    function RefreshLayOut() {
        var sTradingSaleInvoiceHeader = sessionStorage.getItem("TradingSaleInvoiceHeader");
        if (sTradingSaleInvoiceHeader != "Add Sale Invoice") {
            $('#txtBuyerName').val(_oTradingSaleInvoice.BuyerName)
            $('#txtBuyerName').css('color', 'blue');
            $('#txtBuyerName').css('fontWeight', 'bold');
            LoadContactPerson(_oTradingSaleInvoice.BuyerID);
        }

        if (sTradingSaleInvoiceHeader === "View Sale Invoice") {
            $("#txtInvoiceNo").prop('disabled', true);
            $("#txtInvoiceDate").datebox({'disabled':true});
            $('#txtInvoiceDate').datebox('setValue', _oTradingSaleInvoice.InvoiceDateInString);
            $("#cboCurrency").prop('disabled', true);
            $("#txtBuyerName").prop('disabled', true);
            $("#btnBuyer").prop('disabled', true);
            $("#cboContactPerson").prop('disabled', true);
            $("#btnAddContactPersonnel").prop('disabled', true);
            $("#txtNote").prop('disabled', true);
            $("#txtProductName").prop('disabled', true);
            $("#cboMeasurementUnit").prop('disabled', true);
            $("#txtQty").prop('disabled', true);
            $("#txtUnitPrice").prop('disabled', true);
            $("#txtGrossAmount").prop('disabled', true);
            $("#txtDiscountAmount").prop('disabled', true);
            $("#txtDiscountAmountInPercent").prop('disabled', true);
            $("#txtVatAmount").prop('disabled', true);
            $("#txtVatAmountInPercent").prop('disabled', true);
            $("#txtServiceCharge").prop('disabled', true);
            $("#txtServiceChargeInPercent").prop('disabled', true);
            $("#txtNetAmount").prop('disabled', true);
            $("#btnAdd").hide();
            $("#btnRemove").hide();
            $("#btnSave").hide();
        }
        if(sTradingSaleInvoiceHeader === "Add Sale Invoice From Sale Order") {
            $("#txtBuyerName").prop('disabled', true);
            $("#btnBuyer").prop('disabled', true);
        }
    }

    function ValidateInput() {
        //if(parseInt($('#divTradingSaleInvoice').data('BUID'))<=0)
        //{
        //    alert("Invalid Business Unit!");
        //    return false;
        //}

        var txtInvoiceDate = $('#txtInvoiceDate').datebox('getValue');
        if (txtInvoiceDate == null || txtInvoiceDate == "") {
            alert("Please enter Invocie Date!");
            $('#txtInvoiceDate').focus();
            return false;
        }
        if ($('#cboCurrency').val() === null ||  parseInt($('#cboCurrency').val()) <=0) {
            alert("Please select Currency!");
            $('#cboCurrency').focus();
            return false;
        }

        var nBuyerID = parseInt($('#txtBuyerName').data('BuyerID'));
        if (nBuyerID <= 0) {
            alert("Please select Buyer!");
            $('#txtBuyerName').focus();
            return false;
        }

        if ($('#cboContactPerson').val() === null ||  parseInt($('#cboContactPerson').val()) <=0) {
            alert("Please select Contact Person!");
            $('#cboContactPerson').focus();
            return false;
        }

        var oTradingSaleInvoiceDetails = $('#tblTradingSaleInvoiceDetail').datagrid('getRows');
        if (oTradingSaleInvoiceDetails == null || oTradingSaleInvoiceDetails.length <= 0) {
            alert("Please enter at least one item!");
            return false;
        }

        for (var i = 0; i < oTradingSaleInvoiceDetails.length; i++) {
            if (parseFloat(oTradingSaleInvoiceDetails[i].InvoiceQty) <= 0) {
                alert("Invoice Quantity Should be greater than 0 for  : " + oTradingSaleInvoiceDetails[i].ProductName);
                return false;
            }
            if (parseFloat(oTradingSaleInvoiceDetails[i].UnitPrice) <= 0) {
                alert("Unit price Should be greater than 0 for : " + oTradingSaleInvoiceDetails[i].ProductName);
                return false;
            }
        }
        var nNetAmount =parseFloat(icsRemoveComma($('#txtNetAmount').val()));
        if (nNetAmount <= 0) {
            alert("Please enter Net Amount!");
            $('#txtNetAmount').focus();
            return false;
        }
        return true;
    }

    function RefreshObject() {
        var oTradingSaleInvoice = {
            TradingSaleInvoiceID: _oTradingSaleInvoice.TradingSaleInvoiceID,
            BUID : parseInt($('#divTradingSaleInvoice').data('BUID')),
            InvoiceNo: $.trim($('#txtInvoiceNo').val()),
            InvoiceDate: $('#txtInvoiceDate').datebox('getValue'),
            BuyerID: parseInt($('#txtBuyerName').data('BuyerID')),
            ContactPersonID: parseInt($('#cboContactPerson').val()),
            CurrencyID: parseInt($('#cboCurrency').val()),
            Note: $.trim($('#txtNote').val()),
            ApprovedBy: _oTradingSaleInvoice.ApprovedBy,
            GrossAmount: parseFloat(icsRemoveComma($('#txtGrossAmount').val())),
            DiscountAmount: parseFloat(icsRemoveComma($('#txtDiscountAmount').val())),
            VatAmount: parseFloat(icsRemoveComma($('#txtVatAmount').val())),
            ServiceCharge: parseFloat(icsRemoveComma($('#txtServiceCharge').val())),
            CommissionAmount: parseFloat(icsRemoveComma($('#txtCommissionAmount').val())),
            NetAmount: parseFloat(icsRemoveComma($('#txtNetAmount').val())),
            TradingSaleInvoiceDetails: $('#tblTradingSaleInvoiceDetail').datagrid('getRows')
        };
        return oTradingSaleInvoice;
    }

    $("#btnSave").click(function () {
        endEditing();
        if (!ValidateInput()) return;
        var oTradingSaleInvoice = RefreshObject();
        $.ajax({
            type: "POST",
            dataType: "json",
            url: sessionStorage.getItem("BaseAddress")+  "/TradingSaleInvoice/Save",
            traditional: true,
            data: JSON.stringify(oTradingSaleInvoice),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                oTradingSaleInvoice = jQuery.parseJSON(data);
                if (oTradingSaleInvoice.TradingSaleInvoiceID > 0) {
                    alert("Data Saved sucessfully");
                    var oTradingSaleInvoices = sessionStorage.getItem("TradingSaleInvoices");
                    var nIndex = parseInt(sessionStorage.getItem("SelectedRowIndex"));
                    if (oTradingSaleInvoices != null) {
                        oTradingSaleInvoices = jQuery.parseJSON(oTradingSaleInvoices);
                    }
                    else {
                        oTradingSaleInvoices = [];
                    }
                    if (nIndex != -1) {
                        oTradingSaleInvoices[nIndex] = oTradingSaleInvoice;
                    }
                    else {
                        sessionStorage.setItem("SelectedRowIndex", oTradingSaleInvoices.length);
                        oTradingSaleInvoices.push(oTradingSaleInvoice);
                    }
                    sessionStorage.setItem("TradingSaleInvoices", JSON.stringify(oTradingSaleInvoices));
                    window.location.href = sessionStorage.getItem("BackLink");
                }
                else {
                    alert(oTradingSaleInvoice.ErrorMessage);
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });
    });

    $("#btnClose").click(function () {
        window.location.href = sessionStorage.getItem("BackLink");
    });

    var bDisCountInPercent = false;
    $("#txtDiscountAmount").on('change keyup paste', function() {
        if (bTotalDiscount) {
            bDisCountInPercent = false;
            return;
        }
        bDisCountInPercent = true;
        var nDiscountAmountInPercent = (parseFloat(icsRemoveComma($('#txtDiscountAmount').val())) * 100) / parseFloat(icsRemoveComma($('#txtGrossAmount').val()));
        $('#txtDiscountAmountInPercent').val(icsFormatPrice(nDiscountAmountInPercent));
        bDisCountInPercent = false;
        RefreshSummery();
    });

    var bTotalDiscount = false;
    $("#txtDiscountAmountInPercent").on('change keyup paste', function() {
        if (bDisCountInPercent) {
            bTotalDiscount = false;
            return;
        }
        bTotalDiscount = true;
        var nDisCountAmount = (parseFloat(icsRemoveComma($('#txtGrossAmount').val())) * parseFloat(icsRemoveComma($('#txtDiscountAmountInPercent').val())))/100;
        $('#txtDiscountAmount').val(icsFormatPrice(nDisCountAmount));
        bTotalDiscount = false;
        RefreshSummery();
    });

    var bVatInPercent = false;
    $("#txtVatAmount").on('change keyup paste', function() {
        if (bTotalVat) {
            bVatInPercent = false;
            return;
        }
        bVatInPercent = true;
        var nVatAmountInPercent = (parseFloat(icsRemoveComma($('#txtVatAmount').val())) * 100) / parseFloat(icsRemoveComma($('#txtGrossAmount').val()));
        $('#txtVatAmountInPercent').val(icsFormatPrice(nVatAmountInPercent));
        bVatInPercent = false;
        RefreshSummery();
    });

    var bTotalVat = false;
    $("#txtVatAmountInPercent").on('change keyup paste', function() {
        if (bVatInPercent) {
            bTotalVat = false;
            return;
        }
        bTotalVat = true;
        var nVatAmount = (parseFloat(icsRemoveComma($('#txtGrossAmount').val())) * parseFloat(icsRemoveComma($('#txtVatAmountInPercent').val())))/100;
        $('#txtVatAmount').val(icsFormatPrice(nVatAmount));
        bTotalVat = false;
        RefreshSummery();
    });

    var bServiceChargeInPercent = false;
    $("#txtServiceCharge").on('change keyup paste', function() {
        if (bTotalServiceCharge) {
            bServiceChargeInPercent = false;
            return;
        }
        bServiceChargeInPercent = true;
        var nServiceChargeInPercent = (parseFloat(icsRemoveComma($('#txtServiceCharge').val())) * 100) / parseFloat(icsRemoveComma($('#txtGrossAmount').val()));
        $('#txtServiceChargeInPercent').val(icsFormatPrice(nServiceChargeInPercent));
        bServiceChargeInPercent = false;
        RefreshSummery();
    });

    var bTotalServiceCharge = false;
    $("#txtServiceChargeInPercent").on('change keyup paste', function() {
        if (bServiceChargeInPercent) {
            bTotalServiceCharge = false;
            return;
        }
        bTotalServiceCharge = true;
        var nServiceChargeAmount = (parseFloat(icsRemoveComma($('#txtGrossAmount').val())) * parseFloat(icsRemoveComma($('#txtServiceChargeInPercent').val())))/100;
        $('#txtServiceCharge').val(icsFormatPrice(nServiceChargeAmount));
        bTotalServiceCharge = false;
        RefreshSummery();
    });

    function RefreshSummery() {
        var nGrossAmount = 0; var nDisCountAmount = 0; var nVatAmount =0; var nServiceCharge = 0; var nNetAmount = 0;var nCommissionAmount = 0;
        var oTradingSaleInvoiceDetails = $('#tblTradingSaleInvoiceDetail').datagrid('getRows');
        for (var i = 0; i < oTradingSaleInvoiceDetails.length; i++) {
            nGrossAmount = nGrossAmount + parseFloat(oTradingSaleInvoiceDetails[i].NetAmount);
        }
        nDisCountAmount = parseFloat(icsRemoveComma($('#txtDiscountAmount').val()));
        nVatAmount = parseFloat(icsRemoveComma($('#txtVatAmount').val()));
        nServiceCharge = parseFloat(icsRemoveComma($('#txtServiceCharge').val()));
        nCommissionAmount = parseFloat(icsRemoveComma($('#txtCommissionAmount').val()));
        nNetAmount = ((nGrossAmount + nVatAmount + nServiceCharge) - (nDisCountAmount + nCommissionAmount));

        $('#txtGrossAmount').val(icsFormatPrice(nGrossAmount));
        //$('#txtDiscountAmount').val(icsFormatPrice(nDisCountAmount));
        //$('#txtVatAmount').val(icsFormatPrice(nVatAmount));
        //$('#txtServiceCharge').val(icsFormatPrice(nServiceCharge));
        $('#txtNetAmount').val(icsFormatPrice(nNetAmount));
    }


    $("#btnAdd").click(function () {

        endEditing();
        if (!ValidateTradingSaleInvoiceDetail()) return;

        var oProduct = $('#txtProductName').data('Product');
        oProduct.BUID= parseInt($('#divTradingSaleInvoice').data('BUID'));
        var obj={
            BaseAddress: sessionStorage.getItem("BaseAddress"),
            Object: oProduct,
            ControllerName: "Product",
            ActionName: "GetStockQuantity",
            IsWinClose: false
        };

        $.icsDataGet(obj, function (response){
            debugger;
            if (response.status) {
                var oProduct = $('#txtProductName').data('Product');
                var nUnitID = parseInt($('#cboMeasurementUnit').val());
                var sUnitName = GetUnitNameSymbol(nUnitID, true);
                var sSymbol = GetUnitNameSymbol(nUnitID, false);
                var nInvoiceQty = parseFloat(icsRemoveComma($('#txtQty').val()));
                var nUnitPrice = parseFloat(icsRemoveComma($('#txtUnitPrice').val()));

                var oTradingSaleInvoiceDetail = {
                    TradingSaleInvoiceDetailID: 0,
                    TradingSaleInvoiceID: 0,
                    ProductID: oProduct.ProductID,
                    ItemDescription: "",
                    MeasurementUnitID: nUnitID,
                    InvoiceQty: nInvoiceQty,
                    UnitPrice: nUnitPrice,
                    Discount : 0,
                    DiscountInPercentage : 0,
                    Amount: (nInvoiceQty * nUnitPrice),
                    NetAmount : (nInvoiceQty * nUnitPrice),
                    ProductCode: oProduct.ProductCode,
                    ProductName: oProduct.ProductName,
                    UnitName: sUnitName,
                    Symbol: sSymbol,
                    CurrentStock: parseFloat(response.obj),
                    ProductCategoryName: oProduct.ProductCategoryName
                };
                $('#tblTradingSaleInvoiceDetail').datagrid('appendRow', oTradingSaleInvoiceDetail);
                onClickRow($('#tblTradingSaleInvoiceDetail').datagrid('getRows').length-1);

                //Reset Detail Control
                $("#txtProductName").removeClass("fontColorOfPickItem");
                $('#txtProductName').data('Product', null);
                $("#txtProductName").val("");
                $('#txtQty').val('0.00');
                $('#txtUnitPrice').val('0.00');
                LoadMeasurementUnit(0, null);
                RefreshGrid();
                $('#txtProductName').focus();
            }
            else{
                alert("Invalid Item");
            }

        });



    });

    $("#btnRemove").click(function () {
        var oTradingSaleInvoiceDetail = $('#tblTradingSaleInvoiceDetail').datagrid('getSelected');
        if (oTradingSaleInvoiceDetail == null) {
            alert("Please select a item from list!");
            return;
        }
        var conf = confirm("Confirm to delete?");
        if (conf == false) return;

        endEditing();
        var SelectedRowIndex = $('#tblTradingSaleInvoiceDetail').datagrid('getRowIndex', oTradingSaleInvoiceDetail);
        $('#tblTradingSaleInvoiceDetail').datagrid('deleteRow', SelectedRowIndex);

        var oTradingSaleInvoiceDetails = $('#tblTradingSaleInvoiceDetail').datagrid('getRows');
        RefreshList(oTradingSaleInvoiceDetails);
    });

    function ValidateTradingSaleInvoiceDetail() {
        var oProduct = $('#txtProductName').data('Product');
        if (oProduct == null || parseInt(oProduct.ProductID) <= 0) {
            alert("Please Pick Product!");
            $('#txtProductName').focus();
            return false;
        }
        var oTradingSaleInvoiceDetails = $('#tblTradingSaleInvoiceDetail').datagrid('getRows');
        for (var i = 0; i < oTradingSaleInvoiceDetails.length; i++) {
            if (parseInt(oTradingSaleInvoiceDetails[i].ProductID) == parseInt(oProduct.ProductID)) {
                alert("Your Selected Product Already Exists!");
                $('#txtProductName').focus();
                return false;
            }
        }
        if($('#cboMeasurementUnit').val() === null || parseInt($('#cboMeasurementUnit').val()) <= 0) {
            alert("Please select an Unit");
            $('#cboMeasurementUnit').focus();
            return false;
        }

        var nQty = icsRemoveComma($('#txtQty').val());
        if (nQty == null || nQty == "" || parseFloat(nQty) <= 0) {
            alert("Please Enter Invoice Qty!");
            $('#txtQty').focus();
            return false;
        }
        var nUnitPrice = icsRemoveComma($('#txtUnitPrice').val());
        if (nUnitPrice == null || nUnitPrice == "" || parseFloat(nUnitPrice) <= 0) {
            alert("Please Enter Unit Price!");
            $('#txtUnitPrice').focus();
            return false;
        }
        return true;
    }


    function RefreshList(oTradingSaleInvoiceDetails) {
        data = oTradingSaleInvoiceDetails;
        data = { "total": "" + data.length + "", "rows": data };
        $('#tblTradingSaleInvoiceDetail').datagrid('loadData', data);
        RefreshSummery();
    }

    $("#btnRefresh").click(function () {
        endEditing();
        data = $('#tblTradingSaleInvoiceDetail').datagrid('getRows');
        data = { "total": "" + data.length + "", "rows": data };
        $('#tblTradingSaleInvoiceDetail').datagrid('loadData', data);
        RefreshSummery();
    });

    function RefreshGrid() {
        endEditing();
        data = $('#tblTradingSaleInvoiceDetail').datagrid('getRows');
        data = { "total": "" + data.length + "", "rows": data };
        $('#tblTradingSaleInvoiceDetail').datagrid('loadData', data);
        RefreshSummery();
    }

    var editIndex = undefined;
    function endEditing() {
        if (editIndex == undefined) { return true }
        if ($('#tblTradingSaleInvoiceDetail').datagrid('validateRow', editIndex)) {
            $('#tblTradingSaleInvoiceDetail').datagrid('endEdit', editIndex);
            $('#tblTradingSaleInvoiceDetail').datagrid('selectRow', editIndex);
            var oTradingSaleInvoiceDetail = $('#tblTradingSaleInvoiceDetail').datagrid('getSelected');
            oTradingSaleInvoiceDetail.Amount = parseFloat(parseFloat(oTradingSaleInvoiceDetail.InvoiceQty) * parseFloat(oTradingSaleInvoiceDetail.UnitPrice));
            oTradingSaleInvoiceDetail.Discount = (parseFloat(oTradingSaleInvoiceDetail.Amount)*parseFloat(oTradingSaleInvoiceDetail.DiscountInPercentage)/100).toFixed(2);
            oTradingSaleInvoiceDetail.NetAmount= parseFloat(oTradingSaleInvoiceDetail.Amount)-parseFloat(oTradingSaleInvoiceDetail.Discount);
            $('#tblTradingSaleInvoiceDetail').datagrid('updateRow', { index: editIndex, row: oTradingSaleInvoiceDetail });
            RefreshSummery();
            editIndex = undefined;
            return true;
        } else {
            return false;
        }
    }

    function onClickRow(index) {

        if (editIndex != index) {
            if (endEditing()) {
                $('#tblTradingSaleInvoiceDetail').datagrid('selectRow', index)
                        .datagrid('beginEdit', index);
                editIndex = index;
            } else {
                $('#tblTradingSaleInvoiceDetail').datagrid('selectRow', editIndex);
            }
        }
    }

    ///Buyer Pick
    $("#txtBuyerName").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) // Enter Press
        {
            var nBUID = $('#divTradingSaleInvoice').data('BUID');
            var oContractor = { Params: 2 + '~' + $.trim($('#txtBuyerName').val())+'~'+ nBUID };//here 2 is Buyer
            var obj = {
                BaseAddress: sessionStorage.getItem("BaseAddress"),
                Object: oContractor,
                ControllerName: "Contractor",
                ActionName: "ContractorSearchByNameType",
                IsWinClose: false
            };
            $("#progbar").progressbar({ value: 0 });
            $("#progbarParent").show();
            var intervalID = setInterval(updateProgress, 250);
            $.icsDataGets(obj, function (response) {
                clearInterval(intervalID);
                $("#progbarParent").hide();
                if (response.status && response.objs.length > 0) {
                    if (response.objs[0].ContractorID > 0) {
                        var tblColums = []; var oColumn = { field: "Name", title: "Name", width: 200, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "Address", title: "Address", width: 120, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "Email", title: "Email", width: 90, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "ShortName", title: "Short Name", width: 90, align: "left" }; tblColums.push(oColumn);
                        var oPickerParam = {
                            winid: 'winBuyers',
                            winclass: 'clsBuyer',
                            winwidth: 600,
                            winheight: 460,
                            tableid: 'tblBuyers',
                            tablecolumns: tblColums,
                            datalist: response.objs,
                            multiplereturn: false,
                            searchingbyfieldName: 'Name',
                            windowTittle: 'Buyer List'
                        };
                        $.icsPicker(oPickerParam);
                        IntializePickerbutton(oPickerParam);
                    }
                    else { alert(response.objs[0].ErrorMessage); }
                }else{
                    alert("Data Not Found.");
                    return;
                }
            });
        }
    });
    $("#btnBuyer").click(function () {
        var nBUID = $('#divTradingSaleInvoice').data('BUID');
        var oContractor = { Params: "2~~"+nBUID };//here 2 Is Buyer
        var obj = {
            BaseAddress: sessionStorage.getItem("BaseAddress"),
            Object: oContractor,
            ControllerName: "Contractor",
            ActionName: "ContractorSearchByNameType",
            IsWinClose: false
        };
        $("#progbar").progressbar({ value: 0 });
        $("#progbarParent").show();
        var intervalID = setInterval(updateProgress, 250);
        $.icsDataGets(obj, function (response) {
            clearInterval(intervalID);
            $("#progbarParent").hide();
            if (response.status && response.objs.length > 0) {
                if (response.objs[0].ContractorID > 0) {
                    var tblColums = []; var oColumn = { field: "Name", title: "Name", width: 200, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "Address", title: "Address", width: 120, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "Email", title: "Email", width: 90, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "ShortName", title: "Short Name", width: 90, align: "left" }; tblColums.push(oColumn);
                    var oPickerParam = {
                        winid: 'winBuyers',
                        winclass: 'clsBuyer',
                        winwidth: 600,
                        winheight: 460,
                        tableid: 'tblBuyers',
                        tablecolumns: tblColums,
                        datalist: response.objs,
                        multiplereturn: false,
                        searchingbyfieldName: 'Name',
                        windowTittle: 'Buyer List'
                    };
                    $.icsPicker(oPickerParam);
                    IntializePickerbutton(oPickerParam);
                }
                else { alert(response.objs[0].ErrorMessage); }
            }else{
                alert("Data Not Found.");
            }
        });

    });
    $('#txtBuyerName').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 8) //backspace=8
        {
            $("#txtBuyerName").removeClass("fontColorOfPickItem");
            $('#txtBuyerName').data('BuyerID', 0);
        }
    });
    //End Buyer Picker

    //Contact Person
    $('#btnAddContactPersonnel').click(function(e){
        if (parseInt($('#txtBuyerName').data('BuyerID')) <= 0)
        {
            alert("Please select Buyer!");
            $('#txtBuyerName').focus();
            return;
        }
        $("#winContactPersonnel").icsWindow('open', "Add Contact Person");
        $("#winContactPersonnel input").not("input[type='button']").val("");
    });

    function ValidateInputContactPersonnel()
    {
        if($.trim($('#txtCPName').val())===null || $.trim($('#txtCPName').val())==="")
        {
            alert("Please enter name!");
            $('#txtCPName').focus();
            return false;
        }

        if($.trim($('#txtCPPhone').val())===null || $.trim($('#txtCPPhone').val())==="")
        {
            alert("Please enter Phone Number!");
            $('#txtCPPhone').focus();
            return false;
        }
        return true;
    }

    function RefreshObjectCP()
    {
        var oContactPersonnel= {
            ContactPersonnelID : 0,
            ContractorID : parseInt($('#txtBuyerName').data('BuyerID')),
            Name : $("#txtCPName").val(),
            Address : $("#txtCPAddress").val(),
            Phone :$("#txtCPPhone").val(),
            Email : $("#txtCPEmail").val(),
            Note : $("#txtCPNote").val()
        };
        return oContactPersonnel;
    }

    $('#btnSaveContactPersonnel').click(function(e){
        if(!ValidateInputContactPersonnel()) return;
        var oContactPersonnel=RefreshObjectCP();
        $.ajax({
            type: "POST",
            dataType: "json",
            url : sessionStorage.getItem("BaseAddress")+  "/Contractor/SaveContactPersonnel",
            traditional: true,
            data:  JSON.stringify(oContactPersonnel),
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                var oContactPersonnel = jQuery.parseJSON(data);
                if(parseInt(oContactPersonnel.ContactPersonnelID)>0)
                {
                    alert("Data Saved sucessfully");
                    $("#winContactPersonnel input").not("input[type='button']").val("");
                    $("#winContactPersonnel").icsWindow('close');
                    LoadContactPerson(parseInt(oContactPersonnel.ContractorID));
                }
                else {
                    alert(oContactPersonnel.ErrorMessage);
                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });
    });

    $('#btnCloseContactPersonnel').click(function(e){
        $("#winContactPersonnel input").not("input[type='button']").val("");
        $("#winContactPersonnel").icsWindow('close');
    });
    //end contact person

    //Product Pick
    $("#txtProductName").keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 13) // Enter Press
        {
            if($('#txtProductName').val()==null || $('#txtProductName').val()=="")
            {
                alert("Please Type Product and Press Enter.");
                $('#txtProductName').focus();
                return;
            }
            var nBUID = $('#divTradingSaleInvoice').data('BUID');
            var oProduct = { BUID: nBUID, ProductName: $.trim($('#txtProductName').val())};
            var obj = {
                BaseAddress: sessionStorage.getItem("BaseAddress"),
                Object: oProduct,
                ControllerName: "Product",
                ActionName: "SearchByProductBUWise",
                IsWinClose: false
            };
            $.icsDataGets(obj, function (response) {
                debugger;
                if (response.status && response.objs.length > 0) {
                    if (response.objs[0].ProductID > 0) {
                        var tblColums = [];
                        var oColumn = { field: "ProductCode", title: "Product Code", width: 80, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "ProductName", title: "Product Name", width: 300, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "ShortName", title: "Short Name", width: 100, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "ProductCategoryName", title: "Category", width: 100, align: "left" }; tblColums.push(oColumn);
                        var oPickerParam = {
                            winid: 'winProductPicker',
                            winclass: 'clsProductPicker',
                            winwidth: 600,
                            winheight: 460,
                            tableid: 'tblProductPicker',
                            tablecolumns: tblColums,
                            datalist: response.objs,
                            multiplereturn: false,
                            searchingbyfieldName: 'NameCode',
                            windowTittle: 'Product List'
                        };
                        $.icsPicker(oPickerParam);
                        IntializePickerbutton(oPickerParam);
                    }
                    else {
                        alert(response.objs[0].ErrorMessage);
                    }

                }else{
                    alert("Data Not Found.");
                }
            });
        }
    });
    $("#btnPickProduct").click(function () {
        var nBUID = $('#divTradingSaleInvoice').data('BUID');
        var oProduct = { BUID: nBUID};
        var obj = {
            BaseAddress: sessionStorage.getItem("BaseAddress"),
            Object: oProduct,
            ControllerName: "Product",
            ActionName: "SearchByProductBUWise",
            IsWinClose: false
        };
        $.icsDataGets(obj, function (response) {
            debugger;
            if (response.status && response.objs.length > 0) {
                if (response.objs[0].ProductID > 0) {
                    var tblColums = [];
                    var oColumn = { field: "ProductCode", title: "Product Code", width: 80, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "ProductName", title: "Product Name", width: 300, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "ShortName", title: "Short Name", width: 100, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "ProductCategoryName", title: "Category", width: 100, align: "left" }; tblColums.push(oColumn);
                    var oPickerParam = {
                        winid: 'winProductPicker',
                        winclass: 'clsProductPicker',
                        winwidth: 600,
                        winheight: 460,
                        tableid: 'tblProductPicker',
                        tablecolumns: tblColums,
                        datalist: response.objs,
                        multiplereturn: false,
                        searchingbyfieldName: 'NameCode',
                        windowTittle: 'Product List'
                    };
                    $.icsPicker(oPickerParam);
                    IntializePickerbutton(oPickerParam);
                }
                else {
                    alert(response.objs[0].ErrorMessage);
                }

            }else{
                alert("Data Not Found.");
            }
        });

    });
    $('#txtProductName').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 8) //backspace=8
        {
            $("#txtProductName").removeClass("fontColorOfPickItem");
            $('#txtProductName').data('Product', null);
        }
    });
    //End Product

    function IntializePickerbutton(oPickerobj) {
        $("#" + oPickerobj.winid).find("#btnOk").click(function () {
            //for Single Select
            SetPickerValueAssign(oPickerobj);
        });
        $(document).find('.' + oPickerobj.winclass).keydown(function (e) {
            if (e.which == 13)//enter=13
            {
                SetPickerValueAssign(oPickerobj);
            }
        });
    }

    function SetPickerValueAssign(oPickerobj) {
        var oreturnObj = null, oreturnobjs = [];
        if (oPickerobj.multiplereturn) {
            oreturnobjs = $('#' + oPickerobj.tableid).datagrid('getChecked');
        } else {
            oreturnObj = $('#' + oPickerobj.tableid).datagrid('getSelected');
        }
        $("#" + oPickerobj.winid).icsWindow("close");
        $("#" + oPickerobj.winid).remove();

        if (oPickerobj.winid === 'winBuyers')
        {
            if (oreturnObj != null && parseInt(oreturnObj.ContractorID) > 0) {
                $('#txtBuyerName').val(oreturnObj.Name);
                $('#txtBuyerName').addClass('fontColorOfPickItem');
                $('#txtBuyerName').data('BuyerID', parseInt(oreturnObj.ContractorID));
                LoadContactPerson(parseInt(oreturnObj.ContractorID));
                $('#txtBuyerName').focus();
            }
        }
        else if (oPickerobj.winid == 'winProductPicker')
        {
            if (oreturnObj != null && parseInt(oreturnObj.ProductID) > 0)
            {
                $('#txtProductName').val(oreturnObj.ProductName);
                $('#txtProductName').addClass('fontColorOfPickItem');
                $('#txtProductName').data('Product', oreturnObj);
                $('#txtUnitPrice').val(formatPrice(oreturnObj.SalePrice));
                LoadMeasurementUnit(parseInt(oreturnObj.ProductID), oreturnObj);
                $('#txtQty').focus();
            }
        }
    }

    function LoadMeasurementUnit(nProductID, oSelectedProduct) {
        var listItems = "";
        $("#cboMeasurementUnit").data('MeasurementUnits', []);
        $("#cboMeasurementUnit").empty();
        if (parseInt(nProductID) > 0) {
            var oProduct = {
                ProductID: nProductID
            };
            $.ajax
            ({
                type: "POST",
                dataType: "json",
                url: sessionStorage.getItem("BaseAddress") + "/MeasurementUnit/GetsMUnits",
                data: JSON.stringify(oProduct),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    var oMeasurementUnits = jQuery.parseJSON(data);
                    $("#cboMeasurementUnit").data('MeasurementUnits', oMeasurementUnits);
                    if (oMeasurementUnits.length > 0) {
                        for (var i = 0; i < oMeasurementUnits.length; i++) {
                            listItems += "<option value='" + oMeasurementUnits[i].MeasurementUnitID + "'>" + oMeasurementUnits[i].UnitName+'['+oMeasurementUnits[i].Symbol +"]</option>";
                        }
                        $("#cboMeasurementUnit").html(listItems);
                        $("#cboMeasurementUnit").val(oSelectedProduct.MeasurementUnitID);
                    }
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });
        }
    }

    function GetUnitNameSymbol(nUnitID, bIsName) {
        var sUnitNameSymbol = "";
        var oMeasurementUnits = $("#cboMeasurementUnit").data('MeasurementUnits');
        for (var i = 0; i < oMeasurementUnits.length; i++) {
            if (parseInt(oMeasurementUnits[i].MeasurementUnitID) == parseInt(nUnitID)) {
                if (bIsName == true) {
                    return oMeasurementUnits[i].UnitName;
                }
                else {
                    return oMeasurementUnits[i].Symbol;
                }
            }
        }
        return sUnitNameSymbol;
    }

    function LoadContactPerson(nContractorID) {
        var listItems = "";
        $("#cboContactPerson").empty();
        if (parseInt(nContractorID) > 0) {
            var oContractor = {
                ContractorID: nContractorID
            };
            $.ajax
            ({
                type: "POST",
                dataType: "json",
                url: sessionStorage.getItem("BaseAddress") + "/Contractor/GetContactPersonnels",
                data: JSON.stringify(oContractor),
                contentType: "application/json; charset=utf-8",
                success: function (data) {

                    var oContractorPersonals = jQuery.parseJSON(data);
                    if (oContractorPersonals.length > 0) {
                        for (var i = 0; i < oContractorPersonals.length; i++) {
                            listItems += "<option value='" + oContractorPersonals[i].ContactPersonnelID + "'>" + oContractorPersonals[i].Name + "</option>";
                        }
                        $("#cboContactPerson").html(listItems);
                        $("#cboContactPerson").val(_oTradingSaleInvoice.ContactPersonID);
                    }

                },
                error: function (xhr, status, error) {
                    alert(error);
                }

            });
        }
    }
</script>