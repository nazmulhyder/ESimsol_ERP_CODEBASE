@{
    ViewBag.Title = " Sales Commission Payable Aprroval Request";
}
@model IEnumerable <ESimSol.BusinessObjects.SalesCommissionPayable>

<div style="padding-top:5px" ng-app="SalesComPayableApp" ng-controller="SalesComPayableCntrlr" class="form-horizontal regionSC">

<fieldset>
<legend>Invoice Information</legend>
            <div class="row col-md-12">
                <div class="col-md-2 text-right"><label class="control-label">Party Name:</label></div>
                <div class="col-md-3 text-left">
                    <input ng-model="SCP.ContractorName" class="form-control" required disabled />
                </div>
                
            </div>
            <div class="row col-md-12">
                <div class="col-md-2 text-right"><label class="control-label">LDBC No:</label></div>
                <div class="col-md-3 text-left">
                    <input ng-model="SCP.LDBCNo" class="form-control" required disabled />
                </div>
                <div class="col-md-2 text-right"><label class="control-label">LC No:</label></div>
                <div class="col-md-3 text-left">
                    <input ng-model="SCP.ExportLCNo" class="form-control" required disabled />
                </div>
                <div class="col-md-2 text-right"><label class="control-label">Invoice Value:</label></div>
                <div class="col-md-3 text-left">
                    <input ng-model="SCP.Amount_Bill" class="form-control" required disabled />
                </div>
             </div> 
            <div class="row col-md-12">
                <div class="col-md-2 text-right"><label class="control-label">Maturity Rcv.DT:</label></div>
                <div class="col-md-3 text-left">
                    <div class="input-group date date-container">
                        <input type="text" class="form-control" ng-model="SCP.MaturityReceivedDateSt" ng-init="initializeDatepicker()" disabled><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                    </div>
                </div>
                <div class="col-md-2 text-right"><label class="control-label">Maturity DT:</label></div>
                <div class="col-md-3 text-left">
                    <div class="input-group date date-container">   
                        <input type="text" class="form-control" ng-model="SCP.MaturityDateSt" ng-init="initializeDatepicker()" disabled><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                    </div>
                </div>
               
                <div class="col-md-2 text-right"><label class="control-label">Realization Date:</label></div>
                <div class="col-md-3 text-left">
                    <div class="input-group date date-container">
                        <input type="text" class="form-control" ng-model="SCP.RelizationDateSt" ng-init="initializeDatepicker()" disabled><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                    </div>
                </div>
            </div>
</fieldset>
<div style="padding-top:5px"></div>
<div class="row col-md-12">
        <div class="col-md-2 text-right"><label class="control-label">Base Currency:</label></div>
        <div class="col-md-3 text-left">
            <input ng-model="CurrencyName" class="form-control" required disabled />
        </div>
        <div class="col-md-2 text-right"><label class="control-label">C. Rate:</label></div>
        <div class="col-md-3 text-left">
            <input ng-model="SCP.CRate" class="form-control" required valid-number ng-disabled="disabled"/>
           
        </div>

    </div>
<div style="padding-top:5px"></div>
<fieldset>
        <legend>Commission Information</legend>
        <div class="row col-md-12">
            <div ui-grid="gridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav ui-grid-edit class="gridCom ui-grid-selectable"></div>
        </div>
       
    </fieldset>
 <div style="padding-top:50px"></div>
 <fieldset>
 <legend>Action</legend>
        <div class="row col-md-12 text-right">
            <div class=" col-md-6 text-left">
                <button type="button" class="btn btn-sm btn-warning" aria-label="Left Align" ng-click="UndoRequest()" ng-show="btnUndoReq"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"> Undo Request</span> </button>

            </div>
            <div class=" col-md-6 text-right">
                <button type="button" class="btn btn-sm  btn-primary" aria-label="Left Align" ng-click="RequestforApproval()" ng-show="btnApprove"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"> Req. For Approval</span> </button>
                <button type="button" class="btn btn-sm btn-danger" aria-label="Left Align" ng-click="close()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"> Close</span> </button>
            </div>
         </div>
 </fieldset>
</div>

    <style type="text/css">
        .regionSC .form-horizontal .control-label {
            padding-top: 3px;
        }


        .form-control {
            height: 26px;
            padding: 0px 6px;
            font-size: 12px;
        }
        
        .gridCom {
            width: 100%;
            height: 250px;
        }

        .regionSC .col-sm-3 {
            width: 38%;
            padding-right: 5px;
            padding-left: 5px;
            margin-bottom: 5px;
        }

        .regionSC .col-sm-2 {
            width: 24%;
            padding-right: 5px;
            padding-left: 5px;
            margin-bottom: 5px;
        }

        .regionSC .col-md-12 {
            width: 100%;
            padding-right: 5px;
            padding-left: 5px;
            margin-bottom: 5px;
        }

        .regionSC .col-md-2 {
            width: 13%;
            padding-right: 5px;
            padding-left: 5px;
        }

        .regionSC .col-md-3 {
            width: 20%;
            padding-right: 5px;
            padding-left: 5px;
        }

        .regionSC .col-sm-6 {
            width: 53%;
            padding-right: 5px;
            padding-left: 5px;
        }
      .regionSC .btn-sm {
            padding: 3px 10px;
        }

        .modal-dialog {
            width: 800px;
        }

        .regionSC .input-group-addon {
            padding: 4px 8px;
        }

        .regionSC .col-sm-1 {
            width: 8%;
            padding-left: 5px;
            padding-right: 0px;
        }
        


 </style>

    <script type="text/javascript">

    _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
        var oSalesComPayables=@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
        var oCompany=@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.Company));

   var SalesComPayableModule = angular.module('SalesComPayableApp', ['ms.service','ngAnimate', 'ui.bootstrap', 'ui.grid', 'ui.grid.resizeColumns','ui.grid.selection', 'ui.grid.cellNav','ui.grid.edit']);

   SalesComPayableModule.controller('SalesComPayableCntrlr', function ($scope, $http, $uibModal, $log, uiGridConstants, msModal ,userSession ) {

        $scope.initializeDatepicker  =function(){
            $('.date-container').datepicker({
                format: "dd M yyyy",
                calendarWeeks: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        $( document ).ready(function() {
            $(".number-int").icsNumberField({ min: 0,precision: 0 });
            $(".number-precision").icsNumberField({ min: 0,precision: 2 });
        });
        $scope.Company =oCompany;
        $scope.SalesComPayables =oSalesComPayables;
        $scope.CurrencyName =oCompany.CurrencyName;
        $scope.CurrencyID_BC = oCompany.BaseCurrencyID ;
        $scope.btnApprove =$scope.btnUndoReq =false;
        
        if(oSalesComPayables.length >0){
           
            if(oSalesComPayables[0].Status_Payable ==2){$scope.btnUndoReq =true; $scope.enableCellEdit=false; $scope.disabled=true}
            if(oSalesComPayables[0].Status_Payable ==1){$scope.btnApprove =true; $scope.enableCellEdit=true; $scope.disabled=false}
        } 
        if(oSalesComPayables.length>0){
            $scope.SCP = {
                ContractorName :oSalesComPayables[0].ContractorName,
                LDBCNo :oSalesComPayables[0].LDBCNo,
                ExportLCNo:oSalesComPayables[0].ExportLCNo,
                Amount_Bill:oSalesComPayables[0].Amount_Bill,
                MaturityDateSt:oSalesComPayables[0].MaturityDateSt,
                MaturityReceivedDateSt:oSalesComPayables[0].MaturityReceivedDateSt,
                RelizationDateSt:oSalesComPayables[0].RelizationDateSt,
                CRate :(oSalesComPayables[0].CRate==0)?1:oSalesComPayables[0].CRate
            }
        }
        else{ $scope.SCP = null;}
         $scope.gridOptions ={
            enableRowHeaderSelection: false,
            enableRowSelection: true,
            enableFullRowSelection: true,
            multiSelect: false,
            enableColumnResizing: true,
            noUnselect : true,
            showColumnFooter: true,
            enableGridMenu: true,
            enableCellEdit: false,
            columnDefs: [  
                {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'CPName', name: 'Person Name', width:'10%'},
              
                { field: 'CommissionAmount', name: 'Commission Amount', width:'10%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'MaturityAmount', name: 'MaturityAmount', width:'10%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'RealizeAmount', name: 'RealizeAmount', width:'10%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'  },
                //{ field: 'AdjOverdueAmount', name: 'Over due', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                //{ field: 'AdjAdd', name: 'Over due', width:'10%',cellClass: 'text-right', cellFilter: 'number: 2' , aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'AdjOverdueAmount', name: 'Over due', width:'8%',cellClass: 'text-right', enableCellEdit: $scope.enableCellEdit, cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'AdjPayable', name: 'Adj Deduct Payable', width:'8%',cellClass: 'text-right', enableCellEdit: $scope.enableCellEdit, cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'AdjDeduct', name: 'Adj Deduct Payment', width:'10%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right'  },
                { field: 'PayableAmount', name: 'Payable Amount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'Amount_Paid', name: 'Paid Amount', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'YetToPaid', name: 'Yet To Paid', width:'8%',cellClass: 'text-right', cellFilter: 'number: 2', aggregationType: uiGridConstants.aggregationTypes.sum, aggregationHideLabel: true, footerCellFilter: 'number:2', footerCellClass: 'text-right' },
                { field: 'Status_PayableSt', name: 'Status', width:'8%'  }      
            ],
            data:oSalesComPayables,
            onRegisterApi:function(gridApi) {
                $scope.gridApi = gridApi;   
                gridApi.edit.on.afterCellEdit($scope,
                  function (rowEntity, colDef, newValue, oldValue)
                  {
                      if(colDef.field=='AdjOverdueAmount')
                      {
                          if(rowEntity.AdjDeduct > (parseFloat(rowEntity.MaturityAmount)+parseFloat(rowEntity.RealizeAmount)))
                          {
                              rowEntity.AdjDeduct=(parseFloat(oldValue));
                          }else 
                          {
                              rowEntity.PayableAmount=(parseFloat(rowEntity.MaturityAmount)+parseFloat(rowEntity.RealizeAmount)-parseFloat(rowEntity.AdjDeduct));
                              rowEntity.YetToPaid=(parseFloat(rowEntity.PayableAmount)-parseFloat(rowEntity.Amount_Paid));
                          }
                      }
                      return rowEntity;
                  });
                }
         };

        //$scope.refreshObjectReqForApproveSalesCommissionPayable = function()
        //{
        // var oSalesCommissionPayables =
        //        {
        //            ExportBillID :oSalesComPayables[0].ExportBillID,
        //            CRate :( $scope.SCP.CRate == undefined)? 1:  $scope.SCP.CRate,
        //            CurrencyID_BC : $scope.CurrencyID_BC,
        //            Status_Payable:2,
        //            ContactPersonnelID:oSalesComPayables[0].ContactPersonnelID
        //        }
        //    return oSalesCommissionPayables;
        //};

        $scope.RequestforApproval =function()
        {
            //Update AdjustDeduct
            var oSalesCommissionPayables=[];
            var nAdjOverdueAmount=0;
            for(var i=0; i<$scope.gridOptions.data.length;i++)
            {
                obj=$scope.gridOptions.data[i];
                obj.CRate=( $scope.SCP.CRate == undefined)? 1:  $scope.SCP.CRate;
                obj.Status_Payable=2;
                obj.CurrencyID_BC = $scope.CurrencyID_BC;
                oSalesCommissionPayables.push(obj);
                nAdjOverdueAmount=nAdjOverdueAmount+obj.AdjOverdueAmount;
            }
            var oSalesCommissionPayable =
                {
                    SalesCommissionPayables:oSalesCommissionPayables
                }
            $http.post(_sBaseAddress+'/SalesCommissionPayable/RequestedSalesCommisionPayableApproval', JSON.stringify(oSalesCommissionPayable)).then(
                            function (response) {
                                debugger;
                                var result=jQuery.parseJSON(response.data);
                                var oSalesComPayable=null;
                                if(result[0].ErrorMessage == '' || result[0].ErrorMessage == null)
                                {
                                    oSalesComPayable=JSON.parse(sessionStorage.getItem("SalesComPayable"));

                                    oSalesComPayable.CRate=( $scope.SCP.CRate == undefined)? 1:  $scope.SCP.CRate;
                                    oSalesComPayable.Status_Payable=2;
                                    oSalesComPayable.CurrencyID_BC = $scope.CurrencyID_BC;
                                    oSalesComPayable.Status_PayableSt="RequestForApprove";
                                    oSalesComPayable.AdjOverdueAmount=nAdjOverdueAmount;
                                    
                                    userSession.setData('CreateReqForSalesComPayableApproval',oSalesComPayable);
                                    userSession.previousPage();
                                }
                                else{

                                    msModal.Message({headerTitle : '', bodyText:result[0].ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                }
                            },
                            function (response) {
                                msModal.Message({headerTitle : '', bodyText:(response.data).ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});}

                        );
        };

        $scope.getPayablesByBillWise = function(result){
            var objs = JSON.parse(sessionStorage.getItem('CreateReqForSalesComPayableApproval'));
            var index = parseInt(sessionStorage.getItem('SelectedRowIndex'));
            var obj =objs[index] ;
            obj.Status_Payable  = result[0].Status_Payable;
            obj.Status_PayableSt = result[0].Status_PayableSt;
            return  obj;
        };

        //$scope.refreshObjectUndoApproveSalesCommissionPayable = function()
        //{
        // var oSalesCommissionPayables =
        //        {
        //            ExportBillID :oSalesComPayables[0].ExportBillID,
        //            CRate :( $scope.SCP.CRate == undefined)? 1:  $scope.SCP.CRate,
        //            CurrencyID_BC : $scope.CurrencyID_BC,
        //            Status_Payable:1,
        //            ContactPersonnelID:oSalesComPayables[0].ContactPersonnelID
        //        }
        //    return oSalesCommissionPayables;
        //};

        $scope.UndoRequest =function()
        {
            var oSalesCommissionPayables=[];
            for(var i=0; i<$scope.gridOptions.data.length;i++)
            {
                obj=$scope.gridOptions.data[i];
                obj.CRate=( $scope.SCP.CRate == undefined)? 1:  $scope.SCP.CRate;
                obj.Status_Payable=1;
                obj.CurrencyID_BC = $scope.CurrencyID_BC;
                oSalesCommissionPayables.push(obj);
            }
            var oSalesCommissionPayable =
                {
                    SalesCommissionPayables:oSalesCommissionPayables
                }
            $http.post(_sBaseAddress+'/SalesCommissionPayable/RequestedSalesCommisionPayableApproval', JSON.stringify(oSalesCommissionPayable)).then(
                            function (response) {
                                var result=jQuery.parseJSON(response.data);

                                if(result[0].ErrorMessage == '' || result[0].ErrorMessage == null)
                                {
                                    var res = $scope.getPayablesByBillWise(result);
                                    userSession.setData('CreateReqForSalesComPayableApproval',res);
                                    userSession.previousPage();
                                }
                                else{

                                    msModal.Message({headerTitle : '', bodyText:result[0].ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                }
                            },
                            function (response) {
                                msModal.Message({headerTitle : '', bodyText:(response.data).ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});}

                        );
        };

        $scope.close = function () {
            userSession.previousPage();
        };
   });


   SalesComPayableModule.directive('validNumber', function () {
       return {
           require: '?ngModel',
           link: function (scope, element, attrs, ngModelCtrl) {
               if (!ngModelCtrl) {
                   return;
               }

               ngModelCtrl.$parsers.push(function (val) {
                   if (angular.isUndefined(val)) {
                       var val = '';
                   }
                   debugger;

                   var clean = val.replace(/[^0-9\.]/g, '');
                 
                   var decimalCheck = clean.split('.');
               

                   if (!angular.isUndefined(decimalCheck[1])) {
                       decimalCheck[1] = decimalCheck[1].slice(0, 2);
                       clean = decimalCheck[0] + '.' + decimalCheck[1];
                   }

                   if (val !== clean) {
                       ngModelCtrl.$setViewValue(clean);
                       ngModelCtrl.$render();
                   }
                   return clean;
               });

               element.bind('keypress', function (event) {
                   if (event.keyCode === 32) {
                       event.preventDefault();
                   }
               });
           }
       };
   });

</script>

