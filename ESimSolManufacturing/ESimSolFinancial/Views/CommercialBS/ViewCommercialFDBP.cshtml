 @{
     ViewBag.Title = "Purchase(FDBP)";
  }
<html>
<body>
    @model ESimSol.BusinessObjects.CommercialFDBP
<div style="font-family: Tahoma" class="menuMainCollectionTable">
    <fieldset>
        <legend style="font-weight: bold">Commercial Bank Submition Info : </legend>
        <table border="0" cellspacing="2" cellpadding="2" style="font-size: 11px; width:100%; font-weight: bold" >
            <tr>
                <td style="width:15%; text-align: right">
                    Master LC No :
                </td>
                <td style="width:35%;">
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                        <tr>
                            <td style="width:50%">@Html.TextBoxFor(model => model.MasterLCNo, new { style = "width: 100%;", id = "txtMasterLCNo", disabled = "disabled" })</td>
                            <td style="width:22%;text-align:right;">Bank Ref No:</td>
                            <td style="width:28%">@Html.TextBoxFor(model => model.BankRefNo, new { style = "width: 100%;", id = "txtBankRefNo", disabled = "disabled" })</td>
                        </tr>
                    </table>
                </td>
                <td style="width: 15%; text-align: right">
                    FDBP No:
                </td>
                <td style="width:35%">
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                        <tr>
                            <td style="width:43%">@Html.TextBoxFor(model => model.FDBPNo, new { style = "width: 100%;", id = "txtFDBPNo", disabled = "disabled" })</td>
                            <td style="width:27%;text-align:right;">Purchase Date :</td>
                            <td style="width:30%"><input id="txtPurchaseDate" type="text" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser" style="width: 100%;" /></td>
                        </tr>
                    </table>
                    
                </td>
            </tr>
            <tr>
                <td style="width:15%; text-align: right">
                    Buyer Name :
                </td>
                <td style="width: 35%">
                    @Html.TextBoxFor(model => model.BuyerName, new { style = "width: 100%;", id = "txtBuyerName", disabled = "disabled" })
                </td>
                <td style="width:15%; text-align: right">
                    Doc Value :
                </td>
                <td style="width: 35%">
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                        <tr>
                            <td style="width:92%"><input type="text" id="txtBSAmount" style="width: 100%;text-align: right" disabled /></td>
                            <td style="width:8%">@Html.TextBoxFor(model => model.CurrencySymbol, new { style = "width: 100%;", id = "txtCurrencySymbol", disabled = "disabled" })</td>
                        </tr>
                    </table>
                </td>
            </tr>
            <tr>
                <td style="width:15%; text-align: right">
                    Convertion Rate :
                </td>
                <td style="width: 35%">
                    @Html.TextBoxFor(model => model.CRate, new { style = "width: 100%;", id = "txtConvertionRate" })
                </td>
                <td style="width:15%; text-align: right">
                    Purchase Amount :
                </td>
                <td style="width: 35%">
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                        <tr>
                            <td style="width:92%"><input type="text" id="txtPurchaseAmount" style="width: 100%;text-align: right" /> </td>
                            <td style="width:8%">@Html.TextBoxFor(model => model.CurrencySymbol, new { style = "width: 100%;", id = "txtCurrencySymbol", disabled = "disabled" })</td>
                        </tr>
                    </table>
                </td>
            </tr>
                    
            <tr>
                <td style="width:15%; text-align: right">
                    Remark :
                </td>
                <td style="width: 35%">
                    @Html.TextBoxFor(model => model.Remarks, new { style = "width: 100%;", id = "txtRemarks" })
                </td>
                <td style="width:15%; text-align: right">
                    Bank Charge:
                </td>
                <td style="width: 35%">
                    <table border="0" cellpadding="0" cellspacing="0" width="100%">
                        <tr>
                            <td style="width:92%"><input type="text" id="txtBankCharge" style="width: 100%;text-align: right" /></td>
                            <td style="width:8%">@Html.TextBoxFor(model => model.CurrencySymbol, new { style = "width: 100%;", id = "txtCurrencySymbol", disabled = "disabled" })</td>
                        </tr>
                    </table>
                </td>
            </tr>   
        </table>
    </fieldset>
    <div style="width:100%">
        <table id="tblCommercialFDBPDetails" title="Purchase Detail" class="easyui-datagrid" style="width:100%;height:350px;" showFooter="true"
               data-options="singleSelect: true,fitColumns:false, rownumbers:true, pagination:false,  autoRowHeight:false, toolbar: '#toolbarCommercialFDBPDetail',onClickRow:onClickRow ">
            <thead>
                <tr>
                    <th field="BankName" width="25%" align="left">Bank Name</th>
                    <th field="BankAccountNo" width="20%" align="left">Account No</th>
                    <th width="12%" align="left" data-options="field:'Remarks',editor:{type:'text'}">Remarks</th>
                    <th width="15%" formatter="formatPrice" data-options="field:'AmountInCurrency',editor:{type:'numberbox',options:{precision:2}}" align="right">Amount In Currency</th>
                    <th width="8%" align="right" formatter="formatPrice" data-options="field:'CRate',editor:{type:'numberbox',options:{precision:2}}">C.Rate</th>
                    <th width="10%" align="right" field="AmountBC" formatter="formatPrice">Amount</th>
                </tr>
            </thead>
        </table>
        <div id="toolbarCommercialFDBPDetail">
            <label>Bank Account:</label><select id="cboBankAccount" style="width:280px"></select>
            CRate: <input type="text" id="txtCRate" class="number" value="1" style="width:60px;"/>&nbsp;Amount In Currency :<input type="text" id="txtAmountInCurrency" class="number" style="width:110px;" />
            <a id="btnAddDetail" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-add" plain="true">Add</a>
            <a id="btnDelete" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-remove" plain="true">Remove</a>
            <a id="btnRefresh" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-reload" plain="true"></a>
        </div>
    </div>
    <fieldset>
        <legend style="font-weight: bold">Action : </legend>
        <table border="0" cellspacing="2" cellpadding="2" style="font-size: 11px;width:100%; font-weight: bold">
            <tr>
                <td style="width:75%; text-align:left">
                    
                </td>
                <td style="width:25%;text-align:right">
                    <a id="btnApprove" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-approved" plain="true">Approve</a>
                    <a id="btnSave" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="true">Commit</a>
                    <a id="btnClose" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="true">Close</a>
                </td>
            </tr>
        </table>
    </fieldset>
    </div>
</body>
</html>
<script type="text/javascript">
    var _oCommercialFDBP =null;
    var _sBaseAddress="";
    var _oBankAccounts = [];
    $(document).ready(function () {
        //debugger;
        _sBaseAddress =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
        _oCommercialFDBP =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
        _oBankAccounts = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BankAccounts));
        $("#cboBankAccount").icsLoadCombo({List: _oBankAccounts, OptionValue: "BankAccountID",DisplayText: "BankNameAccountNo", InitialValue:"--Select Bank Account--"});
        $('#txtPurchaseDate').datebox('setValue', icsdateformat(new Date()));
        $('#txtBSAmount,#txtPurchaseAmount,#txtBankCharge,#txtConvertionRate,#txtAmountInCurrency,#txtCRate').icsCurrencyBox(null, null, 2);

        $('#btnApprove').hide();
        if(sessionStorage.getItem("PurchaseOperation")=="Approve")
        {
            $('#btnApprove').show();
            $('#btnSave').hide();
        }
        if(parseInt(_oCommercialFDBP.ApprovedBy)!=0)
        {
            $('#btnApprove,#btnSave').hide();
        }
        if(_oCommercialFDBP.CommercialFDBPDetails.length>0)
        {
            DynamicRefreshList(_oCommercialFDBP.CommercialFDBPDetails, 'tblCommercialFDBPDetails');
            RefreshFooter();
        }
       
        RefreshControl();

 });

    function RefreshControl()
    {
        $('#txtBSAmount').val(icsFormatPrice(_oCommercialFDBP.BSAmount, null,2));
        $('#txtPurchaseAmount').val(icsFormatPrice( _oCommercialFDBP.PurchaseAmount, null,2));
        $('#txtBankCharge').val(icsFormatPrice( _oCommercialFDBP.BankCharge, null,2));
        $('#txtConvertionRate').val(icsFormatPrice( _oCommercialFDBP.CRate, null,2));
    }

    function RefreshObject()
    {
        var oCommercialFDBP = {
            CommercialFDBPID:_oCommercialFDBP.CommercialFDBPID,
            CommercialBSID :_oCommercialFDBP.CommercialBSID,
            PurchaseDate :$('#txtPurchaseDate').datebox('getValue'),
            PurchaseAmount :parseFloat(icsRemoveComma($("#txtPurchaseAmount").val())),
            BankCharge :parseFloat(icsRemoveComma($("#txtBankCharge").val())),
            CRate :parseFloat(icsRemoveComma($("#txtConvertionRate").val())), 
            CurrencyID :_oCommercialFDBP.CurrencyID,
            Remarks: $("#txtRemarks").val(),
            CommercialFDBPDetails:$('#tblCommercialFDBPDetails').datagrid('getRows')
        };
        return oCommercialFDBP;
    }

    $('#btnAddDetail').click(function (e)
    {
        if($("#cboBankAccount").val()<=0){alert("Please Select Bank Account.");$("#cboBankAccount").focus();return;}
        if(parseFloat(icsRemoveComma($("#txtCRate").val()))<=0){alert("Convertion  Rate Should be Greater than 0.");$("#txtCRate").focus();return;}
        if(parseFloat(icsRemoveComma($("#txtAmountInCurrency").val()))<=0){alert("Amount  Should be Greater than 0.");$("#txtAmountInCurrency").focus();return;}
        if(ICS_FindObject($("#tblCommercialFDBPDetails").datagrid('getRows'),'BankAccountID',$("#cboBankAccount").val())){alert("Sorry, Selected Account Already Exist.");return}

        var oBankAccountObject = ICS_FindObject(_oBankAccounts,'BankAccountID',$("#cboBankAccount").val());
        var oFDBPDetail = {
            CommercialFDBPDetailID : 0,
            CommercialFDBPID :_oCommercialFDBP.CommercialFDBPID, 
            BankAccountID :$("#cboBankAccount").val(),
            AmountInCurrency :parseFloat(icsRemoveComma($("#txtAmountInCurrency").val())),
            CRate :parseFloat(icsRemoveComma($("#txtCRate").val())),
            AmountBC :parseFloat(icsRemoveComma($("#txtCRate").val())) *parseFloat(icsRemoveComma($("#txtAmountInCurrency").val())),
            Remarks : "",
            BankName :oBankAccountObject.BankName,
            BankAccountNo :oBankAccountObject.AccountNo 
            };
        $('#tblCommercialFDBPDetails').datagrid('appendRow',oFDBPDetail);
    RefreshFooter();
    $("#cboBankAccount").val(0);
    $("#cboBankAccount").focus();
    });
    $("#btnDelete").click(function () {
        var olCommercialFDBPDetail = $('#tblCommercialFDBPDetails').datagrid('getSelected');
        if (olCommercialFDBPDetail == null) {
            alert("Invalid Selection!!! please select a valid Item!");
            return false;
        }
        if (!confirm("Confirm to Remove?")) return;
        var SelectedRowIndex = $('#tblCommercialFDBPDetails').datagrid('getRowIndex', olCommercialFDBPDetail);
        $('#tblCommercialFDBPDetails').datagrid('deleteRow',SelectedRowIndex);
        RefreshFooter();
        alert("Removed sucessfully");
        editIndex = undefined;
    });
    $("#btnRefresh").click(function(){
        endEditing();
        var oCommercialFDBPDetails = $('#tblCommercialFDBPDetails').datagrid('getRows');
        DynamicRefreshList(oCommercialFDBPDetails, 'tblCommercialFDBPDetails');
    });
    function RefreshFooter()
    {
        $('#tblCommercialFDBPDetails').datagrid('reloadFooter',[{Remarks: 'Total', AmountInCurrency:ICS_TotalCalculation($("#tblCommercialFDBPDetails").datagrid('getRows'),'AmountInCurrency'),AmountBC:ICS_TotalCalculation($("#tblCommercialFDBPDetails").datagrid('getRows'),'AmountBC') }]);
    }

    function ValidateInput()
    {
       
        if(_oCommercialFDBP.CommercialBSID <=0) {
            alert("Please Select Commercial Bank Submission");
            return false;
        }
        if(parseFloat(icsRemoveComma($("#txtConvertionRate").val()))<=0)
        {
            alert("Convertion Rate Should be Greater then 0.");
            return false;
        }
        if(parseFloat(icsRemoveComma($("#txtPurchaseAmount").val()))<=0)
        {
            alert("Purchase Amount Should be Greater then 0.");
            return false;
        }
        if(parseFloat(icsRemoveComma($("#txtPurchaseAmount").val()))>parseFloat(icsRemoveComma($("#txtBSAmount").val())))
        {
            alert("Purchase Amount Should be Less than Doc Value.");
            return false;
        }

        var oCommercialFDBPDetails=$("#tblCommercialFDBPDetails").datagrid('getRows');
        if (!oCommercialFDBPDetails || oCommercialFDBPDetails.length<=0) {
            alert("Please Add Bank Submission Details.");
            return false;
        }
        for(var i = 0;i<oCommercialFDBPDetails.length;i++)
        {
            if(parseFloat(oCommercialFDBPDetails[i].AmountBC)<=0 )
            {
                alert("Amount Should be Greater than 0 for Bank Account ["+oCommercialFDBPDetails[i].BankAccountNo+"]");
                return false;
            }
        }

        var nTotaAmountInCurrency = ICS_TotalCalculation($("#tblCommercialFDBPDetails").datagrid('getRows'),'AmountInCurrency');
        var nUpToTotalAmount =  nTotaAmountInCurrency+parseFloat(icsRemoveComma($("#txtBankCharge").val()));
        if(nUpToTotalAmount!=parseFloat(icsRemoveComma($("#txtPurchaseAmount").val())))
        {
            alert("Receiveing Total Amount and Bank Charge  Should be Equal Purchase Amount.");
            return false;
        }       
        return true;
    }

 $('#btnSave').click(function (e) {
     debugger;
     endEditing();
  if(!ValidateInput()) return false;
 var oCommercialFDBP = RefreshObject();
     $.ajax({
                type: "POST",
                dataType: "json",
                url : _sBaseAddress+"/CommercialBS/SaveCommercialFDBP",
                traditional: true,
                data:  JSON.stringify(oCommercialFDBP),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
               debugger;
                var oCommercialFDBP= jQuery.parseJSON(data);
                if ((oCommercialFDBP.ErrorMessage=="" || oCommercialFDBP.ErrorMessage==null) && parseInt(oCommercialFDBP.CommercialFDBPID)>0)
                {
                    debugger;
                   alert("Successfully Saved Purchase Amount.");
                   var oCommercialBSs = sessionStorage.getItem("CommercialBSs");
                   var nIndex = parseInt(sessionStorage.getItem("SelectedRowIndex"));
                   if (oCommercialBSs != null)
                   {
                       oCommercialBSs = jQuery.parseJSON(oCommercialBSs);
                   }
                   else {
                       oCommercialBSs = [];
                   }
                   oCommercialBSs[nIndex] = oCommercialFDBP.CommercialBS;
                   sessionStorage.setItem("CommercialBSs", JSON.stringify(oCommercialBSs));
                   window.location.href = sessionStorage.getItem("BackLink");
                 }else
                 {
                    alert(oCommercialFDBP.ErrorMessage);
                 }
               },
               error: function (xhr, status, error)
                {
                    alert(error);
                }
            });

 });

 var editIndex = undefined;
 function endEditing() {
     if (editIndex == undefined) { return true }
     if ($('#tblCommercialFDBPDetails').datagrid('validateRow', editIndex)) {
         $('#tblCommercialFDBPDetails').datagrid('endEdit', editIndex);
         $('#tblCommercialFDBPDetails').datagrid('selectRow', editIndex);
         var oCommercialFDBP = $('#tblCommercialFDBPDetails').datagrid('getSelected');

         debugger;
         if (oCommercialFDBP == null)
         {
             return;
         }

         if (oCommercialFDBP.Qty<=0)
         {
             oCommercialFDBP.Qty=0;
         }
         oCommercialFDBP.AmountBC = parseFloat(oCommercialFDBP.AmountInCurrency)* parseFloat(oCommercialFDBP.CRate);
         $('#tblCommercialFDBPDetails').datagrid('updateRow', { index: editIndex, row: oCommercialFDBP });
         RefreshFooter();
         editIndex = undefined;
         return true;
     }
     else {
         return false;
     }
 }

 function onClickRow(index) {

     if (editIndex != index) {
         if (endEditing()) {
             $('#tblCommercialFDBPDetails').datagrid('selectRow', index).datagrid('beginEdit', index);
             var oCommercialFDBP= $('#tblCommercialFDBPDetails').datagrid('getSelected');
             editIndex = index;
         }
         else {
             $('#tblCommercialFDBPDetails').datagrid('selectRow', editIndex);
         }
     }
 }


 $('#btnApprove').click(function (e) {
    debugger;
    if(_oCommercialFDBP.CommercialFDBPID<=0){alert("Without Save You Can't Approve.");return}
    if (!confirm("Confirm to Approve?")) return;
    $.ajax({
        type: "POST",
        dataType: "json",
        url : _sBaseAddress+"/CommercialBS/ApproveCommercialFDBP",
        traditional: true,
        data:  JSON.stringify(_oCommercialFDBP),
        contentType: "application/json; charset=utf-8",
        success: function (data) {
            debugger;
            var oCommercialFDBP= jQuery.parseJSON(data);
            if (oCommercialFDBP.ErrorMessage=="" || oCommercialFDBP.ErrorMessage==null)
            {
                debugger;
                alert("Successfully Approved Purchase Amount.");
                var oCommercialBSs = sessionStorage.getItem("CommercialBSs");
                var nIndex = parseInt(sessionStorage.getItem("SelectedRowIndex"));
                if (oCommercialBSs != null)
                {
                    oCommercialBSs = jQuery.parseJSON(oCommercialBSs);
                }
                else {
                    oCommercialBSs = [];
                }
                oCommercialBSs[nIndex] = oCommercialFDBP.CommercialBS;
                sessionStorage.setItem("CommercialBSs", JSON.stringify(oCommercialBSs));
                window.location.href = sessionStorage.getItem("BackLink");
            }else
            {
                alert(oCommercialFDBP.ErrorMessage);
            }
        },
        error: function (xhr, status, error)
        {
            alert(error);
        }
    });

});
 $('#btnClose').click(function (e) {
     window.location.href =sessionStorage.getItem("BackLink");
 });


</script>
