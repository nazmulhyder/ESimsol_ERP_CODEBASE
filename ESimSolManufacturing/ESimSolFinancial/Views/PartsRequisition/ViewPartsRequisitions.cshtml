@{
    ViewBag.Title = "Parts Requisition List";
}

@model IEnumerable <ESimSol.BusinessObjects.PartsRequisition>

<div ng-app="PartsRequisitionModule">
    <div ng-controller="PartsRequisitionController">
        <div class="row ui-grid-top-panel">
            <div class="container">
                <div class="form-inline">
                    <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="AdvanceSearch()" ng-hide="btnAdvSearch"> <span class="glyphicon glyphicon-search" aria-hidden="true"> Adv.Search</span></button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="add()" ng-hide="btnAdd"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> New</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="edit()" ng-hide="btnEdit"> <span class="glyphicon glyphicon-edit" aria-hidden="true"></span> Edit</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="delete()" ng-hide="btnDelete"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Delete</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="view()" ng-hide="btnView"> <span class="glyphicon glyphicon-list-alt" aria-hidden="true"></span> View</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="ReqForApprove()" ng-hide="btnReqForApprove"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Req For App</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="UndoRequest()" ng-hide="btnUndoRequest"> <span class="glyphicon glyphicon-circle-arrow-down" aria-hidden="true"></span> Undo Req</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Approve()" ng-hide="btnApprove"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Approve</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="ReqForRevise()" ng-hide="btnReqForRevise"> <span class="glyphicon glyphicon-circle-arrow-down" aria-hidden="true"></span> ReqForRevise</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Revise()" ng-hide="btnRevise"> <span class="glyphicon glyphicon-circle-arrow-down" aria-hidden="true"></span> Revise</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Disburse()" ng-hide="btnDisburse"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Disburse</button>
                    @*<button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="Receive()" ng-hide="btnReceive"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Receive</button>*@
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PrintPreview()"> <span class="glyphicon glyphicon-print" aria-hidden="true"></span> Preview</button>
                    <button type="button" class="btn btn-sm" aria-label="Left Align" ng-click="PrintList()" > <span class="glyphicon glyphicon-print" aria-hidden="true"></span> Print List</button>
                 </div>
            </div>
        </div>
        <div class="row" style="margin:2px; padding:0;">
            <div style="width:100%" ui-grid="gridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav class="grid ui-grid-selectable"></div>
        </div>
        
    </div>

    <script type="text/ng-template" id="PartsRequisition.html">
        <div class="modal-header">
            <h4 class="modal-title" id="modal-title">{{Header}}</h4>
        </div>
        <div class="modal-body form-horizontal regionExportUP ms-custom-control" id="modal-body">
            <div class="row">
                <div class="col-md-12 ">
                    <div class="col-md-3 text-right"><label class="control-label">Request To:</label></div>
                    <div class="col-md-7 text-left">
                        <select id="cboPRType" ng-model="cboRequestTo" ng-options="obj.UserID as obj.UserName for obj in cboRequestTos" ng-disabled="disabled" class="form-control">
                            <option value="">--Select Type--</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 ">
                    <div class="col-md-3 text-right"><label class="control-label">Note:</label></div>
                    <div class="col-md-7 text-left">
                        <input type="text" class="form-control" ng-model="txtApproveRequestNote">
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-success btn-sm" aria-label="Left Align" ng-click="ReqForRevise()" ng-disabled="disabled" ng-hide="hide_Approval"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span> Req For Revise</button>
            <button type="button" class="btn-success btn-sm" aria-label="Left Align" ng-click="ReqForApprove()" ng-disabled="disabled" ng-hide="hide_Revise"> <span class="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span> Req For Approval</button>
            <button type="button" class="btn-danger btn-sm" aria-label="Left Align" ng-click="cancel()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Cancel</button>
        </div>
    </script>
</div>

<style type="text/css">

     .form-control{
        height:26px;
        padding:0px 6px;
        font-size:12px;
    }
    .grid {
        height: 450px;
        width: 100%;
    }

    .custom-pagination {
        margin-top: -15px;
        margin-bottom: -15px;
    }

    .spacing {
        padding-bottom: 5px;
    }
</style>
<script src="~/Views/PartsRequisition/AdvSearchPartsRequisition.js"></script>

<script type="text/javascript">

    var pager =[];
    var _nBUID=0;
    var oAuthorizationRolesMapping =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.AuthorizationRolesMapping]));
    _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    var oPartsRequisitions =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    var oRequisitionTypes =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.RequisitionTypes));
    _nBUID =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.BUID));
    _nOptType =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.OptType));
    var oIssueStores =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.Stores));
    var oRequisitionUsers =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.RequisitionUsers));
    var oCompareOperators =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.DateCompareOperatorObjs));
    var oPRTypes =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.PRTypes));
    debugger;
    var  PartsRequisitionModule = angular.module('PartsRequisitionModule', ['ngAnimate', 'ui.bootstrap', 'ui.grid','ui.grid.selection', 'ui.grid.cellNav','ui.grid.resizeColumns','ms.service','PartsRequisition.service']);
    PartsRequisitionModule.controller('PartsRequisitionController', function ($scope, $http, $uibModal,$interval,$timeout,  $log, uiGridConstants, msModal, userSession,PartsRequisitionservice) {
        debugger;
        oPartsRequisitions= (userSession.getData('PartsRequisitions').length>0)? userSession.getData('PartsRequisitions'):oPartsRequisitions;
        $scope.CompareOperators= oCompareOperators;
        $scope.IssueStores=oIssueStores;
        $scope.RequisitionTypes=oRequisitionTypes;
        $scope.BUID=_nBUID;
        $scope.OptType=_nOptType;
        $scope.btnAdd = $scope.btnEdit = $scope.btnDelete = $scope.btnApprove= $scope.btnDisburse =$scope.btnReceive = $scope.btnRevise =false;

        $scope.gridOptions ={
            enableSorting: true,
            enableFullRowSelection: true,
            //enableRowHeaderSelection: false,
            enableSelectAll: false,
            multiSelect:false,
            enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,
            columnDefs: [
                {name: ' ',width:'3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>',cellClass: 'text-center', enableCellEdit: false, enableSorting:false, enableColumnResizing:false, enableColumnMenu:false},
                { field: 'RequisitionNo', name: 'Req. No', width: '10%' },
                { field: 'VehicleRegNo', name: 'Reg. No', width: '10%' },
                { field: 'ChassisNo', name: 'Bin No', width: '10%' },
                { field: 'CustomerName', name: 'Customer', width: '10%' },
                { field: 'ServiceOrderNo', name: 'Order No', width: '8%' },
                { field: 'IssueDateSt', name: 'Req. Date', width:'10%', enableCellEdit: false },
                { field: 'RequisitionByName', name: 'Req. By', width: '10%' },
                { field: 'StoreName', name: 'Store', width: '10%' },
                { field: 'PRStatusSt', name: 'Status', width: '10%' },
                { field: 'ApprovedByName', name: 'Approve By', width: '10%' },
                { field: 'DeliveryByName', name: 'Disburse By', width: '10%' },
                { field: 'PRTypeSt', name: 'Type', width: '10%' },
            ],

            data:oPartsRequisitions,

            onRegisterApi:function(gridApi)
            {
                $scope.gridApi = gridApi;
                $scope.gridApi.selection.clearSelectedRows();
                $scope.gridApi.core.refresh();
                debugger;
                if(oPartsRequisitions.length>0 && userSession.getRowIndex()>=0)
                {
                    $scope.gridApi.grid.modifyRows(oPartsRequisitions);
                    $scope.gridApi.selection.selectRow(oPartsRequisitions[userSession.getRowIndex()]);
                    $scope.RowSelect(oPartsRequisitions[userSession.getRowIndex()]);
                }
                $scope.gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                    $scope.RowSelect(row.entity ); });
                userSession.clear();
            }

        };
        $scope.RowSelect =  function (entity){
            debugger;

            if(entity.PRStatusInt==0)
            {
                $scope.btnReqForApprove=false;
                $scope.btnEdit=false;
                $scope.btnDelete=false;

                $scope.btnRevise=true;
                $scope.btnApprove=true;
                $scope.btnReqForRevise=true;
                $scope.btnUndoRequest =true;
                $scope.btnDisburse=true;
                CheckControll();
            }
            else if(entity.PRStatusInt==1){//ReqForApprove
                $scope.btnApprove=false;
                $scope.btnUndoRequest =false;

                $scope.btnRevise =true;
                $scope.btnReqForApprove=true;
                $scope.btnDisburse=true;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                CheckControll();
            }
            else if(entity.PRStatusInt==2)//Approved
            { 
                $scope.btnDisburse=false;
                $scope.btnReqForRevise=false;

                $scope.btnUndoRequest =true;
                $scope.btnApprove=true;
                $scope.btnReqForApprove=true;
                $scope.btnRevise =true;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                CheckControll();
            }
            else if(entity.PRStatusInt==3)//Revise
            {
                $scope.btnRevise =false;

                $scope.btnReqForRevise =true;
                $scope.btnUndoRequest =true;
                $scope.btnApprove=true;
                $scope.btnReqForApprove=true;
                $scope.btnDisburse=true;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                CheckControll();
            }else
            {
                $scope.btnRevise =true;
                $scope.btnUndoRequest =true;
                $scope.btnApprove=true;
                $scope.btnReqForApprove=true;
                $scope.btnDisburse=true;
                $scope.btnEdit=true;
                $scope.btnDelete=true;
                $scope.btnReqForRevise =true;
                $scope.btnDisburse=true;
            }
        }
        $scope.singleFilter=function(renderableRows){

            var matcherName = new RegExp(angular.uppercase($scope.Name));
            var matcherOperationTypeST = new RegExp(angular.uppercase($scope.OperationTypeST));
            renderableRows.forEach( function( row ) {
                debugger;
                var match = false;
                if (angular.uppercase(row.entity['Name']).match(matcherName) && angular.uppercase(row.entity['OperationTypeST']).match(matcherOperationTypeST)){
                    match = true;
                }
                if ( !match ){
                    row.visible = false;
                }
            });
            return renderableRows;
        };
        $scope.AdvanceSearch = function ()
        {
            debugger;
            $scope.MRNo ="";
            var modalObj={
                modalcontroller:'ModalPartsRequisitionAdvanceSearchCtrl',
                appcontroller:'PartsRequisitionController',
                CompareOperators:$scope.CompareOperators,
                RequisitionTypes:oPRTypes,
                IssueStores:$scope.IssueStores,
                RequisitionUser: oRequisitionUsers
            }
            var modalInstance=PartsRequisitionservice.Instance(modalObj);
            modalInstance.result.then(function (result)
            {
                debugger;
                $scope.gridOptions.data = result;
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };
        $scope.Modal = function (objSQ, operation,header) {
            debugger;
            var modalInstance = $uibModal.open({
                ariaLabelledBy: 'modal-title',
                ariaDescribedBy: 'modal-body',
                size: 'md',
                templateUrl: 'PartsRequisition.html',
                controller: 'ModalInstanceCtrl',
                controllerAs: 'PartsRequisitionCtrl',
                resolve: {
                    obj: function () {
                        return { PartsRequisition:objSQ, Operation: operation, Header:header  };
                    }
                }
            });

            modalInstance.result.then(function (result) {
                if(result.PartsRequisitionID>0)
                {
                    var index=sessionStorage.getItem('SelectedPRIndex');
                    $scope.gridOptions.data[index]=result;
                    $scope.gridApi.selection.selectRow($scope.gridOptions.data[index]);
                    $scope.RowSelect($scope.gridOptions.data[index]);
                } 
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };
        //$scope.OrderQty=0.0;
        $scope.ReqForApprove = function(id)
        {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(parseInt(data[0].PRStatusInt)!=0)
            {
                alert("Please select Only Initialize Item");
                return false;
            }
            sessionStorage.setItem("SelectedPRIndex", $scope.gridOptions.data.indexOf(data[0]));
            $scope.Modal( data[0], 'Approval','Request For Approval');
        }
        $scope.ReqForRevise = function(id)
        {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            
            if(parseInt(data[0].PRStatusInt)!=2)
            {
                alert("Only Approved Item can Request for Revise!");
                return;
            }
            sessionStorage.setItem("SelectedPRIndex", $scope.gridOptions.data.indexOf(data[0]));
            $scope.Modal( data[0], 'Revise','Request For Revise');
        }

        $scope.add = function () {
            sessionStorage.setItem("BUID",_nBUID);
            sessionStorage.setItem("Operation", "New");
            sessionStorage.removeItem("SelectedRowIndex");
            sessionStorage.setItem("SelectedRowIndex",-1);
            sessionStorage.setItem("PartsRequisitionHeader", "Add PartsRequisition");
            sessionStorage.setItem("PartsRequisitions", JSON.stringify($scope.gridOptions.data));
            sessionStorage.setItem("PartsRequisition", JSON.stringify([]));
            sessionStorage.setItem("BackLink", window.location.href);

            var tsv=((new Date()).getTime())/1000;
            window.location.href = _sBaseAddress+ "/PartsRequisition/ViewPartsRequisition?id=0&buid="+$scope.BUID+"&ts="+tsv;
        };
        $scope.edit = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0)
            {
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(parseInt(data[0].PRStatusInt)!=0)
            {
                alert("Please select Only Initialize Item");
                return false;
            }
           
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.PartsRequisitionID==data[0].PartsRequisitionID){
                    
                    sessionStorage.setItem("BUID",_nBUID);
                    sessionStorage.setItem("Operation", "Edit");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("PartsRequisitionHeader", "Edit PartsRequisition");
                    sessionStorage.setItem("PartsRequisitions", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("PartsRequisition", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/PartsRequisition/ViewPartsRequisition?id="+value.PartsRequisitionID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.view = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.PartsRequisitionID==data[0].PartsRequisitionID){
                    sessionStorage.setItem("BUID",_nBUID);
                    sessionStorage.setItem("Operation", "View");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("PartsRequisitionHeader", "View PartsRequisition");
                    sessionStorage.setItem("PartsRequisitions", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("PartsRequisition", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/PartsRequisition/ViewPartsRequisition?id="+value.PartsRequisitionID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.delete = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'No item found to delete.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }

            if(parseInt(data[0].PRStatusInt)!=0)
            {
                alert("Please select Only Initialize Item");
                return false;
            }

            if (!confirm("Confirm to Delete?")) return ;
            var SelectedRowIndex= $scope.gridOptions.data.indexOf(data[0]);

            $http.post(_sBaseAddress+ '/PartsRequisition/Delete',JSON.stringify(data[0])).then(
                            function (response) {
                                if(jQuery.parseJSON(response.data)=='Delete successfully'){
                                    //angular.forEach($scope.gridOptions.data,function(value,index){
                                    //    if(value.PartsRequisitionID==data[0].PartsRequisitionID){
                                    //        $scope.gridOptions.data.splice(index,1);
                                    //    }
                                    //},$scope.gridOptions.data);
                                    alert("Delete Successfully.");
                                    $scope.gridOptions.data.splice(SelectedRowIndex,1);
                                    $scope.gridApi.core.refresh();
                                }
                                else{
                                    alert(jQuery.parseJSON(response.data));
                                }
                            },
                            function (response) {alert(jQuery.parseJSON(response.data));}
                        );

        };

        $scope.UndoRequest=function ()
        {
            var data=$scope.gridApi.selection.getSelectedRows();

            if(data==null || data.length<=0)
            {
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            else if(parseInt(data[0].PRStatusInt)!=1)
            {
                alert("Please select only Requested  item from list!");
                return;
            }
            if (!confirm("Confirm to Undo Request?")) return ;

            var index=$scope.gridOptions.data.indexOf(data[0]);
            data[0].ActionTypeExtra="UndoRequest";
            $scope.StatusChange(data[0],"Undo Request",index);
        }
        $scope.StatusChange=function (oPartsRequisition,sParamIdentifier,index)
        {
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/PartsRequisition/ChangeStatus',$.param(oPartsRequisition), config).then(
                function (response)
                {
                    debugger;
                    var oPartsRequisition= jQuery.parseJSON(response.data);
                    if (oPartsRequisition.ErrorMessage=="" || oPartsRequisition.ErrorMessage== null)
                    {
                        if(sParamIdentifier=="Undo Request")
                        {
                            alert("Successfully Undo the Request !!");
                        }
                        else  if(sParamIdentifier=="UndoApprove")
                        {
                            alert("Successfully Undo Approved.");
                        }
                        else  if(sParamIdentifier=="RequestRevise")
                        {
                            alert("Successfully Request to Revised.");
                        }
                        $scope.gridOptions.data[index]= oPartsRequisition;
                    }
                    else
                    {
                        alert(oPartsRequisition.ErrorMessage);
                    }
                },
                    function (response) { alert(jQuery.parseJSON(response.data).Message);}
            );
        };

        $scope.Approve = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            
            if(parseInt(data[0].PRStatusInt)!=1 )
            {
                alert("Please select Only Request for Approval Item From List");
                return;
            }

            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.PartsRequisitionID==data[0].PartsRequisitionID){
                    sessionStorage.setItem("BUID",_nBUID);
                    sessionStorage.setItem("Operation", "Approve");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("PartsRequisitionHeader", "Approve PartsRequisition");
                    sessionStorage.setItem("PartsRequisitions", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("PartsRequisition", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/PartsRequisition/ViewPartsRequisition?id="+value.PartsRequisitionID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.Disburse = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(parseInt(data[0].PRStatusInt)!=2 )
            {
                alert("Please select Only Approved  Parts for Disburse!");
                return;
            }

            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.PartsRequisitionID==data[0].PartsRequisitionID){
                    sessionStorage.setItem("BUID",_nBUID);
                    sessionStorage.setItem("Operation", "Disburse");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("PartsRequisitionHeader", "Request PartsRequisition");
                    sessionStorage.setItem("PartsRequisitions", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("PartsRequisition", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/PartsRequisition/ViewPartsRequisition?id="+value.PartsRequisitionID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.Revise = function () {
            debugger;
            var data=$scope.gridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            if(parseInt(data[0].PRStatusInt)!=3 )
            {
                alert("Please select Only Request for Revise Item From List");
                return;
            }
            angular.forEach($scope.gridOptions.data,function(value,index){
                if(value.PartsRequisitionID==data[0].PartsRequisitionID){
                    sessionStorage.setItem("BUID",_nBUID);
                    sessionStorage.setItem("Operation", "Revise");
                    sessionStorage.setItem("SelectedRowIndex", index);
                    sessionStorage.setItem("PartsRequisitionHeader", "Request PartsRequisition");
                    sessionStorage.setItem("PartsRequisitions", JSON.stringify($scope.gridOptions.data));
                    sessionStorage.setItem("PartsRequisition", JSON.stringify($scope.gridOptions.data[index]));
                    sessionStorage.setItem("BackLink", window.location.href);
                    var tsv=((new Date()).getTime())/1000;
                    window.location.href = _sBaseAddress+ "/PartsRequisition/ViewPartsRequisition?id="+value.PartsRequisitionID+"&buid="+_nBUID+"&ts="+tsv;
                }
            },$scope.gridOptions.data);
        };
        $scope.PrintPreview = function ()
        {
            var data = $scope.gridApi.selection.getSelectedRows();
            var oPartsRequisition = data[0];
            if(oPartsRequisition==null || oPartsRequisition.PartsRequisitionID<=0)
            {
                alert("Please select a item from list!");
                return;
            }
            window.open(_sBaseAddress + '/PartsRequisition/PartsRequisitionPreview?ID='+oPartsRequisition.PartsRequisitionID+"&nBUID="+$scope.BUID);
        };
        $scope.PrintList = function ()
        {
            debugger;
            var data = $scope.gridOptions.data;
            if(data==null || data.length<=0)
            {
                alert("Nothing To Print!");
                return;
            }
            
            var sIDs=data[0].PartsRequisitionID;
            for(var i=1;i<data.length;i++)
            {
                sIDs+=', '+parseInt(data[i].PartsRequisitionID);
            }
            window.open(_sBaseAddress + '/PartsRequisition/PartsRequisitionPrintList?sIDs='+sIDs+'&ts='+125.365);
        };
        //button hide
        $scope.btnAdd = $scope.btnEdit = $scope.btnView = $scope.btnDelete = $scope.btnApprove= $scope.btnDisburse =$scope.btnReceive = $scope.btnRevise = $scope.btnAdvSearch = true ;
        //button show
        if(PermissionChecker('Add','PartsRequisition',oAuthorizationRolesMapping)){$scope.btnAdd = false; }
        if(PermissionChecker('Edit','PartsRequisition',oAuthorizationRolesMapping)){$scope.btnEdit = false;}
        if(PermissionChecker('View','PartsRequisition',oAuthorizationRolesMapping)){$scope.btnView = false;}
        if(PermissionChecker('Approved','PartsRequisition',oAuthorizationRolesMapping)){$scope.btnApprove = false;}
        if(PermissionChecker('Disbursed','PartsRequisition',oAuthorizationRolesMapping)){$scope.btnDisburse = false;}
        if(PermissionChecker('Received','PartsRequisition',oAuthorizationRolesMapping)){$scope.btnReceive = false;}
        if(PermissionChecker('UndoRequest','PartsRequisition',oAuthorizationRolesMapping)){$scope.btnRevise = false;}
        if(PermissionChecker('AdvSearch','PartsRequisition',oAuthorizationRolesMapping)){$scope.btnAdvSearch = false;}

        function CheckControll()
        {
            debugger;
            if($scope.btnAdd == false  && !PermissionChecker('Add','PartsRequisition',oAuthorizationRolesMapping))
            {$scope.btnAdd = true; }
            if($scope.btnEdit == false && !PermissionChecker('Edit','PartsRequisition',oAuthorizationRolesMapping))
            {$scope.btnEdit = true;}
            if($scope.btnView == false && !PermissionChecker('View','PartsRequisition',oAuthorizationRolesMapping))
            {$scope.btnView = true;}
            if($scope.btnApprove == false && !PermissionChecker('Approved','PartsRequisition',oAuthorizationRolesMapping))
            {$scope.btnApprove = true;}
            if($scope.btnDelete == false && !PermissionChecker('Delete','PartsRequisition',oAuthorizationRolesMapping))
            {$scope.btnDelete = true;}
            if($scope.btnDisburse == false && !PermissionChecker('Issued','PartsRequisition',oAuthorizationRolesMapping))
            {$scope.btnDisburse = true;}
            if($scope.btnReceive == false && !PermissionChecker('Received','PartsRequisition',oAuthorizationRolesMapping))
            {$scope.btnReceive = true;}
            if($scope.btnRevise == false && !PermissionChecker('UndoRequest','PartsRequisition',oAuthorizationRolesMapping))
            {$scope.btnRevise = true;}
            if($scope.btnAdvSearch == false && !PermissionChecker('AdvSearch','PartsRequisition',oAuthorizationRolesMapping))
            {$scope.btnAdvSearch = true;}
        }
    });
     
    PartsRequisitionModule.controller('ModalInstanceCtrl', function ($scope, $http, $uibModalInstance, uiGridConstants, msModal, obj) {
        debugger;
        $scope.Operation=obj.Operation;
        $scope.Header=obj.Operation;
       
        $scope.PartsRequisition=obj.PartsRequisition;
           
        $scope.GetEmployee= function ()
        {
            var oEmployee = { DesignationName : '9,2' };
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(sessionStorage.getItem('BaseAddress')+'/User/GetsRequestedUsers',$.param(oEmployee), config).then(
                function (response)
                {
                    debugger;
                    var results=jQuery.parseJSON(response.data);
                    $scope.cboRequestTos=results;
                },
                    function (response) { alert(jQuery.parseJSON(response.data).Message);}
            );
        };
        
        if($scope.Operation=='Approval')
        {
            $scope.GetEmployee();
            $scope.hide_Approval=true;
            $scope.hide_Revise=false;
            $scope.disabled= false;
        }else if($scope.Operation=='Revise')
        {
            $scope.GetEmployee();
            $scope.hide_Approval=false;
            $scope.hide_Revise=true;
            $scope.disabled= false;
        }else
            $scope.disabled= true;

        $scope.ReqForRevise= function ()
        {
            if(parseInt($scope.cboRequestTo)==0)
            {
                alert('Please Select User');
                return false;
            }

            if (!confirm("Confirm to Revise?")) return false;
           
            var oApprovalRequest= {
                ApprovalRequestID :0,
                OperationObjectID : parseInt($scope.PartsRequisition.PartsRequisitionID),
                RequestTo : $scope.cboRequestTo,
                Note : $.trim($scope.ApproveRequestNote)
            };

            var oPartsRequisition= $scope.PartsRequisition;
            oPartsRequisition.ActionTypeExtra = "RequestForRevise";
            oPartsRequisition.ApprovalRequest = oApprovalRequest;
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
          
            debugger;
            $scope.SendRequest(oPartsRequisition);
        };
        $scope.ReqForApprove= function ()
        {
            if(parseInt($scope.cboRequestTo)==0)
            {
                alert('Please Select Approval User');
                return false;
            }

            if (!confirm("Confirm to Approve?")) return false;
           
            var oApprovalRequest= {
                ApprovalRequestID :0,
                OperationObjectID : parseInt($scope.PartsRequisition.PartsRequisitionID),
                RequestTo : $scope.cboRequestTo,
                Note : $.trim($scope.ApproveRequestNote)
            };

            var oPartsRequisition= $scope.PartsRequisition;
            oPartsRequisition.ActionTypeExtra = "RequestForApproval";
            oPartsRequisition.ApprovalRequest = oApprovalRequest;
           
            debugger;
            $scope.SendRequest(oPartsRequisition);
        };
        $scope.SendRequest=function(oPartsRequisition)
        {
            $http.post(_sBaseAddress+'/PartsRequisition/ChangeStatus',JSON.stringify(oPartsRequisition)).then(
                function (response) {
                    var result=JSON.parse(response.data);
                    debugger;
                    console.log(result);
                    if(result.PartsRequisitionID>0  && result.ErrorMessage=='')
                    {
                        debugger;
                        $uibModalInstance.close(result);
                    }
                    else
                    {
                        alert(result.ErrorMessage);
                    }
                },
                function (response) { alert(response.statusText);}
            );
        }
        $scope.cancel= function () {
            $uibModalInstance.close();
        };
    });

</script>
                       


              
