<html>
<head>
    <link href="@Url.Content("~/Content/CSS/icon.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/CSS/easyui.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/CSS/Pikerstyle.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/jquery-1.7.1.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.ics.customize.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.easyui.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery-ui.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/json2.js")" type="text/javascript"></script>
</head>
<body>
    @model ESimSol.BusinessObjects.ProductPackingList
    <div style="font-family: Tahoma">
        <table border="0" cellspacing="2" cellpadding="2">
            <tr>
                <td style="background-color: #CFB53B; text-align: center; width: 445px; color: White">
                    <label id="lblParent" style="font-size: 15px; font-weight: bold; text-decoration: Underline;
                        width: 445px">
                        Edit Product Packing List</label>
                </td>
            </tr>
        </table>
        <fieldset style="width: 430px; text-align: right">
            <table border="0">
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left; color: Blue">
                        Parent:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left; color: Blue">
                        <label id="lblParentName" style="font-size: 15px; font-weight: bold; text-decoration: Underline">
                            Parent</label>
                    </td>
                    <td>
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left; color: Blue">
                        Category:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left; color: Blue">
                        <label id="lblProductCategory" style="font-size: 15px; font-weight: bold; text-decoration: Underline">
                            Category</label>
                    </td>
                    <td>
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Name:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.TextBoxFor(model => model.Name, new { style = "width: 215px;", id = "txtName" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Note:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.TextBoxFor(model => model.Note, new { style = "width: 215px;", id = "txtNote" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr id="MeasurementUnit">
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Measurement Unit:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        <label id="lblMeasurementUnit" style="font-size: 15px; font-weight: bold; text-decoration: Underline">
                            Parent</label>
                        @*@Html.DropDownListFor(model => model.MeasurementUnitID, Model.MeasurementUnits.Select(x => new SelectListItem() { Text = x.UnitName, Value = x.MeasurementUnitID.ToString() }), new { id = "MeasurementUnitcbo", style = "width: 219px;", disabled = "disabled" })*@
                    </td>
                    <td>
                    </td>
                </tr>
                <tr id="ChildQuantity">
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Child Quantity:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.TextBoxFor(model => model.ChildQuantity, new { style = "width: 215px;", id = "txtChildQuantity", disabled = "disaled" })
                    </td>
                </tr>
                <tr id="MeasurementUnitValue">
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        Measurement Unit Value:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left">
                        @Html.TextBoxFor(model => model.MUValue, new { style = "width: 219px;", id = "txtMeasurementUnitValue", disabled = "disaled" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr id="MeasurementTypeEnum">
                    <td style="width: 155px; font-size: 13px; text-align: left; visibility: hidden">
                        Measurement Unit Type:
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left; visibility: hidden">
                        @Html.DropDownListFor(model => model.MeasurementUnitType, new SelectList(Enum.GetValues(typeof(ICS.Core.Utility.EnumUniteType))), new { id = "cboEnumUniteType", disabled = "disabled", style = "width: 219px", @class = "_select_changeLT" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left; visibility: hidden">
                    </td>
                    <td style="width: 240px; text-decoration: underline; text-align: left; visibility: hidden">
                        @Html.CheckBoxFor(model => model.IsLastLayer, new { id = "chkLastLayer", onClick = "chkIsLastLayer()" })
                    </td>
                    <td>
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                        @Html.HiddenFor(model => model.ParentID)
                        @Html.HiddenFor(model => model.PPLID)
                        @Html.HiddenFor(model => model.ProductCategoryID)
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                    </td>
                </tr>
                <tr>
                    <td style="width: 155px; font-size: 13px; text-align: left">
                    </td>
                </tr>
            </table>
        </fieldset>
        <tr style="height: 50px">
            <td style="width: 500px">
                <table>
                    <tr>
                        <td style="width: 80px; text-align: right">
                        </td>
                        <td style="width: 80px; text-align: right">
                        </td>
                        <td style="width: 80px; text-align: right">
                        </td>
                        <td style="width: 80px; text-align: right">
                        </td>
                        <td style="width: 80px; text-align: right">
                        </td>
                    </tr>
                    <tr>
                        <td style="width: 80px; text-align: right">
                        </td>
                        <td style="width: 80px; text-align: right">
                        </td>
                        <td style="width: 80px; text-align: right">
                        </td>
                        <td style="width: 80px; text-align: right">
                        </td>
                        <td style="width: 80px; text-align: right">
                        </td>
                    </tr>
                    <tr>
                        <td style="width: 80px; text-align: right">
                        </td>
                        <td style="width: 80px; text-align: right">
                        </td>
                        <td style="width: 80px; text-align: right">
                        </td>
                        <td style="width: 80px; text-align: right">
                            <input type="button" value="Save" id="btnSave" style="width: 70px;" />
                        </td>
                        <td style="width: 80px; text-align: right">
                            <input type="button" value="Cancel" id="btnCancel" style="width: 70px;" />
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </div>
</body>
</html>
<script type="text/javascript">

var COACC;
var _sSelectedCOAIDs = "";
var nACHID = 0;
var _MeasurementUnit;
var _PPL = [];

$(document).ready(function () {
    //debugger; 
    objmodel =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model)); 
    
    GetPPL();      
  
    
        $("#txtChildQuantity").keydown(function(event) {// Allow: backspace, delete, tab, escape, and enter        
        if ( event.keyCode == 46 || event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 27 || event.keyCode == 13 || 
            // Allow: Ctrl+A
        (event.keyCode == 65 && event.ctrlKey === true) || // Allow: home, end, left, right             
        (event.keyCode >= 35 && event.keyCode <= 39)) {// let it happen, don't do anything                 
                return;
    }
    else {
        // Ensure that it is a number and stop the keypress
        if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105 )) {
            event.preventDefault(); 
        }   
    }


});
             
////debugger;

}); // End of Ready Function





$('#btnCancel').click(function () {        
    window.close();          
});


function Maintaineditfield()
{
 //debugger;
if(_PPL.IsLastLayer==false)
{
    document.getElementById("MeasurementTypeEnum").style.display = 'none';
    document.getElementById("MeasurementUnitValue").style.display = 'none';
    document.getElementById("MeasurementUnit").style.display = 'none';
    document.getElementById('txtChildQuantity').value = _PPL.ChildQuantity;             
}
else
{

        document.getElementById("MeasurementTypeEnum").style.display = '';
        document.getElementById("MeasurementUnitValue").style.display = '';
        document.getElementById("MeasurementUnit").style.display = '';     
        document.getElementById("ChildQuantity").style.display = 'none';                         
        
        document.getElementById("cboEnumUniteType").selectedIndex = _PPL.MeasurementUnitType; 
//        document.getElementById("MeasurementUnitcbo").selectedIndex = _PPL.MeasurementUnitID; 
            
             
}

    
}
    
  
$ ('._select_changeLT').change(function()
{
// //debugger;
LoadMeasurementUnit();          
        
});




function LoadMeasurementUnit() 
{
    ////debugger;
    
    $('#MeasurementUnitcbo').empty();
    var enumUniteTypecbo = document.getElementById("cboEnumUniteType");
    var enumUniteTypestring = enumUniteTypecbo.options[enumUniteTypecbo.selectedIndex].innerHTML; // Read what user selected        
    var nMeasurementUniteType = document.getElementById("cboEnumUniteType");   // nMeasurementUniteType reads index number from combo box.
    var listItems = "";
        
    listItems += "<option value='0'> --Select Measurement Unit-- </option>";
    if (nMeasurementUniteType.options[nMeasurementUniteType.selectedIndex].value == "None") 
    {
        $("#MeasurementUnitcbo").html(listItems);
        return;
    }


    ////debugger;
        listItems = "";
        listItems += "<option value='0'> --Select Measurement Unit-- </option>";
        for (var i = 0; i < _MeasurementUnits.length; i++) {

            if (_MeasurementUnits[i].UnitType == nMeasurementUniteType.options[nMeasurementUniteType.selectedIndex].index)
                {
                    listItems += "<option value='" + _MeasurementUnits[i].MeasurementUnitID + "'>" + _MeasurementUnits[i].UnitName + "</option>";  
                    GetByMeasurementUnitID(_MeasurementUnits[i].MeasurementUnitID) 
                }
        }
        $("#MeasurementUnitcbo").html(listItems);   
    }


function GetByMeasurementUnitID(MeasurementUnitID) {
////debugger;
$.ajax({
    type: "GET",
    dataType: "json",
    url: '@Url.Action("GetByMeasurementID", "ProductPackingList")',
    data: { id: MeasurementUnitID },
    contentType: "application/json; charset=utf-8",
    success: function (data) {
        ////debugger;
        _MeasurementUnit = jQuery.parseJSON(data);
//                document.getElementById('txtBranchName').value = _oBankAccount.BankAccountName;


    },
    error: function (xhr, status, error) {
        alert(error);
    }
});
}



function GetPPL() 
{
    //debugger;

        var oEdtitPPL=  {                                  
                            PPLID : objmodel.PPLID
                        };
        

$.ajax({
    type: "POST",
    dataType: "json",
     url: '@Url.Action("GetProductPackingList", "ProductPackingList")',    
    data:  JSON.stringify(oEdtitPPL),
    contentType: "application/json; charset=utf-8",
    success: function (data) {
        //debugger;
         _PPL = jQuery.parseJSON(data);
         $("#txtName")[0].value = _PPL.Name;
         $("#txtNote")[0].value = _PPL.Note;
         $("#ChildQuantity")[0].value = _PPL.ChildQuantity; 
         $("#txtMeasurementUnitValue")[0].value = _PPL.MUValue; 
         document.getElementById('lblParentName').innerHTML=_PPL.DisplayParent; 
         document.getElementById('lblProductCategory').innerHTML=_PPL.DisplayMessageCategoryName;
         document.getElementById('lblMeasurementUnit').innerHTML=_PPL.DisplayMessageMeasurementUnit;
          Maintaineditfield();
    },
    error: function (xhr, status, error) {
        alert(error);
    }
});
}









function isNumber(n) // this Function ensure, user can't insert value that is not numeric
{
  return !isNaN(parseFloat(n)) && isFinite(n);
}




function ValidateInput() // Once a Cost Center Inserted, Cant be Inserted Again.
{
   // //debugger;
    var lastlayerchecked = document.getElementById("chkLastLayer"); 
    
    var sName = $("#txtName").val();
    if (sName =="") 
    {
        alert("Please Provide Name"); 
        $('#txtName').focus();
        return false;
    } 

    var sNote = $("#txtNote").val();
    if (sNote =="") 
    {
        alert("Please Provide Note"); 
        $('#txtNote').focus();
        return false;
    } 
    
       
    
    return true;
}


function RefreshObject()
{ 
    //debugger;
    var oProductPackingList= {                                  
                            PPLID : objmodel.PPLID,
                            Name: $("#txtName").val(),
                            Note: $("#txtNote").val()                                                
                        };
        return oProductPackingList;
}



 $('#btnSave').click(function () {
     
 //debugger;
        
        if(!ValidateInput()) return false;        
        var oProductPackingList = RefreshObject();
         $.ajax({
          type: "POST",
          dataType: "json",
          url: '@Url.Action("EditPPL", "ProductPackingList")',
          data:  JSON.stringify(oProductPackingList),
          contentType: "application/json; charset=utf-8",
          success: function (data) {
           //debugger;
              var oProductPackingListReturn = jQuery.parseJSON(data);
                  
              if (oProductPackingListReturn.ErrorMessage!=null)  
              {
                alert(oProductPackingListReturn.ErrorMessage);
                return;
              }
              else 
              {
                  alert("Data Saved sucessfully"); 
                  window.returnValue = oProductPackingListReturn;
                  window.close();
              }
          },
          error: function (xhr, status, error) {
              alert(error);
          }

      });
          
});

   
</script>
