<html>

<body>
    @model ESimSol.BusinessObjects.PurchaseInvoicePaymentRequest
    <div class="menuMainCollectionTable" id="divPIPR" class="easyui-panel" title="Quotation CataLog" style="font-family:Tahoma; height:100%; width:100%">
        <div style="width:100%; height:30%; text-align:center">
            <fieldset>
                <legend>Invoice Bill Purchase Info :</legend>
                <table border="0" style="width:100%;">
                    <tr>
                        <td style="width: 120px; text-align: right; font-size:12px;"> Ref No: </td>
                        <td style="width: 180px; text-align:left;">
                            @Html.TextBoxFor(model => model.RefNo, new { style = "width: 180px; font-size:12", id = "txtRefNo", disabled = "disabled" })
                        </td>
                        <td></td>
                        <td></td>
                        <td style="width: 120px; text-align: right; font-size:12px;">Issue Date:</td>
                        <td style="width: 180px; text-align:left;">
                            <input id="txtIssueDate" type="text" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser" style="width: 180px;" />
                        </td>
                    </tr>
                    <tr>
                        <td style="width: 120px; text-align: right; font-size:12px;"> Liability Type :</td>

                        <td style="width: 180px; font-size: 12px; text-align: left">
                            <select id="cboLiabilityType" style="width: 180px" onchange="ChangeLiabilityType();">  </select>
                            @*@Html.DropDownListFor(model => model.LiabilityTypeInt, Model.LiabilityTypeObj.Select(x => new SelectListItem() { Text = x.Value, Value = x.id.ToString() }), new { id = "cboLiabilityType", style = "width:180px;", @class = "_select_changeA" })*@
                        </td>
                        <td style="text-align:right"><label id="lblCurrencyType">  Currency Type</label></td>
                        <td style="text-align:left"><select id="cboCurrencyType" onchange="ChangeCurrency();" style="width: 148px;">  </select></td>
                        <td style="width: 120px; text-align: right; font-size:12px;"> <label id="lblthrough">  Through</label> </td>
                        <td style="width: 180px;text-align:left">
                            <select id="cboPaymentthrough" style="width: 180px">  </select>
                          
                        </td>
                    </tr>
                    <tr>
                        <td style="width: 120px; text-align: right; font-size:12px;">  Bank: </td>
                        <td colspan="3" style="width: 480px; text-align:left;">

                            <input type="text" style="width:425px; float: left;" id="txtBranchName" placeholder="Type part Name then press enter" />
                            <input type="button" id="btnPickBranch" value="Pick" style="width:40px; text-align:left;" />
                        </td>
                        <td style="width: 120px; text-align: right; font-size:12px;"> Account No :</td>
                        <td style="width: 180px; ">
                            <select id="cboBankAccount" , style="width: 148px;">  </select>
                            <input type="button" value=" " id="btnloadBankAccount" style="width:25px" />
                        </td>

                    </tr>

                   
                    <tr>
                        <td style="width: 120px; text-align: right; font-size:12px;">Note:</td>
                      
                        <td colspan="5" style="width: 480px; text-align:left;">
                            @Html.TextBoxFor(model => model.Note, new { style = "width: 100%; font-size:12", id = "txtNote" })
                        </td>
                    </tr>
                </table>
            </fieldset>
        </div>
            <div title="Requested Invoices" style="margin-left:2px">
                <div id="DetailtoolBar">
                    <table>
                        <tr>
                            <td>
                                <input type="button" id="btnPickInvoice" value="Pick Invoices" style="width: 80px; font-size: 12px" />
                                <input type="button" id="btnRemoveInvoiceDetail" value="Remove" onclick="RemoveDetail()" style="width: 80px; font-size: 12px" />
                                <input type="button" id="btnRefreshInvoiceDetail" value="Refresh" onclick="RefreshPIDetail()" style="width: 80px; font-size: 12px" />
                            </td>
                            <td>
                                <label id="lblCRate" style="text-align: right; font-size:12px; float: left; font-weight:bold">Convertion Rate</label>
                                <input type="text" id="txtCRate" value="0" style="width: 80px; font-size: 12px" />
                            </td>
                        </tr>
                    </table>
                  
                   
                 
                </div>
                <table id="tbPIPRDetail" title="Requested Invoices" class="easyui-datagrid" style="width:100%; height: 250px" fitcolumns="false" rownumbers="true" pagination="false" singleselect="true" autorowheight="false" toolbar="#DetailtoolBar">
                    <thead>
                        <tr>
                            <th field="PurchaseInvoiceLCNo" width="30%" align="left">Invoice No</th>
                            <th field="AmountSt" width="15%" align="right"> Amount </th>
                            <th field="DateofMaturityST" width="20%" align="left">Maturity Date</th>
                            @*<th field="StatusSt" width="100" align="center">Status</th>*@
                            <th field="AmountBCSt" width="15%" align="right"> Amount(Basic Currency) </th>
                        </tr>
                    </thead>
                </table>
            
            </div>
            
        <div style="width:100%; height:10%">
            <fieldset>
                <legend style="font-weight: bold">Action : </legend>
                <table border="0" cellspacing="2" cellpadding="2" style="font-size: 11px; font-weight: bold; width:100%">
                    <tr>
                        <td id="tdTotalCaption" style="width: 5%; text-align: right; font-size: 12px; font-weight:bold"> Total : </td>
                        <td style="width: 20%; text-align: right; font-size: 12px"> <label id="lblTotalValue" style="text-align: right; font-size:12px; float: right; font-weight:bold">0.00</label></td>
                        <td style="width: 20%; text-align: right; font-size: 12px"> <label id="lblTotalValueBC" style="text-align: right; font-size:12px; float: right; font-weight:bold">0.00</label></td>

                        <td style="width:35%; text-align:right"></td>
                        <td style="width: 10%">
                            <a id="btnSave" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="true" onclick="Save()">Save</a>
                        </td>
                        <td style="width: 10%">
                            <a id="btnClose" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-closed" plain="true" onclick="Close()">Close</a>
                        </td>
                    </tr>
                </table>
            </fieldset>
        </div>
        </div>
</body>
</html>
<script type="text/javascript">
    var _oPurchaseInvoicePaymentRequest=null;
    var _sBaseAddress="";
    var _oBankAccounts =[];
    var _sBackLink ="";
    var _sPCHeader="";
    var _oCurrencyTypes="";
    var _oLiabilityTypeObj="";

    var _oAuthorizationRolesMapping =[];
    $(document).ready(function () {
        //debugger;
    _sBaseAddress =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    _oPurchaseInvoicePaymentRequest =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
    _oPurchaseInvoicePaymentRequestDetails = _oPurchaseInvoicePaymentRequest.PurchaseInvoicePaymentRequestDetails;
    _oCurrencyTypes= @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(ViewBag.CurrencyTypes));
        _oBankAccounts=_oPurchaseInvoicePaymentRequest.BankAccounts;
        _oLiabilityTypeObj= _oPurchaseInvoicePaymentRequest.LiabilityTypeObj;
    
    RefreshCbo();
    $('#txtIssueDate').datebox('setValue',_oPurchaseInvoicePaymentRequest.LetterIssueDateInString);

    if(_oPurchaseInvoicePaymentRequest.PIPRID>0)
    {
        document.getElementById('txtBranchName').value=_oPurchaseInvoicePaymentRequest.BankName;
    }

    _sBackLink=sessionStorage.getItem("BackLink");
    _sPCHeader= sessionStorage.getItem("PurchaseInvoicePaymentRequestHeader");
    $('#divPIPR').panel({ title:_sPCHeader});

    RefreshListDetails(_oPurchaseInvoicePaymentRequestDetails);
    if(_sPCHeader=="View Payment request Letter")
    {
        document.getElementById('btnSave').style.display = 'none';
        document.getElementById('txtRefNo').disabled = true;
        document.getElementById('txtIssueDate').disabled = true;
        //document.getElementById('txtBankName').disabled = true;
        document.getElementById('btnPickBank').disabled = true;
        document.getElementById('txtNote').disabled = true;
        document.getElementById('btnPickInvoice').disabled = true;
        document.getElementById('btnRemoveInvoiceDetail').disabled = true;
        document.getElementById('btnRefreshInvoiceDetail').disabled = true;
    }
    if(_oPurchaseInvoicePaymentRequest.ApprovedBy>0)
    {
        document.getElementById('btnSave').style.display = 'none';

    }
    else
    {
        document.getElementById('btnSave').style.display = '';

    }

    if(_oBankAccounts.length>0)
    {
    RefreshBankAccount(_oBankAccounts)
    }
    RefreshControl();
    ChangeLiabilityType();
    $('#txtCRate').icsCurrencyBox();
  
 });
    
    function RefreshControl()
    {
        $('#cboCurrencyType').val(_oPurchaseInvoicePaymentRequest.CurrencyType);
        $('#cboPaymentthrough').val(_oPurchaseInvoicePaymentRequest.Paymentthrough);
        $('#txtCRate').val(_oPurchaseInvoicePaymentRequest.Paymentthrough);
        $('#txtCRate').val(_oPurchaseInvoicePaymentRequest.CRate);
        $('#cboLiabilityType').val(_oPurchaseInvoicePaymentRequest.LiabilityTypeInt);
    }

    function ChangeCurrency()
    {
        var nCurrencyType=parseInt($("#cboCurrencyType").val());
        if( nCurrencyType===1)
        {
            $("#lblTotalValueBC" ).show();
            $("#txtCRate" ).show();
            $("#lblCRate" ).show();
            $("#tbPIPRDetail").datagrid("showColumn", "AmountBCSt");
        }
        else 
        {
            $("#lblTotalValueBC" ).hide();
            $("#txtCRate" ).hide();
            $("#lblCRate" ).hide();
            $("#tbPIPRDetail").datagrid("hideColumn", "AmountBCSt");
        }
    }

    function ChangeLiabilityType()
    {

        var nCurrencyType=parseInt($("#cboLiabilityType").val());
        if( nCurrencyType===3)
        {
            $("#cboCurrencyType" ).hide();
            $("#lblCurrencyType" ).hide();
            $("#cboPaymentthrough" ).hide();
            $("#lblthrough" ).hide();
            $("#cboCurrencyType").val(0);
            ChangeCurrency();
        }
        else 
        {
            $("#cboCurrencyType" ).show();
            $("#lblCurrencyType" ).show();
            $("#cboPaymentthrough" ).show();
            $("#lblthrough" ).show();
            ChangeCurrency();
            
        }
    }

 function IsExists(nPurchaseInvoiceLCID)
 {
     var oPurchaseInvoicePaymentRequestDetails = $('#tbPIPRDetail').datagrid('getRows');
     for(var i =0;i<oPurchaseInvoicePaymentRequestDetails.length;i++)
     {
         if(oPurchaseInvoicePaymentRequestDetails[i].PurchaseInvoiceLCID==nPurchaseInvoiceLCID)
         {
             return true;
         }
     }
     return false;
 }


 function RefreshCbo()
 {
     $("#cboCurrencyType").empty();
     var listLCTerms="";
     if(_oCurrencyTypes.length>0)
     {
         listLCTerms +="<option value='0'>"+'---Select --'+"</option>";
         for (var i = 0; i < _oCurrencyTypes.length; i++) {
             listLCTerms += "<option value='" + _oCurrencyTypes[i].id +"'>" + _oCurrencyTypes[i].Value+"</option>";
         }
     }
     $("#cboCurrencyType").html(listLCTerms);
     $("#cboPaymentthrough").empty();
     var listLCTerms="";
     listLCTerms +="<option value='0'>"+'---Select --'+"</option>";
     listLCTerms +="<option value='1'>"+'BBK cheque'+"</option>";
     listLCTerms +="<option value='2'>"+'Account debit'+"</option>";
     $("#cboPaymentthrough").html(listLCTerms);

     
     $("#cboLiabilityType").empty();
     var listLCTerms="";
     if(_oLiabilityTypeObj.length>0)
     {
         listLCTerms +="<option value='0'>"+'---Select --'+"</option>";
         for (var i = 0; i < _oLiabilityTypeObj.length; i++) {
             listLCTerms += "<option value='" + _oLiabilityTypeObj[i].id +"'>" + _oLiabilityTypeObj[i].Value+"</option>";
         }
     }
     $("#cboLiabilityType").html(listLCTerms);
 }




function RemoveDetail()
{
    var oPurchaseInvoicePaymentRequestDetail =$('#tbPIPRDetail').datagrid('getSelected');
    if(oPurchaseInvoicePaymentRequestDetail ==null)
    {
        alert("Select At least One item !");
        return;
    }
    var SelectedRowIndex=$('#tbPIPRDetail').datagrid('getRowIndex',oPurchaseInvoicePaymentRequestDetail);
    if (!confirm("Confirm to Delete?")) return ;
    $('#tbPIPRDetail').datagrid('deleteRow',SelectedRowIndex);
    SetTotal();
}

function SetTotal()
{
    var oPurchaseInvoicePaymentRequestDetails = $('#tbPIPRDetail').datagrid('getRows');
    var nTotalValue = 0;
    var nTotalValueBC = 0;
    var sCurrency = 0;
    if(oPurchaseInvoicePaymentRequestDetails.length>0)
    {
        for(var i =0;i<oPurchaseInvoicePaymentRequestDetails.length;i++)
        {
            nTotalValue = nTotalValue+ parseFloat(oPurchaseInvoicePaymentRequestDetails[i].Amount);
            nTotalValueBC = nTotalValueBC+ parseFloat(oPurchaseInvoicePaymentRequestDetails[i].Amount*oPurchaseInvoicePaymentRequestDetails[i].CCRate);
            sCurrency=oPurchaseInvoicePaymentRequestDetails[i].Currency;
        }
     }
    document.getElementById('lblTotalValue').innerHTML =sCurrency+''+formatPrice(parseFloat(nTotalValue),null);
    document.getElementById('lblTotalValueBC').innerHTML ='BDT '+''+formatPrice(parseFloat(nTotalValueBC),null);
    
}

$("#txtCRate").keyup(function (e){        
    debugger;
    var sCrate =  $('#txtCRate').val();
    var nCrate = icsRemoveComma(sCrate);
    var oPIDetails = $('#tbPIPRDetail').datagrid('getRows');
    if(oPIDetails.length>0)
    {
        for(var i =0;i<oPIDetails.length;i++)
        {
            oPIDetails[i].CCRate=nCrate;
            oPIDetails[i].AmountBCSt= 'BDT'+formatPrice(parseFloat(oPIDetails[i].Amount*nCrate));
        }
        RefreshListDetails(oPIDetails);
    }

});

function RefreshListDetails(oPurchaseInvoicePaymentRequestDetails)
{
    data=oPurchaseInvoicePaymentRequestDetails;
    data={"total":""+data.length+"","rows":data};
    $('#tbPIPRDetail').datagrid('loadData',data);
    SetTotal();
}


function RefreshObject()
{
    //debugger;
    var cboBankAccount = document.getElementById("cboBankAccount");
    var nBankAccountID=0;
    if(cboBankAccount.selectedIndex<=0)
    {
        nBankAccountID=0;
    }
    else
    {
        nBankAccountID=cboBankAccount.options[cboBankAccount.selectedIndex].value;
    }

    var scboLiabilityType=document.getElementById("cboLiabilityType");

    var oPurchaseInvoicePaymentRequest=   {
        PIPRID : _oPurchaseInvoicePaymentRequest.PIPRID,
        RefNo : document.getElementById("txtRefNo").value,
        BankAccountID : parseInt(nBankAccountID),
        LetterIssueDate : $('#txtIssueDate').datebox('getValue'),
        RequestBy : _oPurchaseInvoicePaymentRequest.RequestBy,
        ApprovedBy : _oPurchaseInvoicePaymentRequest.ApprovedBy,
        LiabilityTypeInt: scboLiabilityType.options[scboLiabilityType.selectedIndex].value,
        Note : document.getElementById("txtNote").value,
        CurrencyType:$('#cboCurrencyType').val(),
        Paymentthrough:$('#cboPaymentthrough').val(),
        CRate:$('#txtCRate').val(),
        PurchaseInvoicePaymentRequestDetails : $('#tbPIPRDetail').datagrid('getRows')
    };
    return oPurchaseInvoicePaymentRequest;
}

function Save()
{
    //debugger;
    if(!ValidateInput()) return;
    var oPurchaseInvoicePaymentRequest=RefreshObject();
    $.ajax({
        type: "POST",
        dataType: "json",
        url : _sBaseAddress+"/PurchaseInvoicePaymentRequest/Save",
        traditional: true,
        data:  JSON.stringify(oPurchaseInvoicePaymentRequest),
        contentType: "application/json; charset=utf-8",
        success: function (data) {
        //debugger;
        var oPIPR= jQuery.parseJSON(data);
        if (oPIPR.ErrorMessage=="" || oPIPR.ErrorMessage==null)
        {
            alert("Data Save Succesfully!!");
            //window.returnValue= _oPurchaseInvoicePaymentRequest;
            //window.close();
            _oPurchaseInvoicePaymentRequest=oPIPR;

            //if(_oPurchaseContract.PurchaseContractDetails!=null)
            //{
            //    DynamicRefreshList(_oPurchaseContract.PurchaseContractDetails, 'tblPODetail');
            //}
            var oPIPRs =sessionStorage.getItem("PurchaseInvoicePaymentRequests");
            var nIndex= parseInt(sessionStorage.getItem("SelectedRowIndex"));
            debugger;
            if(oPIPRs!=null)
            {
                oPIPRs = jQuery.parseJSON(oPIPRs);
            }
            else
            {
                oPIPRs=[];
            }
            if(nIndex!=-1)
            {
                oPIPRs[nIndex]=_oPurchaseInvoicePaymentRequest;
            }
            else
            {
                sessionStorage.setItem("SelectedRowIndex", oPIPRs.length);
                oPIPRs.push(_oPurchaseInvoicePaymentRequest);
            }
            sessionStorage.setItem("PurchaseInvoicePaymentRequests", JSON.stringify(oPIPRs));

            window.location.href = _sBackLink;
        }
        else
        {
            alert(oPIPR.ErrorMessage);
        }
        },
        error: function (xhr, status, error)
        {
            alert(error);
        }
    });
}



function ValidateInput()
{
    debugger;
    var sIssueDate =$('#txtIssueDate').datebox('getValue');
    if(sIssueDate==null || sIssueDate=="")
    {
        alert("Select Select Issue Date!");
        return false;
    }
    if(_oPurchaseInvoicePaymentRequest==null)
    {
        alert("Select Advice Bank!");
        return false;
    }

//    if(document.getElementById("txtValueInPercentage").value== parseFloat(0) || document.getElementById("txtValueInPercentage").value> parseFloat(100) || document.getElementById("txtValueInPercentage").value <parseFloat(10))
//     {
//         alert("Value Should be Grater than or equal 10 and Smaller than or equal 100");
//         $('#txtValueInPercentage').focus();
//         return false;
//     }

      if(parseInt(_oPurchaseInvoicePaymentRequest.BankAccountID)>0)
    {
        if($('#cboBankAccount').val()==0)
        {
            alert('Please Select a Bank Account!');
            $('#cboBankAccount').focus();
            return false;
        }
    }

    var oPurchaseInvoicePaymentRequestDetails = $('#tbPIPRDetail').datagrid('getRows');
    if(oPurchaseInvoicePaymentRequestDetails.length <=0)
    {
        alert("Please add at least one Invoice!");
        return false;
    }
    return true;
}







$("#btnloadBankAccount").click(function(){
    if(_oPurchaseInvoicePaymentRequest.BankBranchID>0)
    {
        RefreshBankAccounts(_oPurchaseInvoicePaymentRequest.BankBranchID)
    }
});
function RefreshBankAccounts(nBankBranchID)
{
    if(parseInt(nBankBranchID)<=0) return;
    var oBankAccount= {
        BankBranchID : nBankBranchID
    };

    $.ajax({
        type: "POST",
        dataType: "json",
        url: '@Url.Action("GetsByBranchAndAccount", "BankAccount")',
            traditional: true,
            data:  JSON.stringify(oBankAccount),
            contentType: "application/json; charset=utf-8",
            success: function (data)
            {
                debugger;
                var oBankAccounts;
                oBankAccounts = jQuery.parseJSON(data);
                $('#cboBankAccount').empty();
                var listItems= "<option value='0'>--Select Bank Account--</option>";
                for (var i = 0; i < oBankAccounts.length; i++)
                {
                    listItems+= "<option value='" + oBankAccounts[i].BankAccountID + "'>" + oBankAccounts[i].AccountNo+" </option>";
                }
                $("#cboBankAccount").html(listItems);
                $("#cboBankAccount").val(_oPurchaseInvoicePaymentRequest.BankAccountID);
            },
            error: function (xhr, status, error) {
                alert(error);
            }
        });
    }

    function RefreshBankAccount(oBankAccounts)
    {
        $('#cboBankAccount').empty();
        var listItems= "<option value='0'>--Select Bank Account--</option>";
        for (var i = 0; i < oBankAccounts.length; i++)
        {
            listItems+= "<option value='" + oBankAccounts[i].BankAccountID + "'>" + oBankAccounts[i].AccountNo+" </option>";
        }
        $("#cboBankAccount").html(listItems);
        $("#cboBankAccount").val(_oPurchaseInvoicePaymentRequest.BankAccountID);
    }


    $('#txtBranchName').keydown(function (e){
        if(e.which === 13 || e.which === 9)
        {
            var txtBranchName = $('#txtBranchName').val();
            var oBankBranch = {
                BranchName : txtBranchName,
                BankID : 0
            };
            var obj = {
                BaseAddress: _sBaseAddress,
                Object: oBankBranch,
                ControllerName: "BankBranch",
                ActionName: "GetsBankBranchSearchByBankName",
                IsWinClose: false
            };
            $.icsDataGets(obj, function (response) {
                if (response.status && response.objs.length > 0) {
                    if (parseInt(response.objs[0].BankBranchID) > 0) {
                        var tblColums = []; var oColumn = { field: "BranchCode", title: "Code", width: 100, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "BankName", title: "Bank Name", width: 150, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "BranchName", title: "Branch Name", width: 200, align: "left" }; tblColums.push(oColumn);
                        oColumn = { field: "PhoneNo", title: "Phone No", width: 100, align: "left" }; tblColums.push(oColumn);
                        var oPickerParam = {
                            winid: 'winBranch',
                            winclass: 'clsBranch',
                            winwidth: 500,
                            winheight: 420,
                            tableid: 'tblBranch',
                            tablecolumns: tblColums,
                            datalist: response.objs,
                            multiplereturn: false,
                            searchingbyfieldName: 'BranchName',
                            windowTittle: 'Branch List'
                        };
                        $.icsPicker(oPickerParam);
                        IntializePickerbutton(oPickerParam);
                    }
                    else { alert(response.objs[0].ErrorMessage); }
                }
                else
                {
                    alert("Data Not Found!");
                }
            });

        }
    });
    $('#btnPickBranch').click(function (e){
        var txtBranchName = $('#txtBranchName').val();
        var oBankBranch = {
            BranchName : txtBranchName,
            BankID : 0
        };
        var obj = {
            BaseAddress: _sBaseAddress,
            Object: oBankBranch,
            ControllerName: "BankBranch",
            ActionName: "GetsBankBranchSearchByBankName",
            IsWinClose: false
        };
        $.icsDataGets(obj, function (response) {
            if (response.status && response.objs.length > 0) {
                if (parseInt(response.objs[0].BankBranchID) > 0) {
                    var tblColums = []; var oColumn = { field: "BranchCode", title: "Code", width: 60, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "BankName", title: "Bank Name", width: 150, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "BranchName", title: "Branch Name", width: 200, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "PhoneNo", title: "Phone No", width: 100, align: "left" }; tblColums.push(oColumn);
                    var oPickerParam = {
                        winid: 'winBranch',
                        winclass: 'clsBranch',
                        winwidth: 500,
                        winheight: 420,
                        tableid: 'tblBranch',
                        tablecolumns: tblColums,
                        datalist: response.objs,
                        multiplereturn: false,
                        searchingbyfieldName: 'BranchName',
                        windowTittle: 'Branch List'
                    };
                    $.icsPicker(oPickerParam);
                    IntializePickerbutton(oPickerParam);
                }
                else { alert(response.objs[0].ErrorMessage); }
            }
            else
            {
                alert("Data Not Found!");
            }
        });
    });
    $('#btnPickInvoice').click(function (e){

        debugger;
        var oPurchaseInvoicePaymentRequestDetail = {
            BankBranchID : _oPurchaseInvoicePaymentRequest.BankBranchID
        };
        var obj = {
            BaseAddress: _sBaseAddress,
            Object: oPurchaseInvoicePaymentRequestDetail,
            ControllerName: "PurchaseInvoicePaymentRequest",
            ActionName: "GetsPurchaseInvoiceLC",
            IsWinClose: false
        };
        $.icsDataGets(obj, function (response) {
            if (response.status && response.objs.length > 0) {
                if (parseInt(response.objs[0].PurchaseInvoiceLCID) > 0) {
                    var tblColums = []; var oColumn = { field: "PurchaseInvoiceLCNo", title: "Invoice No", width: 150, align: "left" }; tblColums.push(oColumn);
                    oColumn = { field: "AmountSt", title: "Amount", width: 100, align: "right" }; tblColums.push(oColumn);
                    oColumn = { field: "DateofMaturityST", title: "Maturity Date", width: 120, align: "left" }; tblColums.push(oColumn);
                    var oPickerParam = {
                        winid: 'winPurchaseInvoice',
                        winclass: 'clsPurchaseInvoice',
                        winwidth: 550,
                        winheight: 420,
                        tableid: 'tblPurchaseInvoice',
                        tablecolumns: tblColums,
                        datalist: response.objs,
                        multiplereturn: true,
                        searchingbyfieldName: 'Purchase Invoice',
                        windowTittle: 'Invoice List'
                    };
                    $.icsPicker(oPickerParam);
                    IntializePickerbutton(oPickerParam);
                }
                else { alert(response.objs[0].ErrorMessage); }
            }
            else
            {
                alert("Data Not Found!");
            }
        });
    });
    $('#txtBranchName').keydown(function (e) {
        var code = (e.keyCode ? e.keyCode : e.which);
        if (code == 8) //backspace=8
        {
            var txtVendorName = document.getElementById("txtBranchName");
            txtVendorName.value = '';
            txtVendorName.style.color = "black";
            txtVendorName.style.fontWeight = "normal";
            _oPurchaseInvoicePaymentRequest.BankBranchID =0;
            _oPurchaseInvoicePaymentRequest.BankID =0;
            $('#cboBankAccount').empty();
        }
    });
    function IntializePickerbutton(oPickerobj) {

        $("#" + oPickerobj.winid).find("#btnOk").click(function () {

            SetPickerValueAssign(oPickerobj);
        });
        $(document).find('.' + oPickerobj.winclass).keydown(function (e) {
            if (e.which == 13)//enter=13
            {
                SetPickerValueAssign(oPickerobj);

            }
        });
    }
    function SetPickerValueAssign(oPickerobj)
    {

        var oreturnObj = null, oreturnobjs = [];
        if (oPickerobj.multiplereturn)
        {
            oreturnobjs = $('#'+oPickerobj.tableid).datagrid('getChecked');
        } else {
            oreturnObj = $('#'+oPickerobj.tableid).datagrid('getSelected');
        }
        $("#" + oPickerobj.winid).icsWindow("close");
        $("#" + oPickerobj.winid).remove();

        if (oPickerobj.winid === 'winBranch') {
            if (oreturnObj != null && parseInt(oreturnObj.BankBranchID) > 0) {

                $('#txtBranchName').val(oreturnObj.BankName);
                _oPurchaseInvoicePaymentRequest.BankBranchID =oreturnObj.BankBranchID;
                _oPurchaseInvoicePaymentRequest.BankID =oreturnObj.BankID;
                RefreshBankAccounts(oreturnObj.BankBranchID);
            }
        }
        else if (oPickerobj.winid === 'winPurchaseInvoice') {
            if (oreturnobjs != null && parseInt(oreturnobjs.length) > 0)
            {
                RefreshDetails(oreturnobjs);
            }
            else
            {
                alert("Data not Found");
            }
        }
    }

    function  RefreshDetails(oPIPRDetails)
    {
        if(oPIPRDetails.length>0)
        {
            for(var i=0; i< oPIPRDetails.length; i++)
            {
                if(!IsExists(oPIPRDetails[i].PurchaseInvoiceLCID))
                {

                    $('#tbPIPRDetail').datagrid('appendRow',oPIPRDetails[i]);
                }
            }
        }
        SetTotal();
    }


    $("#btnClose").click(function () {

        window.location.href = _sBackLink;
    });
</script>
