@{
    ViewBag.Title = "ReceivedCheque";
}

<html>

<body>

    @model ESimSol.BusinessObjects.ReceivedCheque

    <div id="divReceivedCheque" class="easyui-panel" title="Add ReceivedCheque" style="font-family:Tahoma; height:100%; width:100%">
        <div style="width:100%; height:88%; text-align:center">
            <fieldset class="bodyfieldsetstyle" style="height:97%">
                <legend style="text-align:left; font-weight:bold;"> Cheque Informations : </legend>

                <div class="winViewFieldContainer">
                    <table border="0" cellpadding="2" cellspacing="2" style="width: 100%;margin-top: 50px;">
                        <tr>
                            <td style="width:12%;text-align:right;">
                                <label>
                                    Money Receipt No :
                                </label>
                            </td>
                            <td style="width:28%;text-align:left;">
                                @Html.TextBoxFor(model => model.MoneyReceiptNo, new { style = "width: 100%;", placeholder = "Money Receipt No", id = "txtMoneyReceiptNo" })
                            </td>
                            <td style="width:12%;text-align:right;">
                                <label>
                                    Receipt Date :
                                </label>
                            </td>
                            <td style="width:20%;text-align:left;">
                                <input id="txtMoneyReceiptDate" type="text" class="easyui-datebox" required="required" data-options="formatter:icsdateformat,parser:icsdateparser" style="width:100%;" />                                
                            </td>
                            <td style="width:10%;text-align:right;">
                                <label>Bill Number :</label>
                            </td>
                            <td style="width:18%;text-align:left;">
                                @Html.TextBoxFor(model => model.BillNumber, new { style = "width: 95%;", placeholder = "Bill Number", id = "txtBillNumber" })
                            </td>

                        </tr>
                        <tr>
                            <td style="width:12%;text-align:right;">
                                <label>
                                    Transaction Type :
                                </label>
                            </td>
                            <td style="width:28%;text-align:left;">
                                @Html.DropDownListFor(model => model.TransactionType, Model.TransactionTypes.Select(x => new SelectListItem() { Text = x.Value, Value = x.id.ToString() }), new { id = "cboTransactionTypes", style = "width: 100%;" })
                            </td>

                            <td style="width:12%;text-align:right;">
                                <label>
                                    Received From :
                                </label>
                            </td>
                            <td style="width:20%;text-align:left;">
                                @Html.TextBoxFor(model => model.ContractorName, new { style = "width: 100%;", placeholder = "Sub Ledger Name/Code", id = "txtACCostCenterName" })
                            </td>
                            <td style="width:10%;text-align:right;">
                                <label>Issue Date :</label>
                            </td>
                            <td style="width:18%;text-align:left;">
                                <input id="txtIssueDate" type="text" class="easyui-datebox" required="required" data-options="formatter:icsdateformat,parser:icsdateparser" style="width:100%;" />
                            </td>

                        </tr>
                        <tr>
                            <td style="width:12%;text-align:right;">
                                <label id="lblChequeNo">
                                    Cheque No :
                                </label>
                            </td>
                            <td style="width:28%;text-align:left;">
                                @Html.TextBoxFor(model => model.ChequeNo, new { style = "width: 99%;", placeholder = "Cheque No", id = "txtChequeNo" })
                            </td>

                            <td style="width:12%;text-align:right;">
                                <label>
                                    Party Acc No :
                                </label>
                            </td>
                            <td style="width:20%;text-align:left;">
                                @Html.TextBoxFor(model => model.AccountNo, new { style = "width: 100%;", placeholder = "Party Account No", id = "txtAccountNo" })
                            </td>
                            <td style="width:10%;text-align:right;">
                                <label>
                                    Cheque Date :
                                </label>
                            </td>
                            <td style="width:18%;text-align:left;">
                                <input id="txtChequeDate" type="text" class="easyui-datebox" required="required" data-options="formatter:icsdateformat,parser:icsdateparser" style="width:100%;" />
                            </td>

                        </tr>
                        <tr>
                            <td style="width:12%;text-align:right;">
                                <label>
                                    Amount :
                                </label>
                            </td>
                            <td style="width:28%;text-align:left;">
                                <input id="txtAmount" type="text" style="width: 99%; text-align:right" />
                            </td>

                            <td style="width:12%;text-align:right;">
                                <label>
                                    Amount In Words :
                                </label>
                            </td>
                            <td colspan="3" style="width:48%;text-align:left;">
                                @Html.TextBoxFor(model => model.AmountTaka, new { style = "width: 100%;", id = "txtAmountTaka", disabled = "disabled" })
                            </td>

                        </tr>
                        <tr>
                            <td style="width:12%;text-align:right;">
                                <label>
                                    Party Bank :

                                </label>
                            </td>
                            <td style="width:28%;text-align:left;">
                                @Html.TextBoxFor(model => model.BankName, new { style = "width: 99%;", placeholder = "Party Bank Name", id = "txtBankName" })

                            </td>
                            <td style="width:12%;text-align:right;">
                                <label>
                                    Party Branch :
                                </label>
                            </td>
                            <td style="width:20%;text-align:left;">
                                @Html.TextBoxFor(model => model.BranchName, new { style = "width: 100%;", placeholder = "Party Branch Name", id = "txtBranchName" })
                            </td>

                            <td style="width:10%;text-align:right;">
                                <label>
                                    Rcv Acc No :
                                </label>
                            </td>
                            <td style="width:18%;text-align:left;">
                                @Html.TextBoxFor(model => model.ReceivedAccontNo, new { style = "width: 100%;", placeholder = "Receiver Account No", id = "txtReceivedAccontNo" })
                            </td>
                        </tr>
                        <tr>
                            <td style="width:12%;text-align:right;">
                                <label>
                                    Product Details :
                                </label>
                            </td>
                            <td colspan="5" style="width:88%;text-align:left;">
                                @Html.TextBoxFor(model => model.ProductDetails, new { style = "width: 100%;", id = "txtProductDetails" })
                            </td>
                        </tr>
                        <tr>
                            <td style="width:12%;text-align:right;">
                                <label>
                                    Remarks :
                                </label>
                            </td>
                            <td colspan="5" style="width:88%;text-align:left;">
                                @Html.TextBoxFor(model => model.Remarks, new { style = "width: 100%;", id = "txtRemarks" })
                            </td>
                        </tr>
                    </table>

                </div>
            </fieldset>
        </div>
        <div style="width:100%; height:10%">
            <fieldset>
                <legend style="font-weight: bold">Action : </legend>
                <table border="0" cellspacing="2" cellpadding="2" style="font-size: 11px; font-weight: bold; width:100%">
                    <tr>
                        <td style="width:80%; text-align:right"></td>
                        <td style="width: 10%">
                            <a id="btnSave" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="false">Save</a>
                        </td>
                        <td style="width: 10%">
                            <a id="btnClose" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="false">Close</a>
                        </td>
                    </tr>
                </table>
            </fieldset>
        </div>
    </div>
</body>
</html>
<script type="text/javascript">
 var _oReceivedCheque=null;
 var _sBaseAddress="";
 var _sReceivedChequeHeader="";
 var _nMenuid=0;
 $(document).ready(function () {
     debugger;
     _nMenuid = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.MenuID]));
    _sBaseAddress =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
     _oReceivedCheque =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));

     _sReceivedChequeHeader=sessionStorage.getItem("ReceivedChequeHeader");
     $('#divReceivedCheque').panel({ title:_sReceivedChequeHeader});
     RefreshReceivedChequeLayout();
     RefreshControl();

     $('#txtAmount').icsCurrencyBox();
     $('#txtACCostCenterName').icsAutoComplete({
         BaseAddress : sessionStorage.getItem('BaseAddress'),
         ControllerName: "ReceivedCheque",
         ActionName: "GetsACCostCenter",
         Object: {Name:''},
         PropertyName: "Name",
         ParamName: "Name",
         CharCount:3
         });
     $('#txtBankName').icsAutoComplete({
         BaseAddress : sessionStorage.getItem('BaseAddress'),
         ControllerName: "ReceivedCheque",
         ActionName: "GetsForSuggestion",
         Object: {BankName:''},
         PropertyName: "BankName",
         ParamName: "BankName"});
     $('#txtBranchName').icsAutoComplete({
         BaseAddress : sessionStorage.getItem('BaseAddress'),
         ControllerName: "ReceivedCheque",
         ActionName: "GetsForSuggestion",
         Object: {BranchName:''},
         PropertyName: "BranchName",
         ParamName: "BranchName"});
     $('#txtAccountNo').icsAutoComplete({
         BaseAddress : sessionStorage.getItem('BaseAddress'),
         ControllerName: "ReceivedCheque",
         ActionName: "GetsForSuggestion",
         Object: {AccountNo:''},
         PropertyName: "AccountNo",
         ParamName: "AccountNo"});
     $('#txtReceivedAccontNo').icsAutoComplete({
         BaseAddress : sessionStorage.getItem('BaseAddress'),
         ControllerName: "BankAccount",
         ActionName: "Gets",
         Object: {AccountNo:''},
         PropertyName: "AccountNo",
         ParamName: "AccountNo",
         CharCount:1});
 });
    $("#txtAmount").keyup(function (e){
            $('#txtAmountTaka').val(TakaWords(parseFloat($.trim($("#txtAmount").val()))));
    });

    $("#cboTransactionTypes").change(function (){
        var nTT=this.value;
        if(nTT==2){
            $('#lblChequeNo').html('Pay Order No :');
            $('#txtChequeNo').prop('placeholder','Pay Order No');
        }
        else if(nTT==1){
            $('#lblChequeNo').html('Cheque No :');
            $('#txtChequeNo').prop('placeholder','Cheque No');
        }
        else if(nTT==4){
            $('#lblChequeNo').html('Bank Draft No :');
            $('#txtChequeNo').prop('placeholder','Bank Draft No');
        }

        if(nTT==3){            
            $('#txtChequeNo').prop('disabled',true);
            $('#txtChequeNo').val('');
        }
        else
        {
            $('#txtChequeNo').prop('disabled',false);
        }
    });
    function RefreshControl()
    {
        $('#txtMoneyReceiptDate').datebox('setValue',_oReceivedCheque.MoneyReceiptDateSt);
        $('#cboTransactionTypes').val(_oReceivedCheque.TransactionType);
        $("#cboTransactionTypes").change();

        $('#txtIssueDate').datebox('setValue',_oReceivedCheque.IssueDateSt);
        $('#txtAmount').val(parseFloat(_oReceivedCheque.Amount).toFixed(2));
        $('#txtChequeDate').datebox('setValue',_oReceivedCheque.ChequeDateSt);

        $("#txtMoneyReceiptNo").focus();
    }
    function RefreshReceivedChequeLayout() {
        if (_sReceivedChequeHeader=="View Received Cheque") {
            $("input,select").prop("disabled", true);
            $("#btnSave").hide();
        }
        else {
            $("input,select").not('#txtAmountTaka').prop("disabled", false);
        }
    }

    
    function ValidateInput()
    {
        var txtMoneyReceiptNo = $("#txtMoneyReceiptNo").val();
        if(txtMoneyReceiptNo==null || txtMoneyReceiptNo=="")
        {
            alert("Please Enter Money Receipt No!");
            $("#txtMoneyReceiptNo").addClass("errorFieldBorder");
            $("#txtMoneyReceiptNo").focus();
            return false;
        } else {
            $("#txtMoneyReceiptNo").removeClass("errorFieldBorder");
        }

        var txtBillNumber = $("#txtBillNumber").val();
        if(txtBillNumber==null || txtBillNumber=="")
        {
            alert("Please Enter Bill Number!");
            $("#txtBillNumber").addClass("errorFieldBorder");
            $("#txtBillNumber").focus();
            return false;
        } else {
            $("#txtBillNumber").removeClass("errorFieldBorder");
        }

        var cboTransactionTypes = $("#cboTransactionTypes").val();
        if(cboTransactionTypes==null || parseInt(cboTransactionTypes)<=0)
        {
            alert("Please Select a Transaction Type!");
            $("#cboTransactionTypes").addClass("errorFieldBorder");
            $("#cboTransactionTypes").focus();
            return false;
        } else {
            $("#cboTransactionTypes").removeClass("errorFieldBorder");
        }

        if(parseInt(cboTransactionTypes)!=3)
        {
            var txtChequeNo = $("#txtChequeNo").val();
            if(txtChequeNo==null || txtChequeNo=="")
            {
                alert("Please Enter "+(parseInt($("#cboTransactionTypes").val())===2?"Pay Order":"Cheque")+" No!");
                $("#txtChequeNo").addClass("errorFieldBorder");
                $("#txtChequeNo").focus();
                return false;
            } else {
                $("#txtChequeNo").removeClass("errorFieldBorder");
            }
        }       

        var txtAmount = $("#txtAmount").val();
        if(txtAmount==null || parseFloat(icsRemoveComma((txtAmount)))<=0)
        {
            alert("Please enter Cheque Amount!");
            $("#txtAmount").addClass("errorFieldBorder");
            $("#txtAmount").focus();
            return false;
        } else {
            $("#txtAmount").removeClass("errorFieldBorder");
        }

        var txtACCostCenterName = $("#txtACCostCenterName").val();
        if(txtACCostCenterName==null || txtACCostCenterName=="")
        {
            alert("Please Select a Vendor/Supplier!");
            $("#txtACCostCenterName").addClass("errorFieldBorder");
            $("#txtACCostCenterName").focus();
            return false;
        } else {
            $("#txtACCostCenterName").removeClass("errorFieldBorder");
        }
        var oACCostCenter= $('#txtACCostCenterName').data('obj');
        if(oACCostCenter==null ||oACCostCenter.ACCostCenterID<=0){
            if(_oReceivedCheque.ContractorID<=0)
            {
                alert("Please select a Vendor/Supplier!");
                $("#txtACCostCenterName").addClass("errorFieldBorder");
                $("#txtACCostCenterName").focus();
                return false;
            } else {
                $("#txtACCostCenterName").removeClass("errorFieldBorder");
            }
        } else {
            $("#txtACCostCenterName").removeClass("errorFieldBorder");
        }

        if(parseInt(cboTransactionTypes)!=3)
        {
            var txtBankName = $("#txtBankName").val();
            if(txtBankName==null || txtBankName=="")
            {
                alert("Please Enter Bank Name!");
                $("#txtBankName").addClass("errorFieldBorder");
                $("#txtBankName").focus();
                return false;
            } else {
                $("#txtBankName").removeClass("errorFieldBorder");
            }

            var txtBranchName = $("#txtBranchName").val();
            if(txtBranchName==null || txtBranchName=="")
            {
                alert("Please Enter Branch Name!");
                $("#txtBranchName").addClass("errorFieldBorder");
                $("#txtBranchName").focus();
                return false;
            } else {
                $("#txtBranchName").removeClass("errorFieldBorder");
            }
        }
        
        var txtProductDetails = $("#txtProductDetails").val();
        if(txtProductDetails==null || txtProductDetails=="")
        {
            alert("Please Enter Product Details!");
            $("#txtProductDetails").addClass("errorFieldBorder");
            $("#txtProductDetails").focus();
            return false;
        } else {
            $("#txtProductDetails").removeClass("errorFieldBorder");
        }
        return true;
    }


    function RefreshObject()
    {
        var oReceivedCheque= {
            ReceivedChequeID :_oReceivedCheque==null?0: _oReceivedCheque.ReceivedChequeID,
            ContractorID:$('#txtACCostCenterName').data('obj')==null?_oReceivedCheque.ContractorID: $('#txtACCostCenterName').data('obj').ACCostCenterID,
            ReceivedAccontID:$('#txtReceivedAccontNo').data('obj')==null?_oReceivedCheque.ReceivedAccontID: $('#txtReceivedAccontNo').data('obj').BankAccountID,
            IssueDate :$("#txtIssueDate").datebox('getValue'),
            ChequeNo :$.trim($("#txtChequeNo").val()),
            TransactionType :parseInt($("#cboTransactionTypes").val()),
            ChequeDate :$("#txtChequeDate").datebox('getValue'),
            Amount :parseFloat(icsRemoveComma($("#txtAmount").val())),
            BankName :$.trim($("#txtBankName").val()),
            BranchName :$.trim($("#txtBranchName").val()),
            AccountNo :$.trim($("#txtAccountNo").val()),
            Remarks :$.trim($("#txtRemarks").val()),
            MoneyReceiptNo :$.trim($("#txtMoneyReceiptNo").val()),
            MoneyReceiptDate :$("#txtMoneyReceiptDate").datebox('getValue'),
            BillNumber :$.trim($("#txtBillNumber").val()),
            ProductDetails :$.trim($("#txtProductDetails").val())
         };
        return oReceivedCheque;
    }

    $("#btnSave").click(function ()
    {
        debugger;
        
        if(!ValidateInput()){return false;}
        var oReceivedCheque=RefreshObject();

        $.icsSave({ BaseAddress: _sBaseAddress,
            Object: oReceivedCheque,
            ObjectId: oReceivedCheque.ReceivedChequeID,
            ControllerName: "ReceivedCheque",
            ActionName: "Save",
            Message: "Data Saved sucessfully."},function(resp){
                debugger;
                if(resp.status && resp.obj!=null){
                    if(resp.obj.ReceivedChequeID>0){
                        var oReceivedCheque =resp.obj;
                        var oReceivedCheques =sessionStorage.getItem("ReceivedCheques");
                        var nIndex= parseInt(sessionStorage.getItem("SelectedRowIndex"));
                        if(oReceivedCheques!=null)
                        {
                            oReceivedCheques = jQuery.parseJSON(oReceivedCheques);
                        }
                        else
                        {
                            oReceivedCheques=[];
                        }
                        if(nIndex!=-1)
                        {
                            oReceivedCheques[nIndex]=oReceivedCheque;
                        }
                        else
                        {
                            sessionStorage.setItem("SelectedRowIndex", oReceivedCheques.length);
                            oReceivedCheques.push(oReceivedCheque);
                        }
                        sessionStorage.setItem("ReceivedCheques", JSON.stringify(oReceivedCheques));
                        window.location.href = sessionStorage.getItem("ReceivedChequeBackTo");
                    }
                }
            });

    });

 $("#btnClose").click(function(){
     window.location.href = sessionStorage.getItem("ReceivedChequeBackTo");
 });

 $(document).keydown(function(e) {
     if(e.which == 27)//escape=27
     {
         window.location.href = sessionStorage.getItem("ReceivedChequeBackTo");
     }
 });
</script>