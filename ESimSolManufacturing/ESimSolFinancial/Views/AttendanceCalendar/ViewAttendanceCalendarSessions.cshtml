<html>
    <head>  
        <title></title>
    </head>
    <body>
    @model IEnumerable<ESimSol.BusinessObjects.AttendanceCalendarSession>
    <div class="menuMainCollectionTable">
        <table id="tblAttendanceCalendarSession" title="Attendance Calendar Session List" class="easyui-datagrid" style="width:100%;height:90%" fitcolumns="false" rownumbers="true" pagination="false" singleselect="true" autorowheight="false" toolbar="#toolbar">
            <thead>
                <tr>
                    <th field="Session" width="150" align="left">Session</th>
                    <th field="StartDateInString" width="150" align="left">Start Date</th>
                    <th field="EndDateInString" width="150" align="left">End Date</th>
                    <th field="Activity" width="150" align="left">Activity</th>
                </tr>
            </thead>
        </table>
      
        <div id="toolbar">
            <input type="text" id="txtSearchBySession" placeholder="Search By Session" style="width:300px" />
            <a id="btnAdd" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-add" plain="true">New</a>
            <a id="btnEdit" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-edit" plain="true">Edit</a>
            <a id="btnDelete" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-remove" plain="true">Delete</a>
            <a id="btnView" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-details" plain="true">Preview</a>
            <a id="btnActivity" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-ok" plain="true">Active</a>
        </div>
       
        <fieldset>
            <legend style="font-weight:bold"> Action : </legend>
            <div style="text-align:right;">
                <a id="btnBackClose" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="true">Close</a>
            </div>
        </fieldset>

        <div id="winCalendarSession" class="easyui-window" title="Calendar Session" data-options="modal:true,closed:true,collapsible:false,minimizable:false,maximizable:false,closable:false">

            <table class="tbl">

                <tr>
                    <td class="tdCalendarSession">
                        <div class="divLabel">
                            <label>Session :</label>
                        </div>
                        <div class="divInput">
                            <input id="dtStartDate" type="text" class="easyui-datebox"  data-options="formatter:icsdateformat,parser:icsdateparser" />
                            <span>to</span>
                            <input id="dtEndDate" type="text" class="easyui-datebox" data-options="formatter:icsdateformat,parser:icsdateparser" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td class="tdCalendarSession">
                        <div class="divLabel">
                            <label>Description :</label>
                        </div>
                        <div class="divInput">
                            <textarea id="txtDescription" class="resetfield" placeholder="Description"></textarea>
                        </div>
                    </td>
                </tr>
                <tr>
                    @* options:{formatter:'icsdateformat',parser:'icsdateparser'} *@
                    <td class="tdCalendarSession">
                        <table id="tblCalendarSessionHoliday" title="Holiday List" class="easyui-datagrid" style="width:100%;height:300px" fitcolumns="false" rownumbers="true" pagination="false" singleselect="true" autorowheight="false" data-options="onClickRow: onClickRowForHoliday" toolbar="#toolbarCalendarSessionHoliday">
                            <thead>
                                <tr>
                                    <th field="HolidayDescription" width="220px">Holiday</th>
                                    <th data-options="field:'StartDateInString',width:160,align:'center', editor:{ type:'datebox',options:{formatter:icsdateformat,parser:icsdateparser}}">Start Time</th>
                                    <th data-options="field:'EndDateInString',width:160,align:'center', editor:{type:'datebox',options:{formatter:icsdateformat,parser:icsdateparser}}">End Time</th>
                                </tr>
                            </thead>
                        </table>

                        <div id="toolbarCalendarSessionHoliday">
                            <a id="btnAddHoliday" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-add" plain="true">Add</a>
                            <a id="btnDeleteHoliday" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-remove" plain="true">Delete</a>
                            <span style="float:right"><a id="btnCopySession" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-add" plain="true">Holiday Copy From Previous Session</a></span>
                           
                        </div>
                    </td>
                </tr>
                
                
            </table>

            <fieldset>
                <legend>Actions : </legend>
                <div class="region-action">
                    <a id="btnSaveCalendarSession" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-save" plain="true">Save</a>
                    <a id="btnCloseCalendarSession" href="javascript:void(0)" class="easyui-linkbutton" iconcls="icon-cancel" plain="true">Close</a>
                </div>
            </fieldset>
        </div>
    </div>
    </body>
</html>
<style type="text/css">
    #winCalendarSession {
        width: 700px;
    }

    .region-action {
        text-align: right;
    }

    .tbl {
        margin-top: 10px;
    }
    .tdCalendarSession .divRegion-Copy{
         float: left;
         margin-left: 29%;
         width:70%;
    }

    .divRegion-Copy input{
         float: left;
         width:64%;
    }

    .tdCalendarSession .divLabel {
        float: left;
        width: 28%;
        text-align: right;
        margin-right: 1%;
        font-size: 11px;
    }

    .divInput input {
        float: left;
        width: 67%;
        font-size: 11px;
        text-align: left;
    }

    .divInput textarea {
        float: left;
        width: 44%;
        height:70px;
        resize:none;
        font-size: 11px;
        text-align:left;
    }

    #dtStartDate,#dtEndDate{
        width:140px;
    }

</style>
<script type="text/javascript">
    var _sBaseAddress="";
    var _oAttendanceCalendars=[];
    var _oAttendanceCalendar=null;
    var _oAttendanceCalendarSession=null;
    $(document).ready(function () {
        _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
        _oAttendanceCalendars =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));
        _oAttendanceCalendar =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(@ViewBag.AttendanceCalendar));
        DynamicRefreshList(_oAttendanceCalendars,'tblAttendanceCalendarSession');
        if(_oAttendanceCalendar.AttendanceCalendarID<=0){ $('#toolbar').hide(); }
        else{ $('#tblAttendanceCalendarSession').datagrid({title:"Attendance Calendar Session List ("+_oAttendanceCalendar.Name+" )"}); }
        $('#dtStartDate,#dtEndDate').datebox('setValue',icsdateformat(new Date()));
    });

    $(document).keydown(function (e) { if (e.keyCode == 27) { $('#div').icsWindow('close'); } });

    function ResetControl(){
        _oAttendanceCalendarSession=null;
        $('#dtStartDate,#dtEndDate').datebox({disabled:false});
        $('#winCalendarSession').find('input,textarea').prop('disabled',false);
        $('#dtStartDate,#dtEndDate').datebox('setValue',icsdateformat(new Date()));
        $('#txtDescription').val();
        $('#btnSaveCalendarSession,#toolbarCalendarSessionHoliday').show();
        DynamicRefreshList([],'tblCalendarSessionHoliday');
    }

    function GetAttendanceCalendarSession(oAttendanceCalendarSession, sTitle){
        var obj =
            {
                BaseAddress: _sBaseAddress,
                Object: oAttendanceCalendarSession,
                ControllerName: "AttendanceCalendar",
                ActionName: "GetAttendanceCalendarSession",
                IsWinClose: false
            };

        $.icsDataGet(obj, function (response) {

            if (response.status && response.obj != null) {
                if (response.obj.ACSID > 0) {
                    RefreshControl(response.obj);
                    $('#winCalendarSession').icsWindow('open', sTitle);
                }
                else { alert((response.obj.ErrorMessage!=null || response.obj.ErrorMessage!='')? response.obj.ErrorMessage : "Invalid Attendance Calendar."); }
            }
        });
    }
 
    function RefreshControl(oAttendanceCalendarSession){
        _oAttendanceCalendarSession=oAttendanceCalendarSession;
        $('#dtStartDate').datebox('setValue',oAttendanceCalendarSession.StartDateInString);
        $('#dtEndDate').datebox('setValue',oAttendanceCalendarSession.EndDateInString);
        $('#txtDescription').val(oAttendanceCalendarSession.Description);
        DynamicRefreshList(oAttendanceCalendarSession.AttendanceCalendarSessionHolidays,'tblCalendarSessionHoliday');
        editIndexForHoliday = undefined;
    }

    function RefreshObject(){
        
        var nStartYear= parseInt((new Date($('#dtStartDate').datebox('getValue'))).getFullYear());
        var nEndYear= parseInt((new Date($('#dtEndDate').datebox('getValue'))).getFullYear());
        var sSession= (nStartYear!=nEndYear) ? nStartYear.toString() +" - "+ nEndYear.toString() : nStartYear.toString();

        var oAttendanceCalendarSession = {
            ACSID: (_oAttendanceCalendarSession!=null) ? _oAttendanceCalendarSession.ACSID:0,
            AttendanceCalendarID: _oAttendanceCalendar.AttendanceCalendarID,
            Session: sSession,
            StartDate: $('#dtStartDate').datebox('getValue'),
            EndDate: $('#dtEndDate').datebox('getValue'),
            Description:  $('#txtDescription').val(),
            IsActive: (_oAttendanceCalendarSession!=null) ? _oAttendanceCalendarSession.IsActive:true,
            AttendanceCalendarSessionHolidays: $('#tblCalendarSessionHoliday').datagrid('getRows')
        };
        return oAttendanceCalendarSession;
    }

    function ACSHolidayDateSet(){

        var oACSHs=$('#tblCalendarSessionHoliday').datagrid('getRows');
        for(var i=0;i<oACSHs.length;i++){
            oACSHs[i].StartDate=oACSHs[i].StartDateInString;
            oACSHs[i].EndDate=oACSHs[i].EndDateInString;
        }
        DynamicRefreshList(oACSHs,'tblCalendarSessionHoliday');

    }

    function ACSHolidayValidation(){

        ACSHolidayDateSet();

        var oACSHs=$('#tblCalendarSessionHoliday').datagrid('getRows');
        var sStartDate = $('#dtStartDate').datebox('getValue');
        var sEndDate = $('#dtEndDate').datebox('getValue');
        for(var i=0;i<oACSHs.length;i++){
            
            if(new Date(oACSHs[i].StartDate)<new Date(sStartDate)){
                alert("In row no "+ (parseInt(i)+1) + " start date must be later or equal to "+ sStartDate);
                return false;
            }
            else if(new Date(oACSHs[i].StartDate)>new Date(sEndDate)){
                alert("In row no "+ (parseInt(i)+1) + "start date must not be later than "+ sEndDate);
                return false;
            }
            else if(new Date(oACSHs[i].EndDate)<new Date(sStartDate)){
                alert("In row no "+ (parseInt(i)+1) + " end date must not be previous than "+ sStartDate);
                return false;
            }
            else if(new Date(oACSHs[i].EndDate)>new Date(sEndDate)){
                alert("In row no "+ (parseInt(i)+1) + " start date must be previous or equal to "+ sEndDate);
                return false;
            }

            //for(var j=0;j<oACSHs.length;j++){
               
            //    if(oACSHs[i].HolidayID!=oACSHs[j].HolidayID &&  new Date(oACSHs[i].StartDate)>=new Date(oACSHs[j].StartDate) && new Date(oACSHs[i].EndDate)<=new Date(oACSHs[j].EndDate)){
            //        alert("In row no "+ (parseInt(i)+1) +" & "+ (parseInt(j)+1) +" Already a holiday is assigned in this leave.");
            //        return false;
            //    }

            //    else if(oACSHs[i].HolidayID!=oACSHs[j].HolidayID &&  (new Date(oACSHs[i].StartDate)==new Date(oACSHs[j].StartDate) || new Date(oACSHs[i].EndDate)==new Date(oACSHs[j].EndDate))){
            //        alert("In row no "+ (parseInt(i)+1) +" & "+ (parseInt(j)+1) +" Already a holiday is assigned in this date");
            //        return false;
            //    }
            //}
        }
        return true;
    }

    function DateValidation(){
        if (new Date($('#dtStartDate').datebox('getValue'))>= new Date($('#dtEndDate').datebox('getValue'))) {
            alert("End date must be later than start date");
            return false;
        } 
        var nStartYear= parseInt((new Date($('#dtStartDate').datebox('getValue'))).getFullYear());
        var nEndYear= parseInt((new Date($('#dtEndDate').datebox('getValue'))).getFullYear());

        if(nStartYear!=nEndYear && nStartYear+1!=nEndYear){
            alert("Sesssion couldn't exceed more than one year.");
            return false;
        }
        return true;
    }

    function Validation(){
        debugger;
        if(!DateValidation()){ return false; }
        if ($.trim($("#txtDescription").val()) == "") {
            alert("Please enter description.");
            $("#txtDescription").addClass("errorFieldBorder");
            $("#txtDescription").focus();
            return false;
        } else {
            $("#txtDescription").removeClass("errorFieldBorder");
        }
        if( $('#tblCalendarSessionHoliday').datagrid('getRows').length<=0){
            alert("There is no holiday found."); return false;
        }
        return true;
    }


    $('#btnAdd').click(function(e){
        ResetControl();
        $('#btnCopySession').show();
        $('#winCalendarSession').icsWindow('open','Add Calendar Session');
    });

    $('#btnEdit').click(function(e){

        var oAttendanceCalendarSession = $('#tblAttendanceCalendarSession').datagrid('getSelected');
        if (oAttendanceCalendarSession == null || oAttendanceCalendarSession.ACSID <= 0) {
            alert("Please select a valid item from list");
            return false;
        }
        ResetControl();
        $('#btnCopySession').hide();
        GetAttendanceCalendarSession(oAttendanceCalendarSession,'Edit Calendar Session');

    });

    $('#btnDelete').click(function(e){

        var oAttendanceCalendarSession = $('#tblAttendanceCalendarSession').datagrid('getSelected');

        if (oAttendanceCalendarSession == null || oAttendanceCalendarSession.ACSID <= 0) {
            alert("Please select a valid item from list");
            return false;
        }
        if (!confirm("Confirm to Delete?")) return;
        var obj =
        {
            BaseAddress: _sBaseAddress,
            Object: oAttendanceCalendarSession,
            ControllerName: "AttendanceCalendar",
            ActionName: "DeleteACS",
            TableId: "tblAttendanceCalendarSession",
            IsWinClose: false
        };
        $.icsDelete(obj);
    });

    $('#btnView').click(function(e){

        var oAttendanceCalendarSession = $('#tblAttendanceCalendarSession').datagrid('getSelected');
        if (oAttendanceCalendarSession == null || oAttendanceCalendarSession.ACSID <= 0) {
            alert("Please select a valid item from list");
            return false;
        }
        ResetControl();
        $('#btnCopySession').hide();
        $('#winCalendarSession').find('input,textarea').prop('disabled',true);
        $('#dtStartDate,#dtEndDate').datebox({disabled:true});
        $('#btnSaveCalendarSession,#toolbarCalendarSessionHoliday').hide();
        GetAttendanceCalendarSession(oAttendanceCalendarSession,'View Calendar Session');
    });


    $('#btnSaveCalendarSession').click(function(e){
        if(!endEditingForHoliday()) return false;
        if (!Validation()) return false;
        if(!ACSHolidayValidation()) return false;
        var oAttendanceCalendarSession = RefreshObject();
        var obj = {
            BaseAddress: _sBaseAddress,
            Object: oAttendanceCalendarSession,
            ObjectId: oAttendanceCalendarSession.ACSID,
            ControllerName: "AttendanceCalendar",
            ActionName: "SaveACS",
            TableId: "tblAttendanceCalendarSession",
            IsWinClose: true,
            Message: (oAttendanceCalendarSession.ACSID>0)?"Update Successfully." : "Save Successfully."
        };
        $.icsSave(obj);

    });

    $('#btnCloseCalendarSession').click(function(e){
        $('#winCalendarSession').icsWindow('close');
        ResetControl();
    });
    
    $('#btnBackClose').click(function(e){
        window.location.href= sessionStorage.getItem('BackLink');
    });
    

    /*------ Delete Holiday --------------*/

    $('#btnDeleteHoliday').click(function(e){

        var oACSHoliday = $('#tblCalendarSessionHoliday').datagrid('getSelected');

        if ( oACSHoliday == null ) {
            alert("Please select a valid item from list");
            return false;
        }
        if(oACSHoliday.ACSHID <= 0){
            var nIndex=$('#tblCalendarSessionHoliday').datagrid("getRowIndex", oACSHoliday);
            $('#tblCalendarSessionHoliday').datagrid("deleteRow", nIndex);
            editIndexForHoliday = undefined;  
        }
        else{
            if (!confirm("Confirm to Delete?")) return;
            var obj =
            {
                BaseAddress: _sBaseAddress,
                Object: oACSHoliday,
                ControllerName: "AttendanceCalendar",
                ActionName: "DeleteACSHoliday",
                TableId: "tblCalendarSessionHoliday",
                IsWinClose: false
            };
            $.icsDelete(obj, function (response) {
                debugger;
                if (response.status && response.Message=='deleted') {
                    editIndexForHoliday = undefined;  
                }
            });
        }
        
    });

    /*------ Holiday picker--------------*/
    

    $('#btnAddHoliday').click(function(e)
    {
        if(!DateValidation()){ return false; }
        var oHoliday = { HolidayID: 0};
        var obj = {
            BaseAddress: _sBaseAddress,
            Object: oHoliday,
            ControllerName: "Holiday",
            ActionName: "Gets",
            IsWinClose: false
        };
        $.icsDataGets(obj, function (response) {

            if (response.status && response.objs.length > 0) {
                if (response.objs[0].HolidayID > 0) {

                    var oHolidays=[];
                    var oACSHolidays=$('#tblCalendarSessionHoliday').datagrid('getRows');
                    if(oACSHolidays.length>0){
                        var IsExists=false;
                        for(var i=0;i<response.objs.length;i++){
                            IsExists=false;
                            for(var j=0;j<oACSHolidays.length;j++){
                                if(response.objs[i].HolidayID==oACSHolidays[j].HolidayID){
                                    IsExists=true;
                                    break;
                                }
                            }
                            if(!IsExists){
                                oHolidays.push(response.objs[i]);
                            }
                            
                        }
                    }
                    else{
                        oHolidays=response.objs;
                    }

                    var tblColums = [];var oColumn = { field: "Description", title: "Name", width: 220, align: "left" };tblColums.push(oColumn);
                    oColumn = { field: "DayOfMonth", title: "Date", width: 60, align: "left" };tblColums.push(oColumn);
                    oColumn = { field: "TypeOfHolidayInString", title: "Type Of Holiday", width: 120, align: "left" };tblColums.push(oColumn);
                       
                    var oPickerParam = {
                        winid: 'winHoliday',
                        winclass:'clsHoliday',
                        winwidth: 500,
                        winheight: 460,
                        tableid: 'tblHolidays',
                        tablecolumns: tblColums,
                        datalist: oHolidays,
                        multiplereturn: true,
                        searchingbyfieldName:'Description',
                        windowTittle: 'Holiday List'
                    };

                    $.icsPicker(oPickerParam);
                    IntializeHolidayPickerbutton(oPickerParam);//multiplereturn, winclassName

                }
                else { alert(response.objs[0].ErrorMessage); }
            }
        });
    });

    function IntializeHolidayPickerbutton(oPickerobj)
    {
        $("#" + oPickerobj.winid).find("#btnOk").click(function () {

            var oreturnObjs = $('#'+oPickerobj.tableid).datagrid('getChecked');
            if (oreturnObjs != null && oreturnObjs.length > 0)
            {
                var oACSHoliday=null;
                var oACSHolidays=$('#tblCalendarSessionHoliday').datagrid('getRows');
                for(var i=0; i<oreturnObjs.length; i++)
                {
                    oACSHoliday={
                        ACSHID : 0,
                        ACSID : 0,
                        HolidayID : oreturnObjs[i].HolidayID,
                        HolidayDescription : oreturnObjs[i].Description,
                        StartDateInString : $('#dtStartDate').datebox('getValue'),
                        EndDateInString : $('#dtStartDate').datebox('getValue'),
                        StartDate : $('#dtStartDate').datebox('getValue'),
                        EndDate : $('#dtStartDate').datebox('getValue'),
                        IsActive : true            
                    }
                    oACSHolidays.push(oACSHoliday);
                }
                DynamicRefreshList(oACSHolidays,'tblCalendarSessionHoliday');
                $("#"+oPickerobj.winid).icsWindow("close");
                $("#" + oPickerobj.winid).remove();
            }
        });

    }


    /*------ Copy Session --------------*/
    
    
    $('#btnCopySession').click(function(e)
    {

        if(!DateValidation()){ return false; }
        var oAttendanceCalendar = { AttendanceCalendarID: _oAttendanceCalendar.AttendanceCalendarID};
        var obj = {
            BaseAddress: _sBaseAddress,
            Object: oAttendanceCalendar,
            ControllerName: "AttendanceCalendar",
            ActionName: "GetsACSHoliday",
            IsWinClose: false
        };
        $.icsDataGets(obj, function (response) {

            debugger;
            if (response.status && response.objs.length > 0) {
                if (response.objs != null && response.objs[0].ACSHID > 0)
                {
                    var oACSHoliday=null;
                    var oACSHolidays=[];
                    for(var i=0; i<response.objs.length; i++)
                    {
                        var oArrDate=GetHoidayRange(response.objs[i].StartDateInString,response.objs[i].EndDateInString);
   
                        if(oArrDate[0]!="" && oArrDate[1]!=""){
                            oACSHoliday={
                                ACSHID : 0,
                                ACSID : 0,
                                HolidayID : response.objs[i].HolidayID,
                                HolidayDescription : response.objs[i].HolidayDescription,
                                StartDateInString : icsdateformat(oArrDate[0]),
                                EndDateInString : icsdateformat(oArrDate[1]),
                                StartDate : icsdateformat(oArrDate[0]),
                                EndDate : icsdateformat(oArrDate[1]),
                                IsActive : true            
                            }
                            oACSHolidays.push(oACSHoliday);
                        }
                        
                    }
                    DynamicRefreshList(oACSHolidays,'tblCalendarSessionHoliday');

                    if(oACSHolidays.length<=0){
                        alert("No holidays found in the selecte date range.");
                    }
                    $("#"+oPickerobj.winid).icsWindow("close");
                    $("#" + oPickerobj.winid).remove();
                
                }
                else { alert(response.objs[0].ErrorMessage); }
            }
        });
    });

    function GetHoidayRange(sStartDate,sEndDate){

        debugger;
        var dtStartDate=new Date(sStartDate);
        var dtEndDate=new Date(sEndDate);

        var dtNewStartDate=new Date($('#dtStartDate').datebox('getValue'));
        var dtNewEndDate=new Date($('#dtEndDate').datebox('getValue'));

        var dtSD="";
        var dtED="";

        var nDays= (dtEndDate.getTime() -dtStartDate.getTime())/(1000*3600*24)


        if(dtStartDate.getDate()>=dtNewStartDate.getDate() && (dtStartDate.getMonth()>=dtNewStartDate.getMonth() || dtStartDate.getMonth()<=dtNewEndDate.getMonth()) && (dtEndDate.getMonth()<=dtNewEndDate.getMonth() || dtNewStartDate.getFullYear()<dtNewEndDate.getFullYear() )){

            dtSD=new Date(dtStartDate.setFullYear((( (dtStartDate.getDate()>=dtNewStartDate.getDate() && dtStartDate.getMonth()>=dtNewStartDate.getMonth())|| dtNewStartDate.getFullYear()==dtNewEndDate.getFullYear())? dtNewStartDate.getFullYear() : dtNewEndDate.getFullYear())));

            if(dtSD<=dtNewEndDate && dtSD>=dtNewStartDate){
               
                var oDate=new Date(dtStartDate.setFullYear((((dtStartDate.getDate()>=dtNewStartDate.getDate() && dtStartDate.getMonth()>=dtNewStartDate.getMonth()) || dtNewStartDate.getFullYear()==dtNewEndDate.getFullYear())? dtNewStartDate.getFullYear() : dtNewEndDate.getFullYear())));
                dtED=new Date( oDate.setDate(oDate.getDate()+nDays));
            }
            else{
                dtSD="";
            }
            
        }


        return [dtSD,dtED]
    }

    
    /*----------------- Grid Change Event-------------*/

    var editIndexForHoliday = undefined;  

    function endEditingForHoliday(){  
        if (editIndexForHoliday == undefined){return true}  
        if ($('#tblCalendarSessionHoliday').datagrid('validateRow', editIndexForHoliday))
        { 
            debugger;
            var edStartDate = $('#tblCalendarSessionHoliday').datagrid('getEditor', {index:editIndexForHoliday , field:'StartDateInString'});
            var edEndDate = $('#tblCalendarSessionHoliday').datagrid('getEditor', {index:editIndexForHoliday , field:'EndDateInString'});

            var sStartDate= icsdateformat(new Date($(edStartDate.target).datebox('getValue')));
            var sEndDate= icsdateformat(new Date($(edEndDate.target).datebox('getValue')));

            if(new Date(sStartDate) <new Date($('#dtStartDate').datebox('getValue')) || new Date(new Date(sStartDate))>new Date($('#dtEndDate').datebox('getValue'))){
                alert("In row no "+ (parseInt(editIndexForHoliday)+1) +", Start date is out of range. Please give a valid date between the session. ");
                $(edStartDate.target).datebox('setValue', edStartDate.oldHtml);
                $(edEndDate.target).datebox('setValue', edEndDate.oldHtml);
                $('#tblCalendarSessionHoliday').datagrid('selectRow', editIndexForHoliday).datagrid('beginEdit', editIndexForHoliday);   
                return false;
            }

            if(new Date(sEndDate)>new Date($('#dtEndDate').datebox('getValue')) || new Date(sEndDate)<new Date($('#dtStartDate').datebox('getValue'))){
                alert("In row no "+ (parseInt(editIndexForHoliday)+1) +", End date is out of range. Please give a valid date between the session. ");
                $(edStartDate.target).datebox('setValue', edStartDate.oldHtml);
                $(edEndDate.target).datebox('setValue', edEndDate.oldHtml);
                $('#tblCalendarSessionHoliday').datagrid('selectRow', editIndexForHoliday).datagrid('beginEdit', editIndexForHoliday); ;  
                return false;
            } 
            
            if(new Date(sStartDate)>new Date(sEndDate)){
                alert("In row no "+ (parseInt(editIndexForHoliday)+1) +", End date must be later or equal to start date.");
                $(edStartDate.target).datebox('setValue', edStartDate.oldHtml);
                $(edEndDate.target).datebox('setValue', edEndDate.oldHtml);
                $('#tblCalendarSessionHoliday').datagrid('selectRow', editIndexForHoliday).datagrid('beginEdit', editIndexForHoliday); 
                return false;
            }

            var oACSHs=$('#tblCalendarSessionHoliday').datagrid('getRows');
            for(var j=0;j<oACSHs.length;j++){
                if(j!=editIndexForHoliday && new Date(sStartDate)>=new Date(oACSHs[j].StartDateInString) && new Date(sEndDate)<=new Date(oACSHs[j].EndDateInString)){
                    alert("In row no "+ (parseInt(j)+1) +" Already a holiday is assigned in this leave.");
                    $(edStartDate.target).datebox('setValue', edStartDate.oldHtml);
                    $(edEndDate.target).datebox('setValue', edEndDate.oldHtml);
                    $('#tblCalendarSessionHoliday').datagrid('selectRow', editIndexForHoliday).datagrid('beginEdit', editIndexForHoliday); 
                    return false;
                }

                else if(j!=editIndexForHoliday && (new Date(sStartDate)==new Date(oACSHs[j].StartDateInString) || new Date(sEndDate)==new Date(oACSHs[j].EndDateInString))){
                    alert("In row no "+ (parseInt(j)+1) +" Already a holiday is assigned in this date");
                    $(edStartDate.target).datebox('setValue', edStartDate.oldHtml);
                    $(edEndDate.target).datebox('setValue', edEndDate.oldHtml);
                    $('#tblCalendarSessionHoliday').datagrid('selectRow', editIndexForHoliday).datagrid('beginEdit', editIndexForHoliday); 
                    return false;
                }
            }

            $('#tblCalendarSessionHoliday').datagrid('endEdit', editIndexForHoliday); 
            editIndexForHoliday = undefined;  
            return true;  
        } else {  
            return false;  
        }  
    }  

    function onClickRowForHoliday(index){  

        if (editIndexForHoliday != index){  
            if (endEditingForHoliday()){
                debugger;
                $('#tblCalendarSessionHoliday').datagrid('selectRow', index).datagrid('beginEdit', index);  
                var oACSHoliday = $('#tblCalendarSessionHoliday').datagrid('getSelected');
                editIndexForHoliday = index;  
            } else {  
                $('#tblCalendarSessionHoliday').datagrid('selectRow', editIndexForHoliday); 
            }  
        }  
    }


    //--------------------------------------------------------------------------------------------------

    $('#btnActivity').click(function(e){
        var oAttendanceCalendarSession = $('#tblAttendanceCalendarSession').datagrid('getSelected');
        if (oAttendanceCalendarSession == null || oAttendanceCalendarSession.ACSID <= 0) {
            alert("Please select an item from list!");
            return;
        }
        //if (oAttendanceCalendarSession.IsActive == true) 
        //{
        //    alert("Your Selected Session Already Active!");
        //    return;
        //}         
        $.ajax({
            type: "POST",
            dataType: "json",
            url: _sBaseAddress + "/AttendanceCalendar/ChangeActiveStatus",
            traditional: true,
            data: JSON.stringify(oAttendanceCalendarSession),
            contentType: "application/json; charset=utf-8",
            success: function(data) {                
                var oAttendanceCalendarSessions = jQuery.parseJSON(data);
                if (oAttendanceCalendarSessions != null && oAttendanceCalendarSessions.length> 0 && oAttendanceCalendarSessions[0].ErrorMessage == "")
                {
                    alert("Update sucessfully");
                    DynamicRefreshList(oAttendanceCalendarSessions,'tblAttendanceCalendarSession');
                } 
                else 
                {
                    alert(oAttendanceCalendarSessions[0].ErrorMessage);
                }
            },
            error: function(xhr, status, error) {
                alert(error);
            }
        });      
    });
    

    /* Search Session from grid*/

     $('#txtSearchBySession').keypress(function(e) {

        var c = String.fromCharCode(e.which);
        var txtSearchBySession = document.getElementById('txtSearchBySession').value;
        txtSearchBySession = txtSearchBySession + c;

        var bFlag = false;
        var sTempName = "";
        var rows = $('#tblAttendanceCalendarSession').datagrid('getRows');
        for (i = 0; i < rows.length; ++i) {
            sTempName = rows[i]['Session'].substring(0, txtSearchBySession.length);
            if (txtSearchBySession.toUpperCase() == sTempName.toUpperCase()) {
                bFlag = true;
                break;
            }
        }
        if (bFlag) {
            $('#tblAttendanceCalendarSession').datagrid('selectRow', i);
        }
    });




</script>