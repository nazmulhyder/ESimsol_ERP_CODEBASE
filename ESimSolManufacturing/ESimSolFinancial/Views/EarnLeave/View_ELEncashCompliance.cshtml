@{
    ViewBag.Title = "Compliance EL Encash";
}

@model IEnumerable <ESimSol.BusinessObjects.ELEncashCompliance>

<div ng-app="ELEncashComplianceModule" ng-controller="ELEncashComplianceController as MLCC">
    <div class="ui-grid-top-panel"><h6><b>ELEncash Compliance</b></h6></div>

    <section>
        <ul class="nav nav-tabs" style="background:#d6dbdf; color:white;">
            <li ng-class="{active:MLCC.IsSet(1)}">
                <a href="" ng-click="MLCC.SetTab(1)" style="color:black;">ELEncash Compliance Process</a>
            </li>
            <li ng-class="{active:MLCC.IsSet(2)}">
                <a href="" ng-click="MLCC.SetTab(2)" style="color:black;">ELEncash Compliance</a>
            </li>
        </ul>
        <div ng-show="MLCC.IsSet(1)">


            <div class="form-inline">
                <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="addProcess()"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> New</button>
                <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="deleteProcess()"> <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Delete</button>
                <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="approveProcess()"> <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Approve</button>


                @*<select id="cboXLPrintProcessTab" class="form-control" style="width:164px" ng-model="XLPrint" ng-change="changeReportFormatProcessTab()">
                    <option value="">--Select Report--</option>
                    <option value="1">Advance Salary Sheet (F1)</option>
                    <option value="2">Advance Salary Sheet (F2)</option>
                    <option value="3">Advance Salary Summery</option>
                </select>
                <button id="btnExcelProcessTab" type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="ReportXLProcessTab()" ng-hide="hidebtnXLProcessTab"><span class="glyphicon glyphicon-print" aria-hidden="true"></span> Excel</button>
                <button id="btnPDFProcessTab" type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="ReportPDFProcessTab()" ng-hide="hidebtnPrintProcessTab"><span class="glyphicon glyphicon-print" aria-hidden="true"></span> PDF</button>*@
            </div>
            <div ui-grid="ELEncashComplianceProcessgridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav class="grid ui-grid-selectable"></div>

        </div>
        <div ng-if="MLCC.IsSet(2)">
            <div class="form-inline">
                <select ng-model="BusinessUnitID" ng-options="obj.BusinessUnitID as obj.Name for obj in BU" style="width:150px;" class="form-control">
                    <option value="">--Select BusinessUnit--</option>
                </select>

                <input type="text" ng-model="LocationName" ng-change="filter()" ng-keyup="searcLocationByKeyUp($event)" class="form-control" style="width:130px" placeholder="Select Location" />


                <input type="text" ng-model="DepartmentName" ng-change="filter()" ng-keyup="searcDepartmentByKeyUp($event)" class="form-control" style="width:130px" placeholder="Select Department" />

                <input type="text" ng-model="DesignationName" ng-change="filter()" ng-keyup="searcDesignationByKeyUp($event)" class="form-control" style="width:130px" placeholder="Select Designation" />

                <input type="text" ng-model="$parent.GroupName"  ng-keyup="searcGroupByKeyUp($event)" class="form-control" style="width:130px" placeholder="Select Group" />

                <input type="text" ng-model="$parent.BlockName" ng-change="filter()" ng-keyup="searcBlockByKeyUp($event)" class="form-control" style="width:130px" placeholder="Select Block" />
                <input type="checkbox" ng-model="$parent.IsDeclaration" ng-change="chngDeclaration()" class="form-control"/>

                Declaration Date:
                <div class="input-group date date-container">
                    <input type="text" class="form-control" style="width:100px" ng-model="EAS.dtDeclaration" ng-disabled="!$parent.IsDeclaration"><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                </div>
                <input type="checkbox" ng-model="$parent.IsDateBetween" ng-change="chngDateBetween()" class="form-control" />
                <div class="input-group date date-container">
                    <input type="text" class="form-control" style="width:100px" ng-model="EAS.dtStart" ng-disabled="!$parent.IsDateBetween" ng-init="initializeDatepicker()"><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                </div>
                <span>to</span>
                <div class="input-group date date-container">
                    <input type="text" class="form-control" style="width:100px" ng-model="EAS.dtEnd" ng-disabled="!$parent.IsDateBetween"><span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
                </div>
                <label>S Range: </label>
                <input class="form-control number-int" ng-model="StartSalary" style="width:150px;"/>To
                <input class="form-control number-int" ng-model="EndSalary" style="width:150px;" />
                <button type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="searchAdvanceSalary()"><span class="glyphicon glyphicon-search" aria-hidden="true"></span> Search</button>

                <select id="cboXLPrint" class="form-control" style="width:164px" ng-model="XLPrint" ng-change="changeReportFormat()">
                    <option value="">--Select Report--</option>
                    <option value="1">Format 1</option>
                    <option value="2">Format 2(With Basic)</option>
                    <option value="3">EL Summary</option>
                </select>
                <button id="btnExcel" type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="ReportXL()" ng-hide="hidebtnXL"><span class="glyphicon glyphicon-print" aria-hidden="true"></span> Excel</button>
                <button id="btnPDF" type="button" class="btn btn-sm btn-primary" aria-label="Left Align" ng-click="ReportPDF()" ng-hide="hidebtnPrint"><span class="glyphicon glyphicon-print" aria-hidden="true"></span> PDF</button>
            </div>
            <div ui-grid="ELEncashCompliancegridOptions" ui-grid-selection ui-grid-resize-columns ui-grid-key-nav class="grid ui-grid-selectable"></div>
        </div>
    </section>


</div>

<style type="text/css">
        .form-control {
            height: 26px;
            padding: 0px 6px;
            font-size: 12px;
        }

        .grid {
            height: 480px;
            width: 100%;
        }

        .angular-grid {
            height: 480px;
            width: 100%;
        }

        .custom-pagination {
            margin-top: -15px;
            margin-bottom: -15px;
        }

        .spacing {
            padding-bottom: 5px;
        }

        .ui-grid-top-panel {
            background: linear-gradient(to bottom,#EFF5FF 0,#E0ECFF 100%);
        }
    </style>




    <script type="text/javascript">
    debugger;
    var  _sBaseAddress =@Html.Raw( new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(HttpContext.Current.Session[SessionInfo.BaseAddress]));
    var _oBusinessUnits = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(@ViewBag.BusinessUnits));
    
    var _oEmployeeGroups = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(@ViewBag.EmployeeGroups));
    var _oEmployeeBlocks = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(@ViewBag.EmployeeBlocks));
    
    var oELEncashCompliances =@Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));




    var  vELEncashComplianceModule = angular.module('ELEncashComplianceModule', ['ngAnimate','ui.bootstrap','ui.grid','ui.grid.selection','ui.grid.resizeColumns','ms.service']);
    vELEncashComplianceModule.controller('ELEncashComplianceController', function ($scope, $http, $uibModal, $log, uiGridConstants, msModal, userSession,icsMethod) {

        $(document).ready(function(){
            debugger;
            $(".number-int").icsNumberField({ min: 0,precision: 0 });
            $(".number-precision").icsNumberField({ min: 0,precision: 2 });
            //$("cboXLPrint option[value='0']").attr("selected", "selected");

        });

        //$('.date-container').datepicker({
        //    format: "dd M yyyy",
        //    calendarWeeks: true,
        //    autoclose: true,
        //    todayHighlight: true
        //});

        $scope.initializeDatepicker  =function(){
            $('.date-container').datepicker({
                format: "dd M yyyy",
                calendarWeeks: true,
                autoclose: true,
                todayHighlight: true
            });
        }

        $scope.BusinessUnitID = 0;
        $scope.DepartmentIDs = "";
        $scope.DesignationID = "";
        $scope.LocationIDs = "";

        $scope.GroupIDs = "";
        $scope.BlockIDs = "";

        $scope.BU = _oBusinessUnits;
        $scope.hidebtnXLProcessTab= $scope.hidebtnPrintProcessTab =false;
        $scope.hidebtnXL= $scope.hidebtnPrint =false;
        $scope.XLPrint ="";
        $scope.XLProcessTab ="";
        $scope.changeReportFormat = function(){
            debugger;
            var nPrintType=$("#cboXLPrint").val();
            if(nPrintType==1)
            {
                $scope.hidebtnPrint = false;
                $scope.hidebtnXL=false;
            }
            else if(nPrintType==2)
            {
                $scope.hidebtnPrint = false;
                $scope.hidebtnXL=false;
            }
            else if(nPrintType==3)
            {
                $scope.hidebtnPrint = true;
                $scope.hidebtnXL=false;
            }
            else{
                $scope.hidebtnXL= $scope.hidebtnPrint =false;
            }
        }
        $scope.changeReportFormatProcessTab = function(){
            debugger;
            var nPrintType=$("#cboXLPrintProcessTab").val();
            if(nPrintType==1)
            {
                $scope.hidebtnPrintProcessTab = false;
                $scope.hidebtnXLProcessTab=false;
            }
            else if(nPrintType==2)
            {
                $scope.hidebtnPrintProcessTab = false;
                $scope.hidebtnXLProcessTab=false;
            }
            else if(nPrintType==3)
            {
                $scope.hidebtnPrintProcessTab = true;
                $scope.hidebtnXLProcessTab=false;
            }
            else{
                $scope.hidebtnXLProcessTab= $scope.hidebtnPrintProcessTab =false;
            }
        }

        //Location

        $scope.searcLocationByKeyUp=function(keyEvent){
            if(keyEvent.which==13){
                this.getsLocation();
            }
            else if(keyEvent.which==08){
                $scope.LocationID = 0;
            }
        };
        $scope.getsLocation=function(){
            this.BusinessUnitID =(this.BusinessUnitID == undefined || this.BusinessUnitID =="")?"":this.BusinessUnitID ;

            var obj={ BusinessUnitID: this.BusinessUnitID }
            debugger;
            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress+'/Location/GetsLocationByBU',$.param(obj), config).then(function (response)
            {
                var results=jQuery.parseJSON(response.data);
                var modalObj={
                    size:'sm',
                    title:'Location List',
                    url:_sBaseAddress+'/Home/Modal',
                    modalController:'ModalCtrl',
                    appController:'ELEncashComplianceController',
                    objs:results,
                    multiSelect:true,
                    columns:[{ field: 'LocCode', name: 'Code' }, { field: 'Name', name: 'Location Name' }]
                }
                var modalInstance=msModal.Instance(modalObj);

                modalInstance.result.then(function (result) {
                    debugger;
                    $scope.LocationID = result.LocationID;
                    $scope.LocationName = result.length > 1 ? result.length + "Item's Selected" : result[0].Name;
                    $scope.LocationIDs = icsMethod.ICS_PropertyConcatation(result, 'LocationID');

                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
            );
        }

        //Depatment

        $scope.searcDepartmentByKeyUp=function(keyEvent){
            if(keyEvent.which==13){
                this.getsDepartment();
            }
            else if(keyEvent.which==08){
                $scope.DepartmentID = 0;
            }
        };
        $scope.getsDepartment=function(){
            debugger;
            this.BusinessUnitID =(this.BusinessUnitID == undefined || this.BusinessUnitID =="")?"":this.BusinessUnitID ;
            var obj={ BusinessUnitIDs:this.BusinessUnitID,LocationIDs: this.LocationIDs }

            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress+'/Department/GetsDepartment',$.param(obj), config).then(function (response)
            {
                var results=jQuery.parseJSON(response.data);
                var modalObj={
                    size:'sm',
                    title:'Department List',
                    url:_sBaseAddress+'/Home/Modal',
                    modalController:'ModalCtrl',
                    appController:'ELEncashComplianceController',
                    objs:results,
                    multiSelect:true,
                    columns:[{ field: 'Code', name: 'Code' }, { field: 'Name', name: 'Department Name' }]
                }
                var modalInstance=msModal.Instance(modalObj);

                modalInstance.result.then(function (result) {
                    debugger;
                    $scope.DepartmentID = result.DepartmentID;
                    $scope.DepartmentName = result.length > 1 ? result.length + "Item's Selected" : result[0].Name;
                    $scope.DepartmentIDs = icsMethod.ICS_PropertyConcatation(result, 'DepartmentID');


                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
            );
        }

        //Designation
        $scope.searcDesignationByKeyUp=function(keyEvent){
            if(keyEvent.which==13){
                this.getsDesignation();
            }
            else if(keyEvent.which==08){
                $scope.DesignationID = 0;
            }
        };
        $scope.getsDesignation=function(){
            debugger;
            this.BusinessUnitID =(this.BusinessUnitID == undefined || this.BusinessUnitID =="")?"":this.BusinessUnitID ;
            var obj={ Params : (this.BusinessUnitID == 0 || this.BusinessUnitID == undefined?0:this.BusinessUnitID) + "~" + (this.LocationIDs == ""  || this.LocationIDs == undefined? "": this.LocationIDs) + "~" + (this.DepartmentIDs == "" || this.DepartmentIDs == undefined?"":this.DepartmentIDs)  }

            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress+'/Designation/Gets',$.param(obj), config).then(function (response)
            {
                var results=jQuery.parseJSON(response.data);
                var modalObj={
                    size:'sm',
                    title:'Desingation List',
                    url:_sBaseAddress+'/Home/Modal',
                    modalController:'ModalCtrl',
                    appController:'ELEncashComplianceController',
                    objs:results,
                    multiSelect:true,
                    columns:[{ field: 'Code', name: 'Code' }, { field: 'Name', name: 'Department Name' }]
                }
                var modalInstance=msModal.Instance(modalObj);

                modalInstance.result.then(function (result) {
                    debugger;
                    $scope.DesignationID = result.DesignationID;
                    $scope.DesignationName = result.length > 1 ? result.length + "Item's Selected" : result[0].Name;
                    $scope.DesignationIDs = icsMethod.ICS_PropertyConcatation(result, 'DesignationID');


                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
            );
        }



        //Group

        $scope.searcGroupByKeyUp=function(keyEvent){
            if(keyEvent.which==13){
                this.getsGroup();
            }
            else if(keyEvent.which==08){
                $scope.GroupID = 0;
            }
        };
        $scope.getsGroup=function(){
            debugger;
            this.GroupName =(this.GroupName == undefined || this.GroupName =="")?"":this.GroupName ;
            var obj={ Name:this.GroupName }

            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress+'/Employee/GetsEmployeeGroupAdvSrc',$.param(obj), config).then(function (response)
            {
                var results=jQuery.parseJSON(response.data);
                var modalObj={
                    size:'sm',
                    title:'Group List',
                    url:_sBaseAddress+'/Home/Modal',
                    modalController:'ModalCtrl',
                    appController:'ELEncashComplianceController',
                    objs:results,
                    multiSelect:true,
                    columns:[{ field: 'Code', name: 'Code' }, { field: 'Name', name: 'Group Name' }]
                }
                var modalInstance=msModal.Instance(modalObj);

                modalInstance.result.then(function (result) {
                    debugger;
                    //$scope.GroupID = result.EmployeeTypeID;
                    $scope.GroupName = result.length > 1 ? result.length + "Item's Selected" : result[0].Name;
                    $scope.GroupIDs = icsMethod.ICS_PropertyConcatation(result, 'EmployeeTypeID');


                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
            );
        }



        //Block

        $scope.searcBlockByKeyUp=function(keyEvent){
            if(keyEvent.which==13){
                this.getsBlock();
            }
            else if(keyEvent.which==08){
                $scope.BlockID = 0;
            }
        };
        $scope.getsBlock=function(){
            debugger;
            this.BlockName =(this.BlockName == undefined || this.BlockName =="")?"":this.BlockName ;
            var obj={ Name:this.BlockName }

            var config = { headers: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;' } };
            $http.post(_sBaseAddress+'/Employee/GetsEmployeeBlockAdvSrc',$.param(obj), config).then(function (response)
            {
                var results=jQuery.parseJSON(response.data);
                var modalObj={
                    size:'sm',
                    title:'Group List',
                    url:_sBaseAddress+'/Home/Modal',
                    modalController:'ModalCtrl',
                    appController:'ELEncashComplianceController',
                    objs:results,
                    multiSelect:true,
                    columns:[{ field: 'Code', name: 'Code' }, { field: 'Name', name: 'Group Name' }]
                }
                var modalInstance=msModal.Instance(modalObj);

                modalInstance.result.then(function (result) {
                    debugger;
                    //$scope.GroupID = result.EmployeeTypeID;
                    $scope.BlockName = result.length > 1 ? result.length + "Item's Selected" : result[0].Name;
                    $scope.BlockIDs = icsMethod.ICS_PropertyConcatation(result, 'EmployeeTypeID');


                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            },
                function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
            );
        }

        $scope.EAS = {
            dtStart : icsdateformat(new Date()),
            dtEnd: icsdateformat(new Date()),
            dtDeclaration:icsdateformat(new Date())
        };
        // this.dtStart=this.dtEnd= icsdateformat(new Date());

        $scope.StartDate=$scope.EndDate=$scope.DeclarationDate=icsdateformat(new Date());

        $scope.ELEncashCompliancegridOptions ={
            enableRowHeaderSelection: false,
            enableRowSelection: true,
            enableFullRowSelection: true,
            multiSelect: true,
            enableColumnResizing: true,
            noUnselect : true,
            enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,
            columnDefs: [
                { name: ' ', width: '3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>', cellClass: 'text-center', enableCellEdit: false, enableSorting: false, enableColumnResizing: false, enableColumnMenu: false },
                { field: 'EmployeeName', name: 'Name', width: '12%', enableCellEdit: false},
                { field: 'DesignationName', name: 'Designation', width: '12%', enableCellEdit: false},
                { field: 'CompGrossSalary', name: 'GrossSalary', width: '12%', enableCellEdit: false, cellFilter: 'number : 2'},
                { field: 'TotalPresent', name: 'TotalPresent', width: '12%', enableCellEdit: false, cellFilter: 'number : 2'},
                { field: 'TotalAbsent', name: 'TotalAbsent', width: '12%', enableCellEdit: false, cellFilter: 'number : 2'},
                { field: 'TotalLeave', name: 'TotalLeave', width: '12%', enableCellEdit: false, cellFilter: 'number : 2'},
                { field: 'TotalHoliday', name: 'TotalHoliday', width: '12%', enableCellEdit: false, cellFilter: 'number : 2'},
                { field: 'TotalDayOff', name: 'TotalDayoff', width: '12%', enableCellEdit: false, cellFilter: 'number : 2'},
                { field: 'TotalEarnLeave', name: 'TotalEarnLeave', width: '12%', enableCellEdit: false, cellFilter: 'number : 2'},  
                { field: 'EncashELCount', name: 'EncashELCount', width: '12%', enableCellEdit: false, cellFilter: 'number : 2'},
                { field: 'EncashAmount', name: 'EncashAmount', width: '12%', enableCellEdit: false, cellFilter: 'number : 2'}
            ],
            data:oELEncashCompliances,
            onRegisterApi:function(ELEncashCompliancegridApi) {
                $scope.ELEncashCompliancegridApi = ELEncashCompliancegridApi;

            }
        };

        $scope.ELEncashComplianceProcessgridOptions ={
            enableRowHeaderSelection: false,
            enableRowSelection: true,
            enableFullRowSelection: true,
            multiSelect: false,
            enableColumnResizing: true,
            noUnselect : true,
            showColumnFooter: true,
            enableGridMenu: true,
            columnDefs: [
                { name: ' ', width: '3%', cellTemplate: '<div style="padding-top:5px;"><span>{{grid.renderContainers.body.visibleRowCache.indexOf(row)+1}}</span></div>', cellClass: 'text-center', enableCellEdit: false, enableSorting: false, enableColumnResizing: false, enableColumnMenu: false },
                { field: 'Note', name: 'Note', width: '20%', enableCellEdit: false},
                { field: 'StartDateInString', name: 'StartDate', width: '12%', enableCellEdit: false},
                { field: 'EndDateInString', name: 'EndDate', width: '12%', enableCellEdit: false},
                { field: 'ApproveByName', name: 'ApproveByName', width: '12%', enableCellEdit: false},
                { field: 'DeclarationDateInString', name: 'DeclarationDate', width: '12%', enableCellEdit: false},
                { field: 'BUName', name: 'BusinessUnit', width: '10%', enableCellEdit: false},
                { field: 'LocationName', name: 'Location', width: '15%', enableCellEdit: false}
            ],
            data:oELEncashCompliances,
            onRegisterApi:function(ELEncashComplianceProcessgridApi) {
                $scope.ELEncashComplianceProcessgridApi = ELEncashComplianceProcessgridApi;

            }
        };

        $scope.addProcess = function () {
            sessionStorage.setItem("Operation", "New");
            sessionStorage.setItem("SelectedRowIndex", -1);
            sessionStorage.setItem("ELEncashComplianceProcess", "Employee Advance Salary Process");
            sessionStorage.setItem("ELEncashComplianceProcess", JSON.stringify($scope.ELEncashComplianceProcessgridOptions.data));
            sessionStorage.setItem("BackLink", window.location.href);
            var tsv=((new Date()).getTime())/1000;
            window.location.href = _sBaseAddress+ "/EarnLeave/View_ELEncashComplianceProcess?menuid=0";
        };




        $scope.searchAdvanceSalary = function () {
            debugger;
            $scope.SS = this.StartSalary == ""?0:this.StartSalary;
            $scope.ES = this.EndSalary == ""?0:this.EndSalary;
            if(parseInt($scope.SS) > parseInt($scope.ES)) {
                msModal.Message({headerTitle : '', bodyText:'Start salary must be less than end salary', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            debugger;
            var obj = {
                Params : $scope.EAS.dtStart +'~'+ $scope.EAS.dtEnd + "~" + (this.BusinessUnitID == 0 || this.BusinessUnitID == undefined?0:this.BusinessUnitID) + "~" + (this.LocationIDs == "" ? "": this.LocationIDs) + "~" + (this.DepartmentIDs == ""?"":this.DepartmentIDs) + "~" + (this.StartSalary == ""|| this.StartSalary==undefined?0:this.StartSalary)+ "~" + (this.EndSalary == ""|| this.EndSalary==undefined?0:this.EndSalary) + "~" + (this.GroupIDs == ""|| this.GroupIDs==undefined?"":this.GroupIDs)+ "~" + (this.BlockIDs == ""|| this.GroupIDs==undefined?"":this.BlockIDs)
                    + "~" + (this.DesignationIDs == ""|| this.DesignationIDs==undefined?"":this.DesignationIDs)
                    + "~" + ($scope.IsDeclaration == undefined ?false:true) + "~" + $scope.EAS.dtDeclaration + "~" + (this.IsDateBetween == undefined?false:true) 

            };
            debugger;
            $http.post(_sBaseAddress + '/EarnLeave/SearchELComp', JSON.stringify(obj)).then(
                  function (response) {
                      var result = jQuery.parseJSON(response.data);
                      if (result.length > 0 && result[0].ELEncashCompID>0) {
                          $scope.ELEncashCompliancegridOptions.data=result;
                          $scope.ELEncashCompliancegridApi.grid.modifyRows($scope.ELEncashCompliancegridOptions.data);
                      }
                      else {
                          msModal.Message({ headerTitle: '', bodyText: 'No Data Found', sucessText: ' Yes', cancelText: ' Close', feedbackType: false, autoClose: false });

                          $scope.ELEncashCompliancegridOptions.data=[];
                      }
                  },
                  function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage); }
            );
        };



        $scope.ReportPDF = function () {

            var nPrintType=$("#cboXLPrint").val();
            if(nPrintType == 0)
            {
                msModal.Message({headerTitle : '', bodyText:'Select Any Format', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }

            debugger;
            var oEAS = $scope.ELEncashCompliancegridApi.selection.getSelectedRows();
            var _sEmployeeIDs = "";
            for (var i = 0; i < oEAS.length; i++)
            {
                _sEmployeeIDs += oEAS[i].EmployeeID + ",";
            }
            _sEmployeeIDs = _sEmployeeIDs.substring(0, _sEmployeeIDs.length - 1);
            debugger;

            
            var sFormat = "";
            if(nPrintType == 1) {
                sFormat = "withoutbasic";
            }
            if(nPrintType == 2) { 
                sFormat = "withbasic";
            }

            
            var nBusinessUnitID = this.BusinessUnitID;
            if(nBusinessUnitID == undefined || nBusinessUnitID <=0){nBusinessUnitID=0;}
            var tsv = ((new Date()).getTime()) / 1000;
            var sParam= $scope.EAS.dtStart +'~'+ $scope.EAS.dtEnd + "~" + (this.BusinessUnitID == 0 || this.BusinessUnitID == undefined?0:this.BusinessUnitID) + "~" + (this.LocationIDs == "" ? "": this.LocationIDs) + "~" + (this.DepartmentIDs == ""?"":this.DepartmentIDs) + "~" + (this.StartSalary == ""|| this.StartSalary==undefined?0:this.StartSalary)+ "~" + (this.EndSalary == ""|| this.EndSalary==undefined?0:this.EndSalary) + "~" + (this.GroupIDs == ""|| this.GroupIDs==undefined?"":this.GroupIDs)+ "~" + (this.BlockIDs == ""|| this.GroupIDs==undefined?"":this.BlockIDs)
                    + "~" + (this.DesignationIDs == ""|| this.DesignationIDs==undefined?"":this.DesignationIDs)
                    + "~" + ($scope.IsDeclaration == undefined ?false:true) + "~" + $scope.EAS.dtDeclaration + "~" + (this.IsDateBetween == undefined?false:true) + "~" + sFormat;
            var tsv=((new Date()).getTime())/1000;
            var sAction="";
            
            window.open(_sBaseAddress+ "/EarnLeave/PrintEncashedELComp?sParam="+sParam+"&nts="+tsv, "_blank");

        };

        $scope.ReportXL = function () {

            var nPrintType=$("#cboXLPrint").val();
            if(nPrintType == 0)
            {
                msModal.Message({headerTitle : '', bodyText:'Select Any Format', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }

            debugger;
            var oEAS = $scope.ELEncashCompliancegridApi.selection.getSelectedRows();
            var _sEmployeeIDs = "";
            for (var i = 0; i < oEAS.length; i++)
            {
                _sEmployeeIDs += oEAS[i].EmployeeID + ",";
            }
            _sEmployeeIDs = _sEmployeeIDs.substring(0, _sEmployeeIDs.length - 1);

            
            var sFormat = "";
            if(nPrintType == 1) {
                sFormat = "withoutbasic";
            }
            if(nPrintType == 2) { 
                sFormat = "withbasic";
            }



            var nBusinessUnitID = this.BusinessUnitID;
            if(nBusinessUnitID == undefined || nBusinessUnitID <=0){nBusinessUnitID=0;}
            var tsv = ((new Date()).getTime()) / 1000;
            var sParam= $scope.EAS.dtStart +'~'+ $scope.EAS.dtEnd + "~" + (this.BusinessUnitID == 0?0:this.BusinessUnitID) + "~" + (this.LocationIDs == "" ? "": this.LocationIDs) + "~" + (this.DepartmentIDs == ""?"":this.DepartmentIDs) + "~" + (this.StartSalary == ""|| this.StartSalary==undefined?0:this.StartSalary)+ "~" + (this.EndSalary == ""|| this.EndSalary==undefined?0:this.EndSalary) + "~" + (this.GroupIDs == ""|| this.GroupIDs==undefined?"":this.GroupIDs)+ "~" + (this.BlockIDs == ""|| this.GroupIDs==undefined?"":this.BlockIDs)
                    + "~" + (this.DesignationIDs == ""|| this.DesignationIDs==undefined?"":this.DesignationIDs)
                    + "~" + ($scope.IsDeclaration == undefined ?false:true) + "~" + $scope.EAS.dtDeclaration + "~" + (this.IsDateBetween == undefined?false:true) + "~" + sFormat;
            var tsv=((new Date()).getTime())/1000;
            var sAction="";
            var sAction = "Print_ReportCompXL";
            if(nPrintType==3) {
                sAction = "Summary_ReportCompXL";
            }
            window.open(_sBaseAddress+ "/EarnLeave/"+sAction+"?sParam="+sParam+"&nts="+tsv, "_blank");

        };
        
        $scope.ReportPDFProcessTab = function () {

            var nPrintType=$("#cboXLPrintProcessTab").val();
            if(nPrintType == 0)
            {
                msModal.Message({headerTitle : '', bodyText:'Select Any Format', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            var data=$scope.ELEncashComplianceProcessgridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Please Select an item.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }


            debugger;

            var sParam= data[0].EASPID;
            var tsv=((new Date()).getTime())/1000;
            var sAction="";
            
            if(nPrintType==1){sAction="PDFAdvanceSalaryPaymentF1ProcessTab";}
            if(nPrintType==2){sAction="PDFAdvanceSalaryPaymentProcessTab";}
            window.open(_sBaseAddress+ "/ELEncashCompliance/"+sAction+"?sParam="+sParam+"&nts="+tsv, "_blank");

        };

        $scope.ReportXLProcessTab = function () {

            
            var nPrintType=$("#cboXLPrintProcessTab").val();
            if(nPrintType == 0)
            {
                msModal.Message({headerTitle : '', bodyText:'Select Any Format', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            var data=$scope.ELEncashComplianceProcessgridApi.selection.getSelectedRows();
            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'Please Select an item.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            
            var sParam= data[0].EASPID;
            var tsv=((new Date()).getTime())/1000;
            var sAction="";
            if(nPrintType==1){sAction="ExcelAdvanceSalaryPaymentProcessTab";}
            if(nPrintType==3){sAction="ExcelAdvanceSalarySummeryProcessTab";}
            window.open(_sBaseAddress+ "/ELEncashCompliance/"+sAction+"?sParam="+sParam+"&nts="+tsv, "_blank");

        };

        $scope.deleteProcess = function () {
            debugger;
            var data=$scope.ELEncashComplianceProcessgridApi.selection.getSelectedRows();

            if(data==null || data.length<=0){
                msModal.Message({headerTitle : '', bodyText:'No item found to delete.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }

            else if(data[0].ApproveBy!=0){
                msModal.Message({headerTitle : '', bodyText:'Already approved.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            msModal.Message({headerTitle : '', bodyText:'Are you sure to Delete?.', sucessText : ' Ok', cancelText : ' Cancel', feedbackType:true, autoClose : false}).result.then(function(result){
                if(result){
                    debugger;
                    $http.post(_sBaseAddress+'/EarnLeave/DeleteProcess',JSON.stringify(data[0])).then(
                                function (response) {
                                    debugger;
                                    var obj = jQuery.parseJSON(response.data);
                                    if(obj.ErrorMessage=='Deleted Successfully.'){
                                        debugger
                                        angular.forEach($scope.ELEncashComplianceProcessgridOptions.data,function(value,index){
                                            if(value.ELEncashCompID==data[0].ELEncashCompID){
                                                debugger
                                                $scope.ELEncashComplianceProcessgridOptions.data.splice(index,1);
                                            }
                                        },$scope.ELEncashComplianceProcessgridOptions.data);
                                        msModal.Message({headerTitle : '', bodyText:'Deleted Successfully.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                    }
                                    else{
                                        msModal.Message({headerTitle : '', bodyText:result.ErrorMessage, sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                                    }
                                },
                                function (response) {alert(jQuery.parseJSON(response.data));}
                            );
                }
            });
        };

        $scope.approveProcess = function ()
        {
            var data=$scope.ELEncashComplianceProcessgridApi.selection.getSelectedRows();
            if(data==null || data.length<=0)
            {
                msModal.Message({headerTitle : '', bodyText:'Select an item from list.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            else if(data[0].ApproveBy!=0)
            {
                msModal.Message({headerTitle : '', bodyText:'Already approved.', sucessText : ' Yes', cancelText : ' Close', feedbackType:false, autoClose : false});
                return false;
            }
            msModal.Message({headerTitle : '', bodyText:'Are you sure to approve?.', sucessText : ' Ok', cancelText : ' Cancel', feedbackType:true, autoClose : false}).result.then(function(result){
                if(result){
                    angular.forEach($scope.ELEncashComplianceProcessgridOptions.data,function(value,index)
                    {
                        if(value.ELEncashCompID==data[0].ELEncashCompID)
                        {
                            $http.post(_sBaseAddress+'/EarnLeave/ApproveProcess', JSON.stringify(data[0])).then(
                                 function (response)
                                 {
                                     var result=jQuery.parseJSON(response.data);
                                     if(result.ELEncashCompID>0)
                                     {
                                         alert("Approved Successfully.");
                                         debugger;
                                         $scope.ELEncashComplianceProcessgridOptions.data[index]=result;
                                         $scope.ELEncashComplianceProcessgridApi.grid.modifyRows($scope.ELEncashComplianceProcessgridOptions.data);
                                         $scope.ELEncashComplianceProcessgridApi.selection.selectRow(result);
                                     }
                                     else
                                     {
                                         alert(result.ErrorMessage);
                                     }
                                 },
                                 function (response) { alert(jQuery.parseJSON(response.data).ErrorMessage);}
                           );
                        }
                    },$scope.ELEncashComplianceProcessgridOptions.data);

                }

            });

        };




        //TAb selection
        this.tab = 1;
        this.SetTab = function (tabId)
        {
            this.tab = tabId;
        }
        this.IsSet = function (tabid)
        {
            return this.tab === tabid;
        }

        //$scope.IsSet(2);

    });


    </script>




